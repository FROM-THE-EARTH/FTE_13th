
GPS_Check.ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008418  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  080085a8  080085a8  000185a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a84  08008a84  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008a84  08008a84  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a84  08008a84  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a88  08008a88  00018a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          0000049c  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000674  20000674  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c2a4  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c19  00000000  00000000  0002c4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a38  00000000  00000000  0002e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007e9  00000000  00000000  0002eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b8d7  00000000  00000000  0002f329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000dd46  00000000  00000000  0004ac00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009dee1  00000000  00000000  00058946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003e4c  00000000  00000000  000f6828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000fa674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008590 	.word	0x08008590

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008590 	.word	0x08008590

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2lz>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	460d      	mov	r5, r1
 8000ca6:	f7ff ff23 	bl	8000af0 <__aeabi_dcmplt>
 8000caa:	b928      	cbnz	r0, 8000cb8 <__aeabi_d2lz+0x1c>
 8000cac:	4620      	mov	r0, r4
 8000cae:	4629      	mov	r1, r5
 8000cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb4:	f000 b80a 	b.w	8000ccc <__aeabi_d2ulz>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cbe:	f000 f805 	bl	8000ccc <__aeabi_d2ulz>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	bd38      	pop	{r3, r4, r5, pc}
 8000cca:	bf00      	nop

08000ccc <__aeabi_d2ulz>:
 8000ccc:	b5d0      	push	{r4, r6, r7, lr}
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__aeabi_d2ulz+0x34>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	460f      	mov	r7, r1
 8000cd6:	f7ff fc99 	bl	800060c <__aeabi_dmul>
 8000cda:	f7ff ff6f 	bl	8000bbc <__aeabi_d2uiz>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	f7ff fc1a 	bl	8000518 <__aeabi_ui2d>
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <__aeabi_d2ulz+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f7ff fc90 	bl	800060c <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	4639      	mov	r1, r7
 8000cf4:	f7ff fad2 	bl	800029c <__aeabi_dsub>
 8000cf8:	f7ff ff60 	bl	8000bbc <__aeabi_d2uiz>
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000d00:	3df00000 	.word	0x3df00000
 8000d04:	41f00000 	.word	0x41f00000

08000d08 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d10:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d14:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d013      	beq.n	8000d48 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d24:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d28:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00b      	beq.n	8000d48 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	e000      	b.n	8000d34 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d32:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0f9      	beq.n	8000d32 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <HAL_UART_RxCpltCallback>:
double Minutes;

int processGPSdata(char *rawData);


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	flagRcved = TRUE; /* receive finish flag callback */
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <HAL_UART_RxCpltCallback+0x1c>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000358 	.word	0x20000358

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f000 fd07 	bl	8001790 <HAL_Init>

  /* USER CODE BEGIN Init */
  longtitude = -1.0;
 8000d82:	4933      	ldr	r1, [pc, #204]	; (8000e50 <main+0xd8>)
 8000d84:	f04f 0200 	mov.w	r2, #0
 8000d88:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <main+0xdc>)
 8000d8a:	e9c1 2300 	strd	r2, r3, [r1]
  	latitude = -1.0;
 8000d8e:	4932      	ldr	r1, [pc, #200]	; (8000e58 <main+0xe0>)
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <main+0xdc>)
 8000d96:	e9c1 2300 	strd	r2, r3, [r1]
  	gpsAltitude = -1.0;
 8000d9a:	4930      	ldr	r1, [pc, #192]	; (8000e5c <main+0xe4>)
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <main+0xdc>)
 8000da2:	e9c1 2300 	strd	r2, r3, [r1]
  	times = -1.0;
 8000da6:	492e      	ldr	r1, [pc, #184]	; (8000e60 <main+0xe8>)
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <main+0xdc>)
 8000dae:	e9c1 2300 	strd	r2, r3, [r1]
  	Minutes = -1.0;
 8000db2:	492c      	ldr	r1, [pc, #176]	; (8000e64 <main+0xec>)
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <main+0xdc>)
 8000dba:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f863 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 f95b 	bl	800107c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000dc6:	f000 f8f9 	bl	8000fbc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000dca:	f000 f927 	bl	800101c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000dce:	f000 f8b5 	bl	8000f3c <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("uho\n");
 8000dd2:	4825      	ldr	r0, [pc, #148]	; (8000e68 <main+0xf0>)
 8000dd4:	f004 febe 	bl	8005b54 <puts>
	  isPosUpdated = 0;
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <main+0xf4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]

	  		do {
	  			/* interrupt start */
	  			HAL_UART_Receive_IT(&huart2, rcvBuffer, 1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	4923      	ldr	r1, [pc, #140]	; (8000e70 <main+0xf8>)
 8000de2:	4824      	ldr	r0, [pc, #144]	; (8000e74 <main+0xfc>)
 8000de4:	f002 fca0 	bl	8003728 <HAL_UART_Receive_IT>

	  			/* wait for interrupt */
	  			while (flagRcved == FALSE) {
 8000de8:	bf00      	nop
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <main+0x100>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0fb      	beq.n	8000dea <main+0x72>
	  				;
	  			}

	  			sndBuffer[rcvLength] = rcvBuffer[0];
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <main+0x104>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <main+0xf8>)
 8000dfa:	7819      	ldrb	r1, [r3, #0]
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <main+0x108>)
 8000dfe:	5499      	strb	r1, [r3, r2]
	  			rcvLength++;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <main+0x104>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <main+0x104>)
 8000e0a:	801a      	strh	r2, [r3, #0]
	  			flagRcved = FALSE;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <main+0x100>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	  		} while ((rcvBuffer[0] != CHAR_CR) && (rcvLength < BUFF_SIZE));
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <main+0xf8>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b0d      	cmp	r3, #13
 8000e18:	d003      	beq.n	8000e22 <main+0xaa>
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <main+0x104>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	2bc7      	cmp	r3, #199	; 0xc7
 8000e20:	d9dd      	bls.n	8000dde <main+0x66>

	  		rcvLength = 0;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <main+0x104>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	801a      	strh	r2, [r3, #0]

	  		//__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
	  		isPosUpdated = processGPSdata(sndBuffer);
 8000e28:	4815      	ldr	r0, [pc, #84]	; (8000e80 <main+0x108>)
 8000e2a:	f000 f969 	bl	8001100 <processGPSdata>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <main+0xf4>)
 8000e32:	6013      	str	r3, [r2, #0]

	  		printf("%.8lf, %.8lf\n",latitude ,longtitude);
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <main+0xe0>)
 8000e36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <main+0xd8>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	e9cd 2300 	strd	r2, r3, [sp]
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	480e      	ldr	r0, [pc, #56]	; (8000e84 <main+0x10c>)
 8000e4a:	f004 fe1d 	bl	8005a88 <iprintf>
	  printf("uho\n");
 8000e4e:	e7c0      	b.n	8000dd2 <main+0x5a>
 8000e50:	200004f0 	.word	0x200004f0
 8000e54:	bff00000 	.word	0xbff00000
 8000e58:	200004f8 	.word	0x200004f8
 8000e5c:	20000508 	.word	0x20000508
 8000e60:	20000510 	.word	0x20000510
 8000e64:	20000518 	.word	0x20000518
 8000e68:	080085a8 	.word	0x080085a8
 8000e6c:	200004ec 	.word	0x200004ec
 8000e70:	2000035c 	.word	0x2000035c
 8000e74:	200002d0 	.word	0x200002d0
 8000e78:	20000358 	.word	0x20000358
 8000e7c:	2000035a 	.word	0x2000035a
 8000e80:	20000424 	.word	0x20000424
 8000e84:	080085ac 	.word	0x080085ac

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b096      	sub	sp, #88	; 0x58
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e92:	2228      	movs	r2, #40	; 0x28
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 fed2 	bl	8005c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000ed0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ed4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 f83c 	bl	8001f58 <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ee6:	f000 fa43 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	230f      	movs	r3, #15
 8000eec:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 f865 	bl	8002fd4 <HAL_RCC_ClockConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f10:	f000 fa2e 	bl	8001370 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000f14:	2321      	movs	r3, #33	; 0x21
 8000f16:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 fa8c 	bl	8003440 <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f2e:	f000 fa1f 	bl	8001370 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3758      	adds	r7, #88	; 0x58
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <MX_I2C1_Init+0x78>)
 8000f44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <MX_I2C1_Init+0x7c>)
 8000f4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f78:	f000 fec8 	bl	8001d0c <HAL_I2C_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f82:	f000 f9f5 	bl	8001370 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f8a:	f000 ff4e 	bl	8001e2a <HAL_I2CEx_ConfigAnalogFilter>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f94:	f000 f9ec 	bl	8001370 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f9c:	f000 ff90 	bl	8001ec0 <HAL_I2CEx_ConfigDigitalFilter>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fa6:	f000 f9e3 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001f4 	.word	0x200001f4
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	2000090e 	.word	0x2000090e

08000fbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_USART1_UART_Init+0x58>)
 8000fc2:	4a15      	ldr	r2, [pc, #84]	; (8001018 <MX_USART1_UART_Init+0x5c>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_USART1_UART_Init+0x58>)
 8000fc8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000fcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_USART1_UART_Init+0x58>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_USART1_UART_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_USART1_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_USART1_UART_Init+0x58>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_USART1_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_USART1_UART_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_USART1_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_USART1_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_USART1_UART_Init+0x58>)
 8001000:	f002 fb44 	bl	800368c <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800100a:	f000 f9b1 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000248 	.word	0x20000248
 8001018:	40013800 	.word	0x40013800

0800101c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001022:	4a15      	ldr	r2, [pc, #84]	; (8001078 <MX_USART2_UART_Init+0x5c>)
 8001024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001028:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800102c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_USART2_UART_Init+0x58>)
 8001060:	f002 fb14 	bl	800368c <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800106a:	f000 f981 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200002d0 	.word	0x200002d0
 8001078:	40004400 	.word	0x40004400

0800107c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_GPIO_Init+0x44>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <MX_GPIO_Init+0x44>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_GPIO_Init+0x44>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_GPIO_Init+0x44>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <MX_GPIO_Init+0x44>)
 80010a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_GPIO_Init+0x44>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000

080010c4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e009      	b.n	80010ea <_write+0x26>
		ITM_SendChar(*ptr++);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fe12 	bl	8000d08 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dbf1      	blt.n	80010d6 <_write+0x12>
	}
	return len;
 80010f2:	687b      	ldr	r3, [r7, #4]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0000      	movs	r0, r0
	...

08001100 <processGPSdata>:

float extractFloat(const char *str) {
	return atof(str);
}

int processGPSdata(char *rawData) {
 8001100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	if (rawData[1] == '$') { // Determine if the information received is from GPS
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3301      	adds	r3, #1
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b24      	cmp	r3, #36	; 0x24
 8001112:	f040 810b 	bne.w	800132c <processGPSdata+0x22c>
		const char delimeter[] = ",";
 8001116:	232c      	movs	r3, #44	; 0x2c
 8001118:	81bb      	strh	r3, [r7, #12]
		char *token = strtok(rawData, delimeter);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4619      	mov	r1, r3
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f004 fd31 	bl	8005b88 <strtok>
 8001126:	6178      	str	r0, [r7, #20]
		char *dataIdentifier = "\n$GPGGA";
 8001128:	4b85      	ldr	r3, [pc, #532]	; (8001340 <processGPSdata+0x240>)
 800112a:	613b      	str	r3, [r7, #16]

		uint8_t processOrder = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

		while (token != NULL) { // Process data until all tokens are processed
 8001130:	bf00      	nop
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80f9 	beq.w	800132c <processGPSdata+0x22c>

			if (processOrder == 0) { // Check the prefix
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d108      	bne.n	8001152 <processGPSdata+0x52>
				if (strcmp(token, dataIdentifier) != 0) { // If the prefix is not 'GPGGA'
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff f89c 	bl	8000280 <strcmp>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <processGPSdata+0x52>
					return 0;
 800114e:	2300      	movs	r3, #0
 8001150:	e0ed      	b.n	800132e <processGPSdata+0x22e>
				}
			}

			processOrder++;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	3301      	adds	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
			token = strtok(NULL, delimeter); // Split data by comma
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	2000      	movs	r0, #0
 8001160:	f004 fd12 	bl	8005b88 <strtok>
 8001164:	6178      	str	r0, [r7, #20]

			switch (processOrder) {
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	3b01      	subs	r3, #1
 800116a:	2b09      	cmp	r3, #9
 800116c:	f200 80dc 	bhi.w	8001328 <processGPSdata+0x228>
 8001170:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <processGPSdata+0x78>)
 8001172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001176:	bf00      	nop
 8001178:	080011a1 	.word	0x080011a1
 800117c:	080011c3 	.word	0x080011c3
 8001180:	0800123d 	.word	0x0800123d
 8001184:	0800125f 	.word	0x0800125f
 8001188:	080012d9 	.word	0x080012d9
 800118c:	08001329 	.word	0x08001329
 8001190:	08001329 	.word	0x08001329
 8001194:	08001329 	.word	0x08001329
 8001198:	080012fb 	.word	0x080012fb
 800119c:	08001319 	.word	0x08001319
			case 1:
				time = strtod(token, NULL) + 9000.0;
 80011a0:	2100      	movs	r1, #0
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f004 fbe0 	bl	8005968 <strtod>
 80011a8:	ec51 0b10 	vmov	r0, r1, d0
 80011ac:	a362      	add	r3, pc, #392	; (adr r3, 8001338 <processGPSdata+0x238>)
 80011ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b2:	f7ff f875 	bl	80002a0 <__adddf3>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4962      	ldr	r1, [pc, #392]	; (8001344 <processGPSdata+0x244>)
 80011bc:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 80011c0:	e0b2      	b.n	8001328 <processGPSdata+0x228>
			case 2:
				Minutes = modf(strtod(token, NULL) / 100.0, &latitude);
 80011c2:	2100      	movs	r1, #0
 80011c4:	6978      	ldr	r0, [r7, #20]
 80011c6:	f004 fbcf 	bl	8005968 <strtod>
 80011ca:	ec51 0b10 	vmov	r0, r1, d0
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <processGPSdata+0x248>)
 80011d4:	f7ff fb44 	bl	8000860 <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	ec43 2b17 	vmov	d7, r2, r3
 80011e0:	485a      	ldr	r0, [pc, #360]	; (800134c <processGPSdata+0x24c>)
 80011e2:	eeb0 0a47 	vmov.f32	s0, s14
 80011e6:	eef0 0a67 	vmov.f32	s1, s15
 80011ea:	f004 fd7f 	bl	8005cec <modf>
 80011ee:	eeb0 7a40 	vmov.f32	s14, s0
 80011f2:	eef0 7a60 	vmov.f32	s15, s1
 80011f6:	4b56      	ldr	r3, [pc, #344]	; (8001350 <processGPSdata+0x250>)
 80011f8:	ed83 7b00 	vstr	d7, [r3]
				latitude = latitude + Minutes * 10.0 / 6.0;
 80011fc:	4b54      	ldr	r3, [pc, #336]	; (8001350 <processGPSdata+0x250>)
 80011fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b53      	ldr	r3, [pc, #332]	; (8001354 <processGPSdata+0x254>)
 8001208:	f7ff fa00 	bl	800060c <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b4f      	ldr	r3, [pc, #316]	; (8001358 <processGPSdata+0x258>)
 800121a:	f7ff fb21 	bl	8000860 <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	4b49      	ldr	r3, [pc, #292]	; (800134c <processGPSdata+0x24c>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f838 	bl	80002a0 <__adddf3>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4945      	ldr	r1, [pc, #276]	; (800134c <processGPSdata+0x24c>)
 8001236:	e9c1 2300 	strd	r2, r3, [r1]
				//printf("lat = %f\n", latitude);
				break;
 800123a:	e075      	b.n	8001328 <processGPSdata+0x228>
			case 3:
				if (strcmp(token, "S") == 0) {
 800123c:	4947      	ldr	r1, [pc, #284]	; (800135c <processGPSdata+0x25c>)
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff f81e 	bl	8000280 <strcmp>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d16b      	bne.n	8001322 <processGPSdata+0x222>
					latitude = latitude * -1.0;
 800124a:	4b40      	ldr	r3, [pc, #256]	; (800134c <processGPSdata+0x24c>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	4690      	mov	r8, r2
 8001252:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <processGPSdata+0x24c>)
 8001258:	e9c3 8900 	strd	r8, r9, [r3]
				}
				break;
 800125c:	e061      	b.n	8001322 <processGPSdata+0x222>
			case 4:
				Minutes = modf(strtod(token, NULL) / 100.0, &longtitude);
 800125e:	2100      	movs	r1, #0
 8001260:	6978      	ldr	r0, [r7, #20]
 8001262:	f004 fb81 	bl	8005968 <strtod>
 8001266:	ec51 0b10 	vmov	r0, r1, d0
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <processGPSdata+0x248>)
 8001270:	f7ff faf6 	bl	8000860 <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	ec43 2b17 	vmov	d7, r2, r3
 800127c:	4838      	ldr	r0, [pc, #224]	; (8001360 <processGPSdata+0x260>)
 800127e:	eeb0 0a47 	vmov.f32	s0, s14
 8001282:	eef0 0a67 	vmov.f32	s1, s15
 8001286:	f004 fd31 	bl	8005cec <modf>
 800128a:	eeb0 7a40 	vmov.f32	s14, s0
 800128e:	eef0 7a60 	vmov.f32	s15, s1
 8001292:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <processGPSdata+0x250>)
 8001294:	ed83 7b00 	vstr	d7, [r3]
				longtitude = longtitude + Minutes * 10.0 / 6.0;
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <processGPSdata+0x250>)
 800129a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <processGPSdata+0x254>)
 80012a4:	f7ff f9b2 	bl	800060c <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <processGPSdata+0x258>)
 80012b6:	f7ff fad3 	bl	8000860 <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <processGPSdata+0x260>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7fe ffea 	bl	80002a0 <__adddf3>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4923      	ldr	r1, [pc, #140]	; (8001360 <processGPSdata+0x260>)
 80012d2:	e9c1 2300 	strd	r2, r3, [r1]
				//printf("log = %f\n", longtitude);
				break;
 80012d6:	e027      	b.n	8001328 <processGPSdata+0x228>
			case 5:
				if (strcmp(token, "W") == 0) {
 80012d8:	4922      	ldr	r1, [pc, #136]	; (8001364 <processGPSdata+0x264>)
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7fe ffd0 	bl	8000280 <strcmp>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d11f      	bne.n	8001326 <processGPSdata+0x226>
					longtitude = longtitude * -1.0;
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <processGPSdata+0x260>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	4614      	mov	r4, r2
 80012ee:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <processGPSdata+0x260>)
 80012f4:	e9c3 4500 	strd	r4, r5, [r3]
				}
				break;
 80012f8:	e015      	b.n	8001326 <processGPSdata+0x226>
			case 9:
				gpsAltitude = strtof(token, NULL);
 80012fa:	2100      	movs	r1, #0
 80012fc:	6978      	ldr	r0, [r7, #20]
 80012fe:	f004 fb3f 	bl	8005980 <strtof>
 8001302:	ee10 3a10 	vmov	r3, s0
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f928 	bl	800055c <__aeabi_f2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4915      	ldr	r1, [pc, #84]	; (8001368 <processGPSdata+0x268>)
 8001312:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001316:	e007      	b.n	8001328 <processGPSdata+0x228>
			case 10:
				if (strcmp(token, "M") != 0) {
 8001318:	4914      	ldr	r1, [pc, #80]	; (800136c <processGPSdata+0x26c>)
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7fe ffb0 	bl	8000280 <strcmp>
					//altitude = altitude * -1.0;
				}
				break;
 8001320:	e002      	b.n	8001328 <processGPSdata+0x228>
				break;
 8001322:	bf00      	nop
 8001324:	e000      	b.n	8001328 <processGPSdata+0x228>
				break;
 8001326:	bf00      	nop
			}

			return 1;
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <processGPSdata+0x22e>
		}
	}

	return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001338:	00000000 	.word	0x00000000
 800133c:	40c19400 	.word	0x40c19400
 8001340:	080085bc 	.word	0x080085bc
 8001344:	20000500 	.word	0x20000500
 8001348:	40590000 	.word	0x40590000
 800134c:	200004f8 	.word	0x200004f8
 8001350:	20000518 	.word	0x20000518
 8001354:	40240000 	.word	0x40240000
 8001358:	40180000 	.word	0x40180000
 800135c:	080085c4 	.word	0x080085c4
 8001360:	200004f0 	.word	0x200004f0
 8001364:	080085c8 	.word	0x080085c8
 8001368:	20000508 	.word	0x20000508
 800136c:	080085cc 	.word	0x080085cc

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x44>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_MspInit+0x44>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x44>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x44>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a26      	ldr	r2, [pc, #152]	; (800147c <HAL_I2C_MspInit+0xb8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d145      	bne.n	8001472 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <HAL_I2C_MspInit+0xbc>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a25      	ldr	r2, [pc, #148]	; (8001480 <HAL_I2C_MspInit+0xbc>)
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	6153      	str	r3, [r2, #20]
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_I2C_MspInit+0xbc>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_I2C_MspInit+0xbc>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <HAL_I2C_MspInit+0xbc>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6153      	str	r3, [r2, #20]
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_I2C_MspInit+0xbc>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001420:	2301      	movs	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001428:	2304      	movs	r3, #4
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f000 faf7 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143e:	2312      	movs	r3, #18
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001442:	2301      	movs	r3, #1
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800144a:	2304      	movs	r3, #4
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	480b      	ldr	r0, [pc, #44]	; (8001484 <HAL_I2C_MspInit+0xc0>)
 8001456:	f000 fae7 	bl	8001a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_I2C_MspInit+0xbc>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_I2C_MspInit+0xbc>)
 8001460:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_I2C_MspInit+0xbc>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40005400 	.word	0x40005400
 8001480:	40021000 	.word	0x40021000
 8001484:	48000400 	.word	0x48000400

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	; 0x30
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <HAL_UART_MspInit+0xdc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d12a      	bne.n	8001500 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_UART_MspInit+0xe0>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	4a2e      	ldr	r2, [pc, #184]	; (8001568 <HAL_UART_MspInit+0xe0>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b4:	6193      	str	r3, [r2, #24]
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <HAL_UART_MspInit+0xe0>)
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_UART_MspInit+0xe0>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	4a28      	ldr	r2, [pc, #160]	; (8001568 <HAL_UART_MspInit+0xe0>)
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	6153      	str	r3, [r2, #20]
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_UART_MspInit+0xe0>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014ec:	2307      	movs	r3, #7
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fa:	f000 fa95 	bl	8001a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014fe:	e02d      	b.n	800155c <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a19      	ldr	r2, [pc, #100]	; (800156c <HAL_UART_MspInit+0xe4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d128      	bne.n	800155c <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_UART_MspInit+0xe0>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a16      	ldr	r2, [pc, #88]	; (8001568 <HAL_UART_MspInit+0xe0>)
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_UART_MspInit+0xe0>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_UART_MspInit+0xe0>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_UART_MspInit+0xe0>)
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	6153      	str	r3, [r2, #20]
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_UART_MspInit+0xe0>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800153a:	230c      	movs	r3, #12
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800154a:	2307      	movs	r3, #7
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f000 fa66 	bl	8001a28 <HAL_GPIO_Init>
}
 800155c:	bf00      	nop
 800155e:	3730      	adds	r7, #48	; 0x30
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40013800 	.word	0x40013800
 8001568:	40021000 	.word	0x40021000
 800156c:	40004400 	.word	0x40004400

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015bc:	f000 f92e 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return 1;
 80015c8:	2301      	movs	r3, #1
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_kill>:

int _kill(int pid, int sig)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015de:	f004 fb3b 	bl	8005c58 <__errno>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2216      	movs	r2, #22
 80015e6:	601a      	str	r2, [r3, #0]
  return -1;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_exit>:

void _exit (int status)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ffe7 	bl	80015d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001606:	e7fe      	b.n	8001606 <_exit+0x12>

08001608 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e00a      	b.n	8001630 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800161a:	f3af 8000 	nop.w
 800161e:	4601      	mov	r1, r0
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	60ba      	str	r2, [r7, #8]
 8001626:	b2ca      	uxtb	r2, r1
 8001628:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3301      	adds	r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	dbf0      	blt.n	800161a <_read+0x12>
  }

  return len;
 8001638:	687b      	ldr	r3, [r7, #4]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800166a:	605a      	str	r2, [r3, #4]
  return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_isatty>:

int _isatty(int file)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001682:	2301      	movs	r3, #1
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <_sbrk+0x5c>)
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <_sbrk+0x60>)
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <_sbrk+0x64>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <_sbrk+0x68>)
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d207      	bcs.n	80016ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016dc:	f004 fabc 	bl	8005c58 <__errno>
 80016e0:	4603      	mov	r3, r0
 80016e2:	220c      	movs	r2, #12
 80016e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ea:	e009      	b.n	8001700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_sbrk+0x64>)
 80016fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20003000 	.word	0x20003000
 800170c:	00000400 	.word	0x00000400
 8001710:	20000520 	.word	0x20000520
 8001714:	20000678 	.word	0x20000678

08001718 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <SystemInit+0x20>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <SystemInit+0x20>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800173c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001774 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001740:	f7ff ffea 	bl	8001718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <LoopForever+0x6>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <LoopForever+0xe>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	; (8001788 <LoopForever+0x16>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176a:	f004 fa7b 	bl	8005c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800176e:	f7ff fb03 	bl	8000d78 <main>

08001772 <LoopForever>:

LoopForever:
    b LoopForever
 8001772:	e7fe      	b.n	8001772 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001774:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001780:	08008a8c 	.word	0x08008a8c
  ldr r2, =_sbss
 8001784:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001788:	20000674 	.word	0x20000674

0800178c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC1_2_IRQHandler>
	...

08001790 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x28>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x28>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 f90d 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f000 f808 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff fde6 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40022000 	.word	0x40022000

080017bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x58>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f917 	bl	8001a0e <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f8:	f000 f8ed 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x5c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000000 	.word	0x20000000
 8001814:	20000008 	.word	0x20000008
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x24>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_IncTick+0x24>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000008 	.word	0x20000008
 8001840:	20000524 	.word	0x20000524

08001844 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;  
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_GetTick+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000524 	.word	0x20000524

0800185c <__NVIC_SetPriorityGrouping>:
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_SetPriority>:
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff47 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff5c 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff8e 	bl	8001914 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5d 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffb0 	bl	800197c <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a36:	e14e      	b.n	8001cd6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8140 	beq.w	8001cd0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d005      	beq.n	8001a68 <HAL_GPIO_Init+0x40>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 0201 	and.w	r2, r3, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d017      	beq.n	8001b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d123      	bne.n	8001b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	6939      	ldr	r1, [r7, #16]
 8001b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0203 	and.w	r2, r3, #3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 809a 	beq.w	8001cd0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9c:	4b55      	ldr	r3, [pc, #340]	; (8001cf4 <HAL_GPIO_Init+0x2cc>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	4a54      	ldr	r2, [pc, #336]	; (8001cf4 <HAL_GPIO_Init+0x2cc>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6193      	str	r3, [r2, #24]
 8001ba8:	4b52      	ldr	r3, [pc, #328]	; (8001cf4 <HAL_GPIO_Init+0x2cc>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb4:	4a50      	ldr	r2, [pc, #320]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bde:	d013      	beq.n	8001c08 <HAL_GPIO_Init+0x1e0>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a46      	ldr	r2, [pc, #280]	; (8001cfc <HAL_GPIO_Init+0x2d4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d00d      	beq.n	8001c04 <HAL_GPIO_Init+0x1dc>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <HAL_GPIO_Init+0x2d8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d007      	beq.n	8001c00 <HAL_GPIO_Init+0x1d8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a44      	ldr	r2, [pc, #272]	; (8001d04 <HAL_GPIO_Init+0x2dc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d101      	bne.n	8001bfc <HAL_GPIO_Init+0x1d4>
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e006      	b.n	8001c0a <HAL_GPIO_Init+0x1e2>
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	e004      	b.n	8001c0a <HAL_GPIO_Init+0x1e2>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e002      	b.n	8001c0a <HAL_GPIO_Init+0x1e2>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_GPIO_Init+0x1e2>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	f002 0203 	and.w	r2, r2, #3
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	4093      	lsls	r3, r2
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c1a:	4937      	ldr	r1, [pc, #220]	; (8001cf8 <HAL_GPIO_Init+0x2d0>)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c28:	4b37      	ldr	r3, [pc, #220]	; (8001d08 <HAL_GPIO_Init+0x2e0>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c4c:	4a2e      	ldr	r2, [pc, #184]	; (8001d08 <HAL_GPIO_Init+0x2e0>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_GPIO_Init+0x2e0>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c76:	4a24      	ldr	r2, [pc, #144]	; (8001d08 <HAL_GPIO_Init+0x2e0>)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <HAL_GPIO_Init+0x2e0>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ca0:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <HAL_GPIO_Init+0x2e0>)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_GPIO_Init+0x2e0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cca:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <HAL_GPIO_Init+0x2e0>)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f47f aea9 	bne.w	8001a38 <HAL_GPIO_Init+0x10>
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	48000400 	.word	0x48000400
 8001d00:	48000800 	.word	0x48000800
 8001d04:	48000c00 	.word	0x48000c00
 8001d08:	40010400 	.word	0x40010400

08001d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e081      	b.n	8001e22 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fb46 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2224      	movs	r2, #36	; 0x24
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d107      	bne.n	8001d86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e006      	b.n	8001d94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d104      	bne.n	8001da6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001da4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001db8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69d9      	ldr	r1, [r3, #28]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1a      	ldr	r2, [r3, #32]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d138      	bne.n	8001eb2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e032      	b.n	8001eb4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2224      	movs	r2, #36	; 0x24
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0201 	bic.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001eb2:	2302      	movs	r3, #2
  }
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d139      	bne.n	8001f4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e033      	b.n	8001f4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2224      	movs	r2, #36	; 0x24
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
  }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f68:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f001 b823 	b.w	8002fc4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 817d 	beq.w	800228e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f94:	4bbc      	ldr	r3, [pc, #752]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d00c      	beq.n	8001fba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa0:	4bb9      	ldr	r3, [pc, #740]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d15c      	bne.n	8002066 <HAL_RCC_OscConfig+0x10e>
 8001fac:	4bb6      	ldr	r3, [pc, #728]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb8:	d155      	bne.n	8002066 <HAL_RCC_OscConfig+0x10e>
 8001fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fbe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	095b      	lsrs	r3, r3, #5
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HAL_RCC_OscConfig+0x94>
 8001fe6:	4ba8      	ldr	r3, [pc, #672]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	e015      	b.n	8002018 <HAL_RCC_OscConfig+0xc0>
 8001fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002004:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002008:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002014:	4b9c      	ldr	r3, [pc, #624]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800201c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002020:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002024:	fa92 f2a2 	rbit	r2, r2
 8002028:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800202c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f042 0220 	orr.w	r2, r2, #32
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f002 021f 	and.w	r2, r2, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 811f 	beq.w	800228c <HAL_RCC_OscConfig+0x334>
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 8116 	bne.w	800228c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	f000 bfaf 	b.w	8002fc4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x12e>
 8002078:	4b83      	ldr	r3, [pc, #524]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a82      	ldr	r2, [pc, #520]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e036      	b.n	80020f4 <HAL_RCC_OscConfig+0x19c>
 8002086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x158>
 8002096:	4b7c      	ldr	r3, [pc, #496]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a7b      	ldr	r2, [pc, #492]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 800209c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b79      	ldr	r3, [pc, #484]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a78      	ldr	r2, [pc, #480]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 80020a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e021      	b.n	80020f4 <HAL_RCC_OscConfig+0x19c>
 80020b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x184>
 80020c2:	4b71      	ldr	r3, [pc, #452]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a70      	ldr	r2, [pc, #448]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b6e      	ldr	r3, [pc, #440]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6d      	ldr	r2, [pc, #436]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0x19c>
 80020dc:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a69      	ldr	r2, [pc, #420]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b67      	ldr	r3, [pc, #412]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a66      	ldr	r2, [pc, #408]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 80020ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020f4:	4b64      	ldr	r3, [pc, #400]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	f023 020f 	bic.w	r2, r3, #15
 80020fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002100:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	495f      	ldr	r1, [pc, #380]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 800210a:	4313      	orrs	r3, r2
 800210c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d059      	beq.n	80021d2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fb91 	bl	8001844 <HAL_GetTick>
 8002122:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002128:	f7ff fb8c 	bl	8001844 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b64      	cmp	r3, #100	; 0x64
 8002136:	d902      	bls.n	800213e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	f000 bf43 	b.w	8002fc4 <HAL_RCC_OscConfig+0x106c>
 800213e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002142:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002152:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d102      	bne.n	8002170 <HAL_RCC_OscConfig+0x218>
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	e015      	b.n	800219c <HAL_RCC_OscConfig+0x244>
 8002170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002174:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002188:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800218c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002198:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021a0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80021a4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80021a8:	fa92 f2a2 	rbit	r2, r2
 80021ac:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80021b0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80021b4:	fab2 f282 	clz	r2, r2
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f042 0220 	orr.w	r2, r2, #32
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f002 021f 	and.w	r2, r2, #31
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ab      	beq.n	8002128 <HAL_RCC_OscConfig+0x1d0>
 80021d0:	e05d      	b.n	800228e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7ff fb37 	bl	8001844 <HAL_GetTick>
 80021d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fb32 	bl	8001844 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b64      	cmp	r3, #100	; 0x64
 80021ea:	d902      	bls.n	80021f2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	f000 bee9 	b.w	8002fc4 <HAL_RCC_OscConfig+0x106c>
 80021f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002206:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d102      	bne.n	8002224 <HAL_RCC_OscConfig+0x2cc>
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	e015      	b.n	8002250 <HAL_RCC_OscConfig+0x2f8>
 8002224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002228:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800223c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002240:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_RCC_OscConfig+0x330>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002254:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002258:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800225c:	fa92 f2a2 	rbit	r2, r2
 8002260:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002264:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	f002 021f 	and.w	r2, r2, #31
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ab      	bne.n	80021dc <HAL_RCC_OscConfig+0x284>
 8002284:	e003      	b.n	800228e <HAL_RCC_OscConfig+0x336>
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 817d 	beq.w	800259e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022a4:	4ba6      	ldr	r3, [pc, #664]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00b      	beq.n	80022c8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022b0:	4ba3      	ldr	r3, [pc, #652]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 030c 	and.w	r3, r3, #12
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d172      	bne.n	80023a2 <HAL_RCC_OscConfig+0x44a>
 80022bc:	4ba0      	ldr	r3, [pc, #640]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d16c      	bne.n	80023a2 <HAL_RCC_OscConfig+0x44a>
 80022c8:	2302      	movs	r3, #2
 80022ca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80022da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d102      	bne.n	80022f8 <HAL_RCC_OscConfig+0x3a0>
 80022f2:	4b93      	ldr	r3, [pc, #588]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	e013      	b.n	8002320 <HAL_RCC_OscConfig+0x3c8>
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800230a:	2302      	movs	r3, #2
 800230c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002310:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800231c:	4b88      	ldr	r3, [pc, #544]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	2202      	movs	r2, #2
 8002322:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002326:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800232a:	fa92 f2a2 	rbit	r2, r2
 800232e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002332:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f042 0220 	orr.w	r2, r2, #32
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f002 021f 	and.w	r2, r2, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCC_OscConfig+0x410>
 8002352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002356:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d002      	beq.n	8002368 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	f000 be2e 	b.w	8002fc4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b75      	ldr	r3, [pc, #468]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	21f8      	movs	r1, #248	; 0xf8
 800237e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002386:	fa91 f1a1 	rbit	r1, r1
 800238a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800238e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002392:	fab1 f181 	clz	r1, r1
 8002396:	b2c9      	uxtb	r1, r1
 8002398:	408b      	lsls	r3, r1
 800239a:	4969      	ldr	r1, [pc, #420]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a0:	e0fd      	b.n	800259e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8088 	beq.w	80024c4 <HAL_RCC_OscConfig+0x56c>
 80023b4:	2301      	movs	r3, #1
 80023b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80023c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	461a      	mov	r2, r3
 80023dc:	2301      	movs	r3, #1
 80023de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fa30 	bl	8001844 <HAL_GetTick>
 80023e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ea:	f7ff fa2b 	bl	8001844 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d902      	bls.n	8002400 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	f000 bde2 	b.w	8002fc4 <HAL_RCC_OscConfig+0x106c>
 8002400:	2302      	movs	r3, #2
 8002402:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002412:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d102      	bne.n	8002430 <HAL_RCC_OscConfig+0x4d8>
 800242a:	4b45      	ldr	r3, [pc, #276]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	e013      	b.n	8002458 <HAL_RCC_OscConfig+0x500>
 8002430:	2302      	movs	r3, #2
 8002432:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002442:	2302      	movs	r3, #2
 8002444:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002448:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2202      	movs	r2, #2
 800245a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800245e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002462:	fa92 f2a2 	rbit	r2, r2
 8002466:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800246a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800246e:	fab2 f282 	clz	r2, r2
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f042 0220 	orr.w	r2, r2, #32
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f002 021f 	and.w	r2, r2, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f202 	lsl.w	r2, r1, r2
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0af      	beq.n	80023ea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	21f8      	movs	r1, #248	; 0xf8
 80024a0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024a8:	fa91 f1a1 	rbit	r1, r1
 80024ac:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80024b0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80024b4:	fab1 f181 	clz	r1, r1
 80024b8:	b2c9      	uxtb	r1, r1
 80024ba:	408b      	lsls	r3, r1
 80024bc:	4920      	ldr	r1, [pc, #128]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
 80024c2:	e06c      	b.n	800259e <HAL_RCC_OscConfig+0x646>
 80024c4:	2301      	movs	r3, #1
 80024c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80024d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	461a      	mov	r2, r3
 80024ec:	2300      	movs	r3, #0
 80024ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7ff f9a8 	bl	8001844 <HAL_GetTick>
 80024f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fa:	f7ff f9a3 	bl	8001844 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d902      	bls.n	8002510 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	f000 bd5a 	b.w	8002fc4 <HAL_RCC_OscConfig+0x106c>
 8002510:	2302      	movs	r3, #2
 8002512:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d104      	bne.n	8002544 <HAL_RCC_OscConfig+0x5ec>
 800253a:	4b01      	ldr	r3, [pc, #4]	; (8002540 <HAL_RCC_OscConfig+0x5e8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	e015      	b.n	800256c <HAL_RCC_OscConfig+0x614>
 8002540:	40021000 	.word	0x40021000
 8002544:	2302      	movs	r3, #2
 8002546:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002556:	2302      	movs	r3, #2
 8002558:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800255c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002568:	4bc8      	ldr	r3, [pc, #800]	; (800288c <HAL_RCC_OscConfig+0x934>)
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	2202      	movs	r2, #2
 800256e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002572:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002576:	fa92 f2a2 	rbit	r2, r2
 800257a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800257e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f042 0220 	orr.w	r2, r2, #32
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f002 021f 	and.w	r2, r2, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1ad      	bne.n	80024fa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8110 	beq.w	80027d4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d079      	beq.n	80026b8 <HAL_RCC_OscConfig+0x760>
 80025c4:	2301      	movs	r3, #1
 80025c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80025d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	4bab      	ldr	r3, [pc, #684]	; (8002890 <HAL_RCC_OscConfig+0x938>)
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	461a      	mov	r2, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7ff f929 	bl	8001844 <HAL_GetTick>
 80025f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff f924 	bl	8001844 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d902      	bls.n	800260e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	f000 bcdb 	b.w	8002fc4 <HAL_RCC_OscConfig+0x106c>
 800260e:	2302      	movs	r3, #2
 8002610:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002628:	2202      	movs	r2, #2
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002666:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002668:	4b88      	ldr	r3, [pc, #544]	; (800288c <HAL_RCC_OscConfig+0x934>)
 800266a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002670:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002674:	2102      	movs	r1, #2
 8002676:	6019      	str	r1, [r3, #0]
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fa93 f1a3 	rbit	r1, r3
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800268e:	6019      	str	r1, [r3, #0]
  return result;
 8002690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002694:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0a0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x6a0>
 80026b6:	e08d      	b.n	80027d4 <HAL_RCC_OscConfig+0x87c>
 80026b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	fa93 f2a3 	rbit	r2, r3
 80026d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026da:	601a      	str	r2, [r3, #0]
  return result;
 80026dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026e4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b68      	ldr	r3, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x938>)
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	461a      	mov	r2, r3
 80026f6:	2300      	movs	r3, #0
 80026f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7ff f8a3 	bl	8001844 <HAL_GetTick>
 80026fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002704:	f7ff f89e 	bl	8001844 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d902      	bls.n	800271a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	f000 bc55 	b.w	8002fc4 <HAL_RCC_OscConfig+0x106c>
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002722:	2202      	movs	r2, #2
 8002724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	fa93 f2a3 	rbit	r2, r3
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002746:	2202      	movs	r2, #2
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f2a3 	rbit	r2, r3
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800276a:	2202      	movs	r2, #2
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	fa93 f2a3 	rbit	r2, r3
 800277c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002780:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002784:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002786:	4b41      	ldr	r3, [pc, #260]	; (800288c <HAL_RCC_OscConfig+0x934>)
 8002788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002792:	2102      	movs	r1, #2
 8002794:	6019      	str	r1, [r3, #0]
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fa93 f1a3 	rbit	r1, r3
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027ac:	6019      	str	r1, [r3, #0]
  return result;
 80027ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2101      	movs	r1, #1
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d197      	bne.n	8002704 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 81a1 	beq.w	8002b2c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f0:	4b26      	ldr	r3, [pc, #152]	; (800288c <HAL_RCC_OscConfig+0x934>)
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d116      	bne.n	800282a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_RCC_OscConfig+0x934>)
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	4a22      	ldr	r2, [pc, #136]	; (800288c <HAL_RCC_OscConfig+0x934>)
 8002802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002806:	61d3      	str	r3, [r2, #28]
 8002808:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_RCC_OscConfig+0x934>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002822:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_RCC_OscConfig+0x93c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d11a      	bne.n	800286c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <HAL_RCC_OscConfig+0x93c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_RCC_OscConfig+0x93c>)
 800283c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002840:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002842:	f7fe ffff 	bl	8001844 <HAL_GetTick>
 8002846:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284a:	e009      	b.n	8002860 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284c:	f7fe fffa 	bl	8001844 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b64      	cmp	r3, #100	; 0x64
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e3b1      	b.n	8002fc4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <HAL_RCC_OscConfig+0x93c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ef      	beq.n	800284c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d10d      	bne.n	8002898 <HAL_RCC_OscConfig+0x940>
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_RCC_OscConfig+0x934>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4a02      	ldr	r2, [pc, #8]	; (800288c <HAL_RCC_OscConfig+0x934>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6213      	str	r3, [r2, #32]
 8002888:	e03c      	b.n	8002904 <HAL_RCC_OscConfig+0x9ac>
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	10908120 	.word	0x10908120
 8002894:	40007000 	.word	0x40007000
 8002898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10c      	bne.n	80028c2 <HAL_RCC_OscConfig+0x96a>
 80028a8:	4bc1      	ldr	r3, [pc, #772]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4ac0      	ldr	r2, [pc, #768]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6213      	str	r3, [r2, #32]
 80028b4:	4bbe      	ldr	r3, [pc, #760]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4abd      	ldr	r2, [pc, #756]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	6213      	str	r3, [r2, #32]
 80028c0:	e020      	b.n	8002904 <HAL_RCC_OscConfig+0x9ac>
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x994>
 80028d2:	4bb7      	ldr	r3, [pc, #732]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4ab6      	ldr	r2, [pc, #728]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6213      	str	r3, [r2, #32]
 80028de:	4bb4      	ldr	r3, [pc, #720]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4ab3      	ldr	r2, [pc, #716]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6213      	str	r3, [r2, #32]
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0x9ac>
 80028ec:	4bb0      	ldr	r3, [pc, #704]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4aaf      	ldr	r2, [pc, #700]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6213      	str	r3, [r2, #32]
 80028f8:	4bad      	ldr	r3, [pc, #692]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4aac      	ldr	r2, [pc, #688]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80028fe:	f023 0304 	bic.w	r3, r3, #4
 8002902:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002908:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8081 	beq.w	8002a18 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe ff95 	bl	8001844 <HAL_GetTick>
 800291a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291e:	e00b      	b.n	8002938 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002920:	f7fe ff90 	bl	8001844 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e345      	b.n	8002fc4 <HAL_RCC_OscConfig+0x106c>
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002940:	2202      	movs	r2, #2
 8002942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002948:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	fa93 f2a3 	rbit	r2, r3
 8002952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002956:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002964:	2202      	movs	r2, #2
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	fa93 f2a3 	rbit	r2, r3
 8002976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800297e:	601a      	str	r2, [r3, #0]
  return result;
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002988:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d102      	bne.n	80029a4 <HAL_RCC_OscConfig+0xa4c>
 800299e:	4b84      	ldr	r3, [pc, #528]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	e013      	b.n	80029cc <HAL_RCC_OscConfig+0xa74>
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029ac:	2202      	movs	r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	4b79      	ldr	r3, [pc, #484]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80029d4:	2102      	movs	r1, #2
 80029d6:	6011      	str	r1, [r2, #0]
 80029d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	fa92 f1a2 	rbit	r1, r2
 80029e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029ee:	6011      	str	r1, [r2, #0]
  return result;
 80029f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	fab2 f282 	clz	r2, r2
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	f002 021f 	and.w	r2, r2, #31
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d084      	beq.n	8002920 <HAL_RCC_OscConfig+0x9c8>
 8002a16:	e07f      	b.n	8002b18 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a18:	f7fe ff14 	bl	8001844 <HAL_GetTick>
 8002a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	e00b      	b.n	8002a3a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe ff0f 	bl	8001844 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e2c4      	b.n	8002fc4 <HAL_RCC_OscConfig+0x106c>
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a42:	2202      	movs	r2, #2
 8002a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	fa93 f2a3 	rbit	r2, r3
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a62:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a66:	2202      	movs	r2, #2
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f2a3 	rbit	r2, r3
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a80:	601a      	str	r2, [r3, #0]
  return result;
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8c:	fab3 f383 	clz	r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d102      	bne.n	8002aa6 <HAL_RCC_OscConfig+0xb4e>
 8002aa0:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	e013      	b.n	8002ace <HAL_RCC_OscConfig+0xb76>
 8002aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aaa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002aae:	2202      	movs	r2, #2
 8002ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f2a3 	rbit	r2, r3
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ad2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	6011      	str	r1, [r2, #0]
 8002ada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ade:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	fa92 f1a2 	rbit	r1, r2
 8002ae8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002af0:	6011      	str	r1, [r2, #0]
  return result;
 8002af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002af6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f002 021f 	and.w	r2, r2, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d184      	bne.n	8002a22 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b18:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b20:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 8002b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8242 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b3e:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <HAL_RCC_OscConfig+0xc58>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	f000 8213 	beq.w	8002f72 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	f040 8162 	bne.w	8002e22 <HAL_RCC_OscConfig+0xeca>
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	fa93 f2a3 	rbit	r2, r3
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b82:	601a      	str	r2, [r3, #0]
  return result;
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b8c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fe4e 	bl	8001844 <HAL_GetTick>
 8002ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bac:	e00c      	b.n	8002bc8 <HAL_RCC_OscConfig+0xc70>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe fe46 	bl	8001844 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1fd      	b.n	8002fc4 <HAL_RCC_OscConfig+0x106c>
 8002bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bcc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fa93 f2a3 	rbit	r2, r3
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bec:	601a      	str	r2, [r3, #0]
  return result;
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bf6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d102      	bne.n	8002c12 <HAL_RCC_OscConfig+0xcba>
 8002c0c:	4bb0      	ldr	r3, [pc, #704]	; (8002ed0 <HAL_RCC_OscConfig+0xf78>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	e027      	b.n	8002c62 <HAL_RCC_OscConfig+0xd0a>
 8002c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c16:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	fa93 f2a3 	rbit	r2, r3
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	fa93 f2a3 	rbit	r2, r3
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	4b9c      	ldr	r3, [pc, #624]	; (8002ed0 <HAL_RCC_OscConfig+0xf78>)
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c66:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c6a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c6e:	6011      	str	r1, [r2, #0]
 8002c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c74:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	fa92 f1a2 	rbit	r1, r2
 8002c7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c82:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c86:	6011      	str	r1, [r2, #0]
  return result;
 8002c88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c8c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	fab2 f282 	clz	r2, r2
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f042 0220 	orr.w	r2, r2, #32
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f002 021f 	and.w	r2, r2, #31
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d182      	bne.n	8002bb4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cae:	4b88      	ldr	r3, [pc, #544]	; (8002ed0 <HAL_RCC_OscConfig+0xf78>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	497f      	ldr	r1, [pc, #508]	; (8002ed0 <HAL_RCC_OscConfig+0xf78>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f2a3 	rbit	r2, r3
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cfa:	601a      	str	r2, [r3, #0]
  return result;
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d04:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	461a      	mov	r2, r3
 8002d18:	2301      	movs	r3, #1
 8002d1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fd92 	bl	8001844 <HAL_GetTick>
 8002d20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d24:	e009      	b.n	8002d3a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d26:	f7fe fd8d 	bl	8001844 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e144      	b.n	8002fc4 <HAL_RCC_OscConfig+0x106c>
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d5e:	601a      	str	r2, [r3, #0]
  return result;
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_RCC_OscConfig+0xe2c>
 8002d7e:	4b54      	ldr	r3, [pc, #336]	; (8002ed0 <HAL_RCC_OscConfig+0xf78>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	e027      	b.n	8002dd4 <HAL_RCC_OscConfig+0xe7c>
 8002d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d88:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fa93 f2a3 	rbit	r2, r3
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	fa93 f2a3 	rbit	r2, r3
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	4b3f      	ldr	r3, [pc, #252]	; (8002ed0 <HAL_RCC_OscConfig+0xf78>)
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dd8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ddc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002de0:	6011      	str	r1, [r2, #0]
 8002de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	fa92 f1a2 	rbit	r1, r2
 8002df0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002df8:	6011      	str	r1, [r2, #0]
  return result;
 8002dfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dfe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	fab2 f282 	clz	r2, r2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	f042 0220 	orr.w	r2, r2, #32
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	f002 021f 	and.w	r2, r2, #31
 8002e14:	2101      	movs	r1, #1
 8002e16:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d082      	beq.n	8002d26 <HAL_RCC_OscConfig+0xdce>
 8002e20:	e0cf      	b.n	8002fc2 <HAL_RCC_OscConfig+0x106a>
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	fa93 f2a3 	rbit	r2, r3
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e46:	601a      	str	r2, [r3, #0]
  return result;
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e50:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	461a      	mov	r2, r3
 8002e64:	2300      	movs	r3, #0
 8002e66:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fcec 	bl	8001844 <HAL_GetTick>
 8002e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e70:	e009      	b.n	8002e86 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe fce7 	bl	8001844 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e09e      	b.n	8002fc4 <HAL_RCC_OscConfig+0x106c>
 8002e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e98:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	fa93 f2a3 	rbit	r2, r3
 8002ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002eaa:	601a      	str	r2, [r3, #0]
  return result;
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002eb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d104      	bne.n	8002ed4 <HAL_RCC_OscConfig+0xf7c>
 8002eca:	4b01      	ldr	r3, [pc, #4]	; (8002ed0 <HAL_RCC_OscConfig+0xf78>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	e029      	b.n	8002f24 <HAL_RCC_OscConfig+0xfcc>
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002edc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	fa93 f2a3 	rbit	r2, r3
 8002f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_RCC_OscConfig+0x1078>)
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f28:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f30:	6011      	str	r1, [r2, #0]
 8002f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f36:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	fa92 f1a2 	rbit	r1, r2
 8002f40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f44:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f48:	6011      	str	r1, [r2, #0]
  return result;
 8002f4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f4e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	fab2 f282 	clz	r2, r2
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	f042 0220 	orr.w	r2, r2, #32
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	f002 021f 	and.w	r2, r2, #31
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d180      	bne.n	8002e72 <HAL_RCC_OscConfig+0xf1a>
 8002f70:	e027      	b.n	8002fc2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e01e      	b.n	8002fc4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_RCC_OscConfig+0x1078>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f92:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d10b      	bne.n	8002fbe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002fa6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002faa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b09e      	sub	sp, #120	; 0x78
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e162      	b.n	80032b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fec:	4b90      	ldr	r3, [pc, #576]	; (8003230 <HAL_RCC_ClockConfig+0x25c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d910      	bls.n	800301c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b8d      	ldr	r3, [pc, #564]	; (8003230 <HAL_RCC_ClockConfig+0x25c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 0207 	bic.w	r2, r3, #7
 8003002:	498b      	ldr	r1, [pc, #556]	; (8003230 <HAL_RCC_ClockConfig+0x25c>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b89      	ldr	r3, [pc, #548]	; (8003230 <HAL_RCC_ClockConfig+0x25c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e14a      	b.n	80032b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b82      	ldr	r3, [pc, #520]	; (8003234 <HAL_RCC_ClockConfig+0x260>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	497f      	ldr	r1, [pc, #508]	; (8003234 <HAL_RCC_ClockConfig+0x260>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80dc 	beq.w	8003200 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d13c      	bne.n	80030ca <HAL_RCC_ClockConfig+0xf6>
 8003050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003054:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003058:	fa93 f3a3 	rbit	r3, r3
 800305c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d102      	bne.n	800307a <HAL_RCC_ClockConfig+0xa6>
 8003074:	4b6f      	ldr	r3, [pc, #444]	; (8003234 <HAL_RCC_ClockConfig+0x260>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	e00f      	b.n	800309a <HAL_RCC_ClockConfig+0xc6>
 800307a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800307e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	667b      	str	r3, [r7, #100]	; 0x64
 8003088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800308c:	663b      	str	r3, [r7, #96]	; 0x60
 800308e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003096:	4b67      	ldr	r3, [pc, #412]	; (8003234 <HAL_RCC_ClockConfig+0x260>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800309e:	65ba      	str	r2, [r7, #88]	; 0x58
 80030a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030a2:	fa92 f2a2 	rbit	r2, r2
 80030a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030aa:	fab2 f282 	clz	r2, r2
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f042 0220 	orr.w	r2, r2, #32
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	f002 021f 	and.w	r2, r2, #31
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f202 	lsl.w	r2, r1, r2
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d17b      	bne.n	80031be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0f3      	b.n	80032b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d13c      	bne.n	800314c <HAL_RCC_ClockConfig+0x178>
 80030d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d102      	bne.n	80030fc <HAL_RCC_ClockConfig+0x128>
 80030f6:	4b4f      	ldr	r3, [pc, #316]	; (8003234 <HAL_RCC_ClockConfig+0x260>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	e00f      	b.n	800311c <HAL_RCC_ClockConfig+0x148>
 80030fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003100:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	647b      	str	r3, [r7, #68]	; 0x44
 800310a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310e:	643b      	str	r3, [r7, #64]	; 0x40
 8003110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003118:	4b46      	ldr	r3, [pc, #280]	; (8003234 <HAL_RCC_ClockConfig+0x260>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003120:	63ba      	str	r2, [r7, #56]	; 0x38
 8003122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003124:	fa92 f2a2 	rbit	r2, r2
 8003128:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800312a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800312c:	fab2 f282 	clz	r2, r2
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	f042 0220 	orr.w	r2, r2, #32
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	f002 021f 	and.w	r2, r2, #31
 800313c:	2101      	movs	r1, #1
 800313e:	fa01 f202 	lsl.w	r2, r1, r2
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d13a      	bne.n	80031be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0b2      	b.n	80032b2 <HAL_RCC_ClockConfig+0x2de>
 800314c:	2302      	movs	r3, #2
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d102      	bne.n	8003174 <HAL_RCC_ClockConfig+0x1a0>
 800316e:	4b31      	ldr	r3, [pc, #196]	; (8003234 <HAL_RCC_ClockConfig+0x260>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	e00d      	b.n	8003190 <HAL_RCC_ClockConfig+0x1bc>
 8003174:	2302      	movs	r3, #2
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	2302      	movs	r3, #2
 8003182:	623b      	str	r3, [r7, #32]
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	4b29      	ldr	r3, [pc, #164]	; (8003234 <HAL_RCC_ClockConfig+0x260>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	2202      	movs	r2, #2
 8003192:	61ba      	str	r2, [r7, #24]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	fa92 f2a2 	rbit	r2, r2
 800319a:	617a      	str	r2, [r7, #20]
  return result;
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	fab2 f282 	clz	r2, r2
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f042 0220 	orr.w	r2, r2, #32
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	f002 021f 	and.w	r2, r2, #31
 80031ae:	2101      	movs	r1, #1
 80031b0:	fa01 f202 	lsl.w	r2, r1, r2
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e079      	b.n	80032b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <HAL_RCC_ClockConfig+0x260>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	491a      	ldr	r1, [pc, #104]	; (8003234 <HAL_RCC_ClockConfig+0x260>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d0:	f7fe fb38 	bl	8001844 <HAL_GetTick>
 80031d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fe fb34 	bl	8001844 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e061      	b.n	80032b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <HAL_RCC_ClockConfig+0x260>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_ClockConfig+0x25c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d214      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <HAL_RCC_ClockConfig+0x25c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 0207 	bic.w	r2, r3, #7
 8003216:	4906      	ldr	r1, [pc, #24]	; (8003230 <HAL_RCC_ClockConfig+0x25c>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <HAL_RCC_ClockConfig+0x25c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e040      	b.n	80032b2 <HAL_RCC_ClockConfig+0x2de>
 8003230:	40022000 	.word	0x40022000
 8003234:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <HAL_RCC_ClockConfig+0x2e8>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	491a      	ldr	r1, [pc, #104]	; (80032bc <HAL_RCC_ClockConfig+0x2e8>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_RCC_ClockConfig+0x2e8>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4912      	ldr	r1, [pc, #72]	; (80032bc <HAL_RCC_ClockConfig+0x2e8>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003276:	f000 f829 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 800327a:	4601      	mov	r1, r0
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_RCC_ClockConfig+0x2e8>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003284:	22f0      	movs	r2, #240	; 0xf0
 8003286:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	fa92 f2a2 	rbit	r2, r2
 800328e:	60fa      	str	r2, [r7, #12]
  return result;
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	fab2 f282 	clz	r2, r2
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	40d3      	lsrs	r3, r2
 800329a:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <HAL_RCC_ClockConfig+0x2ec>)
 800329c:	5cd3      	ldrb	r3, [r2, r3]
 800329e:	fa21 f303 	lsr.w	r3, r1, r3
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <HAL_RCC_ClockConfig+0x2f0>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <HAL_RCC_ClockConfig+0x2f4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fa86 	bl	80017bc <HAL_InitTick>
  
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3778      	adds	r7, #120	; 0x78
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
 80032c0:	080085d0 	.word	0x080085d0
 80032c4:	20000000 	.word	0x20000000
 80032c8:	20000004 	.word	0x20000004

080032cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b08b      	sub	sp, #44	; 0x2c
 80032d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80032e6:	4b29      	ldr	r3, [pc, #164]	; (800338c <HAL_RCC_GetSysClockFreq+0xc0>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d002      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x30>
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d003      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0x36>
 80032fa:	e03c      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032fe:	623b      	str	r3, [r7, #32]
      break;
 8003300:	e03c      	b.n	800337c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003308:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800330c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	fa92 f2a2 	rbit	r2, r2
 8003314:	607a      	str	r2, [r7, #4]
  return result;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	fab2 f282 	clz	r2, r2
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	40d3      	lsrs	r3, r2
 8003320:	4a1c      	ldr	r2, [pc, #112]	; (8003394 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003322:	5cd3      	ldrb	r3, [r2, r3]
 8003324:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003326:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	220f      	movs	r2, #15
 8003330:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	fa92 f2a2 	rbit	r2, r2
 8003338:	60fa      	str	r2, [r7, #12]
  return result;
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	fab2 f282 	clz	r2, r2
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	40d3      	lsrs	r3, r2
 8003344:	4a14      	ldr	r2, [pc, #80]	; (8003398 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003346:	5cd3      	ldrb	r3, [r2, r3]
 8003348:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003354:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	fbb2 f2f3 	udiv	r2, r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
 8003364:	e004      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_RCC_GetSysClockFreq+0xd0>)
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	623b      	str	r3, [r7, #32]
      break;
 8003374:	e002      	b.n	800337c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003378:	623b      	str	r3, [r7, #32]
      break;
 800337a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337c:	6a3b      	ldr	r3, [r7, #32]
}
 800337e:	4618      	mov	r0, r3
 8003380:	372c      	adds	r7, #44	; 0x2c
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	007a1200 	.word	0x007a1200
 8003394:	080085e8 	.word	0x080085e8
 8003398:	080085f8 	.word	0x080085f8
 800339c:	003d0900 	.word	0x003d0900

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000000 	.word	0x20000000

080033b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033be:	f7ff ffef 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033c2:	4601      	mov	r1, r0
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	fa92 f2a2 	rbit	r2, r2
 80033d8:	603a      	str	r2, [r7, #0]
  return result;
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	fab2 f282 	clz	r2, r2
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	40d3      	lsrs	r3, r2
 80033e4:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	080085e0 	.word	0x080085e0

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003402:	f7ff ffcd 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 8003406:	4601      	mov	r1, r0
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003410:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003414:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	fa92 f2a2 	rbit	r2, r2
 800341c:	603a      	str	r2, [r7, #0]
  return result;
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	40d3      	lsrs	r3, r2
 8003428:	4a04      	ldr	r2, [pc, #16]	; (800343c <HAL_RCC_GetPCLK2Freq+0x40>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000
 800343c:	080085e0 	.word	0x080085e0

08003440 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b092      	sub	sp, #72	; 0x48
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003450:	2300      	movs	r3, #0
 8003452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80cd 	beq.w	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003464:	4b86      	ldr	r3, [pc, #536]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10e      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003470:	4b83      	ldr	r3, [pc, #524]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	4a82      	ldr	r2, [pc, #520]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347a:	61d3      	str	r3, [r2, #28]
 800347c:	4b80      	ldr	r3, [pc, #512]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348e:	4b7d      	ldr	r3, [pc, #500]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d118      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349a:	4b7a      	ldr	r3, [pc, #488]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a79      	ldr	r2, [pc, #484]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a6:	f7fe f9cd 	bl	8001844 <HAL_GetTick>
 80034aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	e008      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fe f9c9 	bl	8001844 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b64      	cmp	r3, #100	; 0x64
 80034ba:	d901      	bls.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e0db      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	4b70      	ldr	r3, [pc, #448]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034cc:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d07d      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d076      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ea:	4b65      	ldr	r3, [pc, #404]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	4b5e      	ldr	r3, [pc, #376]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	461a      	mov	r2, r3
 8003514:	2301      	movs	r3, #1
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800351c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	4b55      	ldr	r3, [pc, #340]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	461a      	mov	r2, r3
 8003538:	2300      	movs	r3, #0
 800353a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800353c:	4a50      	ldr	r2, [pc, #320]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800353e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003540:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d045      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7fe f97a 	bl	8001844 <HAL_GetTick>
 8003550:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003552:	e00a      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003554:	f7fe f976 	bl	8001844 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e086      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800356a:	2302      	movs	r3, #2
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
 8003576:	2302      	movs	r3, #2
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	61fb      	str	r3, [r7, #28]
  return result;
 8003582:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d102      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003598:	4b39      	ldr	r3, [pc, #228]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	e007      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800359e:	2302      	movs	r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	4b35      	ldr	r3, [pc, #212]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2202      	movs	r2, #2
 80035b0:	613a      	str	r2, [r7, #16]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	fa92 f2a2 	rbit	r2, r2
 80035b8:	60fa      	str	r2, [r7, #12]
  return result;
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f002 021f 	and.w	r2, r2, #31
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f202 	lsl.w	r2, r1, r2
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0bd      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4926      	ldr	r1, [pc, #152]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f2:	4b23      	ldr	r3, [pc, #140]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4a22      	ldr	r2, [pc, #136]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800360a:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f023 0203 	bic.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	491a      	ldr	r1, [pc, #104]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003618:	4313      	orrs	r3, r2
 800361a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003628:	4b15      	ldr	r3, [pc, #84]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	f023 0210 	bic.w	r2, r3, #16
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4912      	ldr	r1, [pc, #72]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003636:	4313      	orrs	r3, r2
 8003638:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	490b      	ldr	r1, [pc, #44]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003654:	4313      	orrs	r3, r2
 8003656:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	4903      	ldr	r1, [pc, #12]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003672:	4313      	orrs	r3, r2
 8003674:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3748      	adds	r7, #72	; 0x48
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
 8003688:	10908100 	.word	0x10908100

0800368c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e040      	b.n	8003720 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd feea 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	; 0x24
 80036b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0201 	bic.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f87c 	bl	80037c8 <UART_SetConfig>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e022      	b.n	8003720 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f9a6 	bl	8003a34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fa2d 	bl	8003b78 <UART_CheckIdleState>
 800371e:	4603      	mov	r3, r0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800373c:	2b20      	cmp	r3, #32
 800373e:	d132      	bne.n	80037a6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_UART_Receive_IT+0x24>
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e02b      	b.n	80037a8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d018      	beq.n	8003796 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	613b      	str	r3, [r7, #16]
   return(result);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	623b      	str	r3, [r7, #32]
 8003784:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	69f9      	ldr	r1, [r7, #28]
 8003788:	6a3a      	ldr	r2, [r7, #32]
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e6      	bne.n	8003764 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	461a      	mov	r2, r3
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 fafb 	bl	8003d98 <UART_Start_Receive_IT>
 80037a2:	4603      	mov	r3, r0
 80037a4:	e000      	b.n	80037a8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
  }
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3728      	adds	r7, #40	; 0x28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b8a      	ldr	r3, [pc, #552]	; (8003a1c <UART_SetConfig+0x254>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	6979      	ldr	r1, [r7, #20]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a78      	ldr	r2, [pc, #480]	; (8003a20 <UART_SetConfig+0x258>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d120      	bne.n	8003886 <UART_SetConfig+0xbe>
 8003844:	4b77      	ldr	r3, [pc, #476]	; (8003a24 <UART_SetConfig+0x25c>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b03      	cmp	r3, #3
 800384e:	d817      	bhi.n	8003880 <UART_SetConfig+0xb8>
 8003850:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <UART_SetConfig+0x90>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	08003869 	.word	0x08003869
 800385c:	08003875 	.word	0x08003875
 8003860:	0800387b 	.word	0x0800387b
 8003864:	0800386f 	.word	0x0800386f
 8003868:	2300      	movs	r3, #0
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e01d      	b.n	80038aa <UART_SetConfig+0xe2>
 800386e:	2302      	movs	r3, #2
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e01a      	b.n	80038aa <UART_SetConfig+0xe2>
 8003874:	2304      	movs	r3, #4
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e017      	b.n	80038aa <UART_SetConfig+0xe2>
 800387a:	2308      	movs	r3, #8
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e014      	b.n	80038aa <UART_SetConfig+0xe2>
 8003880:	2310      	movs	r3, #16
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e011      	b.n	80038aa <UART_SetConfig+0xe2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a67      	ldr	r2, [pc, #412]	; (8003a28 <UART_SetConfig+0x260>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d102      	bne.n	8003896 <UART_SetConfig+0xce>
 8003890:	2300      	movs	r3, #0
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e009      	b.n	80038aa <UART_SetConfig+0xe2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a64      	ldr	r2, [pc, #400]	; (8003a2c <UART_SetConfig+0x264>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d102      	bne.n	80038a6 <UART_SetConfig+0xde>
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e001      	b.n	80038aa <UART_SetConfig+0xe2>
 80038a6:	2310      	movs	r3, #16
 80038a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b2:	d15a      	bne.n	800396a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80038b4:	7ffb      	ldrb	r3, [r7, #31]
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d827      	bhi.n	800390a <UART_SetConfig+0x142>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <UART_SetConfig+0xf8>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038e5 	.word	0x080038e5
 80038c4:	080038ed 	.word	0x080038ed
 80038c8:	080038f5 	.word	0x080038f5
 80038cc:	0800390b 	.word	0x0800390b
 80038d0:	080038fb 	.word	0x080038fb
 80038d4:	0800390b 	.word	0x0800390b
 80038d8:	0800390b 	.word	0x0800390b
 80038dc:	0800390b 	.word	0x0800390b
 80038e0:	08003903 	.word	0x08003903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e4:	f7ff fd68 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 80038e8:	61b8      	str	r0, [r7, #24]
        break;
 80038ea:	e013      	b.n	8003914 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038ec:	f7ff fd86 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 80038f0:	61b8      	str	r0, [r7, #24]
        break;
 80038f2:	e00f      	b.n	8003914 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f4:	4b4e      	ldr	r3, [pc, #312]	; (8003a30 <UART_SetConfig+0x268>)
 80038f6:	61bb      	str	r3, [r7, #24]
        break;
 80038f8:	e00c      	b.n	8003914 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fa:	f7ff fce7 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 80038fe:	61b8      	str	r0, [r7, #24]
        break;
 8003900:	e008      	b.n	8003914 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003906:	61bb      	str	r3, [r7, #24]
        break;
 8003908:	e004      	b.n	8003914 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	77bb      	strb	r3, [r7, #30]
        break;
 8003912:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d074      	beq.n	8003a04 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	005a      	lsls	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b0f      	cmp	r3, #15
 8003934:	d916      	bls.n	8003964 <UART_SetConfig+0x19c>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393c:	d212      	bcs.n	8003964 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	b29b      	uxth	r3, r3
 8003942:	f023 030f 	bic.w	r3, r3, #15
 8003946:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	b29b      	uxth	r3, r3
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	b29a      	uxth	r2, r3
 8003954:	89fb      	ldrh	r3, [r7, #14]
 8003956:	4313      	orrs	r3, r2
 8003958:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	89fa      	ldrh	r2, [r7, #14]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	e04f      	b.n	8003a04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	77bb      	strb	r3, [r7, #30]
 8003968:	e04c      	b.n	8003a04 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800396a:	7ffb      	ldrb	r3, [r7, #31]
 800396c:	2b08      	cmp	r3, #8
 800396e:	d828      	bhi.n	80039c2 <UART_SetConfig+0x1fa>
 8003970:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <UART_SetConfig+0x1b0>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	0800399d 	.word	0x0800399d
 800397c:	080039a5 	.word	0x080039a5
 8003980:	080039ad 	.word	0x080039ad
 8003984:	080039c3 	.word	0x080039c3
 8003988:	080039b3 	.word	0x080039b3
 800398c:	080039c3 	.word	0x080039c3
 8003990:	080039c3 	.word	0x080039c3
 8003994:	080039c3 	.word	0x080039c3
 8003998:	080039bb 	.word	0x080039bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800399c:	f7ff fd0c 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 80039a0:	61b8      	str	r0, [r7, #24]
        break;
 80039a2:	e013      	b.n	80039cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039a4:	f7ff fd2a 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 80039a8:	61b8      	str	r0, [r7, #24]
        break;
 80039aa:	e00f      	b.n	80039cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ac:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <UART_SetConfig+0x268>)
 80039ae:	61bb      	str	r3, [r7, #24]
        break;
 80039b0:	e00c      	b.n	80039cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b2:	f7ff fc8b 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 80039b6:	61b8      	str	r0, [r7, #24]
        break;
 80039b8:	e008      	b.n	80039cc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039be:	61bb      	str	r3, [r7, #24]
        break;
 80039c0:	e004      	b.n	80039cc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	77bb      	strb	r3, [r7, #30]
        break;
 80039ca:	bf00      	nop
    }

    if (pclk != 0U)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d018      	beq.n	8003a04 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	085a      	lsrs	r2, r3, #1
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	441a      	add	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b0f      	cmp	r3, #15
 80039ea:	d909      	bls.n	8003a00 <UART_SetConfig+0x238>
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f2:	d205      	bcs.n	8003a00 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	e001      	b.n	8003a04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a10:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	efff69f3 	.word	0xefff69f3
 8003a20:	40013800 	.word	0x40013800
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40004400 	.word	0x40004400
 8003a2c:	40004800 	.word	0x40004800
 8003a30:	007a1200 	.word	0x007a1200

08003a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01a      	beq.n	8003b4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b32:	d10a      	bne.n	8003b4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b098      	sub	sp, #96	; 0x60
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b88:	f7fd fe5c 	bl	8001844 <HAL_GetTick>
 8003b8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d12e      	bne.n	8003bfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f88c 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d021      	beq.n	8003bfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bca:	653b      	str	r3, [r7, #80]	; 0x50
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e6      	bne.n	8003bb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e062      	b.n	8003cc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d149      	bne.n	8003c9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c10:	2200      	movs	r2, #0
 8003c12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f856 	bl	8003cc8 <UART_WaitOnFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d03c      	beq.n	8003c9c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c40:	633b      	str	r3, [r7, #48]	; 0x30
 8003c42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e6      	bne.n	8003c22 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3308      	adds	r3, #8
 8003c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c74:	61fa      	str	r2, [r7, #28]
 8003c76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	617b      	str	r3, [r7, #20]
   return(result);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e5      	bne.n	8003c54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e011      	b.n	8003cc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3758      	adds	r7, #88	; 0x58
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd8:	e049      	b.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce0:	d045      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fd fdaf 	bl	8001844 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e048      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d031      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d110      	bne.n	8003d3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f8ff 	bl	8003f24 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e029      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d48:	d111      	bne.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f8e5 	bl	8003f24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e00f      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4013      	ands	r3, r2
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d0a6      	beq.n	8003cda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b097      	sub	sp, #92	; 0x5c
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dca:	d10e      	bne.n	8003dea <UART_Start_Receive_IT+0x52>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <UART_Start_Receive_IT+0x48>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003dda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dde:	e02d      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	22ff      	movs	r2, #255	; 0xff
 8003de4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003de8:	e028      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <UART_Start_Receive_IT+0x76>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <UART_Start_Receive_IT+0x6c>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	22ff      	movs	r2, #255	; 0xff
 8003dfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e02:	e01b      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	227f      	movs	r2, #127	; 0x7f
 8003e08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e0c:	e016      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e16:	d10d      	bne.n	8003e34 <UART_Start_Receive_IT+0x9c>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <UART_Start_Receive_IT+0x92>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	227f      	movs	r2, #127	; 0x7f
 8003e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e28:	e008      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	223f      	movs	r2, #63	; 0x3f
 8003e2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e32:	e003      	b.n	8003e3c <UART_Start_Receive_IT+0xa4>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2222      	movs	r2, #34	; 0x22
 8003e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	657b      	str	r3, [r7, #84]	; 0x54
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e6c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e6e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e88:	d107      	bne.n	8003e9a <UART_Start_Receive_IT+0x102>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <UART_Start_Receive_IT+0x184>)
 8003e96:	669a      	str	r2, [r3, #104]	; 0x68
 8003e98:	e002      	b.n	8003ea0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <UART_Start_Receive_IT+0x188>)
 8003e9e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d019      	beq.n	8003edc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ec8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e6      	bne.n	8003ea8 <UART_Start_Receive_IT+0x110>
 8003eda:	e018      	b.n	8003f0e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f043 0320 	orr.w	r3, r3, #32
 8003ef0:	653b      	str	r3, [r7, #80]	; 0x50
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efa:	623b      	str	r3, [r7, #32]
 8003efc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	69f9      	ldr	r1, [r7, #28]
 8003f00:	6a3a      	ldr	r2, [r7, #32]
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e6      	bne.n	8003edc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	375c      	adds	r7, #92	; 0x5c
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	08004195 	.word	0x08004195
 8003f20:	08003fed 	.word	0x08003fed

08003f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b095      	sub	sp, #84	; 0x54
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e6      	bne.n	8003f2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e5      	bne.n	8003f5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d118      	bne.n	8003fcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f023 0310 	bic.w	r3, r3, #16
 8003fae:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6979      	ldr	r1, [r7, #20]
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e6      	bne.n	8003f9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fe0:	bf00      	nop
 8003fe2:	3754      	adds	r7, #84	; 0x54
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b09c      	sub	sp, #112	; 0x70
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ffa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004004:	2b22      	cmp	r3, #34	; 0x22
 8004006:	f040 80b9 	bne.w	800417c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004010:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004014:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004018:	b2d9      	uxtb	r1, r3
 800401a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800401e:	b2da      	uxtb	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	400a      	ands	r2, r1
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	f040 809c 	bne.w	800418c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004068:	66bb      	str	r3, [r7, #104]	; 0x68
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004072:	65bb      	str	r3, [r7, #88]	; 0x58
 8004074:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e6      	bne.n	8004054 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	667b      	str	r3, [r7, #100]	; 0x64
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040a6:	647a      	str	r2, [r7, #68]	; 0x44
 80040a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d018      	beq.n	800410e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	623b      	str	r3, [r7, #32]
   return(result);
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040f0:	663b      	str	r3, [r7, #96]	; 0x60
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040fa:	633b      	str	r3, [r7, #48]	; 0x30
 80040fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e6      	bne.n	80040dc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004112:	2b01      	cmp	r3, #1
 8004114:	d12e      	bne.n	8004174 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	60fb      	str	r3, [r7, #12]
   return(result);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f023 0310 	bic.w	r3, r3, #16
 8004130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	69b9      	ldr	r1, [r7, #24]
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	617b      	str	r3, [r7, #20]
   return(result);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e6      	bne.n	800411c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b10      	cmp	r3, #16
 800415a:	d103      	bne.n	8004164 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2210      	movs	r2, #16
 8004162:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fb1f 	bl	80037b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004172:	e00b      	b.n	800418c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fc fdef 	bl	8000d58 <HAL_UART_RxCpltCallback>
}
 800417a:	e007      	b.n	800418c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0208 	orr.w	r2, r2, #8
 800418a:	619a      	str	r2, [r3, #24]
}
 800418c:	bf00      	nop
 800418e:	3770      	adds	r7, #112	; 0x70
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b09c      	sub	sp, #112	; 0x70
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ac:	2b22      	cmp	r3, #34	; 0x22
 80041ae:	f040 80b9 	bne.w	8004324 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80041c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80041c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80041ca:	4013      	ands	r3, r2
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	1c9a      	adds	r2, r3, #2
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 809c 	bne.w	8004334 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800420a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004210:	667b      	str	r3, [r7, #100]	; 0x64
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800421a:	657b      	str	r3, [r7, #84]	; 0x54
 800421c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e6      	bne.n	80041fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3308      	adds	r3, #8
 8004234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	663b      	str	r3, [r7, #96]	; 0x60
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3308      	adds	r3, #8
 800424c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800424e:	643a      	str	r2, [r7, #64]	; 0x40
 8004250:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e5      	bne.n	800422e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d018      	beq.n	80042b6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	61fb      	str	r3, [r7, #28]
   return(result);
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004298:	65fb      	str	r3, [r7, #92]	; 0x5c
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e6      	bne.n	8004284 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d12e      	bne.n	800431c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f023 0310 	bic.w	r3, r3, #16
 80042d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e6:	6979      	ldr	r1, [r7, #20]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	e841 2300 	strex	r3, r2, [r1]
 80042ee:	613b      	str	r3, [r7, #16]
   return(result);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e6      	bne.n	80042c4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b10      	cmp	r3, #16
 8004302:	d103      	bne.n	800430c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2210      	movs	r2, #16
 800430a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004312:	4619      	mov	r1, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff fa4b 	bl	80037b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800431a:	e00b      	b.n	8004334 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fc fd1b 	bl	8000d58 <HAL_UART_RxCpltCallback>
}
 8004322:	e007      	b.n	8004334 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0208 	orr.w	r2, r2, #8
 8004332:	619a      	str	r2, [r3, #24]
}
 8004334:	bf00      	nop
 8004336:	3770      	adds	r7, #112	; 0x70
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <__cvt>:
 800433c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	ec55 4b10 	vmov	r4, r5, d0
 8004344:	2d00      	cmp	r5, #0
 8004346:	460e      	mov	r6, r1
 8004348:	4619      	mov	r1, r3
 800434a:	462b      	mov	r3, r5
 800434c:	bfbb      	ittet	lt
 800434e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004352:	461d      	movlt	r5, r3
 8004354:	2300      	movge	r3, #0
 8004356:	232d      	movlt	r3, #45	; 0x2d
 8004358:	700b      	strb	r3, [r1, #0]
 800435a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800435c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004360:	4691      	mov	r9, r2
 8004362:	f023 0820 	bic.w	r8, r3, #32
 8004366:	bfbc      	itt	lt
 8004368:	4622      	movlt	r2, r4
 800436a:	4614      	movlt	r4, r2
 800436c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004370:	d005      	beq.n	800437e <__cvt+0x42>
 8004372:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004376:	d100      	bne.n	800437a <__cvt+0x3e>
 8004378:	3601      	adds	r6, #1
 800437a:	2102      	movs	r1, #2
 800437c:	e000      	b.n	8004380 <__cvt+0x44>
 800437e:	2103      	movs	r1, #3
 8004380:	ab03      	add	r3, sp, #12
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	ab02      	add	r3, sp, #8
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	ec45 4b10 	vmov	d0, r4, r5
 800438c:	4653      	mov	r3, sl
 800438e:	4632      	mov	r2, r6
 8004390:	f001 fda6 	bl	8005ee0 <_dtoa_r>
 8004394:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004398:	4607      	mov	r7, r0
 800439a:	d102      	bne.n	80043a2 <__cvt+0x66>
 800439c:	f019 0f01 	tst.w	r9, #1
 80043a0:	d022      	beq.n	80043e8 <__cvt+0xac>
 80043a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043a6:	eb07 0906 	add.w	r9, r7, r6
 80043aa:	d110      	bne.n	80043ce <__cvt+0x92>
 80043ac:	783b      	ldrb	r3, [r7, #0]
 80043ae:	2b30      	cmp	r3, #48	; 0x30
 80043b0:	d10a      	bne.n	80043c8 <__cvt+0x8c>
 80043b2:	2200      	movs	r2, #0
 80043b4:	2300      	movs	r3, #0
 80043b6:	4620      	mov	r0, r4
 80043b8:	4629      	mov	r1, r5
 80043ba:	f7fc fb8f 	bl	8000adc <__aeabi_dcmpeq>
 80043be:	b918      	cbnz	r0, 80043c8 <__cvt+0x8c>
 80043c0:	f1c6 0601 	rsb	r6, r6, #1
 80043c4:	f8ca 6000 	str.w	r6, [sl]
 80043c8:	f8da 3000 	ldr.w	r3, [sl]
 80043cc:	4499      	add	r9, r3
 80043ce:	2200      	movs	r2, #0
 80043d0:	2300      	movs	r3, #0
 80043d2:	4620      	mov	r0, r4
 80043d4:	4629      	mov	r1, r5
 80043d6:	f7fc fb81 	bl	8000adc <__aeabi_dcmpeq>
 80043da:	b108      	cbz	r0, 80043e0 <__cvt+0xa4>
 80043dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80043e0:	2230      	movs	r2, #48	; 0x30
 80043e2:	9b03      	ldr	r3, [sp, #12]
 80043e4:	454b      	cmp	r3, r9
 80043e6:	d307      	bcc.n	80043f8 <__cvt+0xbc>
 80043e8:	9b03      	ldr	r3, [sp, #12]
 80043ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043ec:	1bdb      	subs	r3, r3, r7
 80043ee:	4638      	mov	r0, r7
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	b004      	add	sp, #16
 80043f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f8:	1c59      	adds	r1, r3, #1
 80043fa:	9103      	str	r1, [sp, #12]
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e7f0      	b.n	80043e2 <__cvt+0xa6>

08004400 <__exponent>:
 8004400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004402:	4603      	mov	r3, r0
 8004404:	2900      	cmp	r1, #0
 8004406:	bfb8      	it	lt
 8004408:	4249      	neglt	r1, r1
 800440a:	f803 2b02 	strb.w	r2, [r3], #2
 800440e:	bfb4      	ite	lt
 8004410:	222d      	movlt	r2, #45	; 0x2d
 8004412:	222b      	movge	r2, #43	; 0x2b
 8004414:	2909      	cmp	r1, #9
 8004416:	7042      	strb	r2, [r0, #1]
 8004418:	dd2a      	ble.n	8004470 <__exponent+0x70>
 800441a:	f10d 0207 	add.w	r2, sp, #7
 800441e:	4617      	mov	r7, r2
 8004420:	260a      	movs	r6, #10
 8004422:	4694      	mov	ip, r2
 8004424:	fb91 f5f6 	sdiv	r5, r1, r6
 8004428:	fb06 1415 	mls	r4, r6, r5, r1
 800442c:	3430      	adds	r4, #48	; 0x30
 800442e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004432:	460c      	mov	r4, r1
 8004434:	2c63      	cmp	r4, #99	; 0x63
 8004436:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800443a:	4629      	mov	r1, r5
 800443c:	dcf1      	bgt.n	8004422 <__exponent+0x22>
 800443e:	3130      	adds	r1, #48	; 0x30
 8004440:	f1ac 0402 	sub.w	r4, ip, #2
 8004444:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004448:	1c41      	adds	r1, r0, #1
 800444a:	4622      	mov	r2, r4
 800444c:	42ba      	cmp	r2, r7
 800444e:	d30a      	bcc.n	8004466 <__exponent+0x66>
 8004450:	f10d 0209 	add.w	r2, sp, #9
 8004454:	eba2 020c 	sub.w	r2, r2, ip
 8004458:	42bc      	cmp	r4, r7
 800445a:	bf88      	it	hi
 800445c:	2200      	movhi	r2, #0
 800445e:	4413      	add	r3, r2
 8004460:	1a18      	subs	r0, r3, r0
 8004462:	b003      	add	sp, #12
 8004464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004466:	f812 5b01 	ldrb.w	r5, [r2], #1
 800446a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800446e:	e7ed      	b.n	800444c <__exponent+0x4c>
 8004470:	2330      	movs	r3, #48	; 0x30
 8004472:	3130      	adds	r1, #48	; 0x30
 8004474:	7083      	strb	r3, [r0, #2]
 8004476:	70c1      	strb	r1, [r0, #3]
 8004478:	1d03      	adds	r3, r0, #4
 800447a:	e7f1      	b.n	8004460 <__exponent+0x60>

0800447c <_printf_float>:
 800447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004480:	ed2d 8b02 	vpush	{d8}
 8004484:	b08d      	sub	sp, #52	; 0x34
 8004486:	460c      	mov	r4, r1
 8004488:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800448c:	4616      	mov	r6, r2
 800448e:	461f      	mov	r7, r3
 8004490:	4605      	mov	r5, r0
 8004492:	f001 fbdd 	bl	8005c50 <_localeconv_r>
 8004496:	f8d0 a000 	ldr.w	sl, [r0]
 800449a:	4650      	mov	r0, sl
 800449c:	f7fb fee8 	bl	8000270 <strlen>
 80044a0:	2300      	movs	r3, #0
 80044a2:	930a      	str	r3, [sp, #40]	; 0x28
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	9305      	str	r3, [sp, #20]
 80044a8:	f8d8 3000 	ldr.w	r3, [r8]
 80044ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80044b0:	3307      	adds	r3, #7
 80044b2:	f023 0307 	bic.w	r3, r3, #7
 80044b6:	f103 0208 	add.w	r2, r3, #8
 80044ba:	f8c8 2000 	str.w	r2, [r8]
 80044be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80044c6:	9307      	str	r3, [sp, #28]
 80044c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80044cc:	ee08 0a10 	vmov	s16, r0
 80044d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80044d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044d8:	4b9e      	ldr	r3, [pc, #632]	; (8004754 <_printf_float+0x2d8>)
 80044da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044de:	f7fc fb2f 	bl	8000b40 <__aeabi_dcmpun>
 80044e2:	bb88      	cbnz	r0, 8004548 <_printf_float+0xcc>
 80044e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044e8:	4b9a      	ldr	r3, [pc, #616]	; (8004754 <_printf_float+0x2d8>)
 80044ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044ee:	f7fc fb09 	bl	8000b04 <__aeabi_dcmple>
 80044f2:	bb48      	cbnz	r0, 8004548 <_printf_float+0xcc>
 80044f4:	2200      	movs	r2, #0
 80044f6:	2300      	movs	r3, #0
 80044f8:	4640      	mov	r0, r8
 80044fa:	4649      	mov	r1, r9
 80044fc:	f7fc faf8 	bl	8000af0 <__aeabi_dcmplt>
 8004500:	b110      	cbz	r0, 8004508 <_printf_float+0x8c>
 8004502:	232d      	movs	r3, #45	; 0x2d
 8004504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004508:	4a93      	ldr	r2, [pc, #588]	; (8004758 <_printf_float+0x2dc>)
 800450a:	4b94      	ldr	r3, [pc, #592]	; (800475c <_printf_float+0x2e0>)
 800450c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004510:	bf94      	ite	ls
 8004512:	4690      	movls	r8, r2
 8004514:	4698      	movhi	r8, r3
 8004516:	2303      	movs	r3, #3
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	9b05      	ldr	r3, [sp, #20]
 800451c:	f023 0304 	bic.w	r3, r3, #4
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	f04f 0900 	mov.w	r9, #0
 8004526:	9700      	str	r7, [sp, #0]
 8004528:	4633      	mov	r3, r6
 800452a:	aa0b      	add	r2, sp, #44	; 0x2c
 800452c:	4621      	mov	r1, r4
 800452e:	4628      	mov	r0, r5
 8004530:	f000 f9da 	bl	80048e8 <_printf_common>
 8004534:	3001      	adds	r0, #1
 8004536:	f040 8090 	bne.w	800465a <_printf_float+0x1de>
 800453a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800453e:	b00d      	add	sp, #52	; 0x34
 8004540:	ecbd 8b02 	vpop	{d8}
 8004544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	4640      	mov	r0, r8
 800454e:	4649      	mov	r1, r9
 8004550:	f7fc faf6 	bl	8000b40 <__aeabi_dcmpun>
 8004554:	b140      	cbz	r0, 8004568 <_printf_float+0xec>
 8004556:	464b      	mov	r3, r9
 8004558:	2b00      	cmp	r3, #0
 800455a:	bfbc      	itt	lt
 800455c:	232d      	movlt	r3, #45	; 0x2d
 800455e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004562:	4a7f      	ldr	r2, [pc, #508]	; (8004760 <_printf_float+0x2e4>)
 8004564:	4b7f      	ldr	r3, [pc, #508]	; (8004764 <_printf_float+0x2e8>)
 8004566:	e7d1      	b.n	800450c <_printf_float+0x90>
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800456e:	9206      	str	r2, [sp, #24]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	d13f      	bne.n	80045f4 <_printf_float+0x178>
 8004574:	2306      	movs	r3, #6
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	9b05      	ldr	r3, [sp, #20]
 800457a:	6861      	ldr	r1, [r4, #4]
 800457c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004580:	2300      	movs	r3, #0
 8004582:	9303      	str	r3, [sp, #12]
 8004584:	ab0a      	add	r3, sp, #40	; 0x28
 8004586:	e9cd b301 	strd	fp, r3, [sp, #4]
 800458a:	ab09      	add	r3, sp, #36	; 0x24
 800458c:	ec49 8b10 	vmov	d0, r8, r9
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	6022      	str	r2, [r4, #0]
 8004594:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004598:	4628      	mov	r0, r5
 800459a:	f7ff fecf 	bl	800433c <__cvt>
 800459e:	9b06      	ldr	r3, [sp, #24]
 80045a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045a2:	2b47      	cmp	r3, #71	; 0x47
 80045a4:	4680      	mov	r8, r0
 80045a6:	d108      	bne.n	80045ba <_printf_float+0x13e>
 80045a8:	1cc8      	adds	r0, r1, #3
 80045aa:	db02      	blt.n	80045b2 <_printf_float+0x136>
 80045ac:	6863      	ldr	r3, [r4, #4]
 80045ae:	4299      	cmp	r1, r3
 80045b0:	dd41      	ble.n	8004636 <_printf_float+0x1ba>
 80045b2:	f1ab 0302 	sub.w	r3, fp, #2
 80045b6:	fa5f fb83 	uxtb.w	fp, r3
 80045ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045be:	d820      	bhi.n	8004602 <_printf_float+0x186>
 80045c0:	3901      	subs	r1, #1
 80045c2:	465a      	mov	r2, fp
 80045c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045c8:	9109      	str	r1, [sp, #36]	; 0x24
 80045ca:	f7ff ff19 	bl	8004400 <__exponent>
 80045ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045d0:	1813      	adds	r3, r2, r0
 80045d2:	2a01      	cmp	r2, #1
 80045d4:	4681      	mov	r9, r0
 80045d6:	6123      	str	r3, [r4, #16]
 80045d8:	dc02      	bgt.n	80045e0 <_printf_float+0x164>
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	07d2      	lsls	r2, r2, #31
 80045de:	d501      	bpl.n	80045e4 <_printf_float+0x168>
 80045e0:	3301      	adds	r3, #1
 80045e2:	6123      	str	r3, [r4, #16]
 80045e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d09c      	beq.n	8004526 <_printf_float+0xaa>
 80045ec:	232d      	movs	r3, #45	; 0x2d
 80045ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f2:	e798      	b.n	8004526 <_printf_float+0xaa>
 80045f4:	9a06      	ldr	r2, [sp, #24]
 80045f6:	2a47      	cmp	r2, #71	; 0x47
 80045f8:	d1be      	bne.n	8004578 <_printf_float+0xfc>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1bc      	bne.n	8004578 <_printf_float+0xfc>
 80045fe:	2301      	movs	r3, #1
 8004600:	e7b9      	b.n	8004576 <_printf_float+0xfa>
 8004602:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004606:	d118      	bne.n	800463a <_printf_float+0x1be>
 8004608:	2900      	cmp	r1, #0
 800460a:	6863      	ldr	r3, [r4, #4]
 800460c:	dd0b      	ble.n	8004626 <_printf_float+0x1aa>
 800460e:	6121      	str	r1, [r4, #16]
 8004610:	b913      	cbnz	r3, 8004618 <_printf_float+0x19c>
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	07d0      	lsls	r0, r2, #31
 8004616:	d502      	bpl.n	800461e <_printf_float+0x1a2>
 8004618:	3301      	adds	r3, #1
 800461a:	440b      	add	r3, r1
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004620:	f04f 0900 	mov.w	r9, #0
 8004624:	e7de      	b.n	80045e4 <_printf_float+0x168>
 8004626:	b913      	cbnz	r3, 800462e <_printf_float+0x1b2>
 8004628:	6822      	ldr	r2, [r4, #0]
 800462a:	07d2      	lsls	r2, r2, #31
 800462c:	d501      	bpl.n	8004632 <_printf_float+0x1b6>
 800462e:	3302      	adds	r3, #2
 8004630:	e7f4      	b.n	800461c <_printf_float+0x1a0>
 8004632:	2301      	movs	r3, #1
 8004634:	e7f2      	b.n	800461c <_printf_float+0x1a0>
 8004636:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800463a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800463c:	4299      	cmp	r1, r3
 800463e:	db05      	blt.n	800464c <_printf_float+0x1d0>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	6121      	str	r1, [r4, #16]
 8004644:	07d8      	lsls	r0, r3, #31
 8004646:	d5ea      	bpl.n	800461e <_printf_float+0x1a2>
 8004648:	1c4b      	adds	r3, r1, #1
 800464a:	e7e7      	b.n	800461c <_printf_float+0x1a0>
 800464c:	2900      	cmp	r1, #0
 800464e:	bfd4      	ite	le
 8004650:	f1c1 0202 	rsble	r2, r1, #2
 8004654:	2201      	movgt	r2, #1
 8004656:	4413      	add	r3, r2
 8004658:	e7e0      	b.n	800461c <_printf_float+0x1a0>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	055a      	lsls	r2, r3, #21
 800465e:	d407      	bmi.n	8004670 <_printf_float+0x1f4>
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	4642      	mov	r2, r8
 8004664:	4631      	mov	r1, r6
 8004666:	4628      	mov	r0, r5
 8004668:	47b8      	blx	r7
 800466a:	3001      	adds	r0, #1
 800466c:	d12c      	bne.n	80046c8 <_printf_float+0x24c>
 800466e:	e764      	b.n	800453a <_printf_float+0xbe>
 8004670:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004674:	f240 80e0 	bls.w	8004838 <_printf_float+0x3bc>
 8004678:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800467c:	2200      	movs	r2, #0
 800467e:	2300      	movs	r3, #0
 8004680:	f7fc fa2c 	bl	8000adc <__aeabi_dcmpeq>
 8004684:	2800      	cmp	r0, #0
 8004686:	d034      	beq.n	80046f2 <_printf_float+0x276>
 8004688:	4a37      	ldr	r2, [pc, #220]	; (8004768 <_printf_float+0x2ec>)
 800468a:	2301      	movs	r3, #1
 800468c:	4631      	mov	r1, r6
 800468e:	4628      	mov	r0, r5
 8004690:	47b8      	blx	r7
 8004692:	3001      	adds	r0, #1
 8004694:	f43f af51 	beq.w	800453a <_printf_float+0xbe>
 8004698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800469c:	429a      	cmp	r2, r3
 800469e:	db02      	blt.n	80046a6 <_printf_float+0x22a>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	07d8      	lsls	r0, r3, #31
 80046a4:	d510      	bpl.n	80046c8 <_printf_float+0x24c>
 80046a6:	ee18 3a10 	vmov	r3, s16
 80046aa:	4652      	mov	r2, sl
 80046ac:	4631      	mov	r1, r6
 80046ae:	4628      	mov	r0, r5
 80046b0:	47b8      	blx	r7
 80046b2:	3001      	adds	r0, #1
 80046b4:	f43f af41 	beq.w	800453a <_printf_float+0xbe>
 80046b8:	f04f 0800 	mov.w	r8, #0
 80046bc:	f104 091a 	add.w	r9, r4, #26
 80046c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046c2:	3b01      	subs	r3, #1
 80046c4:	4543      	cmp	r3, r8
 80046c6:	dc09      	bgt.n	80046dc <_printf_float+0x260>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	079b      	lsls	r3, r3, #30
 80046cc:	f100 8107 	bmi.w	80048de <_printf_float+0x462>
 80046d0:	68e0      	ldr	r0, [r4, #12]
 80046d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046d4:	4298      	cmp	r0, r3
 80046d6:	bfb8      	it	lt
 80046d8:	4618      	movlt	r0, r3
 80046da:	e730      	b.n	800453e <_printf_float+0xc2>
 80046dc:	2301      	movs	r3, #1
 80046de:	464a      	mov	r2, r9
 80046e0:	4631      	mov	r1, r6
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b8      	blx	r7
 80046e6:	3001      	adds	r0, #1
 80046e8:	f43f af27 	beq.w	800453a <_printf_float+0xbe>
 80046ec:	f108 0801 	add.w	r8, r8, #1
 80046f0:	e7e6      	b.n	80046c0 <_printf_float+0x244>
 80046f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	dc39      	bgt.n	800476c <_printf_float+0x2f0>
 80046f8:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <_printf_float+0x2ec>)
 80046fa:	2301      	movs	r3, #1
 80046fc:	4631      	mov	r1, r6
 80046fe:	4628      	mov	r0, r5
 8004700:	47b8      	blx	r7
 8004702:	3001      	adds	r0, #1
 8004704:	f43f af19 	beq.w	800453a <_printf_float+0xbe>
 8004708:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800470c:	4313      	orrs	r3, r2
 800470e:	d102      	bne.n	8004716 <_printf_float+0x29a>
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	07d9      	lsls	r1, r3, #31
 8004714:	d5d8      	bpl.n	80046c8 <_printf_float+0x24c>
 8004716:	ee18 3a10 	vmov	r3, s16
 800471a:	4652      	mov	r2, sl
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	f43f af09 	beq.w	800453a <_printf_float+0xbe>
 8004728:	f04f 0900 	mov.w	r9, #0
 800472c:	f104 0a1a 	add.w	sl, r4, #26
 8004730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004732:	425b      	negs	r3, r3
 8004734:	454b      	cmp	r3, r9
 8004736:	dc01      	bgt.n	800473c <_printf_float+0x2c0>
 8004738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800473a:	e792      	b.n	8004662 <_printf_float+0x1e6>
 800473c:	2301      	movs	r3, #1
 800473e:	4652      	mov	r2, sl
 8004740:	4631      	mov	r1, r6
 8004742:	4628      	mov	r0, r5
 8004744:	47b8      	blx	r7
 8004746:	3001      	adds	r0, #1
 8004748:	f43f aef7 	beq.w	800453a <_printf_float+0xbe>
 800474c:	f109 0901 	add.w	r9, r9, #1
 8004750:	e7ee      	b.n	8004730 <_printf_float+0x2b4>
 8004752:	bf00      	nop
 8004754:	7fefffff 	.word	0x7fefffff
 8004758:	08008608 	.word	0x08008608
 800475c:	0800860c 	.word	0x0800860c
 8004760:	08008610 	.word	0x08008610
 8004764:	08008614 	.word	0x08008614
 8004768:	08008618 	.word	0x08008618
 800476c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800476e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004770:	429a      	cmp	r2, r3
 8004772:	bfa8      	it	ge
 8004774:	461a      	movge	r2, r3
 8004776:	2a00      	cmp	r2, #0
 8004778:	4691      	mov	r9, r2
 800477a:	dc37      	bgt.n	80047ec <_printf_float+0x370>
 800477c:	f04f 0b00 	mov.w	fp, #0
 8004780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004784:	f104 021a 	add.w	r2, r4, #26
 8004788:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800478a:	9305      	str	r3, [sp, #20]
 800478c:	eba3 0309 	sub.w	r3, r3, r9
 8004790:	455b      	cmp	r3, fp
 8004792:	dc33      	bgt.n	80047fc <_printf_float+0x380>
 8004794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004798:	429a      	cmp	r2, r3
 800479a:	db3b      	blt.n	8004814 <_printf_float+0x398>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	07da      	lsls	r2, r3, #31
 80047a0:	d438      	bmi.n	8004814 <_printf_float+0x398>
 80047a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80047a6:	eba2 0903 	sub.w	r9, r2, r3
 80047aa:	9b05      	ldr	r3, [sp, #20]
 80047ac:	1ad2      	subs	r2, r2, r3
 80047ae:	4591      	cmp	r9, r2
 80047b0:	bfa8      	it	ge
 80047b2:	4691      	movge	r9, r2
 80047b4:	f1b9 0f00 	cmp.w	r9, #0
 80047b8:	dc35      	bgt.n	8004826 <_printf_float+0x3aa>
 80047ba:	f04f 0800 	mov.w	r8, #0
 80047be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047c2:	f104 0a1a 	add.w	sl, r4, #26
 80047c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	eba3 0309 	sub.w	r3, r3, r9
 80047d0:	4543      	cmp	r3, r8
 80047d2:	f77f af79 	ble.w	80046c8 <_printf_float+0x24c>
 80047d6:	2301      	movs	r3, #1
 80047d8:	4652      	mov	r2, sl
 80047da:	4631      	mov	r1, r6
 80047dc:	4628      	mov	r0, r5
 80047de:	47b8      	blx	r7
 80047e0:	3001      	adds	r0, #1
 80047e2:	f43f aeaa 	beq.w	800453a <_printf_float+0xbe>
 80047e6:	f108 0801 	add.w	r8, r8, #1
 80047ea:	e7ec      	b.n	80047c6 <_printf_float+0x34a>
 80047ec:	4613      	mov	r3, r2
 80047ee:	4631      	mov	r1, r6
 80047f0:	4642      	mov	r2, r8
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b8      	blx	r7
 80047f6:	3001      	adds	r0, #1
 80047f8:	d1c0      	bne.n	800477c <_printf_float+0x300>
 80047fa:	e69e      	b.n	800453a <_printf_float+0xbe>
 80047fc:	2301      	movs	r3, #1
 80047fe:	4631      	mov	r1, r6
 8004800:	4628      	mov	r0, r5
 8004802:	9205      	str	r2, [sp, #20]
 8004804:	47b8      	blx	r7
 8004806:	3001      	adds	r0, #1
 8004808:	f43f ae97 	beq.w	800453a <_printf_float+0xbe>
 800480c:	9a05      	ldr	r2, [sp, #20]
 800480e:	f10b 0b01 	add.w	fp, fp, #1
 8004812:	e7b9      	b.n	8004788 <_printf_float+0x30c>
 8004814:	ee18 3a10 	vmov	r3, s16
 8004818:	4652      	mov	r2, sl
 800481a:	4631      	mov	r1, r6
 800481c:	4628      	mov	r0, r5
 800481e:	47b8      	blx	r7
 8004820:	3001      	adds	r0, #1
 8004822:	d1be      	bne.n	80047a2 <_printf_float+0x326>
 8004824:	e689      	b.n	800453a <_printf_float+0xbe>
 8004826:	9a05      	ldr	r2, [sp, #20]
 8004828:	464b      	mov	r3, r9
 800482a:	4442      	add	r2, r8
 800482c:	4631      	mov	r1, r6
 800482e:	4628      	mov	r0, r5
 8004830:	47b8      	blx	r7
 8004832:	3001      	adds	r0, #1
 8004834:	d1c1      	bne.n	80047ba <_printf_float+0x33e>
 8004836:	e680      	b.n	800453a <_printf_float+0xbe>
 8004838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800483a:	2a01      	cmp	r2, #1
 800483c:	dc01      	bgt.n	8004842 <_printf_float+0x3c6>
 800483e:	07db      	lsls	r3, r3, #31
 8004840:	d53a      	bpl.n	80048b8 <_printf_float+0x43c>
 8004842:	2301      	movs	r3, #1
 8004844:	4642      	mov	r2, r8
 8004846:	4631      	mov	r1, r6
 8004848:	4628      	mov	r0, r5
 800484a:	47b8      	blx	r7
 800484c:	3001      	adds	r0, #1
 800484e:	f43f ae74 	beq.w	800453a <_printf_float+0xbe>
 8004852:	ee18 3a10 	vmov	r3, s16
 8004856:	4652      	mov	r2, sl
 8004858:	4631      	mov	r1, r6
 800485a:	4628      	mov	r0, r5
 800485c:	47b8      	blx	r7
 800485e:	3001      	adds	r0, #1
 8004860:	f43f ae6b 	beq.w	800453a <_printf_float+0xbe>
 8004864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004868:	2200      	movs	r2, #0
 800486a:	2300      	movs	r3, #0
 800486c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004870:	f7fc f934 	bl	8000adc <__aeabi_dcmpeq>
 8004874:	b9d8      	cbnz	r0, 80048ae <_printf_float+0x432>
 8004876:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800487a:	f108 0201 	add.w	r2, r8, #1
 800487e:	4631      	mov	r1, r6
 8004880:	4628      	mov	r0, r5
 8004882:	47b8      	blx	r7
 8004884:	3001      	adds	r0, #1
 8004886:	d10e      	bne.n	80048a6 <_printf_float+0x42a>
 8004888:	e657      	b.n	800453a <_printf_float+0xbe>
 800488a:	2301      	movs	r3, #1
 800488c:	4652      	mov	r2, sl
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	47b8      	blx	r7
 8004894:	3001      	adds	r0, #1
 8004896:	f43f ae50 	beq.w	800453a <_printf_float+0xbe>
 800489a:	f108 0801 	add.w	r8, r8, #1
 800489e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a0:	3b01      	subs	r3, #1
 80048a2:	4543      	cmp	r3, r8
 80048a4:	dcf1      	bgt.n	800488a <_printf_float+0x40e>
 80048a6:	464b      	mov	r3, r9
 80048a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048ac:	e6da      	b.n	8004664 <_printf_float+0x1e8>
 80048ae:	f04f 0800 	mov.w	r8, #0
 80048b2:	f104 0a1a 	add.w	sl, r4, #26
 80048b6:	e7f2      	b.n	800489e <_printf_float+0x422>
 80048b8:	2301      	movs	r3, #1
 80048ba:	4642      	mov	r2, r8
 80048bc:	e7df      	b.n	800487e <_printf_float+0x402>
 80048be:	2301      	movs	r3, #1
 80048c0:	464a      	mov	r2, r9
 80048c2:	4631      	mov	r1, r6
 80048c4:	4628      	mov	r0, r5
 80048c6:	47b8      	blx	r7
 80048c8:	3001      	adds	r0, #1
 80048ca:	f43f ae36 	beq.w	800453a <_printf_float+0xbe>
 80048ce:	f108 0801 	add.w	r8, r8, #1
 80048d2:	68e3      	ldr	r3, [r4, #12]
 80048d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048d6:	1a5b      	subs	r3, r3, r1
 80048d8:	4543      	cmp	r3, r8
 80048da:	dcf0      	bgt.n	80048be <_printf_float+0x442>
 80048dc:	e6f8      	b.n	80046d0 <_printf_float+0x254>
 80048de:	f04f 0800 	mov.w	r8, #0
 80048e2:	f104 0919 	add.w	r9, r4, #25
 80048e6:	e7f4      	b.n	80048d2 <_printf_float+0x456>

080048e8 <_printf_common>:
 80048e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ec:	4616      	mov	r6, r2
 80048ee:	4699      	mov	r9, r3
 80048f0:	688a      	ldr	r2, [r1, #8]
 80048f2:	690b      	ldr	r3, [r1, #16]
 80048f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048f8:	4293      	cmp	r3, r2
 80048fa:	bfb8      	it	lt
 80048fc:	4613      	movlt	r3, r2
 80048fe:	6033      	str	r3, [r6, #0]
 8004900:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004904:	4607      	mov	r7, r0
 8004906:	460c      	mov	r4, r1
 8004908:	b10a      	cbz	r2, 800490e <_printf_common+0x26>
 800490a:	3301      	adds	r3, #1
 800490c:	6033      	str	r3, [r6, #0]
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	0699      	lsls	r1, r3, #26
 8004912:	bf42      	ittt	mi
 8004914:	6833      	ldrmi	r3, [r6, #0]
 8004916:	3302      	addmi	r3, #2
 8004918:	6033      	strmi	r3, [r6, #0]
 800491a:	6825      	ldr	r5, [r4, #0]
 800491c:	f015 0506 	ands.w	r5, r5, #6
 8004920:	d106      	bne.n	8004930 <_printf_common+0x48>
 8004922:	f104 0a19 	add.w	sl, r4, #25
 8004926:	68e3      	ldr	r3, [r4, #12]
 8004928:	6832      	ldr	r2, [r6, #0]
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	42ab      	cmp	r3, r5
 800492e:	dc26      	bgt.n	800497e <_printf_common+0x96>
 8004930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004934:	1e13      	subs	r3, r2, #0
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	bf18      	it	ne
 800493a:	2301      	movne	r3, #1
 800493c:	0692      	lsls	r2, r2, #26
 800493e:	d42b      	bmi.n	8004998 <_printf_common+0xb0>
 8004940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004944:	4649      	mov	r1, r9
 8004946:	4638      	mov	r0, r7
 8004948:	47c0      	blx	r8
 800494a:	3001      	adds	r0, #1
 800494c:	d01e      	beq.n	800498c <_printf_common+0xa4>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	6922      	ldr	r2, [r4, #16]
 8004952:	f003 0306 	and.w	r3, r3, #6
 8004956:	2b04      	cmp	r3, #4
 8004958:	bf02      	ittt	eq
 800495a:	68e5      	ldreq	r5, [r4, #12]
 800495c:	6833      	ldreq	r3, [r6, #0]
 800495e:	1aed      	subeq	r5, r5, r3
 8004960:	68a3      	ldr	r3, [r4, #8]
 8004962:	bf0c      	ite	eq
 8004964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004968:	2500      	movne	r5, #0
 800496a:	4293      	cmp	r3, r2
 800496c:	bfc4      	itt	gt
 800496e:	1a9b      	subgt	r3, r3, r2
 8004970:	18ed      	addgt	r5, r5, r3
 8004972:	2600      	movs	r6, #0
 8004974:	341a      	adds	r4, #26
 8004976:	42b5      	cmp	r5, r6
 8004978:	d11a      	bne.n	80049b0 <_printf_common+0xc8>
 800497a:	2000      	movs	r0, #0
 800497c:	e008      	b.n	8004990 <_printf_common+0xa8>
 800497e:	2301      	movs	r3, #1
 8004980:	4652      	mov	r2, sl
 8004982:	4649      	mov	r1, r9
 8004984:	4638      	mov	r0, r7
 8004986:	47c0      	blx	r8
 8004988:	3001      	adds	r0, #1
 800498a:	d103      	bne.n	8004994 <_printf_common+0xac>
 800498c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004994:	3501      	adds	r5, #1
 8004996:	e7c6      	b.n	8004926 <_printf_common+0x3e>
 8004998:	18e1      	adds	r1, r4, r3
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	2030      	movs	r0, #48	; 0x30
 800499e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049a2:	4422      	add	r2, r4
 80049a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049ac:	3302      	adds	r3, #2
 80049ae:	e7c7      	b.n	8004940 <_printf_common+0x58>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4622      	mov	r2, r4
 80049b4:	4649      	mov	r1, r9
 80049b6:	4638      	mov	r0, r7
 80049b8:	47c0      	blx	r8
 80049ba:	3001      	adds	r0, #1
 80049bc:	d0e6      	beq.n	800498c <_printf_common+0xa4>
 80049be:	3601      	adds	r6, #1
 80049c0:	e7d9      	b.n	8004976 <_printf_common+0x8e>
	...

080049c4 <_printf_i>:
 80049c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c8:	7e0f      	ldrb	r7, [r1, #24]
 80049ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049cc:	2f78      	cmp	r7, #120	; 0x78
 80049ce:	4691      	mov	r9, r2
 80049d0:	4680      	mov	r8, r0
 80049d2:	460c      	mov	r4, r1
 80049d4:	469a      	mov	sl, r3
 80049d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049da:	d807      	bhi.n	80049ec <_printf_i+0x28>
 80049dc:	2f62      	cmp	r7, #98	; 0x62
 80049de:	d80a      	bhi.n	80049f6 <_printf_i+0x32>
 80049e0:	2f00      	cmp	r7, #0
 80049e2:	f000 80d4 	beq.w	8004b8e <_printf_i+0x1ca>
 80049e6:	2f58      	cmp	r7, #88	; 0x58
 80049e8:	f000 80c0 	beq.w	8004b6c <_printf_i+0x1a8>
 80049ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049f4:	e03a      	b.n	8004a6c <_printf_i+0xa8>
 80049f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049fa:	2b15      	cmp	r3, #21
 80049fc:	d8f6      	bhi.n	80049ec <_printf_i+0x28>
 80049fe:	a101      	add	r1, pc, #4	; (adr r1, 8004a04 <_printf_i+0x40>)
 8004a00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a04:	08004a5d 	.word	0x08004a5d
 8004a08:	08004a71 	.word	0x08004a71
 8004a0c:	080049ed 	.word	0x080049ed
 8004a10:	080049ed 	.word	0x080049ed
 8004a14:	080049ed 	.word	0x080049ed
 8004a18:	080049ed 	.word	0x080049ed
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	080049ed 	.word	0x080049ed
 8004a24:	080049ed 	.word	0x080049ed
 8004a28:	080049ed 	.word	0x080049ed
 8004a2c:	080049ed 	.word	0x080049ed
 8004a30:	08004b75 	.word	0x08004b75
 8004a34:	08004a9d 	.word	0x08004a9d
 8004a38:	08004b2f 	.word	0x08004b2f
 8004a3c:	080049ed 	.word	0x080049ed
 8004a40:	080049ed 	.word	0x080049ed
 8004a44:	08004b97 	.word	0x08004b97
 8004a48:	080049ed 	.word	0x080049ed
 8004a4c:	08004a9d 	.word	0x08004a9d
 8004a50:	080049ed 	.word	0x080049ed
 8004a54:	080049ed 	.word	0x080049ed
 8004a58:	08004b37 	.word	0x08004b37
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	1d1a      	adds	r2, r3, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	602a      	str	r2, [r5, #0]
 8004a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e09f      	b.n	8004bb0 <_printf_i+0x1ec>
 8004a70:	6820      	ldr	r0, [r4, #0]
 8004a72:	682b      	ldr	r3, [r5, #0]
 8004a74:	0607      	lsls	r7, r0, #24
 8004a76:	f103 0104 	add.w	r1, r3, #4
 8004a7a:	6029      	str	r1, [r5, #0]
 8004a7c:	d501      	bpl.n	8004a82 <_printf_i+0xbe>
 8004a7e:	681e      	ldr	r6, [r3, #0]
 8004a80:	e003      	b.n	8004a8a <_printf_i+0xc6>
 8004a82:	0646      	lsls	r6, r0, #25
 8004a84:	d5fb      	bpl.n	8004a7e <_printf_i+0xba>
 8004a86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a8a:	2e00      	cmp	r6, #0
 8004a8c:	da03      	bge.n	8004a96 <_printf_i+0xd2>
 8004a8e:	232d      	movs	r3, #45	; 0x2d
 8004a90:	4276      	negs	r6, r6
 8004a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a96:	485a      	ldr	r0, [pc, #360]	; (8004c00 <_printf_i+0x23c>)
 8004a98:	230a      	movs	r3, #10
 8004a9a:	e012      	b.n	8004ac2 <_printf_i+0xfe>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	6820      	ldr	r0, [r4, #0]
 8004aa0:	1d19      	adds	r1, r3, #4
 8004aa2:	6029      	str	r1, [r5, #0]
 8004aa4:	0605      	lsls	r5, r0, #24
 8004aa6:	d501      	bpl.n	8004aac <_printf_i+0xe8>
 8004aa8:	681e      	ldr	r6, [r3, #0]
 8004aaa:	e002      	b.n	8004ab2 <_printf_i+0xee>
 8004aac:	0641      	lsls	r1, r0, #25
 8004aae:	d5fb      	bpl.n	8004aa8 <_printf_i+0xe4>
 8004ab0:	881e      	ldrh	r6, [r3, #0]
 8004ab2:	4853      	ldr	r0, [pc, #332]	; (8004c00 <_printf_i+0x23c>)
 8004ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2308      	moveq	r3, #8
 8004aba:	230a      	movne	r3, #10
 8004abc:	2100      	movs	r1, #0
 8004abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ac2:	6865      	ldr	r5, [r4, #4]
 8004ac4:	60a5      	str	r5, [r4, #8]
 8004ac6:	2d00      	cmp	r5, #0
 8004ac8:	bfa2      	ittt	ge
 8004aca:	6821      	ldrge	r1, [r4, #0]
 8004acc:	f021 0104 	bicge.w	r1, r1, #4
 8004ad0:	6021      	strge	r1, [r4, #0]
 8004ad2:	b90e      	cbnz	r6, 8004ad8 <_printf_i+0x114>
 8004ad4:	2d00      	cmp	r5, #0
 8004ad6:	d04b      	beq.n	8004b70 <_printf_i+0x1ac>
 8004ad8:	4615      	mov	r5, r2
 8004ada:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ade:	fb03 6711 	mls	r7, r3, r1, r6
 8004ae2:	5dc7      	ldrb	r7, [r0, r7]
 8004ae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ae8:	4637      	mov	r7, r6
 8004aea:	42bb      	cmp	r3, r7
 8004aec:	460e      	mov	r6, r1
 8004aee:	d9f4      	bls.n	8004ada <_printf_i+0x116>
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d10b      	bne.n	8004b0c <_printf_i+0x148>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	07de      	lsls	r6, r3, #31
 8004af8:	d508      	bpl.n	8004b0c <_printf_i+0x148>
 8004afa:	6923      	ldr	r3, [r4, #16]
 8004afc:	6861      	ldr	r1, [r4, #4]
 8004afe:	4299      	cmp	r1, r3
 8004b00:	bfde      	ittt	le
 8004b02:	2330      	movle	r3, #48	; 0x30
 8004b04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b0c:	1b52      	subs	r2, r2, r5
 8004b0e:	6122      	str	r2, [r4, #16]
 8004b10:	f8cd a000 	str.w	sl, [sp]
 8004b14:	464b      	mov	r3, r9
 8004b16:	aa03      	add	r2, sp, #12
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f7ff fee4 	bl	80048e8 <_printf_common>
 8004b20:	3001      	adds	r0, #1
 8004b22:	d14a      	bne.n	8004bba <_printf_i+0x1f6>
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b28:	b004      	add	sp, #16
 8004b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	f043 0320 	orr.w	r3, r3, #32
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	4833      	ldr	r0, [pc, #204]	; (8004c04 <_printf_i+0x240>)
 8004b38:	2778      	movs	r7, #120	; 0x78
 8004b3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	6829      	ldr	r1, [r5, #0]
 8004b42:	061f      	lsls	r7, r3, #24
 8004b44:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b48:	d402      	bmi.n	8004b50 <_printf_i+0x18c>
 8004b4a:	065f      	lsls	r7, r3, #25
 8004b4c:	bf48      	it	mi
 8004b4e:	b2b6      	uxthmi	r6, r6
 8004b50:	07df      	lsls	r7, r3, #31
 8004b52:	bf48      	it	mi
 8004b54:	f043 0320 	orrmi.w	r3, r3, #32
 8004b58:	6029      	str	r1, [r5, #0]
 8004b5a:	bf48      	it	mi
 8004b5c:	6023      	strmi	r3, [r4, #0]
 8004b5e:	b91e      	cbnz	r6, 8004b68 <_printf_i+0x1a4>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	f023 0320 	bic.w	r3, r3, #32
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	2310      	movs	r3, #16
 8004b6a:	e7a7      	b.n	8004abc <_printf_i+0xf8>
 8004b6c:	4824      	ldr	r0, [pc, #144]	; (8004c00 <_printf_i+0x23c>)
 8004b6e:	e7e4      	b.n	8004b3a <_printf_i+0x176>
 8004b70:	4615      	mov	r5, r2
 8004b72:	e7bd      	b.n	8004af0 <_printf_i+0x12c>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	6826      	ldr	r6, [r4, #0]
 8004b78:	6961      	ldr	r1, [r4, #20]
 8004b7a:	1d18      	adds	r0, r3, #4
 8004b7c:	6028      	str	r0, [r5, #0]
 8004b7e:	0635      	lsls	r5, r6, #24
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	d501      	bpl.n	8004b88 <_printf_i+0x1c4>
 8004b84:	6019      	str	r1, [r3, #0]
 8004b86:	e002      	b.n	8004b8e <_printf_i+0x1ca>
 8004b88:	0670      	lsls	r0, r6, #25
 8004b8a:	d5fb      	bpl.n	8004b84 <_printf_i+0x1c0>
 8004b8c:	8019      	strh	r1, [r3, #0]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	6123      	str	r3, [r4, #16]
 8004b92:	4615      	mov	r5, r2
 8004b94:	e7bc      	b.n	8004b10 <_printf_i+0x14c>
 8004b96:	682b      	ldr	r3, [r5, #0]
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	602a      	str	r2, [r5, #0]
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	6862      	ldr	r2, [r4, #4]
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f7fb fb14 	bl	80001d0 <memchr>
 8004ba8:	b108      	cbz	r0, 8004bae <_printf_i+0x1ea>
 8004baa:	1b40      	subs	r0, r0, r5
 8004bac:	6060      	str	r0, [r4, #4]
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	6123      	str	r3, [r4, #16]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb8:	e7aa      	b.n	8004b10 <_printf_i+0x14c>
 8004bba:	6923      	ldr	r3, [r4, #16]
 8004bbc:	462a      	mov	r2, r5
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	47d0      	blx	sl
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d0ad      	beq.n	8004b24 <_printf_i+0x160>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	079b      	lsls	r3, r3, #30
 8004bcc:	d413      	bmi.n	8004bf6 <_printf_i+0x232>
 8004bce:	68e0      	ldr	r0, [r4, #12]
 8004bd0:	9b03      	ldr	r3, [sp, #12]
 8004bd2:	4298      	cmp	r0, r3
 8004bd4:	bfb8      	it	lt
 8004bd6:	4618      	movlt	r0, r3
 8004bd8:	e7a6      	b.n	8004b28 <_printf_i+0x164>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4632      	mov	r2, r6
 8004bde:	4649      	mov	r1, r9
 8004be0:	4640      	mov	r0, r8
 8004be2:	47d0      	blx	sl
 8004be4:	3001      	adds	r0, #1
 8004be6:	d09d      	beq.n	8004b24 <_printf_i+0x160>
 8004be8:	3501      	adds	r5, #1
 8004bea:	68e3      	ldr	r3, [r4, #12]
 8004bec:	9903      	ldr	r1, [sp, #12]
 8004bee:	1a5b      	subs	r3, r3, r1
 8004bf0:	42ab      	cmp	r3, r5
 8004bf2:	dcf2      	bgt.n	8004bda <_printf_i+0x216>
 8004bf4:	e7eb      	b.n	8004bce <_printf_i+0x20a>
 8004bf6:	2500      	movs	r5, #0
 8004bf8:	f104 0619 	add.w	r6, r4, #25
 8004bfc:	e7f5      	b.n	8004bea <_printf_i+0x226>
 8004bfe:	bf00      	nop
 8004c00:	0800861a 	.word	0x0800861a
 8004c04:	0800862b 	.word	0x0800862b

08004c08 <std>:
 8004c08:	2300      	movs	r3, #0
 8004c0a:	b510      	push	{r4, lr}
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c16:	6083      	str	r3, [r0, #8]
 8004c18:	8181      	strh	r1, [r0, #12]
 8004c1a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c1c:	81c2      	strh	r2, [r0, #14]
 8004c1e:	6183      	str	r3, [r0, #24]
 8004c20:	4619      	mov	r1, r3
 8004c22:	2208      	movs	r2, #8
 8004c24:	305c      	adds	r0, #92	; 0x5c
 8004c26:	f001 f80b 	bl	8005c40 <memset>
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <std+0x58>)
 8004c2c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <std+0x5c>)
 8004c30:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <std+0x60>)
 8004c34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c36:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <std+0x64>)
 8004c38:	6323      	str	r3, [r4, #48]	; 0x30
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <std+0x68>)
 8004c3c:	6224      	str	r4, [r4, #32]
 8004c3e:	429c      	cmp	r4, r3
 8004c40:	d006      	beq.n	8004c50 <std+0x48>
 8004c42:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c46:	4294      	cmp	r4, r2
 8004c48:	d002      	beq.n	8004c50 <std+0x48>
 8004c4a:	33d0      	adds	r3, #208	; 0xd0
 8004c4c:	429c      	cmp	r4, r3
 8004c4e:	d105      	bne.n	8004c5c <std+0x54>
 8004c50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c58:	f001 b828 	b.w	8005cac <__retarget_lock_init_recursive>
 8004c5c:	bd10      	pop	{r4, pc}
 8004c5e:	bf00      	nop
 8004c60:	0800803b 	.word	0x0800803b
 8004c64:	0800805d 	.word	0x0800805d
 8004c68:	08008095 	.word	0x08008095
 8004c6c:	080080b9 	.word	0x080080b9
 8004c70:	20000528 	.word	0x20000528

08004c74 <stdio_exit_handler>:
 8004c74:	4a02      	ldr	r2, [pc, #8]	; (8004c80 <stdio_exit_handler+0xc>)
 8004c76:	4903      	ldr	r1, [pc, #12]	; (8004c84 <stdio_exit_handler+0x10>)
 8004c78:	4803      	ldr	r0, [pc, #12]	; (8004c88 <stdio_exit_handler+0x14>)
 8004c7a:	f000 bee7 	b.w	8005a4c <_fwalk_sglue>
 8004c7e:	bf00      	nop
 8004c80:	2000000c 	.word	0x2000000c
 8004c84:	08007679 	.word	0x08007679
 8004c88:	20000184 	.word	0x20000184

08004c8c <cleanup_stdio>:
 8004c8c:	6841      	ldr	r1, [r0, #4]
 8004c8e:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <cleanup_stdio+0x34>)
 8004c90:	4299      	cmp	r1, r3
 8004c92:	b510      	push	{r4, lr}
 8004c94:	4604      	mov	r4, r0
 8004c96:	d001      	beq.n	8004c9c <cleanup_stdio+0x10>
 8004c98:	f002 fcee 	bl	8007678 <_fflush_r>
 8004c9c:	68a1      	ldr	r1, [r4, #8]
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <cleanup_stdio+0x38>)
 8004ca0:	4299      	cmp	r1, r3
 8004ca2:	d002      	beq.n	8004caa <cleanup_stdio+0x1e>
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f002 fce7 	bl	8007678 <_fflush_r>
 8004caa:	68e1      	ldr	r1, [r4, #12]
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <cleanup_stdio+0x3c>)
 8004cae:	4299      	cmp	r1, r3
 8004cb0:	d004      	beq.n	8004cbc <cleanup_stdio+0x30>
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb8:	f002 bcde 	b.w	8007678 <_fflush_r>
 8004cbc:	bd10      	pop	{r4, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000528 	.word	0x20000528
 8004cc4:	20000590 	.word	0x20000590
 8004cc8:	200005f8 	.word	0x200005f8

08004ccc <global_stdio_init.part.0>:
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <global_stdio_init.part.0+0x30>)
 8004cd0:	4c0b      	ldr	r4, [pc, #44]	; (8004d00 <global_stdio_init.part.0+0x34>)
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <global_stdio_init.part.0+0x38>)
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2104      	movs	r1, #4
 8004cdc:	f7ff ff94 	bl	8004c08 <std>
 8004ce0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	2109      	movs	r1, #9
 8004ce8:	f7ff ff8e 	bl	8004c08 <std>
 8004cec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf6:	2112      	movs	r1, #18
 8004cf8:	f7ff bf86 	b.w	8004c08 <std>
 8004cfc:	20000660 	.word	0x20000660
 8004d00:	20000528 	.word	0x20000528
 8004d04:	08004c75 	.word	0x08004c75

08004d08 <__sfp_lock_acquire>:
 8004d08:	4801      	ldr	r0, [pc, #4]	; (8004d10 <__sfp_lock_acquire+0x8>)
 8004d0a:	f000 bfd0 	b.w	8005cae <__retarget_lock_acquire_recursive>
 8004d0e:	bf00      	nop
 8004d10:	20000665 	.word	0x20000665

08004d14 <__sfp_lock_release>:
 8004d14:	4801      	ldr	r0, [pc, #4]	; (8004d1c <__sfp_lock_release+0x8>)
 8004d16:	f000 bfcb 	b.w	8005cb0 <__retarget_lock_release_recursive>
 8004d1a:	bf00      	nop
 8004d1c:	20000665 	.word	0x20000665

08004d20 <__sinit>:
 8004d20:	b510      	push	{r4, lr}
 8004d22:	4604      	mov	r4, r0
 8004d24:	f7ff fff0 	bl	8004d08 <__sfp_lock_acquire>
 8004d28:	6a23      	ldr	r3, [r4, #32]
 8004d2a:	b11b      	cbz	r3, 8004d34 <__sinit+0x14>
 8004d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d30:	f7ff bff0 	b.w	8004d14 <__sfp_lock_release>
 8004d34:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <__sinit+0x28>)
 8004d36:	6223      	str	r3, [r4, #32]
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <__sinit+0x2c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f5      	bne.n	8004d2c <__sinit+0xc>
 8004d40:	f7ff ffc4 	bl	8004ccc <global_stdio_init.part.0>
 8004d44:	e7f2      	b.n	8004d2c <__sinit+0xc>
 8004d46:	bf00      	nop
 8004d48:	08004c8d 	.word	0x08004c8d
 8004d4c:	20000660 	.word	0x20000660

08004d50 <sulp>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	4604      	mov	r4, r0
 8004d54:	460d      	mov	r5, r1
 8004d56:	ec45 4b10 	vmov	d0, r4, r5
 8004d5a:	4616      	mov	r6, r2
 8004d5c:	f003 f82c 	bl	8007db8 <__ulp>
 8004d60:	ec51 0b10 	vmov	r0, r1, d0
 8004d64:	b17e      	cbz	r6, 8004d86 <sulp+0x36>
 8004d66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004d6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	dd09      	ble.n	8004d86 <sulp+0x36>
 8004d72:	051b      	lsls	r3, r3, #20
 8004d74:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004d78:	2400      	movs	r4, #0
 8004d7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004d7e:	4622      	mov	r2, r4
 8004d80:	462b      	mov	r3, r5
 8004d82:	f7fb fc43 	bl	800060c <__aeabi_dmul>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}

08004d88 <_strtod_l>:
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	ed2d 8b02 	vpush	{d8}
 8004d90:	b09b      	sub	sp, #108	; 0x6c
 8004d92:	4604      	mov	r4, r0
 8004d94:	9213      	str	r2, [sp, #76]	; 0x4c
 8004d96:	2200      	movs	r2, #0
 8004d98:	9216      	str	r2, [sp, #88]	; 0x58
 8004d9a:	460d      	mov	r5, r1
 8004d9c:	f04f 0800 	mov.w	r8, #0
 8004da0:	f04f 0900 	mov.w	r9, #0
 8004da4:	460a      	mov	r2, r1
 8004da6:	9215      	str	r2, [sp, #84]	; 0x54
 8004da8:	7811      	ldrb	r1, [r2, #0]
 8004daa:	292b      	cmp	r1, #43	; 0x2b
 8004dac:	d04c      	beq.n	8004e48 <_strtod_l+0xc0>
 8004dae:	d83a      	bhi.n	8004e26 <_strtod_l+0x9e>
 8004db0:	290d      	cmp	r1, #13
 8004db2:	d834      	bhi.n	8004e1e <_strtod_l+0x96>
 8004db4:	2908      	cmp	r1, #8
 8004db6:	d834      	bhi.n	8004e22 <_strtod_l+0x9a>
 8004db8:	2900      	cmp	r1, #0
 8004dba:	d03d      	beq.n	8004e38 <_strtod_l+0xb0>
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	920a      	str	r2, [sp, #40]	; 0x28
 8004dc0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004dc2:	7832      	ldrb	r2, [r6, #0]
 8004dc4:	2a30      	cmp	r2, #48	; 0x30
 8004dc6:	f040 80b4 	bne.w	8004f32 <_strtod_l+0x1aa>
 8004dca:	7872      	ldrb	r2, [r6, #1]
 8004dcc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004dd0:	2a58      	cmp	r2, #88	; 0x58
 8004dd2:	d170      	bne.n	8004eb6 <_strtod_l+0x12e>
 8004dd4:	9302      	str	r3, [sp, #8]
 8004dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	ab16      	add	r3, sp, #88	; 0x58
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	4a8e      	ldr	r2, [pc, #568]	; (8005018 <_strtod_l+0x290>)
 8004de0:	ab17      	add	r3, sp, #92	; 0x5c
 8004de2:	a915      	add	r1, sp, #84	; 0x54
 8004de4:	4620      	mov	r0, r4
 8004de6:	f001 fed5 	bl	8006b94 <__gethex>
 8004dea:	f010 070f 	ands.w	r7, r0, #15
 8004dee:	4605      	mov	r5, r0
 8004df0:	d005      	beq.n	8004dfe <_strtod_l+0x76>
 8004df2:	2f06      	cmp	r7, #6
 8004df4:	d12a      	bne.n	8004e4c <_strtod_l+0xc4>
 8004df6:	3601      	adds	r6, #1
 8004df8:	2300      	movs	r3, #0
 8004dfa:	9615      	str	r6, [sp, #84]	; 0x54
 8004dfc:	930a      	str	r3, [sp, #40]	; 0x28
 8004dfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f040 857f 	bne.w	8005904 <_strtod_l+0xb7c>
 8004e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e08:	b1db      	cbz	r3, 8004e42 <_strtod_l+0xba>
 8004e0a:	4642      	mov	r2, r8
 8004e0c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004e10:	ec43 2b10 	vmov	d0, r2, r3
 8004e14:	b01b      	add	sp, #108	; 0x6c
 8004e16:	ecbd 8b02 	vpop	{d8}
 8004e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1e:	2920      	cmp	r1, #32
 8004e20:	d1cc      	bne.n	8004dbc <_strtod_l+0x34>
 8004e22:	3201      	adds	r2, #1
 8004e24:	e7bf      	b.n	8004da6 <_strtod_l+0x1e>
 8004e26:	292d      	cmp	r1, #45	; 0x2d
 8004e28:	d1c8      	bne.n	8004dbc <_strtod_l+0x34>
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	910a      	str	r1, [sp, #40]	; 0x28
 8004e2e:	1c51      	adds	r1, r2, #1
 8004e30:	9115      	str	r1, [sp, #84]	; 0x54
 8004e32:	7852      	ldrb	r2, [r2, #1]
 8004e34:	2a00      	cmp	r2, #0
 8004e36:	d1c3      	bne.n	8004dc0 <_strtod_l+0x38>
 8004e38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e3a:	9515      	str	r5, [sp, #84]	; 0x54
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f040 855f 	bne.w	8005900 <_strtod_l+0xb78>
 8004e42:	4642      	mov	r2, r8
 8004e44:	464b      	mov	r3, r9
 8004e46:	e7e3      	b.n	8004e10 <_strtod_l+0x88>
 8004e48:	2100      	movs	r1, #0
 8004e4a:	e7ef      	b.n	8004e2c <_strtod_l+0xa4>
 8004e4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004e4e:	b13a      	cbz	r2, 8004e60 <_strtod_l+0xd8>
 8004e50:	2135      	movs	r1, #53	; 0x35
 8004e52:	a818      	add	r0, sp, #96	; 0x60
 8004e54:	f003 f8ad 	bl	8007fb2 <__copybits>
 8004e58:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f002 fc80 	bl	8007760 <_Bfree>
 8004e60:	3f01      	subs	r7, #1
 8004e62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e64:	2f04      	cmp	r7, #4
 8004e66:	d806      	bhi.n	8004e76 <_strtod_l+0xee>
 8004e68:	e8df f007 	tbb	[pc, r7]
 8004e6c:	201d0314 	.word	0x201d0314
 8004e70:	14          	.byte	0x14
 8004e71:	00          	.byte	0x00
 8004e72:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8004e76:	05e9      	lsls	r1, r5, #23
 8004e78:	bf48      	it	mi
 8004e7a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8004e7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e82:	0d1b      	lsrs	r3, r3, #20
 8004e84:	051b      	lsls	r3, r3, #20
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1b9      	bne.n	8004dfe <_strtod_l+0x76>
 8004e8a:	f000 fee5 	bl	8005c58 <__errno>
 8004e8e:	2322      	movs	r3, #34	; 0x22
 8004e90:	6003      	str	r3, [r0, #0]
 8004e92:	e7b4      	b.n	8004dfe <_strtod_l+0x76>
 8004e94:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8004e98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004e9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ea0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004ea4:	e7e7      	b.n	8004e76 <_strtod_l+0xee>
 8004ea6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005020 <_strtod_l+0x298>
 8004eaa:	e7e4      	b.n	8004e76 <_strtod_l+0xee>
 8004eac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004eb0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004eb4:	e7df      	b.n	8004e76 <_strtod_l+0xee>
 8004eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	9215      	str	r2, [sp, #84]	; 0x54
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	2b30      	cmp	r3, #48	; 0x30
 8004ec0:	d0f9      	beq.n	8004eb6 <_strtod_l+0x12e>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d09b      	beq.n	8004dfe <_strtod_l+0x76>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f04f 0a00 	mov.w	sl, #0
 8004ecc:	9304      	str	r3, [sp, #16]
 8004ece:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ed2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004ed6:	46d3      	mov	fp, sl
 8004ed8:	220a      	movs	r2, #10
 8004eda:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004edc:	7806      	ldrb	r6, [r0, #0]
 8004ede:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004ee2:	b2d9      	uxtb	r1, r3
 8004ee4:	2909      	cmp	r1, #9
 8004ee6:	d926      	bls.n	8004f36 <_strtod_l+0x1ae>
 8004ee8:	494c      	ldr	r1, [pc, #304]	; (800501c <_strtod_l+0x294>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	f000 fe3a 	bl	8005b64 <strncmp>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d030      	beq.n	8004f56 <_strtod_l+0x1ce>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	4632      	mov	r2, r6
 8004ef8:	9005      	str	r0, [sp, #20]
 8004efa:	465e      	mov	r6, fp
 8004efc:	4603      	mov	r3, r0
 8004efe:	2a65      	cmp	r2, #101	; 0x65
 8004f00:	d001      	beq.n	8004f06 <_strtod_l+0x17e>
 8004f02:	2a45      	cmp	r2, #69	; 0x45
 8004f04:	d113      	bne.n	8004f2e <_strtod_l+0x1a6>
 8004f06:	b91e      	cbnz	r6, 8004f10 <_strtod_l+0x188>
 8004f08:	9a04      	ldr	r2, [sp, #16]
 8004f0a:	4302      	orrs	r2, r0
 8004f0c:	d094      	beq.n	8004e38 <_strtod_l+0xb0>
 8004f0e:	2600      	movs	r6, #0
 8004f10:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004f12:	1c6a      	adds	r2, r5, #1
 8004f14:	9215      	str	r2, [sp, #84]	; 0x54
 8004f16:	786a      	ldrb	r2, [r5, #1]
 8004f18:	2a2b      	cmp	r2, #43	; 0x2b
 8004f1a:	d074      	beq.n	8005006 <_strtod_l+0x27e>
 8004f1c:	2a2d      	cmp	r2, #45	; 0x2d
 8004f1e:	d078      	beq.n	8005012 <_strtod_l+0x28a>
 8004f20:	f04f 0c00 	mov.w	ip, #0
 8004f24:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004f28:	2909      	cmp	r1, #9
 8004f2a:	d97f      	bls.n	800502c <_strtod_l+0x2a4>
 8004f2c:	9515      	str	r5, [sp, #84]	; 0x54
 8004f2e:	2700      	movs	r7, #0
 8004f30:	e09e      	b.n	8005070 <_strtod_l+0x2e8>
 8004f32:	2300      	movs	r3, #0
 8004f34:	e7c8      	b.n	8004ec8 <_strtod_l+0x140>
 8004f36:	f1bb 0f08 	cmp.w	fp, #8
 8004f3a:	bfd8      	it	le
 8004f3c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004f3e:	f100 0001 	add.w	r0, r0, #1
 8004f42:	bfda      	itte	le
 8004f44:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f48:	9309      	strle	r3, [sp, #36]	; 0x24
 8004f4a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8004f4e:	f10b 0b01 	add.w	fp, fp, #1
 8004f52:	9015      	str	r0, [sp, #84]	; 0x54
 8004f54:	e7c1      	b.n	8004eda <_strtod_l+0x152>
 8004f56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	9215      	str	r2, [sp, #84]	; 0x54
 8004f5c:	785a      	ldrb	r2, [r3, #1]
 8004f5e:	f1bb 0f00 	cmp.w	fp, #0
 8004f62:	d037      	beq.n	8004fd4 <_strtod_l+0x24c>
 8004f64:	9005      	str	r0, [sp, #20]
 8004f66:	465e      	mov	r6, fp
 8004f68:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004f6c:	2b09      	cmp	r3, #9
 8004f6e:	d912      	bls.n	8004f96 <_strtod_l+0x20e>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e7c4      	b.n	8004efe <_strtod_l+0x176>
 8004f74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	9215      	str	r2, [sp, #84]	; 0x54
 8004f7a:	785a      	ldrb	r2, [r3, #1]
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	2a30      	cmp	r2, #48	; 0x30
 8004f80:	d0f8      	beq.n	8004f74 <_strtod_l+0x1ec>
 8004f82:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	f200 84c1 	bhi.w	800590e <_strtod_l+0xb86>
 8004f8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f8e:	9005      	str	r0, [sp, #20]
 8004f90:	2000      	movs	r0, #0
 8004f92:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f94:	4606      	mov	r6, r0
 8004f96:	3a30      	subs	r2, #48	; 0x30
 8004f98:	f100 0301 	add.w	r3, r0, #1
 8004f9c:	d014      	beq.n	8004fc8 <_strtod_l+0x240>
 8004f9e:	9905      	ldr	r1, [sp, #20]
 8004fa0:	4419      	add	r1, r3
 8004fa2:	9105      	str	r1, [sp, #20]
 8004fa4:	4633      	mov	r3, r6
 8004fa6:	eb00 0c06 	add.w	ip, r0, r6
 8004faa:	210a      	movs	r1, #10
 8004fac:	4563      	cmp	r3, ip
 8004fae:	d113      	bne.n	8004fd8 <_strtod_l+0x250>
 8004fb0:	1833      	adds	r3, r6, r0
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	f106 0601 	add.w	r6, r6, #1
 8004fb8:	4406      	add	r6, r0
 8004fba:	dc1a      	bgt.n	8004ff2 <_strtod_l+0x26a>
 8004fbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fbe:	230a      	movs	r3, #10
 8004fc0:	fb03 2301 	mla	r3, r3, r1, r2
 8004fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004fca:	1c51      	adds	r1, r2, #1
 8004fcc:	9115      	str	r1, [sp, #84]	; 0x54
 8004fce:	7852      	ldrb	r2, [r2, #1]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	e7c9      	b.n	8004f68 <_strtod_l+0x1e0>
 8004fd4:	4658      	mov	r0, fp
 8004fd6:	e7d2      	b.n	8004f7e <_strtod_l+0x1f6>
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	f103 0301 	add.w	r3, r3, #1
 8004fde:	dc03      	bgt.n	8004fe8 <_strtod_l+0x260>
 8004fe0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004fe2:	434f      	muls	r7, r1
 8004fe4:	9709      	str	r7, [sp, #36]	; 0x24
 8004fe6:	e7e1      	b.n	8004fac <_strtod_l+0x224>
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	bfd8      	it	le
 8004fec:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004ff0:	e7dc      	b.n	8004fac <_strtod_l+0x224>
 8004ff2:	2e10      	cmp	r6, #16
 8004ff4:	bfdc      	itt	le
 8004ff6:	230a      	movle	r3, #10
 8004ff8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8004ffc:	e7e3      	b.n	8004fc6 <_strtod_l+0x23e>
 8004ffe:	2300      	movs	r3, #0
 8005000:	9305      	str	r3, [sp, #20]
 8005002:	2301      	movs	r3, #1
 8005004:	e780      	b.n	8004f08 <_strtod_l+0x180>
 8005006:	f04f 0c00 	mov.w	ip, #0
 800500a:	1caa      	adds	r2, r5, #2
 800500c:	9215      	str	r2, [sp, #84]	; 0x54
 800500e:	78aa      	ldrb	r2, [r5, #2]
 8005010:	e788      	b.n	8004f24 <_strtod_l+0x19c>
 8005012:	f04f 0c01 	mov.w	ip, #1
 8005016:	e7f8      	b.n	800500a <_strtod_l+0x282>
 8005018:	08008640 	.word	0x08008640
 800501c:	0800863c 	.word	0x0800863c
 8005020:	7ff00000 	.word	0x7ff00000
 8005024:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005026:	1c51      	adds	r1, r2, #1
 8005028:	9115      	str	r1, [sp, #84]	; 0x54
 800502a:	7852      	ldrb	r2, [r2, #1]
 800502c:	2a30      	cmp	r2, #48	; 0x30
 800502e:	d0f9      	beq.n	8005024 <_strtod_l+0x29c>
 8005030:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005034:	2908      	cmp	r1, #8
 8005036:	f63f af7a 	bhi.w	8004f2e <_strtod_l+0x1a6>
 800503a:	3a30      	subs	r2, #48	; 0x30
 800503c:	9208      	str	r2, [sp, #32]
 800503e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005040:	920c      	str	r2, [sp, #48]	; 0x30
 8005042:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005044:	1c57      	adds	r7, r2, #1
 8005046:	9715      	str	r7, [sp, #84]	; 0x54
 8005048:	7852      	ldrb	r2, [r2, #1]
 800504a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800504e:	f1be 0f09 	cmp.w	lr, #9
 8005052:	d938      	bls.n	80050c6 <_strtod_l+0x33e>
 8005054:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005056:	1a7f      	subs	r7, r7, r1
 8005058:	2f08      	cmp	r7, #8
 800505a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800505e:	dc03      	bgt.n	8005068 <_strtod_l+0x2e0>
 8005060:	9908      	ldr	r1, [sp, #32]
 8005062:	428f      	cmp	r7, r1
 8005064:	bfa8      	it	ge
 8005066:	460f      	movge	r7, r1
 8005068:	f1bc 0f00 	cmp.w	ip, #0
 800506c:	d000      	beq.n	8005070 <_strtod_l+0x2e8>
 800506e:	427f      	negs	r7, r7
 8005070:	2e00      	cmp	r6, #0
 8005072:	d14f      	bne.n	8005114 <_strtod_l+0x38c>
 8005074:	9904      	ldr	r1, [sp, #16]
 8005076:	4301      	orrs	r1, r0
 8005078:	f47f aec1 	bne.w	8004dfe <_strtod_l+0x76>
 800507c:	2b00      	cmp	r3, #0
 800507e:	f47f aedb 	bne.w	8004e38 <_strtod_l+0xb0>
 8005082:	2a69      	cmp	r2, #105	; 0x69
 8005084:	d029      	beq.n	80050da <_strtod_l+0x352>
 8005086:	dc26      	bgt.n	80050d6 <_strtod_l+0x34e>
 8005088:	2a49      	cmp	r2, #73	; 0x49
 800508a:	d026      	beq.n	80050da <_strtod_l+0x352>
 800508c:	2a4e      	cmp	r2, #78	; 0x4e
 800508e:	f47f aed3 	bne.w	8004e38 <_strtod_l+0xb0>
 8005092:	499b      	ldr	r1, [pc, #620]	; (8005300 <_strtod_l+0x578>)
 8005094:	a815      	add	r0, sp, #84	; 0x54
 8005096:	f001 ffbd 	bl	8007014 <__match>
 800509a:	2800      	cmp	r0, #0
 800509c:	f43f aecc 	beq.w	8004e38 <_strtod_l+0xb0>
 80050a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b28      	cmp	r3, #40	; 0x28
 80050a6:	d12f      	bne.n	8005108 <_strtod_l+0x380>
 80050a8:	4996      	ldr	r1, [pc, #600]	; (8005304 <_strtod_l+0x57c>)
 80050aa:	aa18      	add	r2, sp, #96	; 0x60
 80050ac:	a815      	add	r0, sp, #84	; 0x54
 80050ae:	f001 ffc5 	bl	800703c <__hexnan>
 80050b2:	2805      	cmp	r0, #5
 80050b4:	d128      	bne.n	8005108 <_strtod_l+0x380>
 80050b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80050c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80050c4:	e69b      	b.n	8004dfe <_strtod_l+0x76>
 80050c6:	9f08      	ldr	r7, [sp, #32]
 80050c8:	210a      	movs	r1, #10
 80050ca:	fb01 2107 	mla	r1, r1, r7, r2
 80050ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80050d2:	9208      	str	r2, [sp, #32]
 80050d4:	e7b5      	b.n	8005042 <_strtod_l+0x2ba>
 80050d6:	2a6e      	cmp	r2, #110	; 0x6e
 80050d8:	e7d9      	b.n	800508e <_strtod_l+0x306>
 80050da:	498b      	ldr	r1, [pc, #556]	; (8005308 <_strtod_l+0x580>)
 80050dc:	a815      	add	r0, sp, #84	; 0x54
 80050de:	f001 ff99 	bl	8007014 <__match>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	f43f aea8 	beq.w	8004e38 <_strtod_l+0xb0>
 80050e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050ea:	4988      	ldr	r1, [pc, #544]	; (800530c <_strtod_l+0x584>)
 80050ec:	3b01      	subs	r3, #1
 80050ee:	a815      	add	r0, sp, #84	; 0x54
 80050f0:	9315      	str	r3, [sp, #84]	; 0x54
 80050f2:	f001 ff8f 	bl	8007014 <__match>
 80050f6:	b910      	cbnz	r0, 80050fe <_strtod_l+0x376>
 80050f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050fa:	3301      	adds	r3, #1
 80050fc:	9315      	str	r3, [sp, #84]	; 0x54
 80050fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800531c <_strtod_l+0x594>
 8005102:	f04f 0800 	mov.w	r8, #0
 8005106:	e67a      	b.n	8004dfe <_strtod_l+0x76>
 8005108:	4881      	ldr	r0, [pc, #516]	; (8005310 <_strtod_l+0x588>)
 800510a:	f000 fde1 	bl	8005cd0 <nan>
 800510e:	ec59 8b10 	vmov	r8, r9, d0
 8005112:	e674      	b.n	8004dfe <_strtod_l+0x76>
 8005114:	9b05      	ldr	r3, [sp, #20]
 8005116:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005118:	1afb      	subs	r3, r7, r3
 800511a:	f1bb 0f00 	cmp.w	fp, #0
 800511e:	bf08      	it	eq
 8005120:	46b3      	moveq	fp, r6
 8005122:	2e10      	cmp	r6, #16
 8005124:	9308      	str	r3, [sp, #32]
 8005126:	4635      	mov	r5, r6
 8005128:	bfa8      	it	ge
 800512a:	2510      	movge	r5, #16
 800512c:	f7fb f9f4 	bl	8000518 <__aeabi_ui2d>
 8005130:	2e09      	cmp	r6, #9
 8005132:	4680      	mov	r8, r0
 8005134:	4689      	mov	r9, r1
 8005136:	dd13      	ble.n	8005160 <_strtod_l+0x3d8>
 8005138:	4b76      	ldr	r3, [pc, #472]	; (8005314 <_strtod_l+0x58c>)
 800513a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800513e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005142:	f7fb fa63 	bl	800060c <__aeabi_dmul>
 8005146:	4680      	mov	r8, r0
 8005148:	4650      	mov	r0, sl
 800514a:	4689      	mov	r9, r1
 800514c:	f7fb f9e4 	bl	8000518 <__aeabi_ui2d>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4640      	mov	r0, r8
 8005156:	4649      	mov	r1, r9
 8005158:	f7fb f8a2 	bl	80002a0 <__adddf3>
 800515c:	4680      	mov	r8, r0
 800515e:	4689      	mov	r9, r1
 8005160:	2e0f      	cmp	r6, #15
 8005162:	dc38      	bgt.n	80051d6 <_strtod_l+0x44e>
 8005164:	9b08      	ldr	r3, [sp, #32]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f43f ae49 	beq.w	8004dfe <_strtod_l+0x76>
 800516c:	dd24      	ble.n	80051b8 <_strtod_l+0x430>
 800516e:	2b16      	cmp	r3, #22
 8005170:	dc0b      	bgt.n	800518a <_strtod_l+0x402>
 8005172:	4968      	ldr	r1, [pc, #416]	; (8005314 <_strtod_l+0x58c>)
 8005174:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800517c:	4642      	mov	r2, r8
 800517e:	464b      	mov	r3, r9
 8005180:	f7fb fa44 	bl	800060c <__aeabi_dmul>
 8005184:	4680      	mov	r8, r0
 8005186:	4689      	mov	r9, r1
 8005188:	e639      	b.n	8004dfe <_strtod_l+0x76>
 800518a:	9a08      	ldr	r2, [sp, #32]
 800518c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005190:	4293      	cmp	r3, r2
 8005192:	db20      	blt.n	80051d6 <_strtod_l+0x44e>
 8005194:	4c5f      	ldr	r4, [pc, #380]	; (8005314 <_strtod_l+0x58c>)
 8005196:	f1c6 060f 	rsb	r6, r6, #15
 800519a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800519e:	4642      	mov	r2, r8
 80051a0:	464b      	mov	r3, r9
 80051a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051a6:	f7fb fa31 	bl	800060c <__aeabi_dmul>
 80051aa:	9b08      	ldr	r3, [sp, #32]
 80051ac:	1b9e      	subs	r6, r3, r6
 80051ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80051b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80051b6:	e7e3      	b.n	8005180 <_strtod_l+0x3f8>
 80051b8:	9b08      	ldr	r3, [sp, #32]
 80051ba:	3316      	adds	r3, #22
 80051bc:	db0b      	blt.n	80051d6 <_strtod_l+0x44e>
 80051be:	9b05      	ldr	r3, [sp, #20]
 80051c0:	1bdf      	subs	r7, r3, r7
 80051c2:	4b54      	ldr	r3, [pc, #336]	; (8005314 <_strtod_l+0x58c>)
 80051c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80051c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051cc:	4640      	mov	r0, r8
 80051ce:	4649      	mov	r1, r9
 80051d0:	f7fb fb46 	bl	8000860 <__aeabi_ddiv>
 80051d4:	e7d6      	b.n	8005184 <_strtod_l+0x3fc>
 80051d6:	9b08      	ldr	r3, [sp, #32]
 80051d8:	1b75      	subs	r5, r6, r5
 80051da:	441d      	add	r5, r3
 80051dc:	2d00      	cmp	r5, #0
 80051de:	dd70      	ble.n	80052c2 <_strtod_l+0x53a>
 80051e0:	f015 030f 	ands.w	r3, r5, #15
 80051e4:	d00a      	beq.n	80051fc <_strtod_l+0x474>
 80051e6:	494b      	ldr	r1, [pc, #300]	; (8005314 <_strtod_l+0x58c>)
 80051e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051f4:	f7fb fa0a 	bl	800060c <__aeabi_dmul>
 80051f8:	4680      	mov	r8, r0
 80051fa:	4689      	mov	r9, r1
 80051fc:	f035 050f 	bics.w	r5, r5, #15
 8005200:	d04d      	beq.n	800529e <_strtod_l+0x516>
 8005202:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8005206:	dd22      	ble.n	800524e <_strtod_l+0x4c6>
 8005208:	2500      	movs	r5, #0
 800520a:	46ab      	mov	fp, r5
 800520c:	9509      	str	r5, [sp, #36]	; 0x24
 800520e:	9505      	str	r5, [sp, #20]
 8005210:	2322      	movs	r3, #34	; 0x22
 8005212:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800531c <_strtod_l+0x594>
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	f04f 0800 	mov.w	r8, #0
 800521c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800521e:	2b00      	cmp	r3, #0
 8005220:	f43f aded 	beq.w	8004dfe <_strtod_l+0x76>
 8005224:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005226:	4620      	mov	r0, r4
 8005228:	f002 fa9a 	bl	8007760 <_Bfree>
 800522c:	9905      	ldr	r1, [sp, #20]
 800522e:	4620      	mov	r0, r4
 8005230:	f002 fa96 	bl	8007760 <_Bfree>
 8005234:	4659      	mov	r1, fp
 8005236:	4620      	mov	r0, r4
 8005238:	f002 fa92 	bl	8007760 <_Bfree>
 800523c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800523e:	4620      	mov	r0, r4
 8005240:	f002 fa8e 	bl	8007760 <_Bfree>
 8005244:	4629      	mov	r1, r5
 8005246:	4620      	mov	r0, r4
 8005248:	f002 fa8a 	bl	8007760 <_Bfree>
 800524c:	e5d7      	b.n	8004dfe <_strtod_l+0x76>
 800524e:	4b32      	ldr	r3, [pc, #200]	; (8005318 <_strtod_l+0x590>)
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	2300      	movs	r3, #0
 8005254:	112d      	asrs	r5, r5, #4
 8005256:	4640      	mov	r0, r8
 8005258:	4649      	mov	r1, r9
 800525a:	469a      	mov	sl, r3
 800525c:	2d01      	cmp	r5, #1
 800525e:	dc21      	bgt.n	80052a4 <_strtod_l+0x51c>
 8005260:	b10b      	cbz	r3, 8005266 <_strtod_l+0x4de>
 8005262:	4680      	mov	r8, r0
 8005264:	4689      	mov	r9, r1
 8005266:	492c      	ldr	r1, [pc, #176]	; (8005318 <_strtod_l+0x590>)
 8005268:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800526c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005270:	4642      	mov	r2, r8
 8005272:	464b      	mov	r3, r9
 8005274:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005278:	f7fb f9c8 	bl	800060c <__aeabi_dmul>
 800527c:	4b27      	ldr	r3, [pc, #156]	; (800531c <_strtod_l+0x594>)
 800527e:	460a      	mov	r2, r1
 8005280:	400b      	ands	r3, r1
 8005282:	4927      	ldr	r1, [pc, #156]	; (8005320 <_strtod_l+0x598>)
 8005284:	428b      	cmp	r3, r1
 8005286:	4680      	mov	r8, r0
 8005288:	d8be      	bhi.n	8005208 <_strtod_l+0x480>
 800528a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800528e:	428b      	cmp	r3, r1
 8005290:	bf86      	itte	hi
 8005292:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8005324 <_strtod_l+0x59c>
 8005296:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800529a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800529e:	2300      	movs	r3, #0
 80052a0:	9304      	str	r3, [sp, #16]
 80052a2:	e07b      	b.n	800539c <_strtod_l+0x614>
 80052a4:	07ea      	lsls	r2, r5, #31
 80052a6:	d505      	bpl.n	80052b4 <_strtod_l+0x52c>
 80052a8:	9b04      	ldr	r3, [sp, #16]
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f7fb f9ad 	bl	800060c <__aeabi_dmul>
 80052b2:	2301      	movs	r3, #1
 80052b4:	9a04      	ldr	r2, [sp, #16]
 80052b6:	3208      	adds	r2, #8
 80052b8:	f10a 0a01 	add.w	sl, sl, #1
 80052bc:	106d      	asrs	r5, r5, #1
 80052be:	9204      	str	r2, [sp, #16]
 80052c0:	e7cc      	b.n	800525c <_strtod_l+0x4d4>
 80052c2:	d0ec      	beq.n	800529e <_strtod_l+0x516>
 80052c4:	426d      	negs	r5, r5
 80052c6:	f015 020f 	ands.w	r2, r5, #15
 80052ca:	d00a      	beq.n	80052e2 <_strtod_l+0x55a>
 80052cc:	4b11      	ldr	r3, [pc, #68]	; (8005314 <_strtod_l+0x58c>)
 80052ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052d2:	4640      	mov	r0, r8
 80052d4:	4649      	mov	r1, r9
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f7fb fac1 	bl	8000860 <__aeabi_ddiv>
 80052de:	4680      	mov	r8, r0
 80052e0:	4689      	mov	r9, r1
 80052e2:	112d      	asrs	r5, r5, #4
 80052e4:	d0db      	beq.n	800529e <_strtod_l+0x516>
 80052e6:	2d1f      	cmp	r5, #31
 80052e8:	dd1e      	ble.n	8005328 <_strtod_l+0x5a0>
 80052ea:	2500      	movs	r5, #0
 80052ec:	46ab      	mov	fp, r5
 80052ee:	9509      	str	r5, [sp, #36]	; 0x24
 80052f0:	9505      	str	r5, [sp, #20]
 80052f2:	2322      	movs	r3, #34	; 0x22
 80052f4:	f04f 0800 	mov.w	r8, #0
 80052f8:	f04f 0900 	mov.w	r9, #0
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	e78d      	b.n	800521c <_strtod_l+0x494>
 8005300:	08008615 	.word	0x08008615
 8005304:	08008654 	.word	0x08008654
 8005308:	0800860d 	.word	0x0800860d
 800530c:	08008849 	.word	0x08008849
 8005310:	08008845 	.word	0x08008845
 8005314:	080089b0 	.word	0x080089b0
 8005318:	08008988 	.word	0x08008988
 800531c:	7ff00000 	.word	0x7ff00000
 8005320:	7ca00000 	.word	0x7ca00000
 8005324:	7fefffff 	.word	0x7fefffff
 8005328:	f015 0310 	ands.w	r3, r5, #16
 800532c:	bf18      	it	ne
 800532e:	236a      	movne	r3, #106	; 0x6a
 8005330:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80056d4 <_strtod_l+0x94c>
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	4640      	mov	r0, r8
 8005338:	4649      	mov	r1, r9
 800533a:	2300      	movs	r3, #0
 800533c:	07ea      	lsls	r2, r5, #31
 800533e:	d504      	bpl.n	800534a <_strtod_l+0x5c2>
 8005340:	e9da 2300 	ldrd	r2, r3, [sl]
 8005344:	f7fb f962 	bl	800060c <__aeabi_dmul>
 8005348:	2301      	movs	r3, #1
 800534a:	106d      	asrs	r5, r5, #1
 800534c:	f10a 0a08 	add.w	sl, sl, #8
 8005350:	d1f4      	bne.n	800533c <_strtod_l+0x5b4>
 8005352:	b10b      	cbz	r3, 8005358 <_strtod_l+0x5d0>
 8005354:	4680      	mov	r8, r0
 8005356:	4689      	mov	r9, r1
 8005358:	9b04      	ldr	r3, [sp, #16]
 800535a:	b1bb      	cbz	r3, 800538c <_strtod_l+0x604>
 800535c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005360:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005364:	2b00      	cmp	r3, #0
 8005366:	4649      	mov	r1, r9
 8005368:	dd10      	ble.n	800538c <_strtod_l+0x604>
 800536a:	2b1f      	cmp	r3, #31
 800536c:	f340 811e 	ble.w	80055ac <_strtod_l+0x824>
 8005370:	2b34      	cmp	r3, #52	; 0x34
 8005372:	bfde      	ittt	le
 8005374:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005378:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800537c:	4093      	lslle	r3, r2
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	bfcc      	ite	gt
 8005384:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005388:	ea03 0901 	andle.w	r9, r3, r1
 800538c:	2200      	movs	r2, #0
 800538e:	2300      	movs	r3, #0
 8005390:	4640      	mov	r0, r8
 8005392:	4649      	mov	r1, r9
 8005394:	f7fb fba2 	bl	8000adc <__aeabi_dcmpeq>
 8005398:	2800      	cmp	r0, #0
 800539a:	d1a6      	bne.n	80052ea <_strtod_l+0x562>
 800539c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053a2:	4633      	mov	r3, r6
 80053a4:	465a      	mov	r2, fp
 80053a6:	4620      	mov	r0, r4
 80053a8:	f002 fa42 	bl	8007830 <__s2b>
 80053ac:	9009      	str	r0, [sp, #36]	; 0x24
 80053ae:	2800      	cmp	r0, #0
 80053b0:	f43f af2a 	beq.w	8005208 <_strtod_l+0x480>
 80053b4:	9a08      	ldr	r2, [sp, #32]
 80053b6:	9b05      	ldr	r3, [sp, #20]
 80053b8:	2a00      	cmp	r2, #0
 80053ba:	eba3 0307 	sub.w	r3, r3, r7
 80053be:	bfa8      	it	ge
 80053c0:	2300      	movge	r3, #0
 80053c2:	930c      	str	r3, [sp, #48]	; 0x30
 80053c4:	2500      	movs	r5, #0
 80053c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80053ca:	9312      	str	r3, [sp, #72]	; 0x48
 80053cc:	46ab      	mov	fp, r5
 80053ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053d0:	4620      	mov	r0, r4
 80053d2:	6859      	ldr	r1, [r3, #4]
 80053d4:	f002 f984 	bl	80076e0 <_Balloc>
 80053d8:	9005      	str	r0, [sp, #20]
 80053da:	2800      	cmp	r0, #0
 80053dc:	f43f af18 	beq.w	8005210 <_strtod_l+0x488>
 80053e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	3202      	adds	r2, #2
 80053e6:	f103 010c 	add.w	r1, r3, #12
 80053ea:	0092      	lsls	r2, r2, #2
 80053ec:	300c      	adds	r0, #12
 80053ee:	f000 fc60 	bl	8005cb2 <memcpy>
 80053f2:	ec49 8b10 	vmov	d0, r8, r9
 80053f6:	aa18      	add	r2, sp, #96	; 0x60
 80053f8:	a917      	add	r1, sp, #92	; 0x5c
 80053fa:	4620      	mov	r0, r4
 80053fc:	f002 fd4c 	bl	8007e98 <__d2b>
 8005400:	ec49 8b18 	vmov	d8, r8, r9
 8005404:	9016      	str	r0, [sp, #88]	; 0x58
 8005406:	2800      	cmp	r0, #0
 8005408:	f43f af02 	beq.w	8005210 <_strtod_l+0x488>
 800540c:	2101      	movs	r1, #1
 800540e:	4620      	mov	r0, r4
 8005410:	f002 faa6 	bl	8007960 <__i2b>
 8005414:	4683      	mov	fp, r0
 8005416:	2800      	cmp	r0, #0
 8005418:	f43f aefa 	beq.w	8005210 <_strtod_l+0x488>
 800541c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800541e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005420:	2e00      	cmp	r6, #0
 8005422:	bfab      	itete	ge
 8005424:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8005426:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8005428:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800542a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800542e:	bfac      	ite	ge
 8005430:	eb06 0a03 	addge.w	sl, r6, r3
 8005434:	1b9f      	sublt	r7, r3, r6
 8005436:	9b04      	ldr	r3, [sp, #16]
 8005438:	1af6      	subs	r6, r6, r3
 800543a:	4416      	add	r6, r2
 800543c:	4ba0      	ldr	r3, [pc, #640]	; (80056c0 <_strtod_l+0x938>)
 800543e:	3e01      	subs	r6, #1
 8005440:	429e      	cmp	r6, r3
 8005442:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005446:	f280 80c4 	bge.w	80055d2 <_strtod_l+0x84a>
 800544a:	1b9b      	subs	r3, r3, r6
 800544c:	2b1f      	cmp	r3, #31
 800544e:	eba2 0203 	sub.w	r2, r2, r3
 8005452:	f04f 0101 	mov.w	r1, #1
 8005456:	f300 80b0 	bgt.w	80055ba <_strtod_l+0x832>
 800545a:	fa01 f303 	lsl.w	r3, r1, r3
 800545e:	930e      	str	r3, [sp, #56]	; 0x38
 8005460:	2300      	movs	r3, #0
 8005462:	930d      	str	r3, [sp, #52]	; 0x34
 8005464:	eb0a 0602 	add.w	r6, sl, r2
 8005468:	9b04      	ldr	r3, [sp, #16]
 800546a:	45b2      	cmp	sl, r6
 800546c:	4417      	add	r7, r2
 800546e:	441f      	add	r7, r3
 8005470:	4653      	mov	r3, sl
 8005472:	bfa8      	it	ge
 8005474:	4633      	movge	r3, r6
 8005476:	42bb      	cmp	r3, r7
 8005478:	bfa8      	it	ge
 800547a:	463b      	movge	r3, r7
 800547c:	2b00      	cmp	r3, #0
 800547e:	bfc2      	ittt	gt
 8005480:	1af6      	subgt	r6, r6, r3
 8005482:	1aff      	subgt	r7, r7, r3
 8005484:	ebaa 0a03 	subgt.w	sl, sl, r3
 8005488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800548a:	2b00      	cmp	r3, #0
 800548c:	dd17      	ble.n	80054be <_strtod_l+0x736>
 800548e:	4659      	mov	r1, fp
 8005490:	461a      	mov	r2, r3
 8005492:	4620      	mov	r0, r4
 8005494:	f002 fb24 	bl	8007ae0 <__pow5mult>
 8005498:	4683      	mov	fp, r0
 800549a:	2800      	cmp	r0, #0
 800549c:	f43f aeb8 	beq.w	8005210 <_strtod_l+0x488>
 80054a0:	4601      	mov	r1, r0
 80054a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80054a4:	4620      	mov	r0, r4
 80054a6:	f002 fa71 	bl	800798c <__multiply>
 80054aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80054ac:	2800      	cmp	r0, #0
 80054ae:	f43f aeaf 	beq.w	8005210 <_strtod_l+0x488>
 80054b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80054b4:	4620      	mov	r0, r4
 80054b6:	f002 f953 	bl	8007760 <_Bfree>
 80054ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054bc:	9316      	str	r3, [sp, #88]	; 0x58
 80054be:	2e00      	cmp	r6, #0
 80054c0:	f300 808c 	bgt.w	80055dc <_strtod_l+0x854>
 80054c4:	9b08      	ldr	r3, [sp, #32]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	dd08      	ble.n	80054dc <_strtod_l+0x754>
 80054ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054cc:	9905      	ldr	r1, [sp, #20]
 80054ce:	4620      	mov	r0, r4
 80054d0:	f002 fb06 	bl	8007ae0 <__pow5mult>
 80054d4:	9005      	str	r0, [sp, #20]
 80054d6:	2800      	cmp	r0, #0
 80054d8:	f43f ae9a 	beq.w	8005210 <_strtod_l+0x488>
 80054dc:	2f00      	cmp	r7, #0
 80054de:	dd08      	ble.n	80054f2 <_strtod_l+0x76a>
 80054e0:	9905      	ldr	r1, [sp, #20]
 80054e2:	463a      	mov	r2, r7
 80054e4:	4620      	mov	r0, r4
 80054e6:	f002 fb55 	bl	8007b94 <__lshift>
 80054ea:	9005      	str	r0, [sp, #20]
 80054ec:	2800      	cmp	r0, #0
 80054ee:	f43f ae8f 	beq.w	8005210 <_strtod_l+0x488>
 80054f2:	f1ba 0f00 	cmp.w	sl, #0
 80054f6:	dd08      	ble.n	800550a <_strtod_l+0x782>
 80054f8:	4659      	mov	r1, fp
 80054fa:	4652      	mov	r2, sl
 80054fc:	4620      	mov	r0, r4
 80054fe:	f002 fb49 	bl	8007b94 <__lshift>
 8005502:	4683      	mov	fp, r0
 8005504:	2800      	cmp	r0, #0
 8005506:	f43f ae83 	beq.w	8005210 <_strtod_l+0x488>
 800550a:	9a05      	ldr	r2, [sp, #20]
 800550c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800550e:	4620      	mov	r0, r4
 8005510:	f002 fbc8 	bl	8007ca4 <__mdiff>
 8005514:	4605      	mov	r5, r0
 8005516:	2800      	cmp	r0, #0
 8005518:	f43f ae7a 	beq.w	8005210 <_strtod_l+0x488>
 800551c:	68c3      	ldr	r3, [r0, #12]
 800551e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005520:	2300      	movs	r3, #0
 8005522:	60c3      	str	r3, [r0, #12]
 8005524:	4659      	mov	r1, fp
 8005526:	f002 fba1 	bl	8007c6c <__mcmp>
 800552a:	2800      	cmp	r0, #0
 800552c:	da60      	bge.n	80055f0 <_strtod_l+0x868>
 800552e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005530:	ea53 0308 	orrs.w	r3, r3, r8
 8005534:	f040 8084 	bne.w	8005640 <_strtod_l+0x8b8>
 8005538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800553c:	2b00      	cmp	r3, #0
 800553e:	d17f      	bne.n	8005640 <_strtod_l+0x8b8>
 8005540:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005544:	0d1b      	lsrs	r3, r3, #20
 8005546:	051b      	lsls	r3, r3, #20
 8005548:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800554c:	d978      	bls.n	8005640 <_strtod_l+0x8b8>
 800554e:	696b      	ldr	r3, [r5, #20]
 8005550:	b913      	cbnz	r3, 8005558 <_strtod_l+0x7d0>
 8005552:	692b      	ldr	r3, [r5, #16]
 8005554:	2b01      	cmp	r3, #1
 8005556:	dd73      	ble.n	8005640 <_strtod_l+0x8b8>
 8005558:	4629      	mov	r1, r5
 800555a:	2201      	movs	r2, #1
 800555c:	4620      	mov	r0, r4
 800555e:	f002 fb19 	bl	8007b94 <__lshift>
 8005562:	4659      	mov	r1, fp
 8005564:	4605      	mov	r5, r0
 8005566:	f002 fb81 	bl	8007c6c <__mcmp>
 800556a:	2800      	cmp	r0, #0
 800556c:	dd68      	ble.n	8005640 <_strtod_l+0x8b8>
 800556e:	9904      	ldr	r1, [sp, #16]
 8005570:	4a54      	ldr	r2, [pc, #336]	; (80056c4 <_strtod_l+0x93c>)
 8005572:	464b      	mov	r3, r9
 8005574:	2900      	cmp	r1, #0
 8005576:	f000 8084 	beq.w	8005682 <_strtod_l+0x8fa>
 800557a:	ea02 0109 	and.w	r1, r2, r9
 800557e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005582:	dc7e      	bgt.n	8005682 <_strtod_l+0x8fa>
 8005584:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005588:	f77f aeb3 	ble.w	80052f2 <_strtod_l+0x56a>
 800558c:	4b4e      	ldr	r3, [pc, #312]	; (80056c8 <_strtod_l+0x940>)
 800558e:	4640      	mov	r0, r8
 8005590:	4649      	mov	r1, r9
 8005592:	2200      	movs	r2, #0
 8005594:	f7fb f83a 	bl	800060c <__aeabi_dmul>
 8005598:	4b4a      	ldr	r3, [pc, #296]	; (80056c4 <_strtod_l+0x93c>)
 800559a:	400b      	ands	r3, r1
 800559c:	4680      	mov	r8, r0
 800559e:	4689      	mov	r9, r1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f47f ae3f 	bne.w	8005224 <_strtod_l+0x49c>
 80055a6:	2322      	movs	r3, #34	; 0x22
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	e63b      	b.n	8005224 <_strtod_l+0x49c>
 80055ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	ea03 0808 	and.w	r8, r3, r8
 80055b8:	e6e8      	b.n	800538c <_strtod_l+0x604>
 80055ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80055be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80055c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80055c6:	36e2      	adds	r6, #226	; 0xe2
 80055c8:	fa01 f306 	lsl.w	r3, r1, r6
 80055cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80055d0:	e748      	b.n	8005464 <_strtod_l+0x6dc>
 80055d2:	2100      	movs	r1, #0
 80055d4:	2301      	movs	r3, #1
 80055d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80055da:	e743      	b.n	8005464 <_strtod_l+0x6dc>
 80055dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80055de:	4632      	mov	r2, r6
 80055e0:	4620      	mov	r0, r4
 80055e2:	f002 fad7 	bl	8007b94 <__lshift>
 80055e6:	9016      	str	r0, [sp, #88]	; 0x58
 80055e8:	2800      	cmp	r0, #0
 80055ea:	f47f af6b 	bne.w	80054c4 <_strtod_l+0x73c>
 80055ee:	e60f      	b.n	8005210 <_strtod_l+0x488>
 80055f0:	46ca      	mov	sl, r9
 80055f2:	d171      	bne.n	80056d8 <_strtod_l+0x950>
 80055f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055fa:	b352      	cbz	r2, 8005652 <_strtod_l+0x8ca>
 80055fc:	4a33      	ldr	r2, [pc, #204]	; (80056cc <_strtod_l+0x944>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d12a      	bne.n	8005658 <_strtod_l+0x8d0>
 8005602:	9b04      	ldr	r3, [sp, #16]
 8005604:	4641      	mov	r1, r8
 8005606:	b1fb      	cbz	r3, 8005648 <_strtod_l+0x8c0>
 8005608:	4b2e      	ldr	r3, [pc, #184]	; (80056c4 <_strtod_l+0x93c>)
 800560a:	ea09 0303 	and.w	r3, r9, r3
 800560e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005616:	d81a      	bhi.n	800564e <_strtod_l+0x8c6>
 8005618:	0d1b      	lsrs	r3, r3, #20
 800561a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	4299      	cmp	r1, r3
 8005624:	d118      	bne.n	8005658 <_strtod_l+0x8d0>
 8005626:	4b2a      	ldr	r3, [pc, #168]	; (80056d0 <_strtod_l+0x948>)
 8005628:	459a      	cmp	sl, r3
 800562a:	d102      	bne.n	8005632 <_strtod_l+0x8aa>
 800562c:	3101      	adds	r1, #1
 800562e:	f43f adef 	beq.w	8005210 <_strtod_l+0x488>
 8005632:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <_strtod_l+0x93c>)
 8005634:	ea0a 0303 	and.w	r3, sl, r3
 8005638:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800563c:	f04f 0800 	mov.w	r8, #0
 8005640:	9b04      	ldr	r3, [sp, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1a2      	bne.n	800558c <_strtod_l+0x804>
 8005646:	e5ed      	b.n	8005224 <_strtod_l+0x49c>
 8005648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800564c:	e7e9      	b.n	8005622 <_strtod_l+0x89a>
 800564e:	4613      	mov	r3, r2
 8005650:	e7e7      	b.n	8005622 <_strtod_l+0x89a>
 8005652:	ea53 0308 	orrs.w	r3, r3, r8
 8005656:	d08a      	beq.n	800556e <_strtod_l+0x7e6>
 8005658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800565a:	b1e3      	cbz	r3, 8005696 <_strtod_l+0x90e>
 800565c:	ea13 0f0a 	tst.w	r3, sl
 8005660:	d0ee      	beq.n	8005640 <_strtod_l+0x8b8>
 8005662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005664:	9a04      	ldr	r2, [sp, #16]
 8005666:	4640      	mov	r0, r8
 8005668:	4649      	mov	r1, r9
 800566a:	b1c3      	cbz	r3, 800569e <_strtod_l+0x916>
 800566c:	f7ff fb70 	bl	8004d50 <sulp>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	ec51 0b18 	vmov	r0, r1, d8
 8005678:	f7fa fe12 	bl	80002a0 <__adddf3>
 800567c:	4680      	mov	r8, r0
 800567e:	4689      	mov	r9, r1
 8005680:	e7de      	b.n	8005640 <_strtod_l+0x8b8>
 8005682:	4013      	ands	r3, r2
 8005684:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005688:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800568c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005690:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005694:	e7d4      	b.n	8005640 <_strtod_l+0x8b8>
 8005696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005698:	ea13 0f08 	tst.w	r3, r8
 800569c:	e7e0      	b.n	8005660 <_strtod_l+0x8d8>
 800569e:	f7ff fb57 	bl	8004d50 <sulp>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	ec51 0b18 	vmov	r0, r1, d8
 80056aa:	f7fa fdf7 	bl	800029c <__aeabi_dsub>
 80056ae:	2200      	movs	r2, #0
 80056b0:	2300      	movs	r3, #0
 80056b2:	4680      	mov	r8, r0
 80056b4:	4689      	mov	r9, r1
 80056b6:	f7fb fa11 	bl	8000adc <__aeabi_dcmpeq>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d0c0      	beq.n	8005640 <_strtod_l+0x8b8>
 80056be:	e618      	b.n	80052f2 <_strtod_l+0x56a>
 80056c0:	fffffc02 	.word	0xfffffc02
 80056c4:	7ff00000 	.word	0x7ff00000
 80056c8:	39500000 	.word	0x39500000
 80056cc:	000fffff 	.word	0x000fffff
 80056d0:	7fefffff 	.word	0x7fefffff
 80056d4:	08008668 	.word	0x08008668
 80056d8:	4659      	mov	r1, fp
 80056da:	4628      	mov	r0, r5
 80056dc:	f002 fc36 	bl	8007f4c <__ratio>
 80056e0:	ec57 6b10 	vmov	r6, r7, d0
 80056e4:	ee10 0a10 	vmov	r0, s0
 80056e8:	2200      	movs	r2, #0
 80056ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056ee:	4639      	mov	r1, r7
 80056f0:	f7fb fa08 	bl	8000b04 <__aeabi_dcmple>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d071      	beq.n	80057dc <_strtod_l+0xa54>
 80056f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d17c      	bne.n	80057f8 <_strtod_l+0xa70>
 80056fe:	f1b8 0f00 	cmp.w	r8, #0
 8005702:	d15a      	bne.n	80057ba <_strtod_l+0xa32>
 8005704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005708:	2b00      	cmp	r3, #0
 800570a:	d15d      	bne.n	80057c8 <_strtod_l+0xa40>
 800570c:	4b90      	ldr	r3, [pc, #576]	; (8005950 <_strtod_l+0xbc8>)
 800570e:	2200      	movs	r2, #0
 8005710:	4630      	mov	r0, r6
 8005712:	4639      	mov	r1, r7
 8005714:	f7fb f9ec 	bl	8000af0 <__aeabi_dcmplt>
 8005718:	2800      	cmp	r0, #0
 800571a:	d15c      	bne.n	80057d6 <_strtod_l+0xa4e>
 800571c:	4630      	mov	r0, r6
 800571e:	4639      	mov	r1, r7
 8005720:	4b8c      	ldr	r3, [pc, #560]	; (8005954 <_strtod_l+0xbcc>)
 8005722:	2200      	movs	r2, #0
 8005724:	f7fa ff72 	bl	800060c <__aeabi_dmul>
 8005728:	4606      	mov	r6, r0
 800572a:	460f      	mov	r7, r1
 800572c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005730:	9606      	str	r6, [sp, #24]
 8005732:	9307      	str	r3, [sp, #28]
 8005734:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005738:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800573c:	4b86      	ldr	r3, [pc, #536]	; (8005958 <_strtod_l+0xbd0>)
 800573e:	ea0a 0303 	and.w	r3, sl, r3
 8005742:	930d      	str	r3, [sp, #52]	; 0x34
 8005744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005746:	4b85      	ldr	r3, [pc, #532]	; (800595c <_strtod_l+0xbd4>)
 8005748:	429a      	cmp	r2, r3
 800574a:	f040 8090 	bne.w	800586e <_strtod_l+0xae6>
 800574e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8005752:	ec49 8b10 	vmov	d0, r8, r9
 8005756:	f002 fb2f 	bl	8007db8 <__ulp>
 800575a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800575e:	ec51 0b10 	vmov	r0, r1, d0
 8005762:	f7fa ff53 	bl	800060c <__aeabi_dmul>
 8005766:	4642      	mov	r2, r8
 8005768:	464b      	mov	r3, r9
 800576a:	f7fa fd99 	bl	80002a0 <__adddf3>
 800576e:	460b      	mov	r3, r1
 8005770:	4979      	ldr	r1, [pc, #484]	; (8005958 <_strtod_l+0xbd0>)
 8005772:	4a7b      	ldr	r2, [pc, #492]	; (8005960 <_strtod_l+0xbd8>)
 8005774:	4019      	ands	r1, r3
 8005776:	4291      	cmp	r1, r2
 8005778:	4680      	mov	r8, r0
 800577a:	d944      	bls.n	8005806 <_strtod_l+0xa7e>
 800577c:	ee18 2a90 	vmov	r2, s17
 8005780:	4b78      	ldr	r3, [pc, #480]	; (8005964 <_strtod_l+0xbdc>)
 8005782:	429a      	cmp	r2, r3
 8005784:	d104      	bne.n	8005790 <_strtod_l+0xa08>
 8005786:	ee18 3a10 	vmov	r3, s16
 800578a:	3301      	adds	r3, #1
 800578c:	f43f ad40 	beq.w	8005210 <_strtod_l+0x488>
 8005790:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8005964 <_strtod_l+0xbdc>
 8005794:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005798:	9916      	ldr	r1, [sp, #88]	; 0x58
 800579a:	4620      	mov	r0, r4
 800579c:	f001 ffe0 	bl	8007760 <_Bfree>
 80057a0:	9905      	ldr	r1, [sp, #20]
 80057a2:	4620      	mov	r0, r4
 80057a4:	f001 ffdc 	bl	8007760 <_Bfree>
 80057a8:	4659      	mov	r1, fp
 80057aa:	4620      	mov	r0, r4
 80057ac:	f001 ffd8 	bl	8007760 <_Bfree>
 80057b0:	4629      	mov	r1, r5
 80057b2:	4620      	mov	r0, r4
 80057b4:	f001 ffd4 	bl	8007760 <_Bfree>
 80057b8:	e609      	b.n	80053ce <_strtod_l+0x646>
 80057ba:	f1b8 0f01 	cmp.w	r8, #1
 80057be:	d103      	bne.n	80057c8 <_strtod_l+0xa40>
 80057c0:	f1b9 0f00 	cmp.w	r9, #0
 80057c4:	f43f ad95 	beq.w	80052f2 <_strtod_l+0x56a>
 80057c8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8005920 <_strtod_l+0xb98>
 80057cc:	4f60      	ldr	r7, [pc, #384]	; (8005950 <_strtod_l+0xbc8>)
 80057ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80057d2:	2600      	movs	r6, #0
 80057d4:	e7ae      	b.n	8005734 <_strtod_l+0x9ac>
 80057d6:	4f5f      	ldr	r7, [pc, #380]	; (8005954 <_strtod_l+0xbcc>)
 80057d8:	2600      	movs	r6, #0
 80057da:	e7a7      	b.n	800572c <_strtod_l+0x9a4>
 80057dc:	4b5d      	ldr	r3, [pc, #372]	; (8005954 <_strtod_l+0xbcc>)
 80057de:	4630      	mov	r0, r6
 80057e0:	4639      	mov	r1, r7
 80057e2:	2200      	movs	r2, #0
 80057e4:	f7fa ff12 	bl	800060c <__aeabi_dmul>
 80057e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ea:	4606      	mov	r6, r0
 80057ec:	460f      	mov	r7, r1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d09c      	beq.n	800572c <_strtod_l+0x9a4>
 80057f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80057f6:	e79d      	b.n	8005734 <_strtod_l+0x9ac>
 80057f8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8005928 <_strtod_l+0xba0>
 80057fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005800:	ec57 6b17 	vmov	r6, r7, d7
 8005804:	e796      	b.n	8005734 <_strtod_l+0x9ac>
 8005806:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800580a:	9b04      	ldr	r3, [sp, #16]
 800580c:	46ca      	mov	sl, r9
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1c2      	bne.n	8005798 <_strtod_l+0xa10>
 8005812:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005816:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005818:	0d1b      	lsrs	r3, r3, #20
 800581a:	051b      	lsls	r3, r3, #20
 800581c:	429a      	cmp	r2, r3
 800581e:	d1bb      	bne.n	8005798 <_strtod_l+0xa10>
 8005820:	4630      	mov	r0, r6
 8005822:	4639      	mov	r1, r7
 8005824:	f7fb fa3a 	bl	8000c9c <__aeabi_d2lz>
 8005828:	f7fa fec2 	bl	80005b0 <__aeabi_l2d>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4630      	mov	r0, r6
 8005832:	4639      	mov	r1, r7
 8005834:	f7fa fd32 	bl	800029c <__aeabi_dsub>
 8005838:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800583a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800583e:	ea43 0308 	orr.w	r3, r3, r8
 8005842:	4313      	orrs	r3, r2
 8005844:	4606      	mov	r6, r0
 8005846:	460f      	mov	r7, r1
 8005848:	d054      	beq.n	80058f4 <_strtod_l+0xb6c>
 800584a:	a339      	add	r3, pc, #228	; (adr r3, 8005930 <_strtod_l+0xba8>)
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f7fb f94e 	bl	8000af0 <__aeabi_dcmplt>
 8005854:	2800      	cmp	r0, #0
 8005856:	f47f ace5 	bne.w	8005224 <_strtod_l+0x49c>
 800585a:	a337      	add	r3, pc, #220	; (adr r3, 8005938 <_strtod_l+0xbb0>)
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	4630      	mov	r0, r6
 8005862:	4639      	mov	r1, r7
 8005864:	f7fb f962 	bl	8000b2c <__aeabi_dcmpgt>
 8005868:	2800      	cmp	r0, #0
 800586a:	d095      	beq.n	8005798 <_strtod_l+0xa10>
 800586c:	e4da      	b.n	8005224 <_strtod_l+0x49c>
 800586e:	9b04      	ldr	r3, [sp, #16]
 8005870:	b333      	cbz	r3, 80058c0 <_strtod_l+0xb38>
 8005872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005874:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005878:	d822      	bhi.n	80058c0 <_strtod_l+0xb38>
 800587a:	a331      	add	r3, pc, #196	; (adr r3, 8005940 <_strtod_l+0xbb8>)
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	4630      	mov	r0, r6
 8005882:	4639      	mov	r1, r7
 8005884:	f7fb f93e 	bl	8000b04 <__aeabi_dcmple>
 8005888:	b1a0      	cbz	r0, 80058b4 <_strtod_l+0xb2c>
 800588a:	4639      	mov	r1, r7
 800588c:	4630      	mov	r0, r6
 800588e:	f7fb f995 	bl	8000bbc <__aeabi_d2uiz>
 8005892:	2801      	cmp	r0, #1
 8005894:	bf38      	it	cc
 8005896:	2001      	movcc	r0, #1
 8005898:	f7fa fe3e 	bl	8000518 <__aeabi_ui2d>
 800589c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800589e:	4606      	mov	r6, r0
 80058a0:	460f      	mov	r7, r1
 80058a2:	bb23      	cbnz	r3, 80058ee <_strtod_l+0xb66>
 80058a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058a8:	9010      	str	r0, [sp, #64]	; 0x40
 80058aa:	9311      	str	r3, [sp, #68]	; 0x44
 80058ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80058b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	930f      	str	r3, [sp, #60]	; 0x3c
 80058c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80058c4:	eeb0 0a48 	vmov.f32	s0, s16
 80058c8:	eef0 0a68 	vmov.f32	s1, s17
 80058cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80058d0:	f002 fa72 	bl	8007db8 <__ulp>
 80058d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80058d8:	ec53 2b10 	vmov	r2, r3, d0
 80058dc:	f7fa fe96 	bl	800060c <__aeabi_dmul>
 80058e0:	ec53 2b18 	vmov	r2, r3, d8
 80058e4:	f7fa fcdc 	bl	80002a0 <__adddf3>
 80058e8:	4680      	mov	r8, r0
 80058ea:	4689      	mov	r9, r1
 80058ec:	e78d      	b.n	800580a <_strtod_l+0xa82>
 80058ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80058f2:	e7db      	b.n	80058ac <_strtod_l+0xb24>
 80058f4:	a314      	add	r3, pc, #80	; (adr r3, 8005948 <_strtod_l+0xbc0>)
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f7fb f8f9 	bl	8000af0 <__aeabi_dcmplt>
 80058fe:	e7b3      	b.n	8005868 <_strtod_l+0xae0>
 8005900:	2300      	movs	r3, #0
 8005902:	930a      	str	r3, [sp, #40]	; 0x28
 8005904:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005906:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	f7ff ba7c 	b.w	8004e06 <_strtod_l+0x7e>
 800590e:	2a65      	cmp	r2, #101	; 0x65
 8005910:	f43f ab75 	beq.w	8004ffe <_strtod_l+0x276>
 8005914:	2a45      	cmp	r2, #69	; 0x45
 8005916:	f43f ab72 	beq.w	8004ffe <_strtod_l+0x276>
 800591a:	2301      	movs	r3, #1
 800591c:	f7ff bbaa 	b.w	8005074 <_strtod_l+0x2ec>
 8005920:	00000000 	.word	0x00000000
 8005924:	bff00000 	.word	0xbff00000
 8005928:	00000000 	.word	0x00000000
 800592c:	3ff00000 	.word	0x3ff00000
 8005930:	94a03595 	.word	0x94a03595
 8005934:	3fdfffff 	.word	0x3fdfffff
 8005938:	35afe535 	.word	0x35afe535
 800593c:	3fe00000 	.word	0x3fe00000
 8005940:	ffc00000 	.word	0xffc00000
 8005944:	41dfffff 	.word	0x41dfffff
 8005948:	94a03595 	.word	0x94a03595
 800594c:	3fcfffff 	.word	0x3fcfffff
 8005950:	3ff00000 	.word	0x3ff00000
 8005954:	3fe00000 	.word	0x3fe00000
 8005958:	7ff00000 	.word	0x7ff00000
 800595c:	7fe00000 	.word	0x7fe00000
 8005960:	7c9fffff 	.word	0x7c9fffff
 8005964:	7fefffff 	.word	0x7fefffff

08005968 <strtod>:
 8005968:	460a      	mov	r2, r1
 800596a:	4601      	mov	r1, r0
 800596c:	4802      	ldr	r0, [pc, #8]	; (8005978 <strtod+0x10>)
 800596e:	4b03      	ldr	r3, [pc, #12]	; (800597c <strtod+0x14>)
 8005970:	6800      	ldr	r0, [r0, #0]
 8005972:	f7ff ba09 	b.w	8004d88 <_strtod_l>
 8005976:	bf00      	nop
 8005978:	200001d0 	.word	0x200001d0
 800597c:	20000018 	.word	0x20000018

08005980 <strtof>:
 8005980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005984:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8005a48 <strtof+0xc8>
 8005988:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <strtof+0xb4>)
 800598a:	460a      	mov	r2, r1
 800598c:	ed2d 8b02 	vpush	{d8}
 8005990:	4601      	mov	r1, r0
 8005992:	f8d8 0000 	ldr.w	r0, [r8]
 8005996:	f7ff f9f7 	bl	8004d88 <_strtod_l>
 800599a:	ec55 4b10 	vmov	r4, r5, d0
 800599e:	ee10 2a10 	vmov	r2, s0
 80059a2:	ee10 0a10 	vmov	r0, s0
 80059a6:	462b      	mov	r3, r5
 80059a8:	4629      	mov	r1, r5
 80059aa:	f7fb f8c9 	bl	8000b40 <__aeabi_dcmpun>
 80059ae:	b190      	cbz	r0, 80059d6 <strtof+0x56>
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	4821      	ldr	r0, [pc, #132]	; (8005a38 <strtof+0xb8>)
 80059b4:	da09      	bge.n	80059ca <strtof+0x4a>
 80059b6:	f000 f993 	bl	8005ce0 <nanf>
 80059ba:	eeb1 8a40 	vneg.f32	s16, s0
 80059be:	eeb0 0a48 	vmov.f32	s0, s16
 80059c2:	ecbd 8b02 	vpop	{d8}
 80059c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ca:	ecbd 8b02 	vpop	{d8}
 80059ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059d2:	f000 b985 	b.w	8005ce0 <nanf>
 80059d6:	4620      	mov	r0, r4
 80059d8:	4629      	mov	r1, r5
 80059da:	f7fb f90f 	bl	8000bfc <__aeabi_d2f>
 80059de:	ee08 0a10 	vmov	s16, r0
 80059e2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005a3c <strtof+0xbc>
 80059e6:	eeb0 7ac8 	vabs.f32	s14, s16
 80059ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80059ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f2:	dd11      	ble.n	8005a18 <strtof+0x98>
 80059f4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80059f8:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <strtof+0xc0>)
 80059fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059fe:	4620      	mov	r0, r4
 8005a00:	4639      	mov	r1, r7
 8005a02:	f7fb f89d 	bl	8000b40 <__aeabi_dcmpun>
 8005a06:	b980      	cbnz	r0, 8005a2a <strtof+0xaa>
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <strtof+0xc0>)
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a0e:	4620      	mov	r0, r4
 8005a10:	4639      	mov	r1, r7
 8005a12:	f7fb f877 	bl	8000b04 <__aeabi_dcmple>
 8005a16:	b940      	cbnz	r0, 8005a2a <strtof+0xaa>
 8005a18:	ee18 3a10 	vmov	r3, s16
 8005a1c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005a20:	d1cd      	bne.n	80059be <strtof+0x3e>
 8005a22:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <strtof+0xc4>)
 8005a24:	402b      	ands	r3, r5
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0c9      	beq.n	80059be <strtof+0x3e>
 8005a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a2e:	2222      	movs	r2, #34	; 0x22
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e7c4      	b.n	80059be <strtof+0x3e>
 8005a34:	20000018 	.word	0x20000018
 8005a38:	08008845 	.word	0x08008845
 8005a3c:	7f7fffff 	.word	0x7f7fffff
 8005a40:	7fefffff 	.word	0x7fefffff
 8005a44:	7ff00000 	.word	0x7ff00000
 8005a48:	200001d0 	.word	0x200001d0

08005a4c <_fwalk_sglue>:
 8005a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a50:	4607      	mov	r7, r0
 8005a52:	4688      	mov	r8, r1
 8005a54:	4614      	mov	r4, r2
 8005a56:	2600      	movs	r6, #0
 8005a58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a5c:	f1b9 0901 	subs.w	r9, r9, #1
 8005a60:	d505      	bpl.n	8005a6e <_fwalk_sglue+0x22>
 8005a62:	6824      	ldr	r4, [r4, #0]
 8005a64:	2c00      	cmp	r4, #0
 8005a66:	d1f7      	bne.n	8005a58 <_fwalk_sglue+0xc>
 8005a68:	4630      	mov	r0, r6
 8005a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a6e:	89ab      	ldrh	r3, [r5, #12]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d907      	bls.n	8005a84 <_fwalk_sglue+0x38>
 8005a74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	d003      	beq.n	8005a84 <_fwalk_sglue+0x38>
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	4638      	mov	r0, r7
 8005a80:	47c0      	blx	r8
 8005a82:	4306      	orrs	r6, r0
 8005a84:	3568      	adds	r5, #104	; 0x68
 8005a86:	e7e9      	b.n	8005a5c <_fwalk_sglue+0x10>

08005a88 <iprintf>:
 8005a88:	b40f      	push	{r0, r1, r2, r3}
 8005a8a:	b507      	push	{r0, r1, r2, lr}
 8005a8c:	4906      	ldr	r1, [pc, #24]	; (8005aa8 <iprintf+0x20>)
 8005a8e:	ab04      	add	r3, sp, #16
 8005a90:	6808      	ldr	r0, [r1, #0]
 8005a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a96:	6881      	ldr	r1, [r0, #8]
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	f001 fb93 	bl	80071c4 <_vfiprintf_r>
 8005a9e:	b003      	add	sp, #12
 8005aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa4:	b004      	add	sp, #16
 8005aa6:	4770      	bx	lr
 8005aa8:	200001d0 	.word	0x200001d0

08005aac <_puts_r>:
 8005aac:	6a03      	ldr	r3, [r0, #32]
 8005aae:	b570      	push	{r4, r5, r6, lr}
 8005ab0:	6884      	ldr	r4, [r0, #8]
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	460e      	mov	r6, r1
 8005ab6:	b90b      	cbnz	r3, 8005abc <_puts_r+0x10>
 8005ab8:	f7ff f932 	bl	8004d20 <__sinit>
 8005abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005abe:	07db      	lsls	r3, r3, #31
 8005ac0:	d405      	bmi.n	8005ace <_puts_r+0x22>
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	0598      	lsls	r0, r3, #22
 8005ac6:	d402      	bmi.n	8005ace <_puts_r+0x22>
 8005ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aca:	f000 f8f0 	bl	8005cae <__retarget_lock_acquire_recursive>
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	0719      	lsls	r1, r3, #28
 8005ad2:	d513      	bpl.n	8005afc <_puts_r+0x50>
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	b18b      	cbz	r3, 8005afc <_puts_r+0x50>
 8005ad8:	3e01      	subs	r6, #1
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	60a3      	str	r3, [r4, #8]
 8005ae4:	b9e9      	cbnz	r1, 8005b22 <_puts_r+0x76>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	da2e      	bge.n	8005b48 <_puts_r+0x9c>
 8005aea:	4622      	mov	r2, r4
 8005aec:	210a      	movs	r1, #10
 8005aee:	4628      	mov	r0, r5
 8005af0:	f002 faf8 	bl	80080e4 <__swbuf_r>
 8005af4:	3001      	adds	r0, #1
 8005af6:	d007      	beq.n	8005b08 <_puts_r+0x5c>
 8005af8:	250a      	movs	r5, #10
 8005afa:	e007      	b.n	8005b0c <_puts_r+0x60>
 8005afc:	4621      	mov	r1, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	f002 fb2e 	bl	8008160 <__swsetup_r>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d0e7      	beq.n	8005ad8 <_puts_r+0x2c>
 8005b08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b0e:	07da      	lsls	r2, r3, #31
 8005b10:	d405      	bmi.n	8005b1e <_puts_r+0x72>
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	059b      	lsls	r3, r3, #22
 8005b16:	d402      	bmi.n	8005b1e <_puts_r+0x72>
 8005b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b1a:	f000 f8c9 	bl	8005cb0 <__retarget_lock_release_recursive>
 8005b1e:	4628      	mov	r0, r5
 8005b20:	bd70      	pop	{r4, r5, r6, pc}
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	da04      	bge.n	8005b30 <_puts_r+0x84>
 8005b26:	69a2      	ldr	r2, [r4, #24]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	dc06      	bgt.n	8005b3a <_puts_r+0x8e>
 8005b2c:	290a      	cmp	r1, #10
 8005b2e:	d004      	beq.n	8005b3a <_puts_r+0x8e>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	6022      	str	r2, [r4, #0]
 8005b36:	7019      	strb	r1, [r3, #0]
 8005b38:	e7cf      	b.n	8005ada <_puts_r+0x2e>
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f002 fad1 	bl	80080e4 <__swbuf_r>
 8005b42:	3001      	adds	r0, #1
 8005b44:	d1c9      	bne.n	8005ada <_puts_r+0x2e>
 8005b46:	e7df      	b.n	8005b08 <_puts_r+0x5c>
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	250a      	movs	r5, #10
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	6022      	str	r2, [r4, #0]
 8005b50:	701d      	strb	r5, [r3, #0]
 8005b52:	e7db      	b.n	8005b0c <_puts_r+0x60>

08005b54 <puts>:
 8005b54:	4b02      	ldr	r3, [pc, #8]	; (8005b60 <puts+0xc>)
 8005b56:	4601      	mov	r1, r0
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	f7ff bfa7 	b.w	8005aac <_puts_r>
 8005b5e:	bf00      	nop
 8005b60:	200001d0 	.word	0x200001d0

08005b64 <strncmp>:
 8005b64:	b510      	push	{r4, lr}
 8005b66:	b16a      	cbz	r2, 8005b84 <strncmp+0x20>
 8005b68:	3901      	subs	r1, #1
 8005b6a:	1884      	adds	r4, r0, r2
 8005b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b70:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d103      	bne.n	8005b80 <strncmp+0x1c>
 8005b78:	42a0      	cmp	r0, r4
 8005b7a:	d001      	beq.n	8005b80 <strncmp+0x1c>
 8005b7c:	2a00      	cmp	r2, #0
 8005b7e:	d1f5      	bne.n	8005b6c <strncmp+0x8>
 8005b80:	1ad0      	subs	r0, r2, r3
 8005b82:	bd10      	pop	{r4, pc}
 8005b84:	4610      	mov	r0, r2
 8005b86:	e7fc      	b.n	8005b82 <strncmp+0x1e>

08005b88 <strtok>:
 8005b88:	4b16      	ldr	r3, [pc, #88]	; (8005be4 <strtok+0x5c>)
 8005b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b8c:	681e      	ldr	r6, [r3, #0]
 8005b8e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8005b90:	4605      	mov	r5, r0
 8005b92:	b9fc      	cbnz	r4, 8005bd4 <strtok+0x4c>
 8005b94:	2050      	movs	r0, #80	; 0x50
 8005b96:	9101      	str	r1, [sp, #4]
 8005b98:	f001 fc2e 	bl	80073f8 <malloc>
 8005b9c:	9901      	ldr	r1, [sp, #4]
 8005b9e:	6470      	str	r0, [r6, #68]	; 0x44
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	b920      	cbnz	r0, 8005bae <strtok+0x26>
 8005ba4:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <strtok+0x60>)
 8005ba6:	4811      	ldr	r0, [pc, #68]	; (8005bec <strtok+0x64>)
 8005ba8:	215b      	movs	r1, #91	; 0x5b
 8005baa:	f000 f8f1 	bl	8005d90 <__assert_func>
 8005bae:	e9c0 4400 	strd	r4, r4, [r0]
 8005bb2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005bb6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005bba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005bbe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005bc2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005bc6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005bca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005bce:	6184      	str	r4, [r0, #24]
 8005bd0:	7704      	strb	r4, [r0, #28]
 8005bd2:	6244      	str	r4, [r0, #36]	; 0x24
 8005bd4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4628      	mov	r0, r5
 8005bda:	b002      	add	sp, #8
 8005bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005be0:	f000 b806 	b.w	8005bf0 <__strtok_r>
 8005be4:	200001d0 	.word	0x200001d0
 8005be8:	08008690 	.word	0x08008690
 8005bec:	080086a7 	.word	0x080086a7

08005bf0 <__strtok_r>:
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf2:	b908      	cbnz	r0, 8005bf8 <__strtok_r+0x8>
 8005bf4:	6810      	ldr	r0, [r2, #0]
 8005bf6:	b188      	cbz	r0, 8005c1c <__strtok_r+0x2c>
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005c00:	460f      	mov	r7, r1
 8005c02:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c06:	b91e      	cbnz	r6, 8005c10 <__strtok_r+0x20>
 8005c08:	b965      	cbnz	r5, 8005c24 <__strtok_r+0x34>
 8005c0a:	6015      	str	r5, [r2, #0]
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	e005      	b.n	8005c1c <__strtok_r+0x2c>
 8005c10:	42b5      	cmp	r5, r6
 8005c12:	d1f6      	bne.n	8005c02 <__strtok_r+0x12>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f0      	bne.n	8005bfa <__strtok_r+0xa>
 8005c18:	6014      	str	r4, [r2, #0]
 8005c1a:	7003      	strb	r3, [r0, #0]
 8005c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1e:	461c      	mov	r4, r3
 8005c20:	e00c      	b.n	8005c3c <__strtok_r+0x4c>
 8005c22:	b915      	cbnz	r5, 8005c2a <__strtok_r+0x3a>
 8005c24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c28:	460e      	mov	r6, r1
 8005c2a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005c2e:	42ab      	cmp	r3, r5
 8005c30:	d1f7      	bne.n	8005c22 <__strtok_r+0x32>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f3      	beq.n	8005c1e <__strtok_r+0x2e>
 8005c36:	2300      	movs	r3, #0
 8005c38:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005c3c:	6014      	str	r4, [r2, #0]
 8005c3e:	e7ed      	b.n	8005c1c <__strtok_r+0x2c>

08005c40 <memset>:
 8005c40:	4402      	add	r2, r0
 8005c42:	4603      	mov	r3, r0
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d100      	bne.n	8005c4a <memset+0xa>
 8005c48:	4770      	bx	lr
 8005c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c4e:	e7f9      	b.n	8005c44 <memset+0x4>

08005c50 <_localeconv_r>:
 8005c50:	4800      	ldr	r0, [pc, #0]	; (8005c54 <_localeconv_r+0x4>)
 8005c52:	4770      	bx	lr
 8005c54:	20000108 	.word	0x20000108

08005c58 <__errno>:
 8005c58:	4b01      	ldr	r3, [pc, #4]	; (8005c60 <__errno+0x8>)
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	200001d0 	.word	0x200001d0

08005c64 <__libc_init_array>:
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	4d0d      	ldr	r5, [pc, #52]	; (8005c9c <__libc_init_array+0x38>)
 8005c68:	4c0d      	ldr	r4, [pc, #52]	; (8005ca0 <__libc_init_array+0x3c>)
 8005c6a:	1b64      	subs	r4, r4, r5
 8005c6c:	10a4      	asrs	r4, r4, #2
 8005c6e:	2600      	movs	r6, #0
 8005c70:	42a6      	cmp	r6, r4
 8005c72:	d109      	bne.n	8005c88 <__libc_init_array+0x24>
 8005c74:	4d0b      	ldr	r5, [pc, #44]	; (8005ca4 <__libc_init_array+0x40>)
 8005c76:	4c0c      	ldr	r4, [pc, #48]	; (8005ca8 <__libc_init_array+0x44>)
 8005c78:	f002 fc8a 	bl	8008590 <_init>
 8005c7c:	1b64      	subs	r4, r4, r5
 8005c7e:	10a4      	asrs	r4, r4, #2
 8005c80:	2600      	movs	r6, #0
 8005c82:	42a6      	cmp	r6, r4
 8005c84:	d105      	bne.n	8005c92 <__libc_init_array+0x2e>
 8005c86:	bd70      	pop	{r4, r5, r6, pc}
 8005c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c8c:	4798      	blx	r3
 8005c8e:	3601      	adds	r6, #1
 8005c90:	e7ee      	b.n	8005c70 <__libc_init_array+0xc>
 8005c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c96:	4798      	blx	r3
 8005c98:	3601      	adds	r6, #1
 8005c9a:	e7f2      	b.n	8005c82 <__libc_init_array+0x1e>
 8005c9c:	08008a84 	.word	0x08008a84
 8005ca0:	08008a84 	.word	0x08008a84
 8005ca4:	08008a84 	.word	0x08008a84
 8005ca8:	08008a88 	.word	0x08008a88

08005cac <__retarget_lock_init_recursive>:
 8005cac:	4770      	bx	lr

08005cae <__retarget_lock_acquire_recursive>:
 8005cae:	4770      	bx	lr

08005cb0 <__retarget_lock_release_recursive>:
 8005cb0:	4770      	bx	lr

08005cb2 <memcpy>:
 8005cb2:	440a      	add	r2, r1
 8005cb4:	4291      	cmp	r1, r2
 8005cb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005cba:	d100      	bne.n	8005cbe <memcpy+0xc>
 8005cbc:	4770      	bx	lr
 8005cbe:	b510      	push	{r4, lr}
 8005cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cc8:	4291      	cmp	r1, r2
 8005cca:	d1f9      	bne.n	8005cc0 <memcpy+0xe>
 8005ccc:	bd10      	pop	{r4, pc}
	...

08005cd0 <nan>:
 8005cd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005cd8 <nan+0x8>
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	00000000 	.word	0x00000000
 8005cdc:	7ff80000 	.word	0x7ff80000

08005ce0 <nanf>:
 8005ce0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005ce8 <nanf+0x8>
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	7fc00000 	.word	0x7fc00000

08005cec <modf>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	ec55 4b10 	vmov	r4, r5, d0
 8005cf2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005cf6:	f2a3 32ff 	subw	r2, r3, #1023	; 0x3ff
 8005cfa:	2a13      	cmp	r2, #19
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	462f      	mov	r7, r5
 8005d00:	dc21      	bgt.n	8005d46 <modf+0x5a>
 8005d02:	2a00      	cmp	r2, #0
 8005d04:	da07      	bge.n	8005d16 <modf+0x2a>
 8005d06:	2200      	movs	r2, #0
 8005d08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005d0c:	e9c0 2300 	strd	r2, r3, [r0]
 8005d10:	ec45 4b10 	vmov	d0, r4, r5
 8005d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d16:	481d      	ldr	r0, [pc, #116]	; (8005d8c <modf+0xa0>)
 8005d18:	4110      	asrs	r0, r2
 8005d1a:	ea05 0300 	and.w	r3, r5, r0
 8005d1e:	4323      	orrs	r3, r4
 8005d20:	d105      	bne.n	8005d2e <modf+0x42>
 8005d22:	e9c6 4500 	strd	r4, r5, [r6]
 8005d26:	f007 4500 	and.w	r5, r7, #2147483648	; 0x80000000
 8005d2a:	461c      	mov	r4, r3
 8005d2c:	e7f0      	b.n	8005d10 <modf+0x24>
 8005d2e:	2200      	movs	r2, #0
 8005d30:	ea25 0300 	bic.w	r3, r5, r0
 8005d34:	4620      	mov	r0, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	e9c6 2300 	strd	r2, r3, [r6]
 8005d3c:	f7fa faae 	bl	800029c <__aeabi_dsub>
 8005d40:	4604      	mov	r4, r0
 8005d42:	460d      	mov	r5, r1
 8005d44:	e7e4      	b.n	8005d10 <modf+0x24>
 8005d46:	2a33      	cmp	r2, #51	; 0x33
 8005d48:	dd13      	ble.n	8005d72 <modf+0x86>
 8005d4a:	ed86 0b00 	vstr	d0, [r6]
 8005d4e:	f002 fb47 	bl	80083e0 <__fpclassifyd>
 8005d52:	b950      	cbnz	r0, 8005d6a <modf+0x7e>
 8005d54:	4622      	mov	r2, r4
 8005d56:	462b      	mov	r3, r5
 8005d58:	4620      	mov	r0, r4
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	f7fa faa0 	bl	80002a0 <__adddf3>
 8005d60:	4604      	mov	r4, r0
 8005d62:	460d      	mov	r5, r1
 8005d64:	e9c6 4500 	strd	r4, r5, [r6]
 8005d68:	e7d2      	b.n	8005d10 <modf+0x24>
 8005d6a:	2400      	movs	r4, #0
 8005d6c:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8005d70:	e7ce      	b.n	8005d10 <modf+0x24>
 8005d72:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8005d76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d7a:	40d8      	lsrs	r0, r3
 8005d7c:	ea14 0300 	ands.w	r3, r4, r0
 8005d80:	d0cf      	beq.n	8005d22 <modf+0x36>
 8005d82:	462b      	mov	r3, r5
 8005d84:	ea24 0200 	bic.w	r2, r4, r0
 8005d88:	e7d4      	b.n	8005d34 <modf+0x48>
 8005d8a:	bf00      	nop
 8005d8c:	000fffff 	.word	0x000fffff

08005d90 <__assert_func>:
 8005d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d92:	4614      	mov	r4, r2
 8005d94:	461a      	mov	r2, r3
 8005d96:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <__assert_func+0x2c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	68d8      	ldr	r0, [r3, #12]
 8005d9e:	b14c      	cbz	r4, 8005db4 <__assert_func+0x24>
 8005da0:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <__assert_func+0x30>)
 8005da2:	9100      	str	r1, [sp, #0]
 8005da4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005da8:	4906      	ldr	r1, [pc, #24]	; (8005dc4 <__assert_func+0x34>)
 8005daa:	462b      	mov	r3, r5
 8005dac:	f002 f988 	bl	80080c0 <fiprintf>
 8005db0:	f002 fb40 	bl	8008434 <abort>
 8005db4:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <__assert_func+0x38>)
 8005db6:	461c      	mov	r4, r3
 8005db8:	e7f3      	b.n	8005da2 <__assert_func+0x12>
 8005dba:	bf00      	nop
 8005dbc:	200001d0 	.word	0x200001d0
 8005dc0:	0800880a 	.word	0x0800880a
 8005dc4:	08008817 	.word	0x08008817
 8005dc8:	08008845 	.word	0x08008845

08005dcc <quorem>:
 8005dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd0:	6903      	ldr	r3, [r0, #16]
 8005dd2:	690c      	ldr	r4, [r1, #16]
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	4607      	mov	r7, r0
 8005dd8:	db7e      	blt.n	8005ed8 <quorem+0x10c>
 8005dda:	3c01      	subs	r4, #1
 8005ddc:	f101 0814 	add.w	r8, r1, #20
 8005de0:	f100 0514 	add.w	r5, r0, #20
 8005de4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005df2:	3301      	adds	r3, #1
 8005df4:	429a      	cmp	r2, r3
 8005df6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005dfa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dfe:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e02:	d331      	bcc.n	8005e68 <quorem+0x9c>
 8005e04:	f04f 0e00 	mov.w	lr, #0
 8005e08:	4640      	mov	r0, r8
 8005e0a:	46ac      	mov	ip, r5
 8005e0c:	46f2      	mov	sl, lr
 8005e0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e12:	b293      	uxth	r3, r2
 8005e14:	fb06 e303 	mla	r3, r6, r3, lr
 8005e18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e1c:	0c1a      	lsrs	r2, r3, #16
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	ebaa 0303 	sub.w	r3, sl, r3
 8005e24:	f8dc a000 	ldr.w	sl, [ip]
 8005e28:	fa13 f38a 	uxtah	r3, r3, sl
 8005e2c:	fb06 220e 	mla	r2, r6, lr, r2
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	9b00      	ldr	r3, [sp, #0]
 8005e34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e38:	b292      	uxth	r2, r2
 8005e3a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e42:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e46:	4581      	cmp	r9, r0
 8005e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e4c:	f84c 3b04 	str.w	r3, [ip], #4
 8005e50:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e54:	d2db      	bcs.n	8005e0e <quorem+0x42>
 8005e56:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e5a:	b92b      	cbnz	r3, 8005e68 <quorem+0x9c>
 8005e5c:	9b01      	ldr	r3, [sp, #4]
 8005e5e:	3b04      	subs	r3, #4
 8005e60:	429d      	cmp	r5, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	d32c      	bcc.n	8005ec0 <quorem+0xf4>
 8005e66:	613c      	str	r4, [r7, #16]
 8005e68:	4638      	mov	r0, r7
 8005e6a:	f001 feff 	bl	8007c6c <__mcmp>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	db22      	blt.n	8005eb8 <quorem+0xec>
 8005e72:	3601      	adds	r6, #1
 8005e74:	4629      	mov	r1, r5
 8005e76:	2000      	movs	r0, #0
 8005e78:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e7c:	f8d1 c000 	ldr.w	ip, [r1]
 8005e80:	b293      	uxth	r3, r2
 8005e82:	1ac3      	subs	r3, r0, r3
 8005e84:	0c12      	lsrs	r2, r2, #16
 8005e86:	fa13 f38c 	uxtah	r3, r3, ip
 8005e8a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005e8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e98:	45c1      	cmp	r9, r8
 8005e9a:	f841 3b04 	str.w	r3, [r1], #4
 8005e9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ea2:	d2e9      	bcs.n	8005e78 <quorem+0xac>
 8005ea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ea8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eac:	b922      	cbnz	r2, 8005eb8 <quorem+0xec>
 8005eae:	3b04      	subs	r3, #4
 8005eb0:	429d      	cmp	r5, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	d30a      	bcc.n	8005ecc <quorem+0x100>
 8005eb6:	613c      	str	r4, [r7, #16]
 8005eb8:	4630      	mov	r0, r6
 8005eba:	b003      	add	sp, #12
 8005ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	3b04      	subs	r3, #4
 8005ec4:	2a00      	cmp	r2, #0
 8005ec6:	d1ce      	bne.n	8005e66 <quorem+0x9a>
 8005ec8:	3c01      	subs	r4, #1
 8005eca:	e7c9      	b.n	8005e60 <quorem+0x94>
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	3b04      	subs	r3, #4
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	d1f0      	bne.n	8005eb6 <quorem+0xea>
 8005ed4:	3c01      	subs	r4, #1
 8005ed6:	e7eb      	b.n	8005eb0 <quorem+0xe4>
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e7ee      	b.n	8005eba <quorem+0xee>
 8005edc:	0000      	movs	r0, r0
	...

08005ee0 <_dtoa_r>:
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	ed2d 8b04 	vpush	{d8-d9}
 8005ee8:	69c5      	ldr	r5, [r0, #28]
 8005eea:	b093      	sub	sp, #76	; 0x4c
 8005eec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ef0:	ec57 6b10 	vmov	r6, r7, d0
 8005ef4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ef8:	9107      	str	r1, [sp, #28]
 8005efa:	4604      	mov	r4, r0
 8005efc:	920a      	str	r2, [sp, #40]	; 0x28
 8005efe:	930d      	str	r3, [sp, #52]	; 0x34
 8005f00:	b975      	cbnz	r5, 8005f20 <_dtoa_r+0x40>
 8005f02:	2010      	movs	r0, #16
 8005f04:	f001 fa78 	bl	80073f8 <malloc>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	61e0      	str	r0, [r4, #28]
 8005f0c:	b920      	cbnz	r0, 8005f18 <_dtoa_r+0x38>
 8005f0e:	4bae      	ldr	r3, [pc, #696]	; (80061c8 <_dtoa_r+0x2e8>)
 8005f10:	21ef      	movs	r1, #239	; 0xef
 8005f12:	48ae      	ldr	r0, [pc, #696]	; (80061cc <_dtoa_r+0x2ec>)
 8005f14:	f7ff ff3c 	bl	8005d90 <__assert_func>
 8005f18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f1c:	6005      	str	r5, [r0, #0]
 8005f1e:	60c5      	str	r5, [r0, #12]
 8005f20:	69e3      	ldr	r3, [r4, #28]
 8005f22:	6819      	ldr	r1, [r3, #0]
 8005f24:	b151      	cbz	r1, 8005f3c <_dtoa_r+0x5c>
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	604a      	str	r2, [r1, #4]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4093      	lsls	r3, r2
 8005f2e:	608b      	str	r3, [r1, #8]
 8005f30:	4620      	mov	r0, r4
 8005f32:	f001 fc15 	bl	8007760 <_Bfree>
 8005f36:	69e3      	ldr	r3, [r4, #28]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	1e3b      	subs	r3, r7, #0
 8005f3e:	bfbb      	ittet	lt
 8005f40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f44:	9303      	strlt	r3, [sp, #12]
 8005f46:	2300      	movge	r3, #0
 8005f48:	2201      	movlt	r2, #1
 8005f4a:	bfac      	ite	ge
 8005f4c:	f8c8 3000 	strge.w	r3, [r8]
 8005f50:	f8c8 2000 	strlt.w	r2, [r8]
 8005f54:	4b9e      	ldr	r3, [pc, #632]	; (80061d0 <_dtoa_r+0x2f0>)
 8005f56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f5a:	ea33 0308 	bics.w	r3, r3, r8
 8005f5e:	d11b      	bne.n	8005f98 <_dtoa_r+0xb8>
 8005f60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f62:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005f6c:	4333      	orrs	r3, r6
 8005f6e:	f000 8593 	beq.w	8006a98 <_dtoa_r+0xbb8>
 8005f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f74:	b963      	cbnz	r3, 8005f90 <_dtoa_r+0xb0>
 8005f76:	4b97      	ldr	r3, [pc, #604]	; (80061d4 <_dtoa_r+0x2f4>)
 8005f78:	e027      	b.n	8005fca <_dtoa_r+0xea>
 8005f7a:	4b97      	ldr	r3, [pc, #604]	; (80061d8 <_dtoa_r+0x2f8>)
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	9800      	ldr	r0, [sp, #0]
 8005f86:	b013      	add	sp, #76	; 0x4c
 8005f88:	ecbd 8b04 	vpop	{d8-d9}
 8005f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f90:	4b90      	ldr	r3, [pc, #576]	; (80061d4 <_dtoa_r+0x2f4>)
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	3303      	adds	r3, #3
 8005f96:	e7f3      	b.n	8005f80 <_dtoa_r+0xa0>
 8005f98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	ec51 0b17 	vmov	r0, r1, d7
 8005fa2:	eeb0 8a47 	vmov.f32	s16, s14
 8005fa6:	eef0 8a67 	vmov.f32	s17, s15
 8005faa:	2300      	movs	r3, #0
 8005fac:	f7fa fd96 	bl	8000adc <__aeabi_dcmpeq>
 8005fb0:	4681      	mov	r9, r0
 8005fb2:	b160      	cbz	r0, 8005fce <_dtoa_r+0xee>
 8005fb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8568 	beq.w	8006a92 <_dtoa_r+0xbb2>
 8005fc2:	4b86      	ldr	r3, [pc, #536]	; (80061dc <_dtoa_r+0x2fc>)
 8005fc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	e7da      	b.n	8005f84 <_dtoa_r+0xa4>
 8005fce:	aa10      	add	r2, sp, #64	; 0x40
 8005fd0:	a911      	add	r1, sp, #68	; 0x44
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	eeb0 0a48 	vmov.f32	s0, s16
 8005fd8:	eef0 0a68 	vmov.f32	s1, s17
 8005fdc:	f001 ff5c 	bl	8007e98 <__d2b>
 8005fe0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005fe4:	4682      	mov	sl, r0
 8005fe6:	2d00      	cmp	r5, #0
 8005fe8:	d07f      	beq.n	80060ea <_dtoa_r+0x20a>
 8005fea:	ee18 3a90 	vmov	r3, s17
 8005fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ff2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005ff6:	ec51 0b18 	vmov	r0, r1, d8
 8005ffa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005ffe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006002:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006006:	4619      	mov	r1, r3
 8006008:	2200      	movs	r2, #0
 800600a:	4b75      	ldr	r3, [pc, #468]	; (80061e0 <_dtoa_r+0x300>)
 800600c:	f7fa f946 	bl	800029c <__aeabi_dsub>
 8006010:	a367      	add	r3, pc, #412	; (adr r3, 80061b0 <_dtoa_r+0x2d0>)
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f7fa faf9 	bl	800060c <__aeabi_dmul>
 800601a:	a367      	add	r3, pc, #412	; (adr r3, 80061b8 <_dtoa_r+0x2d8>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa f93e 	bl	80002a0 <__adddf3>
 8006024:	4606      	mov	r6, r0
 8006026:	4628      	mov	r0, r5
 8006028:	460f      	mov	r7, r1
 800602a:	f7fa fa85 	bl	8000538 <__aeabi_i2d>
 800602e:	a364      	add	r3, pc, #400	; (adr r3, 80061c0 <_dtoa_r+0x2e0>)
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f7fa faea 	bl	800060c <__aeabi_dmul>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4630      	mov	r0, r6
 800603e:	4639      	mov	r1, r7
 8006040:	f7fa f92e 	bl	80002a0 <__adddf3>
 8006044:	4606      	mov	r6, r0
 8006046:	460f      	mov	r7, r1
 8006048:	f7fa fd90 	bl	8000b6c <__aeabi_d2iz>
 800604c:	2200      	movs	r2, #0
 800604e:	4683      	mov	fp, r0
 8006050:	2300      	movs	r3, #0
 8006052:	4630      	mov	r0, r6
 8006054:	4639      	mov	r1, r7
 8006056:	f7fa fd4b 	bl	8000af0 <__aeabi_dcmplt>
 800605a:	b148      	cbz	r0, 8006070 <_dtoa_r+0x190>
 800605c:	4658      	mov	r0, fp
 800605e:	f7fa fa6b 	bl	8000538 <__aeabi_i2d>
 8006062:	4632      	mov	r2, r6
 8006064:	463b      	mov	r3, r7
 8006066:	f7fa fd39 	bl	8000adc <__aeabi_dcmpeq>
 800606a:	b908      	cbnz	r0, 8006070 <_dtoa_r+0x190>
 800606c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006070:	f1bb 0f16 	cmp.w	fp, #22
 8006074:	d857      	bhi.n	8006126 <_dtoa_r+0x246>
 8006076:	4b5b      	ldr	r3, [pc, #364]	; (80061e4 <_dtoa_r+0x304>)
 8006078:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	ec51 0b18 	vmov	r0, r1, d8
 8006084:	f7fa fd34 	bl	8000af0 <__aeabi_dcmplt>
 8006088:	2800      	cmp	r0, #0
 800608a:	d04e      	beq.n	800612a <_dtoa_r+0x24a>
 800608c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006090:	2300      	movs	r3, #0
 8006092:	930c      	str	r3, [sp, #48]	; 0x30
 8006094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006096:	1b5b      	subs	r3, r3, r5
 8006098:	1e5a      	subs	r2, r3, #1
 800609a:	bf45      	ittet	mi
 800609c:	f1c3 0301 	rsbmi	r3, r3, #1
 80060a0:	9305      	strmi	r3, [sp, #20]
 80060a2:	2300      	movpl	r3, #0
 80060a4:	2300      	movmi	r3, #0
 80060a6:	9206      	str	r2, [sp, #24]
 80060a8:	bf54      	ite	pl
 80060aa:	9305      	strpl	r3, [sp, #20]
 80060ac:	9306      	strmi	r3, [sp, #24]
 80060ae:	f1bb 0f00 	cmp.w	fp, #0
 80060b2:	db3c      	blt.n	800612e <_dtoa_r+0x24e>
 80060b4:	9b06      	ldr	r3, [sp, #24]
 80060b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80060ba:	445b      	add	r3, fp
 80060bc:	9306      	str	r3, [sp, #24]
 80060be:	2300      	movs	r3, #0
 80060c0:	9308      	str	r3, [sp, #32]
 80060c2:	9b07      	ldr	r3, [sp, #28]
 80060c4:	2b09      	cmp	r3, #9
 80060c6:	d868      	bhi.n	800619a <_dtoa_r+0x2ba>
 80060c8:	2b05      	cmp	r3, #5
 80060ca:	bfc4      	itt	gt
 80060cc:	3b04      	subgt	r3, #4
 80060ce:	9307      	strgt	r3, [sp, #28]
 80060d0:	9b07      	ldr	r3, [sp, #28]
 80060d2:	f1a3 0302 	sub.w	r3, r3, #2
 80060d6:	bfcc      	ite	gt
 80060d8:	2500      	movgt	r5, #0
 80060da:	2501      	movle	r5, #1
 80060dc:	2b03      	cmp	r3, #3
 80060de:	f200 8085 	bhi.w	80061ec <_dtoa_r+0x30c>
 80060e2:	e8df f003 	tbb	[pc, r3]
 80060e6:	3b2e      	.short	0x3b2e
 80060e8:	5839      	.short	0x5839
 80060ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80060ee:	441d      	add	r5, r3
 80060f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	bfc1      	itttt	gt
 80060f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006100:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006104:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006108:	bfd6      	itet	le
 800610a:	f1c3 0320 	rsble	r3, r3, #32
 800610e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006112:	fa06 f003 	lslle.w	r0, r6, r3
 8006116:	f7fa f9ff 	bl	8000518 <__aeabi_ui2d>
 800611a:	2201      	movs	r2, #1
 800611c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006120:	3d01      	subs	r5, #1
 8006122:	920e      	str	r2, [sp, #56]	; 0x38
 8006124:	e76f      	b.n	8006006 <_dtoa_r+0x126>
 8006126:	2301      	movs	r3, #1
 8006128:	e7b3      	b.n	8006092 <_dtoa_r+0x1b2>
 800612a:	900c      	str	r0, [sp, #48]	; 0x30
 800612c:	e7b2      	b.n	8006094 <_dtoa_r+0x1b4>
 800612e:	9b05      	ldr	r3, [sp, #20]
 8006130:	eba3 030b 	sub.w	r3, r3, fp
 8006134:	9305      	str	r3, [sp, #20]
 8006136:	f1cb 0300 	rsb	r3, fp, #0
 800613a:	9308      	str	r3, [sp, #32]
 800613c:	2300      	movs	r3, #0
 800613e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006140:	e7bf      	b.n	80060c2 <_dtoa_r+0x1e2>
 8006142:	2300      	movs	r3, #0
 8006144:	9309      	str	r3, [sp, #36]	; 0x24
 8006146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006148:	2b00      	cmp	r3, #0
 800614a:	dc52      	bgt.n	80061f2 <_dtoa_r+0x312>
 800614c:	2301      	movs	r3, #1
 800614e:	9301      	str	r3, [sp, #4]
 8006150:	9304      	str	r3, [sp, #16]
 8006152:	461a      	mov	r2, r3
 8006154:	920a      	str	r2, [sp, #40]	; 0x28
 8006156:	e00b      	b.n	8006170 <_dtoa_r+0x290>
 8006158:	2301      	movs	r3, #1
 800615a:	e7f3      	b.n	8006144 <_dtoa_r+0x264>
 800615c:	2300      	movs	r3, #0
 800615e:	9309      	str	r3, [sp, #36]	; 0x24
 8006160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006162:	445b      	add	r3, fp
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	3301      	adds	r3, #1
 8006168:	2b01      	cmp	r3, #1
 800616a:	9304      	str	r3, [sp, #16]
 800616c:	bfb8      	it	lt
 800616e:	2301      	movlt	r3, #1
 8006170:	69e0      	ldr	r0, [r4, #28]
 8006172:	2100      	movs	r1, #0
 8006174:	2204      	movs	r2, #4
 8006176:	f102 0614 	add.w	r6, r2, #20
 800617a:	429e      	cmp	r6, r3
 800617c:	d93d      	bls.n	80061fa <_dtoa_r+0x31a>
 800617e:	6041      	str	r1, [r0, #4]
 8006180:	4620      	mov	r0, r4
 8006182:	f001 faad 	bl	80076e0 <_Balloc>
 8006186:	9000      	str	r0, [sp, #0]
 8006188:	2800      	cmp	r0, #0
 800618a:	d139      	bne.n	8006200 <_dtoa_r+0x320>
 800618c:	4b16      	ldr	r3, [pc, #88]	; (80061e8 <_dtoa_r+0x308>)
 800618e:	4602      	mov	r2, r0
 8006190:	f240 11af 	movw	r1, #431	; 0x1af
 8006194:	e6bd      	b.n	8005f12 <_dtoa_r+0x32>
 8006196:	2301      	movs	r3, #1
 8006198:	e7e1      	b.n	800615e <_dtoa_r+0x27e>
 800619a:	2501      	movs	r5, #1
 800619c:	2300      	movs	r3, #0
 800619e:	9307      	str	r3, [sp, #28]
 80061a0:	9509      	str	r5, [sp, #36]	; 0x24
 80061a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	9304      	str	r3, [sp, #16]
 80061aa:	2200      	movs	r2, #0
 80061ac:	2312      	movs	r3, #18
 80061ae:	e7d1      	b.n	8006154 <_dtoa_r+0x274>
 80061b0:	636f4361 	.word	0x636f4361
 80061b4:	3fd287a7 	.word	0x3fd287a7
 80061b8:	8b60c8b3 	.word	0x8b60c8b3
 80061bc:	3fc68a28 	.word	0x3fc68a28
 80061c0:	509f79fb 	.word	0x509f79fb
 80061c4:	3fd34413 	.word	0x3fd34413
 80061c8:	08008690 	.word	0x08008690
 80061cc:	08008853 	.word	0x08008853
 80061d0:	7ff00000 	.word	0x7ff00000
 80061d4:	0800884f 	.word	0x0800884f
 80061d8:	08008846 	.word	0x08008846
 80061dc:	08008619 	.word	0x08008619
 80061e0:	3ff80000 	.word	0x3ff80000
 80061e4:	080089b0 	.word	0x080089b0
 80061e8:	080088ab 	.word	0x080088ab
 80061ec:	2301      	movs	r3, #1
 80061ee:	9309      	str	r3, [sp, #36]	; 0x24
 80061f0:	e7d7      	b.n	80061a2 <_dtoa_r+0x2c2>
 80061f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	9304      	str	r3, [sp, #16]
 80061f8:	e7ba      	b.n	8006170 <_dtoa_r+0x290>
 80061fa:	3101      	adds	r1, #1
 80061fc:	0052      	lsls	r2, r2, #1
 80061fe:	e7ba      	b.n	8006176 <_dtoa_r+0x296>
 8006200:	69e3      	ldr	r3, [r4, #28]
 8006202:	9a00      	ldr	r2, [sp, #0]
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	2b0e      	cmp	r3, #14
 800620a:	f200 80a8 	bhi.w	800635e <_dtoa_r+0x47e>
 800620e:	2d00      	cmp	r5, #0
 8006210:	f000 80a5 	beq.w	800635e <_dtoa_r+0x47e>
 8006214:	f1bb 0f00 	cmp.w	fp, #0
 8006218:	dd38      	ble.n	800628c <_dtoa_r+0x3ac>
 800621a:	4bc0      	ldr	r3, [pc, #768]	; (800651c <_dtoa_r+0x63c>)
 800621c:	f00b 020f 	and.w	r2, fp, #15
 8006220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006224:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006228:	e9d3 6700 	ldrd	r6, r7, [r3]
 800622c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006230:	d019      	beq.n	8006266 <_dtoa_r+0x386>
 8006232:	4bbb      	ldr	r3, [pc, #748]	; (8006520 <_dtoa_r+0x640>)
 8006234:	ec51 0b18 	vmov	r0, r1, d8
 8006238:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800623c:	f7fa fb10 	bl	8000860 <__aeabi_ddiv>
 8006240:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006244:	f008 080f 	and.w	r8, r8, #15
 8006248:	2503      	movs	r5, #3
 800624a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006520 <_dtoa_r+0x640>
 800624e:	f1b8 0f00 	cmp.w	r8, #0
 8006252:	d10a      	bne.n	800626a <_dtoa_r+0x38a>
 8006254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006258:	4632      	mov	r2, r6
 800625a:	463b      	mov	r3, r7
 800625c:	f7fa fb00 	bl	8000860 <__aeabi_ddiv>
 8006260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006264:	e02b      	b.n	80062be <_dtoa_r+0x3de>
 8006266:	2502      	movs	r5, #2
 8006268:	e7ef      	b.n	800624a <_dtoa_r+0x36a>
 800626a:	f018 0f01 	tst.w	r8, #1
 800626e:	d008      	beq.n	8006282 <_dtoa_r+0x3a2>
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006278:	f7fa f9c8 	bl	800060c <__aeabi_dmul>
 800627c:	3501      	adds	r5, #1
 800627e:	4606      	mov	r6, r0
 8006280:	460f      	mov	r7, r1
 8006282:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006286:	f109 0908 	add.w	r9, r9, #8
 800628a:	e7e0      	b.n	800624e <_dtoa_r+0x36e>
 800628c:	f000 809f 	beq.w	80063ce <_dtoa_r+0x4ee>
 8006290:	f1cb 0600 	rsb	r6, fp, #0
 8006294:	4ba1      	ldr	r3, [pc, #644]	; (800651c <_dtoa_r+0x63c>)
 8006296:	4fa2      	ldr	r7, [pc, #648]	; (8006520 <_dtoa_r+0x640>)
 8006298:	f006 020f 	and.w	r2, r6, #15
 800629c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	ec51 0b18 	vmov	r0, r1, d8
 80062a8:	f7fa f9b0 	bl	800060c <__aeabi_dmul>
 80062ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b0:	1136      	asrs	r6, r6, #4
 80062b2:	2300      	movs	r3, #0
 80062b4:	2502      	movs	r5, #2
 80062b6:	2e00      	cmp	r6, #0
 80062b8:	d17e      	bne.n	80063b8 <_dtoa_r+0x4d8>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1d0      	bne.n	8006260 <_dtoa_r+0x380>
 80062be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8084 	beq.w	80063d2 <_dtoa_r+0x4f2>
 80062ca:	4b96      	ldr	r3, [pc, #600]	; (8006524 <_dtoa_r+0x644>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	4640      	mov	r0, r8
 80062d0:	4649      	mov	r1, r9
 80062d2:	f7fa fc0d 	bl	8000af0 <__aeabi_dcmplt>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d07b      	beq.n	80063d2 <_dtoa_r+0x4f2>
 80062da:	9b04      	ldr	r3, [sp, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d078      	beq.n	80063d2 <_dtoa_r+0x4f2>
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	dd39      	ble.n	800635a <_dtoa_r+0x47a>
 80062e6:	4b90      	ldr	r3, [pc, #576]	; (8006528 <_dtoa_r+0x648>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	4640      	mov	r0, r8
 80062ec:	4649      	mov	r1, r9
 80062ee:	f7fa f98d 	bl	800060c <__aeabi_dmul>
 80062f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f6:	9e01      	ldr	r6, [sp, #4]
 80062f8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80062fc:	3501      	adds	r5, #1
 80062fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006302:	4628      	mov	r0, r5
 8006304:	f7fa f918 	bl	8000538 <__aeabi_i2d>
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	f7fa f97e 	bl	800060c <__aeabi_dmul>
 8006310:	4b86      	ldr	r3, [pc, #536]	; (800652c <_dtoa_r+0x64c>)
 8006312:	2200      	movs	r2, #0
 8006314:	f7f9 ffc4 	bl	80002a0 <__adddf3>
 8006318:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800631c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006320:	9303      	str	r3, [sp, #12]
 8006322:	2e00      	cmp	r6, #0
 8006324:	d158      	bne.n	80063d8 <_dtoa_r+0x4f8>
 8006326:	4b82      	ldr	r3, [pc, #520]	; (8006530 <_dtoa_r+0x650>)
 8006328:	2200      	movs	r2, #0
 800632a:	4640      	mov	r0, r8
 800632c:	4649      	mov	r1, r9
 800632e:	f7f9 ffb5 	bl	800029c <__aeabi_dsub>
 8006332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006336:	4680      	mov	r8, r0
 8006338:	4689      	mov	r9, r1
 800633a:	f7fa fbf7 	bl	8000b2c <__aeabi_dcmpgt>
 800633e:	2800      	cmp	r0, #0
 8006340:	f040 8296 	bne.w	8006870 <_dtoa_r+0x990>
 8006344:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006348:	4640      	mov	r0, r8
 800634a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800634e:	4649      	mov	r1, r9
 8006350:	f7fa fbce 	bl	8000af0 <__aeabi_dcmplt>
 8006354:	2800      	cmp	r0, #0
 8006356:	f040 8289 	bne.w	800686c <_dtoa_r+0x98c>
 800635a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800635e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006360:	2b00      	cmp	r3, #0
 8006362:	f2c0 814e 	blt.w	8006602 <_dtoa_r+0x722>
 8006366:	f1bb 0f0e 	cmp.w	fp, #14
 800636a:	f300 814a 	bgt.w	8006602 <_dtoa_r+0x722>
 800636e:	4b6b      	ldr	r3, [pc, #428]	; (800651c <_dtoa_r+0x63c>)
 8006370:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006374:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	f280 80dc 	bge.w	8006538 <_dtoa_r+0x658>
 8006380:	9b04      	ldr	r3, [sp, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	f300 80d8 	bgt.w	8006538 <_dtoa_r+0x658>
 8006388:	f040 826f 	bne.w	800686a <_dtoa_r+0x98a>
 800638c:	4b68      	ldr	r3, [pc, #416]	; (8006530 <_dtoa_r+0x650>)
 800638e:	2200      	movs	r2, #0
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	f7fa f93a 	bl	800060c <__aeabi_dmul>
 8006398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800639c:	f7fa fbbc 	bl	8000b18 <__aeabi_dcmpge>
 80063a0:	9e04      	ldr	r6, [sp, #16]
 80063a2:	4637      	mov	r7, r6
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f040 8245 	bne.w	8006834 <_dtoa_r+0x954>
 80063aa:	9d00      	ldr	r5, [sp, #0]
 80063ac:	2331      	movs	r3, #49	; 0x31
 80063ae:	f805 3b01 	strb.w	r3, [r5], #1
 80063b2:	f10b 0b01 	add.w	fp, fp, #1
 80063b6:	e241      	b.n	800683c <_dtoa_r+0x95c>
 80063b8:	07f2      	lsls	r2, r6, #31
 80063ba:	d505      	bpl.n	80063c8 <_dtoa_r+0x4e8>
 80063bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c0:	f7fa f924 	bl	800060c <__aeabi_dmul>
 80063c4:	3501      	adds	r5, #1
 80063c6:	2301      	movs	r3, #1
 80063c8:	1076      	asrs	r6, r6, #1
 80063ca:	3708      	adds	r7, #8
 80063cc:	e773      	b.n	80062b6 <_dtoa_r+0x3d6>
 80063ce:	2502      	movs	r5, #2
 80063d0:	e775      	b.n	80062be <_dtoa_r+0x3de>
 80063d2:	9e04      	ldr	r6, [sp, #16]
 80063d4:	465f      	mov	r7, fp
 80063d6:	e792      	b.n	80062fe <_dtoa_r+0x41e>
 80063d8:	9900      	ldr	r1, [sp, #0]
 80063da:	4b50      	ldr	r3, [pc, #320]	; (800651c <_dtoa_r+0x63c>)
 80063dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063e0:	4431      	add	r1, r6
 80063e2:	9102      	str	r1, [sp, #8]
 80063e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063e6:	eeb0 9a47 	vmov.f32	s18, s14
 80063ea:	eef0 9a67 	vmov.f32	s19, s15
 80063ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063f6:	2900      	cmp	r1, #0
 80063f8:	d044      	beq.n	8006484 <_dtoa_r+0x5a4>
 80063fa:	494e      	ldr	r1, [pc, #312]	; (8006534 <_dtoa_r+0x654>)
 80063fc:	2000      	movs	r0, #0
 80063fe:	f7fa fa2f 	bl	8000860 <__aeabi_ddiv>
 8006402:	ec53 2b19 	vmov	r2, r3, d9
 8006406:	f7f9 ff49 	bl	800029c <__aeabi_dsub>
 800640a:	9d00      	ldr	r5, [sp, #0]
 800640c:	ec41 0b19 	vmov	d9, r0, r1
 8006410:	4649      	mov	r1, r9
 8006412:	4640      	mov	r0, r8
 8006414:	f7fa fbaa 	bl	8000b6c <__aeabi_d2iz>
 8006418:	4606      	mov	r6, r0
 800641a:	f7fa f88d 	bl	8000538 <__aeabi_i2d>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4640      	mov	r0, r8
 8006424:	4649      	mov	r1, r9
 8006426:	f7f9 ff39 	bl	800029c <__aeabi_dsub>
 800642a:	3630      	adds	r6, #48	; 0x30
 800642c:	f805 6b01 	strb.w	r6, [r5], #1
 8006430:	ec53 2b19 	vmov	r2, r3, d9
 8006434:	4680      	mov	r8, r0
 8006436:	4689      	mov	r9, r1
 8006438:	f7fa fb5a 	bl	8000af0 <__aeabi_dcmplt>
 800643c:	2800      	cmp	r0, #0
 800643e:	d164      	bne.n	800650a <_dtoa_r+0x62a>
 8006440:	4642      	mov	r2, r8
 8006442:	464b      	mov	r3, r9
 8006444:	4937      	ldr	r1, [pc, #220]	; (8006524 <_dtoa_r+0x644>)
 8006446:	2000      	movs	r0, #0
 8006448:	f7f9 ff28 	bl	800029c <__aeabi_dsub>
 800644c:	ec53 2b19 	vmov	r2, r3, d9
 8006450:	f7fa fb4e 	bl	8000af0 <__aeabi_dcmplt>
 8006454:	2800      	cmp	r0, #0
 8006456:	f040 80b6 	bne.w	80065c6 <_dtoa_r+0x6e6>
 800645a:	9b02      	ldr	r3, [sp, #8]
 800645c:	429d      	cmp	r5, r3
 800645e:	f43f af7c 	beq.w	800635a <_dtoa_r+0x47a>
 8006462:	4b31      	ldr	r3, [pc, #196]	; (8006528 <_dtoa_r+0x648>)
 8006464:	ec51 0b19 	vmov	r0, r1, d9
 8006468:	2200      	movs	r2, #0
 800646a:	f7fa f8cf 	bl	800060c <__aeabi_dmul>
 800646e:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <_dtoa_r+0x648>)
 8006470:	ec41 0b19 	vmov	d9, r0, r1
 8006474:	2200      	movs	r2, #0
 8006476:	4640      	mov	r0, r8
 8006478:	4649      	mov	r1, r9
 800647a:	f7fa f8c7 	bl	800060c <__aeabi_dmul>
 800647e:	4680      	mov	r8, r0
 8006480:	4689      	mov	r9, r1
 8006482:	e7c5      	b.n	8006410 <_dtoa_r+0x530>
 8006484:	ec51 0b17 	vmov	r0, r1, d7
 8006488:	f7fa f8c0 	bl	800060c <__aeabi_dmul>
 800648c:	9b02      	ldr	r3, [sp, #8]
 800648e:	9d00      	ldr	r5, [sp, #0]
 8006490:	930f      	str	r3, [sp, #60]	; 0x3c
 8006492:	ec41 0b19 	vmov	d9, r0, r1
 8006496:	4649      	mov	r1, r9
 8006498:	4640      	mov	r0, r8
 800649a:	f7fa fb67 	bl	8000b6c <__aeabi_d2iz>
 800649e:	4606      	mov	r6, r0
 80064a0:	f7fa f84a 	bl	8000538 <__aeabi_i2d>
 80064a4:	3630      	adds	r6, #48	; 0x30
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4640      	mov	r0, r8
 80064ac:	4649      	mov	r1, r9
 80064ae:	f7f9 fef5 	bl	800029c <__aeabi_dsub>
 80064b2:	f805 6b01 	strb.w	r6, [r5], #1
 80064b6:	9b02      	ldr	r3, [sp, #8]
 80064b8:	429d      	cmp	r5, r3
 80064ba:	4680      	mov	r8, r0
 80064bc:	4689      	mov	r9, r1
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	d124      	bne.n	800650e <_dtoa_r+0x62e>
 80064c4:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <_dtoa_r+0x654>)
 80064c6:	ec51 0b19 	vmov	r0, r1, d9
 80064ca:	f7f9 fee9 	bl	80002a0 <__adddf3>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4640      	mov	r0, r8
 80064d4:	4649      	mov	r1, r9
 80064d6:	f7fa fb29 	bl	8000b2c <__aeabi_dcmpgt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d173      	bne.n	80065c6 <_dtoa_r+0x6e6>
 80064de:	ec53 2b19 	vmov	r2, r3, d9
 80064e2:	4914      	ldr	r1, [pc, #80]	; (8006534 <_dtoa_r+0x654>)
 80064e4:	2000      	movs	r0, #0
 80064e6:	f7f9 fed9 	bl	800029c <__aeabi_dsub>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4640      	mov	r0, r8
 80064f0:	4649      	mov	r1, r9
 80064f2:	f7fa fafd 	bl	8000af0 <__aeabi_dcmplt>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f43f af2f 	beq.w	800635a <_dtoa_r+0x47a>
 80064fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80064fe:	1e6b      	subs	r3, r5, #1
 8006500:	930f      	str	r3, [sp, #60]	; 0x3c
 8006502:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006506:	2b30      	cmp	r3, #48	; 0x30
 8006508:	d0f8      	beq.n	80064fc <_dtoa_r+0x61c>
 800650a:	46bb      	mov	fp, r7
 800650c:	e04a      	b.n	80065a4 <_dtoa_r+0x6c4>
 800650e:	4b06      	ldr	r3, [pc, #24]	; (8006528 <_dtoa_r+0x648>)
 8006510:	f7fa f87c 	bl	800060c <__aeabi_dmul>
 8006514:	4680      	mov	r8, r0
 8006516:	4689      	mov	r9, r1
 8006518:	e7bd      	b.n	8006496 <_dtoa_r+0x5b6>
 800651a:	bf00      	nop
 800651c:	080089b0 	.word	0x080089b0
 8006520:	08008988 	.word	0x08008988
 8006524:	3ff00000 	.word	0x3ff00000
 8006528:	40240000 	.word	0x40240000
 800652c:	401c0000 	.word	0x401c0000
 8006530:	40140000 	.word	0x40140000
 8006534:	3fe00000 	.word	0x3fe00000
 8006538:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800653c:	9d00      	ldr	r5, [sp, #0]
 800653e:	4642      	mov	r2, r8
 8006540:	464b      	mov	r3, r9
 8006542:	4630      	mov	r0, r6
 8006544:	4639      	mov	r1, r7
 8006546:	f7fa f98b 	bl	8000860 <__aeabi_ddiv>
 800654a:	f7fa fb0f 	bl	8000b6c <__aeabi_d2iz>
 800654e:	9001      	str	r0, [sp, #4]
 8006550:	f7f9 fff2 	bl	8000538 <__aeabi_i2d>
 8006554:	4642      	mov	r2, r8
 8006556:	464b      	mov	r3, r9
 8006558:	f7fa f858 	bl	800060c <__aeabi_dmul>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7f9 fe9a 	bl	800029c <__aeabi_dsub>
 8006568:	9e01      	ldr	r6, [sp, #4]
 800656a:	9f04      	ldr	r7, [sp, #16]
 800656c:	3630      	adds	r6, #48	; 0x30
 800656e:	f805 6b01 	strb.w	r6, [r5], #1
 8006572:	9e00      	ldr	r6, [sp, #0]
 8006574:	1bae      	subs	r6, r5, r6
 8006576:	42b7      	cmp	r7, r6
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	d134      	bne.n	80065e8 <_dtoa_r+0x708>
 800657e:	f7f9 fe8f 	bl	80002a0 <__adddf3>
 8006582:	4642      	mov	r2, r8
 8006584:	464b      	mov	r3, r9
 8006586:	4606      	mov	r6, r0
 8006588:	460f      	mov	r7, r1
 800658a:	f7fa facf 	bl	8000b2c <__aeabi_dcmpgt>
 800658e:	b9c8      	cbnz	r0, 80065c4 <_dtoa_r+0x6e4>
 8006590:	4642      	mov	r2, r8
 8006592:	464b      	mov	r3, r9
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	f7fa faa0 	bl	8000adc <__aeabi_dcmpeq>
 800659c:	b110      	cbz	r0, 80065a4 <_dtoa_r+0x6c4>
 800659e:	9b01      	ldr	r3, [sp, #4]
 80065a0:	07db      	lsls	r3, r3, #31
 80065a2:	d40f      	bmi.n	80065c4 <_dtoa_r+0x6e4>
 80065a4:	4651      	mov	r1, sl
 80065a6:	4620      	mov	r0, r4
 80065a8:	f001 f8da 	bl	8007760 <_Bfree>
 80065ac:	2300      	movs	r3, #0
 80065ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065b0:	702b      	strb	r3, [r5, #0]
 80065b2:	f10b 0301 	add.w	r3, fp, #1
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f43f ace2 	beq.w	8005f84 <_dtoa_r+0xa4>
 80065c0:	601d      	str	r5, [r3, #0]
 80065c2:	e4df      	b.n	8005f84 <_dtoa_r+0xa4>
 80065c4:	465f      	mov	r7, fp
 80065c6:	462b      	mov	r3, r5
 80065c8:	461d      	mov	r5, r3
 80065ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ce:	2a39      	cmp	r2, #57	; 0x39
 80065d0:	d106      	bne.n	80065e0 <_dtoa_r+0x700>
 80065d2:	9a00      	ldr	r2, [sp, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d1f7      	bne.n	80065c8 <_dtoa_r+0x6e8>
 80065d8:	9900      	ldr	r1, [sp, #0]
 80065da:	2230      	movs	r2, #48	; 0x30
 80065dc:	3701      	adds	r7, #1
 80065de:	700a      	strb	r2, [r1, #0]
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	3201      	adds	r2, #1
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e790      	b.n	800650a <_dtoa_r+0x62a>
 80065e8:	4ba3      	ldr	r3, [pc, #652]	; (8006878 <_dtoa_r+0x998>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	f7fa f80e 	bl	800060c <__aeabi_dmul>
 80065f0:	2200      	movs	r2, #0
 80065f2:	2300      	movs	r3, #0
 80065f4:	4606      	mov	r6, r0
 80065f6:	460f      	mov	r7, r1
 80065f8:	f7fa fa70 	bl	8000adc <__aeabi_dcmpeq>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d09e      	beq.n	800653e <_dtoa_r+0x65e>
 8006600:	e7d0      	b.n	80065a4 <_dtoa_r+0x6c4>
 8006602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006604:	2a00      	cmp	r2, #0
 8006606:	f000 80ca 	beq.w	800679e <_dtoa_r+0x8be>
 800660a:	9a07      	ldr	r2, [sp, #28]
 800660c:	2a01      	cmp	r2, #1
 800660e:	f300 80ad 	bgt.w	800676c <_dtoa_r+0x88c>
 8006612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006614:	2a00      	cmp	r2, #0
 8006616:	f000 80a5 	beq.w	8006764 <_dtoa_r+0x884>
 800661a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800661e:	9e08      	ldr	r6, [sp, #32]
 8006620:	9d05      	ldr	r5, [sp, #20]
 8006622:	9a05      	ldr	r2, [sp, #20]
 8006624:	441a      	add	r2, r3
 8006626:	9205      	str	r2, [sp, #20]
 8006628:	9a06      	ldr	r2, [sp, #24]
 800662a:	2101      	movs	r1, #1
 800662c:	441a      	add	r2, r3
 800662e:	4620      	mov	r0, r4
 8006630:	9206      	str	r2, [sp, #24]
 8006632:	f001 f995 	bl	8007960 <__i2b>
 8006636:	4607      	mov	r7, r0
 8006638:	b165      	cbz	r5, 8006654 <_dtoa_r+0x774>
 800663a:	9b06      	ldr	r3, [sp, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	dd09      	ble.n	8006654 <_dtoa_r+0x774>
 8006640:	42ab      	cmp	r3, r5
 8006642:	9a05      	ldr	r2, [sp, #20]
 8006644:	bfa8      	it	ge
 8006646:	462b      	movge	r3, r5
 8006648:	1ad2      	subs	r2, r2, r3
 800664a:	9205      	str	r2, [sp, #20]
 800664c:	9a06      	ldr	r2, [sp, #24]
 800664e:	1aed      	subs	r5, r5, r3
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	9306      	str	r3, [sp, #24]
 8006654:	9b08      	ldr	r3, [sp, #32]
 8006656:	b1f3      	cbz	r3, 8006696 <_dtoa_r+0x7b6>
 8006658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 80a3 	beq.w	80067a6 <_dtoa_r+0x8c6>
 8006660:	2e00      	cmp	r6, #0
 8006662:	dd10      	ble.n	8006686 <_dtoa_r+0x7a6>
 8006664:	4639      	mov	r1, r7
 8006666:	4632      	mov	r2, r6
 8006668:	4620      	mov	r0, r4
 800666a:	f001 fa39 	bl	8007ae0 <__pow5mult>
 800666e:	4652      	mov	r2, sl
 8006670:	4601      	mov	r1, r0
 8006672:	4607      	mov	r7, r0
 8006674:	4620      	mov	r0, r4
 8006676:	f001 f989 	bl	800798c <__multiply>
 800667a:	4651      	mov	r1, sl
 800667c:	4680      	mov	r8, r0
 800667e:	4620      	mov	r0, r4
 8006680:	f001 f86e 	bl	8007760 <_Bfree>
 8006684:	46c2      	mov	sl, r8
 8006686:	9b08      	ldr	r3, [sp, #32]
 8006688:	1b9a      	subs	r2, r3, r6
 800668a:	d004      	beq.n	8006696 <_dtoa_r+0x7b6>
 800668c:	4651      	mov	r1, sl
 800668e:	4620      	mov	r0, r4
 8006690:	f001 fa26 	bl	8007ae0 <__pow5mult>
 8006694:	4682      	mov	sl, r0
 8006696:	2101      	movs	r1, #1
 8006698:	4620      	mov	r0, r4
 800669a:	f001 f961 	bl	8007960 <__i2b>
 800669e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	4606      	mov	r6, r0
 80066a4:	f340 8081 	ble.w	80067aa <_dtoa_r+0x8ca>
 80066a8:	461a      	mov	r2, r3
 80066aa:	4601      	mov	r1, r0
 80066ac:	4620      	mov	r0, r4
 80066ae:	f001 fa17 	bl	8007ae0 <__pow5mult>
 80066b2:	9b07      	ldr	r3, [sp, #28]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	4606      	mov	r6, r0
 80066b8:	dd7a      	ble.n	80067b0 <_dtoa_r+0x8d0>
 80066ba:	f04f 0800 	mov.w	r8, #0
 80066be:	6933      	ldr	r3, [r6, #16]
 80066c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066c4:	6918      	ldr	r0, [r3, #16]
 80066c6:	f001 f8fd 	bl	80078c4 <__hi0bits>
 80066ca:	f1c0 0020 	rsb	r0, r0, #32
 80066ce:	9b06      	ldr	r3, [sp, #24]
 80066d0:	4418      	add	r0, r3
 80066d2:	f010 001f 	ands.w	r0, r0, #31
 80066d6:	f000 8094 	beq.w	8006802 <_dtoa_r+0x922>
 80066da:	f1c0 0320 	rsb	r3, r0, #32
 80066de:	2b04      	cmp	r3, #4
 80066e0:	f340 8085 	ble.w	80067ee <_dtoa_r+0x90e>
 80066e4:	9b05      	ldr	r3, [sp, #20]
 80066e6:	f1c0 001c 	rsb	r0, r0, #28
 80066ea:	4403      	add	r3, r0
 80066ec:	9305      	str	r3, [sp, #20]
 80066ee:	9b06      	ldr	r3, [sp, #24]
 80066f0:	4403      	add	r3, r0
 80066f2:	4405      	add	r5, r0
 80066f4:	9306      	str	r3, [sp, #24]
 80066f6:	9b05      	ldr	r3, [sp, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	dd05      	ble.n	8006708 <_dtoa_r+0x828>
 80066fc:	4651      	mov	r1, sl
 80066fe:	461a      	mov	r2, r3
 8006700:	4620      	mov	r0, r4
 8006702:	f001 fa47 	bl	8007b94 <__lshift>
 8006706:	4682      	mov	sl, r0
 8006708:	9b06      	ldr	r3, [sp, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	dd05      	ble.n	800671a <_dtoa_r+0x83a>
 800670e:	4631      	mov	r1, r6
 8006710:	461a      	mov	r2, r3
 8006712:	4620      	mov	r0, r4
 8006714:	f001 fa3e 	bl	8007b94 <__lshift>
 8006718:	4606      	mov	r6, r0
 800671a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800671c:	2b00      	cmp	r3, #0
 800671e:	d072      	beq.n	8006806 <_dtoa_r+0x926>
 8006720:	4631      	mov	r1, r6
 8006722:	4650      	mov	r0, sl
 8006724:	f001 faa2 	bl	8007c6c <__mcmp>
 8006728:	2800      	cmp	r0, #0
 800672a:	da6c      	bge.n	8006806 <_dtoa_r+0x926>
 800672c:	2300      	movs	r3, #0
 800672e:	4651      	mov	r1, sl
 8006730:	220a      	movs	r2, #10
 8006732:	4620      	mov	r0, r4
 8006734:	f001 f836 	bl	80077a4 <__multadd>
 8006738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800673e:	4682      	mov	sl, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 81b0 	beq.w	8006aa6 <_dtoa_r+0xbc6>
 8006746:	2300      	movs	r3, #0
 8006748:	4639      	mov	r1, r7
 800674a:	220a      	movs	r2, #10
 800674c:	4620      	mov	r0, r4
 800674e:	f001 f829 	bl	80077a4 <__multadd>
 8006752:	9b01      	ldr	r3, [sp, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	4607      	mov	r7, r0
 8006758:	f300 8096 	bgt.w	8006888 <_dtoa_r+0x9a8>
 800675c:	9b07      	ldr	r3, [sp, #28]
 800675e:	2b02      	cmp	r3, #2
 8006760:	dc59      	bgt.n	8006816 <_dtoa_r+0x936>
 8006762:	e091      	b.n	8006888 <_dtoa_r+0x9a8>
 8006764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800676a:	e758      	b.n	800661e <_dtoa_r+0x73e>
 800676c:	9b04      	ldr	r3, [sp, #16]
 800676e:	1e5e      	subs	r6, r3, #1
 8006770:	9b08      	ldr	r3, [sp, #32]
 8006772:	42b3      	cmp	r3, r6
 8006774:	bfbf      	itttt	lt
 8006776:	9b08      	ldrlt	r3, [sp, #32]
 8006778:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800677a:	9608      	strlt	r6, [sp, #32]
 800677c:	1af3      	sublt	r3, r6, r3
 800677e:	bfb4      	ite	lt
 8006780:	18d2      	addlt	r2, r2, r3
 8006782:	1b9e      	subge	r6, r3, r6
 8006784:	9b04      	ldr	r3, [sp, #16]
 8006786:	bfbc      	itt	lt
 8006788:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800678a:	2600      	movlt	r6, #0
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfb7      	itett	lt
 8006790:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006794:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006798:	1a9d      	sublt	r5, r3, r2
 800679a:	2300      	movlt	r3, #0
 800679c:	e741      	b.n	8006622 <_dtoa_r+0x742>
 800679e:	9e08      	ldr	r6, [sp, #32]
 80067a0:	9d05      	ldr	r5, [sp, #20]
 80067a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067a4:	e748      	b.n	8006638 <_dtoa_r+0x758>
 80067a6:	9a08      	ldr	r2, [sp, #32]
 80067a8:	e770      	b.n	800668c <_dtoa_r+0x7ac>
 80067aa:	9b07      	ldr	r3, [sp, #28]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	dc19      	bgt.n	80067e4 <_dtoa_r+0x904>
 80067b0:	9b02      	ldr	r3, [sp, #8]
 80067b2:	b9bb      	cbnz	r3, 80067e4 <_dtoa_r+0x904>
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067ba:	b99b      	cbnz	r3, 80067e4 <_dtoa_r+0x904>
 80067bc:	9b03      	ldr	r3, [sp, #12]
 80067be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067c2:	0d1b      	lsrs	r3, r3, #20
 80067c4:	051b      	lsls	r3, r3, #20
 80067c6:	b183      	cbz	r3, 80067ea <_dtoa_r+0x90a>
 80067c8:	9b05      	ldr	r3, [sp, #20]
 80067ca:	3301      	adds	r3, #1
 80067cc:	9305      	str	r3, [sp, #20]
 80067ce:	9b06      	ldr	r3, [sp, #24]
 80067d0:	3301      	adds	r3, #1
 80067d2:	9306      	str	r3, [sp, #24]
 80067d4:	f04f 0801 	mov.w	r8, #1
 80067d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f47f af6f 	bne.w	80066be <_dtoa_r+0x7de>
 80067e0:	2001      	movs	r0, #1
 80067e2:	e774      	b.n	80066ce <_dtoa_r+0x7ee>
 80067e4:	f04f 0800 	mov.w	r8, #0
 80067e8:	e7f6      	b.n	80067d8 <_dtoa_r+0x8f8>
 80067ea:	4698      	mov	r8, r3
 80067ec:	e7f4      	b.n	80067d8 <_dtoa_r+0x8f8>
 80067ee:	d082      	beq.n	80066f6 <_dtoa_r+0x816>
 80067f0:	9a05      	ldr	r2, [sp, #20]
 80067f2:	331c      	adds	r3, #28
 80067f4:	441a      	add	r2, r3
 80067f6:	9205      	str	r2, [sp, #20]
 80067f8:	9a06      	ldr	r2, [sp, #24]
 80067fa:	441a      	add	r2, r3
 80067fc:	441d      	add	r5, r3
 80067fe:	9206      	str	r2, [sp, #24]
 8006800:	e779      	b.n	80066f6 <_dtoa_r+0x816>
 8006802:	4603      	mov	r3, r0
 8006804:	e7f4      	b.n	80067f0 <_dtoa_r+0x910>
 8006806:	9b04      	ldr	r3, [sp, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	dc37      	bgt.n	800687c <_dtoa_r+0x99c>
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	2b02      	cmp	r3, #2
 8006810:	dd34      	ble.n	800687c <_dtoa_r+0x99c>
 8006812:	9b04      	ldr	r3, [sp, #16]
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	9b01      	ldr	r3, [sp, #4]
 8006818:	b963      	cbnz	r3, 8006834 <_dtoa_r+0x954>
 800681a:	4631      	mov	r1, r6
 800681c:	2205      	movs	r2, #5
 800681e:	4620      	mov	r0, r4
 8006820:	f000 ffc0 	bl	80077a4 <__multadd>
 8006824:	4601      	mov	r1, r0
 8006826:	4606      	mov	r6, r0
 8006828:	4650      	mov	r0, sl
 800682a:	f001 fa1f 	bl	8007c6c <__mcmp>
 800682e:	2800      	cmp	r0, #0
 8006830:	f73f adbb 	bgt.w	80063aa <_dtoa_r+0x4ca>
 8006834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006836:	9d00      	ldr	r5, [sp, #0]
 8006838:	ea6f 0b03 	mvn.w	fp, r3
 800683c:	f04f 0800 	mov.w	r8, #0
 8006840:	4631      	mov	r1, r6
 8006842:	4620      	mov	r0, r4
 8006844:	f000 ff8c 	bl	8007760 <_Bfree>
 8006848:	2f00      	cmp	r7, #0
 800684a:	f43f aeab 	beq.w	80065a4 <_dtoa_r+0x6c4>
 800684e:	f1b8 0f00 	cmp.w	r8, #0
 8006852:	d005      	beq.n	8006860 <_dtoa_r+0x980>
 8006854:	45b8      	cmp	r8, r7
 8006856:	d003      	beq.n	8006860 <_dtoa_r+0x980>
 8006858:	4641      	mov	r1, r8
 800685a:	4620      	mov	r0, r4
 800685c:	f000 ff80 	bl	8007760 <_Bfree>
 8006860:	4639      	mov	r1, r7
 8006862:	4620      	mov	r0, r4
 8006864:	f000 ff7c 	bl	8007760 <_Bfree>
 8006868:	e69c      	b.n	80065a4 <_dtoa_r+0x6c4>
 800686a:	2600      	movs	r6, #0
 800686c:	4637      	mov	r7, r6
 800686e:	e7e1      	b.n	8006834 <_dtoa_r+0x954>
 8006870:	46bb      	mov	fp, r7
 8006872:	4637      	mov	r7, r6
 8006874:	e599      	b.n	80063aa <_dtoa_r+0x4ca>
 8006876:	bf00      	nop
 8006878:	40240000 	.word	0x40240000
 800687c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 80c8 	beq.w	8006a14 <_dtoa_r+0xb34>
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	2d00      	cmp	r5, #0
 800688a:	dd05      	ble.n	8006898 <_dtoa_r+0x9b8>
 800688c:	4639      	mov	r1, r7
 800688e:	462a      	mov	r2, r5
 8006890:	4620      	mov	r0, r4
 8006892:	f001 f97f 	bl	8007b94 <__lshift>
 8006896:	4607      	mov	r7, r0
 8006898:	f1b8 0f00 	cmp.w	r8, #0
 800689c:	d05b      	beq.n	8006956 <_dtoa_r+0xa76>
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 ff1d 	bl	80076e0 <_Balloc>
 80068a6:	4605      	mov	r5, r0
 80068a8:	b928      	cbnz	r0, 80068b6 <_dtoa_r+0x9d6>
 80068aa:	4b83      	ldr	r3, [pc, #524]	; (8006ab8 <_dtoa_r+0xbd8>)
 80068ac:	4602      	mov	r2, r0
 80068ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80068b2:	f7ff bb2e 	b.w	8005f12 <_dtoa_r+0x32>
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	3202      	adds	r2, #2
 80068ba:	0092      	lsls	r2, r2, #2
 80068bc:	f107 010c 	add.w	r1, r7, #12
 80068c0:	300c      	adds	r0, #12
 80068c2:	f7ff f9f6 	bl	8005cb2 <memcpy>
 80068c6:	2201      	movs	r2, #1
 80068c8:	4629      	mov	r1, r5
 80068ca:	4620      	mov	r0, r4
 80068cc:	f001 f962 	bl	8007b94 <__lshift>
 80068d0:	9b00      	ldr	r3, [sp, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068da:	4413      	add	r3, r2
 80068dc:	9308      	str	r3, [sp, #32]
 80068de:	9b02      	ldr	r3, [sp, #8]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	46b8      	mov	r8, r7
 80068e6:	9306      	str	r3, [sp, #24]
 80068e8:	4607      	mov	r7, r0
 80068ea:	9b04      	ldr	r3, [sp, #16]
 80068ec:	4631      	mov	r1, r6
 80068ee:	3b01      	subs	r3, #1
 80068f0:	4650      	mov	r0, sl
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	f7ff fa6a 	bl	8005dcc <quorem>
 80068f8:	4641      	mov	r1, r8
 80068fa:	9002      	str	r0, [sp, #8]
 80068fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006900:	4650      	mov	r0, sl
 8006902:	f001 f9b3 	bl	8007c6c <__mcmp>
 8006906:	463a      	mov	r2, r7
 8006908:	9005      	str	r0, [sp, #20]
 800690a:	4631      	mov	r1, r6
 800690c:	4620      	mov	r0, r4
 800690e:	f001 f9c9 	bl	8007ca4 <__mdiff>
 8006912:	68c2      	ldr	r2, [r0, #12]
 8006914:	4605      	mov	r5, r0
 8006916:	bb02      	cbnz	r2, 800695a <_dtoa_r+0xa7a>
 8006918:	4601      	mov	r1, r0
 800691a:	4650      	mov	r0, sl
 800691c:	f001 f9a6 	bl	8007c6c <__mcmp>
 8006920:	4602      	mov	r2, r0
 8006922:	4629      	mov	r1, r5
 8006924:	4620      	mov	r0, r4
 8006926:	9209      	str	r2, [sp, #36]	; 0x24
 8006928:	f000 ff1a 	bl	8007760 <_Bfree>
 800692c:	9b07      	ldr	r3, [sp, #28]
 800692e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006930:	9d04      	ldr	r5, [sp, #16]
 8006932:	ea43 0102 	orr.w	r1, r3, r2
 8006936:	9b06      	ldr	r3, [sp, #24]
 8006938:	4319      	orrs	r1, r3
 800693a:	d110      	bne.n	800695e <_dtoa_r+0xa7e>
 800693c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006940:	d029      	beq.n	8006996 <_dtoa_r+0xab6>
 8006942:	9b05      	ldr	r3, [sp, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	dd02      	ble.n	800694e <_dtoa_r+0xa6e>
 8006948:	9b02      	ldr	r3, [sp, #8]
 800694a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800694e:	9b01      	ldr	r3, [sp, #4]
 8006950:	f883 9000 	strb.w	r9, [r3]
 8006954:	e774      	b.n	8006840 <_dtoa_r+0x960>
 8006956:	4638      	mov	r0, r7
 8006958:	e7ba      	b.n	80068d0 <_dtoa_r+0x9f0>
 800695a:	2201      	movs	r2, #1
 800695c:	e7e1      	b.n	8006922 <_dtoa_r+0xa42>
 800695e:	9b05      	ldr	r3, [sp, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	db04      	blt.n	800696e <_dtoa_r+0xa8e>
 8006964:	9907      	ldr	r1, [sp, #28]
 8006966:	430b      	orrs	r3, r1
 8006968:	9906      	ldr	r1, [sp, #24]
 800696a:	430b      	orrs	r3, r1
 800696c:	d120      	bne.n	80069b0 <_dtoa_r+0xad0>
 800696e:	2a00      	cmp	r2, #0
 8006970:	dded      	ble.n	800694e <_dtoa_r+0xa6e>
 8006972:	4651      	mov	r1, sl
 8006974:	2201      	movs	r2, #1
 8006976:	4620      	mov	r0, r4
 8006978:	f001 f90c 	bl	8007b94 <__lshift>
 800697c:	4631      	mov	r1, r6
 800697e:	4682      	mov	sl, r0
 8006980:	f001 f974 	bl	8007c6c <__mcmp>
 8006984:	2800      	cmp	r0, #0
 8006986:	dc03      	bgt.n	8006990 <_dtoa_r+0xab0>
 8006988:	d1e1      	bne.n	800694e <_dtoa_r+0xa6e>
 800698a:	f019 0f01 	tst.w	r9, #1
 800698e:	d0de      	beq.n	800694e <_dtoa_r+0xa6e>
 8006990:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006994:	d1d8      	bne.n	8006948 <_dtoa_r+0xa68>
 8006996:	9a01      	ldr	r2, [sp, #4]
 8006998:	2339      	movs	r3, #57	; 0x39
 800699a:	7013      	strb	r3, [r2, #0]
 800699c:	462b      	mov	r3, r5
 800699e:	461d      	mov	r5, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069a6:	2a39      	cmp	r2, #57	; 0x39
 80069a8:	d06c      	beq.n	8006a84 <_dtoa_r+0xba4>
 80069aa:	3201      	adds	r2, #1
 80069ac:	701a      	strb	r2, [r3, #0]
 80069ae:	e747      	b.n	8006840 <_dtoa_r+0x960>
 80069b0:	2a00      	cmp	r2, #0
 80069b2:	dd07      	ble.n	80069c4 <_dtoa_r+0xae4>
 80069b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069b8:	d0ed      	beq.n	8006996 <_dtoa_r+0xab6>
 80069ba:	9a01      	ldr	r2, [sp, #4]
 80069bc:	f109 0301 	add.w	r3, r9, #1
 80069c0:	7013      	strb	r3, [r2, #0]
 80069c2:	e73d      	b.n	8006840 <_dtoa_r+0x960>
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	9a08      	ldr	r2, [sp, #32]
 80069c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d043      	beq.n	8006a58 <_dtoa_r+0xb78>
 80069d0:	4651      	mov	r1, sl
 80069d2:	2300      	movs	r3, #0
 80069d4:	220a      	movs	r2, #10
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 fee4 	bl	80077a4 <__multadd>
 80069dc:	45b8      	cmp	r8, r7
 80069de:	4682      	mov	sl, r0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	f04f 020a 	mov.w	r2, #10
 80069e8:	4641      	mov	r1, r8
 80069ea:	4620      	mov	r0, r4
 80069ec:	d107      	bne.n	80069fe <_dtoa_r+0xb1e>
 80069ee:	f000 fed9 	bl	80077a4 <__multadd>
 80069f2:	4680      	mov	r8, r0
 80069f4:	4607      	mov	r7, r0
 80069f6:	9b04      	ldr	r3, [sp, #16]
 80069f8:	3301      	adds	r3, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	e775      	b.n	80068ea <_dtoa_r+0xa0a>
 80069fe:	f000 fed1 	bl	80077a4 <__multadd>
 8006a02:	4639      	mov	r1, r7
 8006a04:	4680      	mov	r8, r0
 8006a06:	2300      	movs	r3, #0
 8006a08:	220a      	movs	r2, #10
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 feca 	bl	80077a4 <__multadd>
 8006a10:	4607      	mov	r7, r0
 8006a12:	e7f0      	b.n	80069f6 <_dtoa_r+0xb16>
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	9d00      	ldr	r5, [sp, #0]
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	f7ff f9d5 	bl	8005dcc <quorem>
 8006a22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a26:	9b00      	ldr	r3, [sp, #0]
 8006a28:	f805 9b01 	strb.w	r9, [r5], #1
 8006a2c:	1aea      	subs	r2, r5, r3
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	4293      	cmp	r3, r2
 8006a32:	dd07      	ble.n	8006a44 <_dtoa_r+0xb64>
 8006a34:	4651      	mov	r1, sl
 8006a36:	2300      	movs	r3, #0
 8006a38:	220a      	movs	r2, #10
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 feb2 	bl	80077a4 <__multadd>
 8006a40:	4682      	mov	sl, r0
 8006a42:	e7ea      	b.n	8006a1a <_dtoa_r+0xb3a>
 8006a44:	9b01      	ldr	r3, [sp, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bfc8      	it	gt
 8006a4a:	461d      	movgt	r5, r3
 8006a4c:	9b00      	ldr	r3, [sp, #0]
 8006a4e:	bfd8      	it	le
 8006a50:	2501      	movle	r5, #1
 8006a52:	441d      	add	r5, r3
 8006a54:	f04f 0800 	mov.w	r8, #0
 8006a58:	4651      	mov	r1, sl
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f001 f899 	bl	8007b94 <__lshift>
 8006a62:	4631      	mov	r1, r6
 8006a64:	4682      	mov	sl, r0
 8006a66:	f001 f901 	bl	8007c6c <__mcmp>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	dc96      	bgt.n	800699c <_dtoa_r+0xabc>
 8006a6e:	d102      	bne.n	8006a76 <_dtoa_r+0xb96>
 8006a70:	f019 0f01 	tst.w	r9, #1
 8006a74:	d192      	bne.n	800699c <_dtoa_r+0xabc>
 8006a76:	462b      	mov	r3, r5
 8006a78:	461d      	mov	r5, r3
 8006a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a7e:	2a30      	cmp	r2, #48	; 0x30
 8006a80:	d0fa      	beq.n	8006a78 <_dtoa_r+0xb98>
 8006a82:	e6dd      	b.n	8006840 <_dtoa_r+0x960>
 8006a84:	9a00      	ldr	r2, [sp, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d189      	bne.n	800699e <_dtoa_r+0xabe>
 8006a8a:	f10b 0b01 	add.w	fp, fp, #1
 8006a8e:	2331      	movs	r3, #49	; 0x31
 8006a90:	e796      	b.n	80069c0 <_dtoa_r+0xae0>
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <_dtoa_r+0xbdc>)
 8006a94:	f7ff ba99 	b.w	8005fca <_dtoa_r+0xea>
 8006a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f47f aa6d 	bne.w	8005f7a <_dtoa_r+0x9a>
 8006aa0:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <_dtoa_r+0xbe0>)
 8006aa2:	f7ff ba92 	b.w	8005fca <_dtoa_r+0xea>
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	dcb5      	bgt.n	8006a18 <_dtoa_r+0xb38>
 8006aac:	9b07      	ldr	r3, [sp, #28]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	f73f aeb1 	bgt.w	8006816 <_dtoa_r+0x936>
 8006ab4:	e7b0      	b.n	8006a18 <_dtoa_r+0xb38>
 8006ab6:	bf00      	nop
 8006ab8:	080088ab 	.word	0x080088ab
 8006abc:	08008618 	.word	0x08008618
 8006ac0:	08008846 	.word	0x08008846

08006ac4 <rshift>:
 8006ac4:	6903      	ldr	r3, [r0, #16]
 8006ac6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006aca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ace:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006ad2:	f100 0414 	add.w	r4, r0, #20
 8006ad6:	dd45      	ble.n	8006b64 <rshift+0xa0>
 8006ad8:	f011 011f 	ands.w	r1, r1, #31
 8006adc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006ae0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006ae4:	d10c      	bne.n	8006b00 <rshift+0x3c>
 8006ae6:	f100 0710 	add.w	r7, r0, #16
 8006aea:	4629      	mov	r1, r5
 8006aec:	42b1      	cmp	r1, r6
 8006aee:	d334      	bcc.n	8006b5a <rshift+0x96>
 8006af0:	1a9b      	subs	r3, r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	1eea      	subs	r2, r5, #3
 8006af6:	4296      	cmp	r6, r2
 8006af8:	bf38      	it	cc
 8006afa:	2300      	movcc	r3, #0
 8006afc:	4423      	add	r3, r4
 8006afe:	e015      	b.n	8006b2c <rshift+0x68>
 8006b00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b04:	f1c1 0820 	rsb	r8, r1, #32
 8006b08:	40cf      	lsrs	r7, r1
 8006b0a:	f105 0e04 	add.w	lr, r5, #4
 8006b0e:	46a1      	mov	r9, r4
 8006b10:	4576      	cmp	r6, lr
 8006b12:	46f4      	mov	ip, lr
 8006b14:	d815      	bhi.n	8006b42 <rshift+0x7e>
 8006b16:	1a9a      	subs	r2, r3, r2
 8006b18:	0092      	lsls	r2, r2, #2
 8006b1a:	3a04      	subs	r2, #4
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	42ae      	cmp	r6, r5
 8006b20:	bf38      	it	cc
 8006b22:	2200      	movcc	r2, #0
 8006b24:	18a3      	adds	r3, r4, r2
 8006b26:	50a7      	str	r7, [r4, r2]
 8006b28:	b107      	cbz	r7, 8006b2c <rshift+0x68>
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	1b1a      	subs	r2, r3, r4
 8006b2e:	42a3      	cmp	r3, r4
 8006b30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b34:	bf08      	it	eq
 8006b36:	2300      	moveq	r3, #0
 8006b38:	6102      	str	r2, [r0, #16]
 8006b3a:	bf08      	it	eq
 8006b3c:	6143      	streq	r3, [r0, #20]
 8006b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b42:	f8dc c000 	ldr.w	ip, [ip]
 8006b46:	fa0c fc08 	lsl.w	ip, ip, r8
 8006b4a:	ea4c 0707 	orr.w	r7, ip, r7
 8006b4e:	f849 7b04 	str.w	r7, [r9], #4
 8006b52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b56:	40cf      	lsrs	r7, r1
 8006b58:	e7da      	b.n	8006b10 <rshift+0x4c>
 8006b5a:	f851 cb04 	ldr.w	ip, [r1], #4
 8006b5e:	f847 cf04 	str.w	ip, [r7, #4]!
 8006b62:	e7c3      	b.n	8006aec <rshift+0x28>
 8006b64:	4623      	mov	r3, r4
 8006b66:	e7e1      	b.n	8006b2c <rshift+0x68>

08006b68 <__hexdig_fun>:
 8006b68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006b6c:	2b09      	cmp	r3, #9
 8006b6e:	d802      	bhi.n	8006b76 <__hexdig_fun+0xe>
 8006b70:	3820      	subs	r0, #32
 8006b72:	b2c0      	uxtb	r0, r0
 8006b74:	4770      	bx	lr
 8006b76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006b7a:	2b05      	cmp	r3, #5
 8006b7c:	d801      	bhi.n	8006b82 <__hexdig_fun+0x1a>
 8006b7e:	3847      	subs	r0, #71	; 0x47
 8006b80:	e7f7      	b.n	8006b72 <__hexdig_fun+0xa>
 8006b82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006b86:	2b05      	cmp	r3, #5
 8006b88:	d801      	bhi.n	8006b8e <__hexdig_fun+0x26>
 8006b8a:	3827      	subs	r0, #39	; 0x27
 8006b8c:	e7f1      	b.n	8006b72 <__hexdig_fun+0xa>
 8006b8e:	2000      	movs	r0, #0
 8006b90:	4770      	bx	lr
	...

08006b94 <__gethex>:
 8006b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b98:	4617      	mov	r7, r2
 8006b9a:	680a      	ldr	r2, [r1, #0]
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	f102 0b02 	add.w	fp, r2, #2
 8006ba2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006ba6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006baa:	4681      	mov	r9, r0
 8006bac:	468a      	mov	sl, r1
 8006bae:	9302      	str	r3, [sp, #8]
 8006bb0:	32fe      	adds	r2, #254	; 0xfe
 8006bb2:	eb02 030b 	add.w	r3, r2, fp
 8006bb6:	46d8      	mov	r8, fp
 8006bb8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	2830      	cmp	r0, #48	; 0x30
 8006bc0:	d0f7      	beq.n	8006bb2 <__gethex+0x1e>
 8006bc2:	f7ff ffd1 	bl	8006b68 <__hexdig_fun>
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d138      	bne.n	8006c3e <__gethex+0xaa>
 8006bcc:	49a7      	ldr	r1, [pc, #668]	; (8006e6c <__gethex+0x2d8>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	f7fe ffc7 	bl	8005b64 <strncmp>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d169      	bne.n	8006cb0 <__gethex+0x11c>
 8006bdc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006be0:	465d      	mov	r5, fp
 8006be2:	f7ff ffc1 	bl	8006b68 <__hexdig_fun>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	d064      	beq.n	8006cb4 <__gethex+0x120>
 8006bea:	465a      	mov	r2, fp
 8006bec:	7810      	ldrb	r0, [r2, #0]
 8006bee:	2830      	cmp	r0, #48	; 0x30
 8006bf0:	4690      	mov	r8, r2
 8006bf2:	f102 0201 	add.w	r2, r2, #1
 8006bf6:	d0f9      	beq.n	8006bec <__gethex+0x58>
 8006bf8:	f7ff ffb6 	bl	8006b68 <__hexdig_fun>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	fab0 f480 	clz	r4, r0
 8006c02:	0964      	lsrs	r4, r4, #5
 8006c04:	465e      	mov	r6, fp
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	4642      	mov	r2, r8
 8006c0a:	4615      	mov	r5, r2
 8006c0c:	3201      	adds	r2, #1
 8006c0e:	7828      	ldrb	r0, [r5, #0]
 8006c10:	f7ff ffaa 	bl	8006b68 <__hexdig_fun>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d1f8      	bne.n	8006c0a <__gethex+0x76>
 8006c18:	4994      	ldr	r1, [pc, #592]	; (8006e6c <__gethex+0x2d8>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f7fe ffa1 	bl	8005b64 <strncmp>
 8006c22:	b978      	cbnz	r0, 8006c44 <__gethex+0xb0>
 8006c24:	b946      	cbnz	r6, 8006c38 <__gethex+0xa4>
 8006c26:	1c6e      	adds	r6, r5, #1
 8006c28:	4632      	mov	r2, r6
 8006c2a:	4615      	mov	r5, r2
 8006c2c:	3201      	adds	r2, #1
 8006c2e:	7828      	ldrb	r0, [r5, #0]
 8006c30:	f7ff ff9a 	bl	8006b68 <__hexdig_fun>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d1f8      	bne.n	8006c2a <__gethex+0x96>
 8006c38:	1b73      	subs	r3, r6, r5
 8006c3a:	009e      	lsls	r6, r3, #2
 8006c3c:	e004      	b.n	8006c48 <__gethex+0xb4>
 8006c3e:	2400      	movs	r4, #0
 8006c40:	4626      	mov	r6, r4
 8006c42:	e7e1      	b.n	8006c08 <__gethex+0x74>
 8006c44:	2e00      	cmp	r6, #0
 8006c46:	d1f7      	bne.n	8006c38 <__gethex+0xa4>
 8006c48:	782b      	ldrb	r3, [r5, #0]
 8006c4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c4e:	2b50      	cmp	r3, #80	; 0x50
 8006c50:	d13d      	bne.n	8006cce <__gethex+0x13a>
 8006c52:	786b      	ldrb	r3, [r5, #1]
 8006c54:	2b2b      	cmp	r3, #43	; 0x2b
 8006c56:	d02f      	beq.n	8006cb8 <__gethex+0x124>
 8006c58:	2b2d      	cmp	r3, #45	; 0x2d
 8006c5a:	d031      	beq.n	8006cc0 <__gethex+0x12c>
 8006c5c:	1c69      	adds	r1, r5, #1
 8006c5e:	f04f 0b00 	mov.w	fp, #0
 8006c62:	7808      	ldrb	r0, [r1, #0]
 8006c64:	f7ff ff80 	bl	8006b68 <__hexdig_fun>
 8006c68:	1e42      	subs	r2, r0, #1
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	2a18      	cmp	r2, #24
 8006c6e:	d82e      	bhi.n	8006cce <__gethex+0x13a>
 8006c70:	f1a0 0210 	sub.w	r2, r0, #16
 8006c74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c78:	f7ff ff76 	bl	8006b68 <__hexdig_fun>
 8006c7c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8006c80:	fa5f fc8c 	uxtb.w	ip, ip
 8006c84:	f1bc 0f18 	cmp.w	ip, #24
 8006c88:	d91d      	bls.n	8006cc6 <__gethex+0x132>
 8006c8a:	f1bb 0f00 	cmp.w	fp, #0
 8006c8e:	d000      	beq.n	8006c92 <__gethex+0xfe>
 8006c90:	4252      	negs	r2, r2
 8006c92:	4416      	add	r6, r2
 8006c94:	f8ca 1000 	str.w	r1, [sl]
 8006c98:	b1dc      	cbz	r4, 8006cd2 <__gethex+0x13e>
 8006c9a:	9b01      	ldr	r3, [sp, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	bf14      	ite	ne
 8006ca0:	f04f 0800 	movne.w	r8, #0
 8006ca4:	f04f 0806 	moveq.w	r8, #6
 8006ca8:	4640      	mov	r0, r8
 8006caa:	b005      	add	sp, #20
 8006cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb0:	4645      	mov	r5, r8
 8006cb2:	4626      	mov	r6, r4
 8006cb4:	2401      	movs	r4, #1
 8006cb6:	e7c7      	b.n	8006c48 <__gethex+0xb4>
 8006cb8:	f04f 0b00 	mov.w	fp, #0
 8006cbc:	1ca9      	adds	r1, r5, #2
 8006cbe:	e7d0      	b.n	8006c62 <__gethex+0xce>
 8006cc0:	f04f 0b01 	mov.w	fp, #1
 8006cc4:	e7fa      	b.n	8006cbc <__gethex+0x128>
 8006cc6:	230a      	movs	r3, #10
 8006cc8:	fb03 0002 	mla	r0, r3, r2, r0
 8006ccc:	e7d0      	b.n	8006c70 <__gethex+0xdc>
 8006cce:	4629      	mov	r1, r5
 8006cd0:	e7e0      	b.n	8006c94 <__gethex+0x100>
 8006cd2:	eba5 0308 	sub.w	r3, r5, r8
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	4621      	mov	r1, r4
 8006cda:	2b07      	cmp	r3, #7
 8006cdc:	dc0a      	bgt.n	8006cf4 <__gethex+0x160>
 8006cde:	4648      	mov	r0, r9
 8006ce0:	f000 fcfe 	bl	80076e0 <_Balloc>
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	b940      	cbnz	r0, 8006cfa <__gethex+0x166>
 8006ce8:	4b61      	ldr	r3, [pc, #388]	; (8006e70 <__gethex+0x2dc>)
 8006cea:	4602      	mov	r2, r0
 8006cec:	21e4      	movs	r1, #228	; 0xe4
 8006cee:	4861      	ldr	r0, [pc, #388]	; (8006e74 <__gethex+0x2e0>)
 8006cf0:	f7ff f84e 	bl	8005d90 <__assert_func>
 8006cf4:	3101      	adds	r1, #1
 8006cf6:	105b      	asrs	r3, r3, #1
 8006cf8:	e7ef      	b.n	8006cda <__gethex+0x146>
 8006cfa:	f100 0a14 	add.w	sl, r0, #20
 8006cfe:	2300      	movs	r3, #0
 8006d00:	495a      	ldr	r1, [pc, #360]	; (8006e6c <__gethex+0x2d8>)
 8006d02:	f8cd a004 	str.w	sl, [sp, #4]
 8006d06:	469b      	mov	fp, r3
 8006d08:	45a8      	cmp	r8, r5
 8006d0a:	d342      	bcc.n	8006d92 <__gethex+0x1fe>
 8006d0c:	9801      	ldr	r0, [sp, #4]
 8006d0e:	f840 bb04 	str.w	fp, [r0], #4
 8006d12:	eba0 000a 	sub.w	r0, r0, sl
 8006d16:	1080      	asrs	r0, r0, #2
 8006d18:	6120      	str	r0, [r4, #16]
 8006d1a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8006d1e:	4658      	mov	r0, fp
 8006d20:	f000 fdd0 	bl	80078c4 <__hi0bits>
 8006d24:	683d      	ldr	r5, [r7, #0]
 8006d26:	eba8 0000 	sub.w	r0, r8, r0
 8006d2a:	42a8      	cmp	r0, r5
 8006d2c:	dd59      	ble.n	8006de2 <__gethex+0x24e>
 8006d2e:	eba0 0805 	sub.w	r8, r0, r5
 8006d32:	4641      	mov	r1, r8
 8006d34:	4620      	mov	r0, r4
 8006d36:	f001 f95f 	bl	8007ff8 <__any_on>
 8006d3a:	4683      	mov	fp, r0
 8006d3c:	b1b8      	cbz	r0, 8006d6e <__gethex+0x1da>
 8006d3e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8006d42:	1159      	asrs	r1, r3, #5
 8006d44:	f003 021f 	and.w	r2, r3, #31
 8006d48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006d4c:	f04f 0b01 	mov.w	fp, #1
 8006d50:	fa0b f202 	lsl.w	r2, fp, r2
 8006d54:	420a      	tst	r2, r1
 8006d56:	d00a      	beq.n	8006d6e <__gethex+0x1da>
 8006d58:	455b      	cmp	r3, fp
 8006d5a:	dd06      	ble.n	8006d6a <__gethex+0x1d6>
 8006d5c:	f1a8 0102 	sub.w	r1, r8, #2
 8006d60:	4620      	mov	r0, r4
 8006d62:	f001 f949 	bl	8007ff8 <__any_on>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d138      	bne.n	8006ddc <__gethex+0x248>
 8006d6a:	f04f 0b02 	mov.w	fp, #2
 8006d6e:	4641      	mov	r1, r8
 8006d70:	4620      	mov	r0, r4
 8006d72:	f7ff fea7 	bl	8006ac4 <rshift>
 8006d76:	4446      	add	r6, r8
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	42b3      	cmp	r3, r6
 8006d7c:	da41      	bge.n	8006e02 <__gethex+0x26e>
 8006d7e:	4621      	mov	r1, r4
 8006d80:	4648      	mov	r0, r9
 8006d82:	f000 fced 	bl	8007760 <_Bfree>
 8006d86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d88:	2300      	movs	r3, #0
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8006d90:	e78a      	b.n	8006ca8 <__gethex+0x114>
 8006d92:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8006d96:	2a2e      	cmp	r2, #46	; 0x2e
 8006d98:	d014      	beq.n	8006dc4 <__gethex+0x230>
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d106      	bne.n	8006dac <__gethex+0x218>
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	f843 bb04 	str.w	fp, [r3], #4
 8006da4:	f04f 0b00 	mov.w	fp, #0
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	465b      	mov	r3, fp
 8006dac:	7828      	ldrb	r0, [r5, #0]
 8006dae:	9303      	str	r3, [sp, #12]
 8006db0:	f7ff feda 	bl	8006b68 <__hexdig_fun>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	f000 000f 	and.w	r0, r0, #15
 8006dba:	4098      	lsls	r0, r3
 8006dbc:	ea4b 0b00 	orr.w	fp, fp, r0
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	e7a1      	b.n	8006d08 <__gethex+0x174>
 8006dc4:	45a8      	cmp	r8, r5
 8006dc6:	d8e8      	bhi.n	8006d9a <__gethex+0x206>
 8006dc8:	2201      	movs	r2, #1
 8006dca:	4628      	mov	r0, r5
 8006dcc:	9303      	str	r3, [sp, #12]
 8006dce:	f7fe fec9 	bl	8005b64 <strncmp>
 8006dd2:	4926      	ldr	r1, [pc, #152]	; (8006e6c <__gethex+0x2d8>)
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d1df      	bne.n	8006d9a <__gethex+0x206>
 8006dda:	e795      	b.n	8006d08 <__gethex+0x174>
 8006ddc:	f04f 0b03 	mov.w	fp, #3
 8006de0:	e7c5      	b.n	8006d6e <__gethex+0x1da>
 8006de2:	da0b      	bge.n	8006dfc <__gethex+0x268>
 8006de4:	eba5 0800 	sub.w	r8, r5, r0
 8006de8:	4621      	mov	r1, r4
 8006dea:	4642      	mov	r2, r8
 8006dec:	4648      	mov	r0, r9
 8006dee:	f000 fed1 	bl	8007b94 <__lshift>
 8006df2:	eba6 0608 	sub.w	r6, r6, r8
 8006df6:	4604      	mov	r4, r0
 8006df8:	f100 0a14 	add.w	sl, r0, #20
 8006dfc:	f04f 0b00 	mov.w	fp, #0
 8006e00:	e7ba      	b.n	8006d78 <__gethex+0x1e4>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	42b3      	cmp	r3, r6
 8006e06:	dd73      	ble.n	8006ef0 <__gethex+0x35c>
 8006e08:	1b9e      	subs	r6, r3, r6
 8006e0a:	42b5      	cmp	r5, r6
 8006e0c:	dc34      	bgt.n	8006e78 <__gethex+0x2e4>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d023      	beq.n	8006e5c <__gethex+0x2c8>
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d025      	beq.n	8006e64 <__gethex+0x2d0>
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d115      	bne.n	8006e48 <__gethex+0x2b4>
 8006e1c:	42b5      	cmp	r5, r6
 8006e1e:	d113      	bne.n	8006e48 <__gethex+0x2b4>
 8006e20:	2d01      	cmp	r5, #1
 8006e22:	d10b      	bne.n	8006e3c <__gethex+0x2a8>
 8006e24:	9a02      	ldr	r2, [sp, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	6123      	str	r3, [r4, #16]
 8006e2e:	f8ca 3000 	str.w	r3, [sl]
 8006e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e34:	f04f 0862 	mov.w	r8, #98	; 0x62
 8006e38:	601c      	str	r4, [r3, #0]
 8006e3a:	e735      	b.n	8006ca8 <__gethex+0x114>
 8006e3c:	1e69      	subs	r1, r5, #1
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f001 f8da 	bl	8007ff8 <__any_on>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d1ed      	bne.n	8006e24 <__gethex+0x290>
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4648      	mov	r0, r9
 8006e4c:	f000 fc88 	bl	8007760 <_Bfree>
 8006e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e52:	2300      	movs	r3, #0
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	f04f 0850 	mov.w	r8, #80	; 0x50
 8006e5a:	e725      	b.n	8006ca8 <__gethex+0x114>
 8006e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f2      	bne.n	8006e48 <__gethex+0x2b4>
 8006e62:	e7df      	b.n	8006e24 <__gethex+0x290>
 8006e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1dc      	bne.n	8006e24 <__gethex+0x290>
 8006e6a:	e7ed      	b.n	8006e48 <__gethex+0x2b4>
 8006e6c:	0800863c 	.word	0x0800863c
 8006e70:	080088ab 	.word	0x080088ab
 8006e74:	080088bc 	.word	0x080088bc
 8006e78:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8006e7c:	f1bb 0f00 	cmp.w	fp, #0
 8006e80:	d133      	bne.n	8006eea <__gethex+0x356>
 8006e82:	f1b8 0f00 	cmp.w	r8, #0
 8006e86:	d004      	beq.n	8006e92 <__gethex+0x2fe>
 8006e88:	4641      	mov	r1, r8
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f001 f8b4 	bl	8007ff8 <__any_on>
 8006e90:	4683      	mov	fp, r0
 8006e92:	ea4f 1268 	mov.w	r2, r8, asr #5
 8006e96:	2301      	movs	r3, #1
 8006e98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006e9c:	f008 081f 	and.w	r8, r8, #31
 8006ea0:	fa03 f308 	lsl.w	r3, r3, r8
 8006ea4:	4213      	tst	r3, r2
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	bf18      	it	ne
 8006eac:	f04b 0b02 	orrne.w	fp, fp, #2
 8006eb0:	1bad      	subs	r5, r5, r6
 8006eb2:	f7ff fe07 	bl	8006ac4 <rshift>
 8006eb6:	687e      	ldr	r6, [r7, #4]
 8006eb8:	f04f 0802 	mov.w	r8, #2
 8006ebc:	f1bb 0f00 	cmp.w	fp, #0
 8006ec0:	d04a      	beq.n	8006f58 <__gethex+0x3c4>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d016      	beq.n	8006ef6 <__gethex+0x362>
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d018      	beq.n	8006efe <__gethex+0x36a>
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d109      	bne.n	8006ee4 <__gethex+0x350>
 8006ed0:	f01b 0f02 	tst.w	fp, #2
 8006ed4:	d006      	beq.n	8006ee4 <__gethex+0x350>
 8006ed6:	f8da 3000 	ldr.w	r3, [sl]
 8006eda:	ea4b 0b03 	orr.w	fp, fp, r3
 8006ede:	f01b 0f01 	tst.w	fp, #1
 8006ee2:	d10f      	bne.n	8006f04 <__gethex+0x370>
 8006ee4:	f048 0810 	orr.w	r8, r8, #16
 8006ee8:	e036      	b.n	8006f58 <__gethex+0x3c4>
 8006eea:	f04f 0b01 	mov.w	fp, #1
 8006eee:	e7d0      	b.n	8006e92 <__gethex+0x2fe>
 8006ef0:	f04f 0801 	mov.w	r8, #1
 8006ef4:	e7e2      	b.n	8006ebc <__gethex+0x328>
 8006ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ef8:	f1c3 0301 	rsb	r3, r3, #1
 8006efc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0ef      	beq.n	8006ee4 <__gethex+0x350>
 8006f04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f08:	f104 0214 	add.w	r2, r4, #20
 8006f0c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8006f16:	2300      	movs	r3, #0
 8006f18:	4694      	mov	ip, r2
 8006f1a:	f852 1b04 	ldr.w	r1, [r2], #4
 8006f1e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8006f22:	d01e      	beq.n	8006f62 <__gethex+0x3ce>
 8006f24:	3101      	adds	r1, #1
 8006f26:	f8cc 1000 	str.w	r1, [ip]
 8006f2a:	f1b8 0f02 	cmp.w	r8, #2
 8006f2e:	f104 0214 	add.w	r2, r4, #20
 8006f32:	d13d      	bne.n	8006fb0 <__gethex+0x41c>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	42ab      	cmp	r3, r5
 8006f3a:	d10b      	bne.n	8006f54 <__gethex+0x3c0>
 8006f3c:	1169      	asrs	r1, r5, #5
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f005 051f 	and.w	r5, r5, #31
 8006f44:	fa03 f505 	lsl.w	r5, r3, r5
 8006f48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f4c:	421d      	tst	r5, r3
 8006f4e:	bf18      	it	ne
 8006f50:	f04f 0801 	movne.w	r8, #1
 8006f54:	f048 0820 	orr.w	r8, r8, #32
 8006f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f5a:	601c      	str	r4, [r3, #0]
 8006f5c:	9b02      	ldr	r3, [sp, #8]
 8006f5e:	601e      	str	r6, [r3, #0]
 8006f60:	e6a2      	b.n	8006ca8 <__gethex+0x114>
 8006f62:	4290      	cmp	r0, r2
 8006f64:	f842 3c04 	str.w	r3, [r2, #-4]
 8006f68:	d8d6      	bhi.n	8006f18 <__gethex+0x384>
 8006f6a:	68a2      	ldr	r2, [r4, #8]
 8006f6c:	4593      	cmp	fp, r2
 8006f6e:	db17      	blt.n	8006fa0 <__gethex+0x40c>
 8006f70:	6861      	ldr	r1, [r4, #4]
 8006f72:	4648      	mov	r0, r9
 8006f74:	3101      	adds	r1, #1
 8006f76:	f000 fbb3 	bl	80076e0 <_Balloc>
 8006f7a:	4682      	mov	sl, r0
 8006f7c:	b918      	cbnz	r0, 8006f86 <__gethex+0x3f2>
 8006f7e:	4b1b      	ldr	r3, [pc, #108]	; (8006fec <__gethex+0x458>)
 8006f80:	4602      	mov	r2, r0
 8006f82:	2184      	movs	r1, #132	; 0x84
 8006f84:	e6b3      	b.n	8006cee <__gethex+0x15a>
 8006f86:	6922      	ldr	r2, [r4, #16]
 8006f88:	3202      	adds	r2, #2
 8006f8a:	f104 010c 	add.w	r1, r4, #12
 8006f8e:	0092      	lsls	r2, r2, #2
 8006f90:	300c      	adds	r0, #12
 8006f92:	f7fe fe8e 	bl	8005cb2 <memcpy>
 8006f96:	4621      	mov	r1, r4
 8006f98:	4648      	mov	r0, r9
 8006f9a:	f000 fbe1 	bl	8007760 <_Bfree>
 8006f9e:	4654      	mov	r4, sl
 8006fa0:	6922      	ldr	r2, [r4, #16]
 8006fa2:	1c51      	adds	r1, r2, #1
 8006fa4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006fa8:	6121      	str	r1, [r4, #16]
 8006faa:	2101      	movs	r1, #1
 8006fac:	6151      	str	r1, [r2, #20]
 8006fae:	e7bc      	b.n	8006f2a <__gethex+0x396>
 8006fb0:	6921      	ldr	r1, [r4, #16]
 8006fb2:	4559      	cmp	r1, fp
 8006fb4:	dd0b      	ble.n	8006fce <__gethex+0x43a>
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f7ff fd83 	bl	8006ac4 <rshift>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	3601      	adds	r6, #1
 8006fc2:	42b3      	cmp	r3, r6
 8006fc4:	f6ff aedb 	blt.w	8006d7e <__gethex+0x1ea>
 8006fc8:	f04f 0801 	mov.w	r8, #1
 8006fcc:	e7c2      	b.n	8006f54 <__gethex+0x3c0>
 8006fce:	f015 051f 	ands.w	r5, r5, #31
 8006fd2:	d0f9      	beq.n	8006fc8 <__gethex+0x434>
 8006fd4:	9b01      	ldr	r3, [sp, #4]
 8006fd6:	441a      	add	r2, r3
 8006fd8:	f1c5 0520 	rsb	r5, r5, #32
 8006fdc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8006fe0:	f000 fc70 	bl	80078c4 <__hi0bits>
 8006fe4:	42a8      	cmp	r0, r5
 8006fe6:	dbe6      	blt.n	8006fb6 <__gethex+0x422>
 8006fe8:	e7ee      	b.n	8006fc8 <__gethex+0x434>
 8006fea:	bf00      	nop
 8006fec:	080088ab 	.word	0x080088ab

08006ff0 <L_shift>:
 8006ff0:	f1c2 0208 	rsb	r2, r2, #8
 8006ff4:	0092      	lsls	r2, r2, #2
 8006ff6:	b570      	push	{r4, r5, r6, lr}
 8006ff8:	f1c2 0620 	rsb	r6, r2, #32
 8006ffc:	6843      	ldr	r3, [r0, #4]
 8006ffe:	6804      	ldr	r4, [r0, #0]
 8007000:	fa03 f506 	lsl.w	r5, r3, r6
 8007004:	432c      	orrs	r4, r5
 8007006:	40d3      	lsrs	r3, r2
 8007008:	6004      	str	r4, [r0, #0]
 800700a:	f840 3f04 	str.w	r3, [r0, #4]!
 800700e:	4288      	cmp	r0, r1
 8007010:	d3f4      	bcc.n	8006ffc <L_shift+0xc>
 8007012:	bd70      	pop	{r4, r5, r6, pc}

08007014 <__match>:
 8007014:	b530      	push	{r4, r5, lr}
 8007016:	6803      	ldr	r3, [r0, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800701e:	b914      	cbnz	r4, 8007026 <__match+0x12>
 8007020:	6003      	str	r3, [r0, #0]
 8007022:	2001      	movs	r0, #1
 8007024:	bd30      	pop	{r4, r5, pc}
 8007026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800702a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800702e:	2d19      	cmp	r5, #25
 8007030:	bf98      	it	ls
 8007032:	3220      	addls	r2, #32
 8007034:	42a2      	cmp	r2, r4
 8007036:	d0f0      	beq.n	800701a <__match+0x6>
 8007038:	2000      	movs	r0, #0
 800703a:	e7f3      	b.n	8007024 <__match+0x10>

0800703c <__hexnan>:
 800703c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007040:	680b      	ldr	r3, [r1, #0]
 8007042:	6801      	ldr	r1, [r0, #0]
 8007044:	115e      	asrs	r6, r3, #5
 8007046:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800704a:	f013 031f 	ands.w	r3, r3, #31
 800704e:	b087      	sub	sp, #28
 8007050:	bf18      	it	ne
 8007052:	3604      	addne	r6, #4
 8007054:	2500      	movs	r5, #0
 8007056:	1f37      	subs	r7, r6, #4
 8007058:	4682      	mov	sl, r0
 800705a:	4690      	mov	r8, r2
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007062:	46b9      	mov	r9, r7
 8007064:	463c      	mov	r4, r7
 8007066:	9502      	str	r5, [sp, #8]
 8007068:	46ab      	mov	fp, r5
 800706a:	784a      	ldrb	r2, [r1, #1]
 800706c:	1c4b      	adds	r3, r1, #1
 800706e:	9303      	str	r3, [sp, #12]
 8007070:	b342      	cbz	r2, 80070c4 <__hexnan+0x88>
 8007072:	4610      	mov	r0, r2
 8007074:	9105      	str	r1, [sp, #20]
 8007076:	9204      	str	r2, [sp, #16]
 8007078:	f7ff fd76 	bl	8006b68 <__hexdig_fun>
 800707c:	2800      	cmp	r0, #0
 800707e:	d14f      	bne.n	8007120 <__hexnan+0xe4>
 8007080:	9a04      	ldr	r2, [sp, #16]
 8007082:	9905      	ldr	r1, [sp, #20]
 8007084:	2a20      	cmp	r2, #32
 8007086:	d818      	bhi.n	80070ba <__hexnan+0x7e>
 8007088:	9b02      	ldr	r3, [sp, #8]
 800708a:	459b      	cmp	fp, r3
 800708c:	dd13      	ble.n	80070b6 <__hexnan+0x7a>
 800708e:	454c      	cmp	r4, r9
 8007090:	d206      	bcs.n	80070a0 <__hexnan+0x64>
 8007092:	2d07      	cmp	r5, #7
 8007094:	dc04      	bgt.n	80070a0 <__hexnan+0x64>
 8007096:	462a      	mov	r2, r5
 8007098:	4649      	mov	r1, r9
 800709a:	4620      	mov	r0, r4
 800709c:	f7ff ffa8 	bl	8006ff0 <L_shift>
 80070a0:	4544      	cmp	r4, r8
 80070a2:	d950      	bls.n	8007146 <__hexnan+0x10a>
 80070a4:	2300      	movs	r3, #0
 80070a6:	f1a4 0904 	sub.w	r9, r4, #4
 80070aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80070ae:	f8cd b008 	str.w	fp, [sp, #8]
 80070b2:	464c      	mov	r4, r9
 80070b4:	461d      	mov	r5, r3
 80070b6:	9903      	ldr	r1, [sp, #12]
 80070b8:	e7d7      	b.n	800706a <__hexnan+0x2e>
 80070ba:	2a29      	cmp	r2, #41	; 0x29
 80070bc:	d155      	bne.n	800716a <__hexnan+0x12e>
 80070be:	3102      	adds	r1, #2
 80070c0:	f8ca 1000 	str.w	r1, [sl]
 80070c4:	f1bb 0f00 	cmp.w	fp, #0
 80070c8:	d04f      	beq.n	800716a <__hexnan+0x12e>
 80070ca:	454c      	cmp	r4, r9
 80070cc:	d206      	bcs.n	80070dc <__hexnan+0xa0>
 80070ce:	2d07      	cmp	r5, #7
 80070d0:	dc04      	bgt.n	80070dc <__hexnan+0xa0>
 80070d2:	462a      	mov	r2, r5
 80070d4:	4649      	mov	r1, r9
 80070d6:	4620      	mov	r0, r4
 80070d8:	f7ff ff8a 	bl	8006ff0 <L_shift>
 80070dc:	4544      	cmp	r4, r8
 80070de:	d934      	bls.n	800714a <__hexnan+0x10e>
 80070e0:	f1a8 0204 	sub.w	r2, r8, #4
 80070e4:	4623      	mov	r3, r4
 80070e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80070ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80070ee:	429f      	cmp	r7, r3
 80070f0:	d2f9      	bcs.n	80070e6 <__hexnan+0xaa>
 80070f2:	1b3b      	subs	r3, r7, r4
 80070f4:	f023 0303 	bic.w	r3, r3, #3
 80070f8:	3304      	adds	r3, #4
 80070fa:	3e03      	subs	r6, #3
 80070fc:	3401      	adds	r4, #1
 80070fe:	42a6      	cmp	r6, r4
 8007100:	bf38      	it	cc
 8007102:	2304      	movcc	r3, #4
 8007104:	4443      	add	r3, r8
 8007106:	2200      	movs	r2, #0
 8007108:	f843 2b04 	str.w	r2, [r3], #4
 800710c:	429f      	cmp	r7, r3
 800710e:	d2fb      	bcs.n	8007108 <__hexnan+0xcc>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	b91b      	cbnz	r3, 800711c <__hexnan+0xe0>
 8007114:	4547      	cmp	r7, r8
 8007116:	d126      	bne.n	8007166 <__hexnan+0x12a>
 8007118:	2301      	movs	r3, #1
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	2005      	movs	r0, #5
 800711e:	e025      	b.n	800716c <__hexnan+0x130>
 8007120:	3501      	adds	r5, #1
 8007122:	2d08      	cmp	r5, #8
 8007124:	f10b 0b01 	add.w	fp, fp, #1
 8007128:	dd06      	ble.n	8007138 <__hexnan+0xfc>
 800712a:	4544      	cmp	r4, r8
 800712c:	d9c3      	bls.n	80070b6 <__hexnan+0x7a>
 800712e:	2300      	movs	r3, #0
 8007130:	f844 3c04 	str.w	r3, [r4, #-4]
 8007134:	2501      	movs	r5, #1
 8007136:	3c04      	subs	r4, #4
 8007138:	6822      	ldr	r2, [r4, #0]
 800713a:	f000 000f 	and.w	r0, r0, #15
 800713e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007142:	6020      	str	r0, [r4, #0]
 8007144:	e7b7      	b.n	80070b6 <__hexnan+0x7a>
 8007146:	2508      	movs	r5, #8
 8007148:	e7b5      	b.n	80070b6 <__hexnan+0x7a>
 800714a:	9b01      	ldr	r3, [sp, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0df      	beq.n	8007110 <__hexnan+0xd4>
 8007150:	f1c3 0320 	rsb	r3, r3, #32
 8007154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007158:	40da      	lsrs	r2, r3
 800715a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800715e:	4013      	ands	r3, r2
 8007160:	f846 3c04 	str.w	r3, [r6, #-4]
 8007164:	e7d4      	b.n	8007110 <__hexnan+0xd4>
 8007166:	3f04      	subs	r7, #4
 8007168:	e7d2      	b.n	8007110 <__hexnan+0xd4>
 800716a:	2004      	movs	r0, #4
 800716c:	b007      	add	sp, #28
 800716e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007172 <__sfputc_r>:
 8007172:	6893      	ldr	r3, [r2, #8]
 8007174:	3b01      	subs	r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	b410      	push	{r4}
 800717a:	6093      	str	r3, [r2, #8]
 800717c:	da08      	bge.n	8007190 <__sfputc_r+0x1e>
 800717e:	6994      	ldr	r4, [r2, #24]
 8007180:	42a3      	cmp	r3, r4
 8007182:	db01      	blt.n	8007188 <__sfputc_r+0x16>
 8007184:	290a      	cmp	r1, #10
 8007186:	d103      	bne.n	8007190 <__sfputc_r+0x1e>
 8007188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800718c:	f000 bfaa 	b.w	80080e4 <__swbuf_r>
 8007190:	6813      	ldr	r3, [r2, #0]
 8007192:	1c58      	adds	r0, r3, #1
 8007194:	6010      	str	r0, [r2, #0]
 8007196:	7019      	strb	r1, [r3, #0]
 8007198:	4608      	mov	r0, r1
 800719a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <__sfputs_r>:
 80071a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a2:	4606      	mov	r6, r0
 80071a4:	460f      	mov	r7, r1
 80071a6:	4614      	mov	r4, r2
 80071a8:	18d5      	adds	r5, r2, r3
 80071aa:	42ac      	cmp	r4, r5
 80071ac:	d101      	bne.n	80071b2 <__sfputs_r+0x12>
 80071ae:	2000      	movs	r0, #0
 80071b0:	e007      	b.n	80071c2 <__sfputs_r+0x22>
 80071b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b6:	463a      	mov	r2, r7
 80071b8:	4630      	mov	r0, r6
 80071ba:	f7ff ffda 	bl	8007172 <__sfputc_r>
 80071be:	1c43      	adds	r3, r0, #1
 80071c0:	d1f3      	bne.n	80071aa <__sfputs_r+0xa>
 80071c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071c4 <_vfiprintf_r>:
 80071c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	460d      	mov	r5, r1
 80071ca:	b09d      	sub	sp, #116	; 0x74
 80071cc:	4614      	mov	r4, r2
 80071ce:	4698      	mov	r8, r3
 80071d0:	4606      	mov	r6, r0
 80071d2:	b118      	cbz	r0, 80071dc <_vfiprintf_r+0x18>
 80071d4:	6a03      	ldr	r3, [r0, #32]
 80071d6:	b90b      	cbnz	r3, 80071dc <_vfiprintf_r+0x18>
 80071d8:	f7fd fda2 	bl	8004d20 <__sinit>
 80071dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071de:	07d9      	lsls	r1, r3, #31
 80071e0:	d405      	bmi.n	80071ee <_vfiprintf_r+0x2a>
 80071e2:	89ab      	ldrh	r3, [r5, #12]
 80071e4:	059a      	lsls	r2, r3, #22
 80071e6:	d402      	bmi.n	80071ee <_vfiprintf_r+0x2a>
 80071e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071ea:	f7fe fd60 	bl	8005cae <__retarget_lock_acquire_recursive>
 80071ee:	89ab      	ldrh	r3, [r5, #12]
 80071f0:	071b      	lsls	r3, r3, #28
 80071f2:	d501      	bpl.n	80071f8 <_vfiprintf_r+0x34>
 80071f4:	692b      	ldr	r3, [r5, #16]
 80071f6:	b99b      	cbnz	r3, 8007220 <_vfiprintf_r+0x5c>
 80071f8:	4629      	mov	r1, r5
 80071fa:	4630      	mov	r0, r6
 80071fc:	f000 ffb0 	bl	8008160 <__swsetup_r>
 8007200:	b170      	cbz	r0, 8007220 <_vfiprintf_r+0x5c>
 8007202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007204:	07dc      	lsls	r4, r3, #31
 8007206:	d504      	bpl.n	8007212 <_vfiprintf_r+0x4e>
 8007208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800720c:	b01d      	add	sp, #116	; 0x74
 800720e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007212:	89ab      	ldrh	r3, [r5, #12]
 8007214:	0598      	lsls	r0, r3, #22
 8007216:	d4f7      	bmi.n	8007208 <_vfiprintf_r+0x44>
 8007218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800721a:	f7fe fd49 	bl	8005cb0 <__retarget_lock_release_recursive>
 800721e:	e7f3      	b.n	8007208 <_vfiprintf_r+0x44>
 8007220:	2300      	movs	r3, #0
 8007222:	9309      	str	r3, [sp, #36]	; 0x24
 8007224:	2320      	movs	r3, #32
 8007226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800722a:	f8cd 800c 	str.w	r8, [sp, #12]
 800722e:	2330      	movs	r3, #48	; 0x30
 8007230:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80073e4 <_vfiprintf_r+0x220>
 8007234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007238:	f04f 0901 	mov.w	r9, #1
 800723c:	4623      	mov	r3, r4
 800723e:	469a      	mov	sl, r3
 8007240:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007244:	b10a      	cbz	r2, 800724a <_vfiprintf_r+0x86>
 8007246:	2a25      	cmp	r2, #37	; 0x25
 8007248:	d1f9      	bne.n	800723e <_vfiprintf_r+0x7a>
 800724a:	ebba 0b04 	subs.w	fp, sl, r4
 800724e:	d00b      	beq.n	8007268 <_vfiprintf_r+0xa4>
 8007250:	465b      	mov	r3, fp
 8007252:	4622      	mov	r2, r4
 8007254:	4629      	mov	r1, r5
 8007256:	4630      	mov	r0, r6
 8007258:	f7ff ffa2 	bl	80071a0 <__sfputs_r>
 800725c:	3001      	adds	r0, #1
 800725e:	f000 80a9 	beq.w	80073b4 <_vfiprintf_r+0x1f0>
 8007262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007264:	445a      	add	r2, fp
 8007266:	9209      	str	r2, [sp, #36]	; 0x24
 8007268:	f89a 3000 	ldrb.w	r3, [sl]
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 80a1 	beq.w	80073b4 <_vfiprintf_r+0x1f0>
 8007272:	2300      	movs	r3, #0
 8007274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800727c:	f10a 0a01 	add.w	sl, sl, #1
 8007280:	9304      	str	r3, [sp, #16]
 8007282:	9307      	str	r3, [sp, #28]
 8007284:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007288:	931a      	str	r3, [sp, #104]	; 0x68
 800728a:	4654      	mov	r4, sl
 800728c:	2205      	movs	r2, #5
 800728e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007292:	4854      	ldr	r0, [pc, #336]	; (80073e4 <_vfiprintf_r+0x220>)
 8007294:	f7f8 ff9c 	bl	80001d0 <memchr>
 8007298:	9a04      	ldr	r2, [sp, #16]
 800729a:	b9d8      	cbnz	r0, 80072d4 <_vfiprintf_r+0x110>
 800729c:	06d1      	lsls	r1, r2, #27
 800729e:	bf44      	itt	mi
 80072a0:	2320      	movmi	r3, #32
 80072a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a6:	0713      	lsls	r3, r2, #28
 80072a8:	bf44      	itt	mi
 80072aa:	232b      	movmi	r3, #43	; 0x2b
 80072ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072b0:	f89a 3000 	ldrb.w	r3, [sl]
 80072b4:	2b2a      	cmp	r3, #42	; 0x2a
 80072b6:	d015      	beq.n	80072e4 <_vfiprintf_r+0x120>
 80072b8:	9a07      	ldr	r2, [sp, #28]
 80072ba:	4654      	mov	r4, sl
 80072bc:	2000      	movs	r0, #0
 80072be:	f04f 0c0a 	mov.w	ip, #10
 80072c2:	4621      	mov	r1, r4
 80072c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072c8:	3b30      	subs	r3, #48	; 0x30
 80072ca:	2b09      	cmp	r3, #9
 80072cc:	d94d      	bls.n	800736a <_vfiprintf_r+0x1a6>
 80072ce:	b1b0      	cbz	r0, 80072fe <_vfiprintf_r+0x13a>
 80072d0:	9207      	str	r2, [sp, #28]
 80072d2:	e014      	b.n	80072fe <_vfiprintf_r+0x13a>
 80072d4:	eba0 0308 	sub.w	r3, r0, r8
 80072d8:	fa09 f303 	lsl.w	r3, r9, r3
 80072dc:	4313      	orrs	r3, r2
 80072de:	9304      	str	r3, [sp, #16]
 80072e0:	46a2      	mov	sl, r4
 80072e2:	e7d2      	b.n	800728a <_vfiprintf_r+0xc6>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	1d19      	adds	r1, r3, #4
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	9103      	str	r1, [sp, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	bfbb      	ittet	lt
 80072f0:	425b      	neglt	r3, r3
 80072f2:	f042 0202 	orrlt.w	r2, r2, #2
 80072f6:	9307      	strge	r3, [sp, #28]
 80072f8:	9307      	strlt	r3, [sp, #28]
 80072fa:	bfb8      	it	lt
 80072fc:	9204      	strlt	r2, [sp, #16]
 80072fe:	7823      	ldrb	r3, [r4, #0]
 8007300:	2b2e      	cmp	r3, #46	; 0x2e
 8007302:	d10c      	bne.n	800731e <_vfiprintf_r+0x15a>
 8007304:	7863      	ldrb	r3, [r4, #1]
 8007306:	2b2a      	cmp	r3, #42	; 0x2a
 8007308:	d134      	bne.n	8007374 <_vfiprintf_r+0x1b0>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	1d1a      	adds	r2, r3, #4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	9203      	str	r2, [sp, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	bfb8      	it	lt
 8007316:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800731a:	3402      	adds	r4, #2
 800731c:	9305      	str	r3, [sp, #20]
 800731e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80073f4 <_vfiprintf_r+0x230>
 8007322:	7821      	ldrb	r1, [r4, #0]
 8007324:	2203      	movs	r2, #3
 8007326:	4650      	mov	r0, sl
 8007328:	f7f8 ff52 	bl	80001d0 <memchr>
 800732c:	b138      	cbz	r0, 800733e <_vfiprintf_r+0x17a>
 800732e:	9b04      	ldr	r3, [sp, #16]
 8007330:	eba0 000a 	sub.w	r0, r0, sl
 8007334:	2240      	movs	r2, #64	; 0x40
 8007336:	4082      	lsls	r2, r0
 8007338:	4313      	orrs	r3, r2
 800733a:	3401      	adds	r4, #1
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007342:	4829      	ldr	r0, [pc, #164]	; (80073e8 <_vfiprintf_r+0x224>)
 8007344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007348:	2206      	movs	r2, #6
 800734a:	f7f8 ff41 	bl	80001d0 <memchr>
 800734e:	2800      	cmp	r0, #0
 8007350:	d03f      	beq.n	80073d2 <_vfiprintf_r+0x20e>
 8007352:	4b26      	ldr	r3, [pc, #152]	; (80073ec <_vfiprintf_r+0x228>)
 8007354:	bb1b      	cbnz	r3, 800739e <_vfiprintf_r+0x1da>
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	3307      	adds	r3, #7
 800735a:	f023 0307 	bic.w	r3, r3, #7
 800735e:	3308      	adds	r3, #8
 8007360:	9303      	str	r3, [sp, #12]
 8007362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007364:	443b      	add	r3, r7
 8007366:	9309      	str	r3, [sp, #36]	; 0x24
 8007368:	e768      	b.n	800723c <_vfiprintf_r+0x78>
 800736a:	fb0c 3202 	mla	r2, ip, r2, r3
 800736e:	460c      	mov	r4, r1
 8007370:	2001      	movs	r0, #1
 8007372:	e7a6      	b.n	80072c2 <_vfiprintf_r+0xfe>
 8007374:	2300      	movs	r3, #0
 8007376:	3401      	adds	r4, #1
 8007378:	9305      	str	r3, [sp, #20]
 800737a:	4619      	mov	r1, r3
 800737c:	f04f 0c0a 	mov.w	ip, #10
 8007380:	4620      	mov	r0, r4
 8007382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007386:	3a30      	subs	r2, #48	; 0x30
 8007388:	2a09      	cmp	r2, #9
 800738a:	d903      	bls.n	8007394 <_vfiprintf_r+0x1d0>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0c6      	beq.n	800731e <_vfiprintf_r+0x15a>
 8007390:	9105      	str	r1, [sp, #20]
 8007392:	e7c4      	b.n	800731e <_vfiprintf_r+0x15a>
 8007394:	fb0c 2101 	mla	r1, ip, r1, r2
 8007398:	4604      	mov	r4, r0
 800739a:	2301      	movs	r3, #1
 800739c:	e7f0      	b.n	8007380 <_vfiprintf_r+0x1bc>
 800739e:	ab03      	add	r3, sp, #12
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	462a      	mov	r2, r5
 80073a4:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <_vfiprintf_r+0x22c>)
 80073a6:	a904      	add	r1, sp, #16
 80073a8:	4630      	mov	r0, r6
 80073aa:	f7fd f867 	bl	800447c <_printf_float>
 80073ae:	4607      	mov	r7, r0
 80073b0:	1c78      	adds	r0, r7, #1
 80073b2:	d1d6      	bne.n	8007362 <_vfiprintf_r+0x19e>
 80073b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073b6:	07d9      	lsls	r1, r3, #31
 80073b8:	d405      	bmi.n	80073c6 <_vfiprintf_r+0x202>
 80073ba:	89ab      	ldrh	r3, [r5, #12]
 80073bc:	059a      	lsls	r2, r3, #22
 80073be:	d402      	bmi.n	80073c6 <_vfiprintf_r+0x202>
 80073c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073c2:	f7fe fc75 	bl	8005cb0 <__retarget_lock_release_recursive>
 80073c6:	89ab      	ldrh	r3, [r5, #12]
 80073c8:	065b      	lsls	r3, r3, #25
 80073ca:	f53f af1d 	bmi.w	8007208 <_vfiprintf_r+0x44>
 80073ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073d0:	e71c      	b.n	800720c <_vfiprintf_r+0x48>
 80073d2:	ab03      	add	r3, sp, #12
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	462a      	mov	r2, r5
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <_vfiprintf_r+0x22c>)
 80073da:	a904      	add	r1, sp, #16
 80073dc:	4630      	mov	r0, r6
 80073de:	f7fd faf1 	bl	80049c4 <_printf_i>
 80073e2:	e7e4      	b.n	80073ae <_vfiprintf_r+0x1ea>
 80073e4:	0800891c 	.word	0x0800891c
 80073e8:	08008926 	.word	0x08008926
 80073ec:	0800447d 	.word	0x0800447d
 80073f0:	080071a1 	.word	0x080071a1
 80073f4:	08008922 	.word	0x08008922

080073f8 <malloc>:
 80073f8:	4b02      	ldr	r3, [pc, #8]	; (8007404 <malloc+0xc>)
 80073fa:	4601      	mov	r1, r0
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	f000 b823 	b.w	8007448 <_malloc_r>
 8007402:	bf00      	nop
 8007404:	200001d0 	.word	0x200001d0

08007408 <sbrk_aligned>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	4e0e      	ldr	r6, [pc, #56]	; (8007444 <sbrk_aligned+0x3c>)
 800740c:	460c      	mov	r4, r1
 800740e:	6831      	ldr	r1, [r6, #0]
 8007410:	4605      	mov	r5, r0
 8007412:	b911      	cbnz	r1, 800741a <sbrk_aligned+0x12>
 8007414:	f000 ffc2 	bl	800839c <_sbrk_r>
 8007418:	6030      	str	r0, [r6, #0]
 800741a:	4621      	mov	r1, r4
 800741c:	4628      	mov	r0, r5
 800741e:	f000 ffbd 	bl	800839c <_sbrk_r>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d00a      	beq.n	800743c <sbrk_aligned+0x34>
 8007426:	1cc4      	adds	r4, r0, #3
 8007428:	f024 0403 	bic.w	r4, r4, #3
 800742c:	42a0      	cmp	r0, r4
 800742e:	d007      	beq.n	8007440 <sbrk_aligned+0x38>
 8007430:	1a21      	subs	r1, r4, r0
 8007432:	4628      	mov	r0, r5
 8007434:	f000 ffb2 	bl	800839c <_sbrk_r>
 8007438:	3001      	adds	r0, #1
 800743a:	d101      	bne.n	8007440 <sbrk_aligned+0x38>
 800743c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007440:	4620      	mov	r0, r4
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	2000066c 	.word	0x2000066c

08007448 <_malloc_r>:
 8007448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800744c:	1ccd      	adds	r5, r1, #3
 800744e:	f025 0503 	bic.w	r5, r5, #3
 8007452:	3508      	adds	r5, #8
 8007454:	2d0c      	cmp	r5, #12
 8007456:	bf38      	it	cc
 8007458:	250c      	movcc	r5, #12
 800745a:	2d00      	cmp	r5, #0
 800745c:	4607      	mov	r7, r0
 800745e:	db01      	blt.n	8007464 <_malloc_r+0x1c>
 8007460:	42a9      	cmp	r1, r5
 8007462:	d905      	bls.n	8007470 <_malloc_r+0x28>
 8007464:	230c      	movs	r3, #12
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	2600      	movs	r6, #0
 800746a:	4630      	mov	r0, r6
 800746c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007470:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007544 <_malloc_r+0xfc>
 8007474:	f000 f928 	bl	80076c8 <__malloc_lock>
 8007478:	f8d8 3000 	ldr.w	r3, [r8]
 800747c:	461c      	mov	r4, r3
 800747e:	bb5c      	cbnz	r4, 80074d8 <_malloc_r+0x90>
 8007480:	4629      	mov	r1, r5
 8007482:	4638      	mov	r0, r7
 8007484:	f7ff ffc0 	bl	8007408 <sbrk_aligned>
 8007488:	1c43      	adds	r3, r0, #1
 800748a:	4604      	mov	r4, r0
 800748c:	d155      	bne.n	800753a <_malloc_r+0xf2>
 800748e:	f8d8 4000 	ldr.w	r4, [r8]
 8007492:	4626      	mov	r6, r4
 8007494:	2e00      	cmp	r6, #0
 8007496:	d145      	bne.n	8007524 <_malloc_r+0xdc>
 8007498:	2c00      	cmp	r4, #0
 800749a:	d048      	beq.n	800752e <_malloc_r+0xe6>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	4631      	mov	r1, r6
 80074a0:	4638      	mov	r0, r7
 80074a2:	eb04 0903 	add.w	r9, r4, r3
 80074a6:	f000 ff79 	bl	800839c <_sbrk_r>
 80074aa:	4581      	cmp	r9, r0
 80074ac:	d13f      	bne.n	800752e <_malloc_r+0xe6>
 80074ae:	6821      	ldr	r1, [r4, #0]
 80074b0:	1a6d      	subs	r5, r5, r1
 80074b2:	4629      	mov	r1, r5
 80074b4:	4638      	mov	r0, r7
 80074b6:	f7ff ffa7 	bl	8007408 <sbrk_aligned>
 80074ba:	3001      	adds	r0, #1
 80074bc:	d037      	beq.n	800752e <_malloc_r+0xe6>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	442b      	add	r3, r5
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	f8d8 3000 	ldr.w	r3, [r8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d038      	beq.n	800753e <_malloc_r+0xf6>
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	42a2      	cmp	r2, r4
 80074d0:	d12b      	bne.n	800752a <_malloc_r+0xe2>
 80074d2:	2200      	movs	r2, #0
 80074d4:	605a      	str	r2, [r3, #4]
 80074d6:	e00f      	b.n	80074f8 <_malloc_r+0xb0>
 80074d8:	6822      	ldr	r2, [r4, #0]
 80074da:	1b52      	subs	r2, r2, r5
 80074dc:	d41f      	bmi.n	800751e <_malloc_r+0xd6>
 80074de:	2a0b      	cmp	r2, #11
 80074e0:	d917      	bls.n	8007512 <_malloc_r+0xca>
 80074e2:	1961      	adds	r1, r4, r5
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	6025      	str	r5, [r4, #0]
 80074e8:	bf18      	it	ne
 80074ea:	6059      	strne	r1, [r3, #4]
 80074ec:	6863      	ldr	r3, [r4, #4]
 80074ee:	bf08      	it	eq
 80074f0:	f8c8 1000 	streq.w	r1, [r8]
 80074f4:	5162      	str	r2, [r4, r5]
 80074f6:	604b      	str	r3, [r1, #4]
 80074f8:	4638      	mov	r0, r7
 80074fa:	f104 060b 	add.w	r6, r4, #11
 80074fe:	f000 f8e9 	bl	80076d4 <__malloc_unlock>
 8007502:	f026 0607 	bic.w	r6, r6, #7
 8007506:	1d23      	adds	r3, r4, #4
 8007508:	1af2      	subs	r2, r6, r3
 800750a:	d0ae      	beq.n	800746a <_malloc_r+0x22>
 800750c:	1b9b      	subs	r3, r3, r6
 800750e:	50a3      	str	r3, [r4, r2]
 8007510:	e7ab      	b.n	800746a <_malloc_r+0x22>
 8007512:	42a3      	cmp	r3, r4
 8007514:	6862      	ldr	r2, [r4, #4]
 8007516:	d1dd      	bne.n	80074d4 <_malloc_r+0x8c>
 8007518:	f8c8 2000 	str.w	r2, [r8]
 800751c:	e7ec      	b.n	80074f8 <_malloc_r+0xb0>
 800751e:	4623      	mov	r3, r4
 8007520:	6864      	ldr	r4, [r4, #4]
 8007522:	e7ac      	b.n	800747e <_malloc_r+0x36>
 8007524:	4634      	mov	r4, r6
 8007526:	6876      	ldr	r6, [r6, #4]
 8007528:	e7b4      	b.n	8007494 <_malloc_r+0x4c>
 800752a:	4613      	mov	r3, r2
 800752c:	e7cc      	b.n	80074c8 <_malloc_r+0x80>
 800752e:	230c      	movs	r3, #12
 8007530:	603b      	str	r3, [r7, #0]
 8007532:	4638      	mov	r0, r7
 8007534:	f000 f8ce 	bl	80076d4 <__malloc_unlock>
 8007538:	e797      	b.n	800746a <_malloc_r+0x22>
 800753a:	6025      	str	r5, [r4, #0]
 800753c:	e7dc      	b.n	80074f8 <_malloc_r+0xb0>
 800753e:	605b      	str	r3, [r3, #4]
 8007540:	deff      	udf	#255	; 0xff
 8007542:	bf00      	nop
 8007544:	20000668 	.word	0x20000668

08007548 <__ascii_mbtowc>:
 8007548:	b082      	sub	sp, #8
 800754a:	b901      	cbnz	r1, 800754e <__ascii_mbtowc+0x6>
 800754c:	a901      	add	r1, sp, #4
 800754e:	b142      	cbz	r2, 8007562 <__ascii_mbtowc+0x1a>
 8007550:	b14b      	cbz	r3, 8007566 <__ascii_mbtowc+0x1e>
 8007552:	7813      	ldrb	r3, [r2, #0]
 8007554:	600b      	str	r3, [r1, #0]
 8007556:	7812      	ldrb	r2, [r2, #0]
 8007558:	1e10      	subs	r0, r2, #0
 800755a:	bf18      	it	ne
 800755c:	2001      	movne	r0, #1
 800755e:	b002      	add	sp, #8
 8007560:	4770      	bx	lr
 8007562:	4610      	mov	r0, r2
 8007564:	e7fb      	b.n	800755e <__ascii_mbtowc+0x16>
 8007566:	f06f 0001 	mvn.w	r0, #1
 800756a:	e7f8      	b.n	800755e <__ascii_mbtowc+0x16>

0800756c <__sflush_r>:
 800756c:	898a      	ldrh	r2, [r1, #12]
 800756e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007572:	4605      	mov	r5, r0
 8007574:	0710      	lsls	r0, r2, #28
 8007576:	460c      	mov	r4, r1
 8007578:	d458      	bmi.n	800762c <__sflush_r+0xc0>
 800757a:	684b      	ldr	r3, [r1, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	dc05      	bgt.n	800758c <__sflush_r+0x20>
 8007580:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007582:	2b00      	cmp	r3, #0
 8007584:	dc02      	bgt.n	800758c <__sflush_r+0x20>
 8007586:	2000      	movs	r0, #0
 8007588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800758c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800758e:	2e00      	cmp	r6, #0
 8007590:	d0f9      	beq.n	8007586 <__sflush_r+0x1a>
 8007592:	2300      	movs	r3, #0
 8007594:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007598:	682f      	ldr	r7, [r5, #0]
 800759a:	6a21      	ldr	r1, [r4, #32]
 800759c:	602b      	str	r3, [r5, #0]
 800759e:	d032      	beq.n	8007606 <__sflush_r+0x9a>
 80075a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	075a      	lsls	r2, r3, #29
 80075a6:	d505      	bpl.n	80075b4 <__sflush_r+0x48>
 80075a8:	6863      	ldr	r3, [r4, #4]
 80075aa:	1ac0      	subs	r0, r0, r3
 80075ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075ae:	b10b      	cbz	r3, 80075b4 <__sflush_r+0x48>
 80075b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075b2:	1ac0      	subs	r0, r0, r3
 80075b4:	2300      	movs	r3, #0
 80075b6:	4602      	mov	r2, r0
 80075b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ba:	6a21      	ldr	r1, [r4, #32]
 80075bc:	4628      	mov	r0, r5
 80075be:	47b0      	blx	r6
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	d106      	bne.n	80075d4 <__sflush_r+0x68>
 80075c6:	6829      	ldr	r1, [r5, #0]
 80075c8:	291d      	cmp	r1, #29
 80075ca:	d82b      	bhi.n	8007624 <__sflush_r+0xb8>
 80075cc:	4a29      	ldr	r2, [pc, #164]	; (8007674 <__sflush_r+0x108>)
 80075ce:	410a      	asrs	r2, r1
 80075d0:	07d6      	lsls	r6, r2, #31
 80075d2:	d427      	bmi.n	8007624 <__sflush_r+0xb8>
 80075d4:	2200      	movs	r2, #0
 80075d6:	6062      	str	r2, [r4, #4]
 80075d8:	04d9      	lsls	r1, r3, #19
 80075da:	6922      	ldr	r2, [r4, #16]
 80075dc:	6022      	str	r2, [r4, #0]
 80075de:	d504      	bpl.n	80075ea <__sflush_r+0x7e>
 80075e0:	1c42      	adds	r2, r0, #1
 80075e2:	d101      	bne.n	80075e8 <__sflush_r+0x7c>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b903      	cbnz	r3, 80075ea <__sflush_r+0x7e>
 80075e8:	6560      	str	r0, [r4, #84]	; 0x54
 80075ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075ec:	602f      	str	r7, [r5, #0]
 80075ee:	2900      	cmp	r1, #0
 80075f0:	d0c9      	beq.n	8007586 <__sflush_r+0x1a>
 80075f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075f6:	4299      	cmp	r1, r3
 80075f8:	d002      	beq.n	8007600 <__sflush_r+0x94>
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 ff38 	bl	8008470 <_free_r>
 8007600:	2000      	movs	r0, #0
 8007602:	6360      	str	r0, [r4, #52]	; 0x34
 8007604:	e7c0      	b.n	8007588 <__sflush_r+0x1c>
 8007606:	2301      	movs	r3, #1
 8007608:	4628      	mov	r0, r5
 800760a:	47b0      	blx	r6
 800760c:	1c41      	adds	r1, r0, #1
 800760e:	d1c8      	bne.n	80075a2 <__sflush_r+0x36>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0c5      	beq.n	80075a2 <__sflush_r+0x36>
 8007616:	2b1d      	cmp	r3, #29
 8007618:	d001      	beq.n	800761e <__sflush_r+0xb2>
 800761a:	2b16      	cmp	r3, #22
 800761c:	d101      	bne.n	8007622 <__sflush_r+0xb6>
 800761e:	602f      	str	r7, [r5, #0]
 8007620:	e7b1      	b.n	8007586 <__sflush_r+0x1a>
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007628:	81a3      	strh	r3, [r4, #12]
 800762a:	e7ad      	b.n	8007588 <__sflush_r+0x1c>
 800762c:	690f      	ldr	r7, [r1, #16]
 800762e:	2f00      	cmp	r7, #0
 8007630:	d0a9      	beq.n	8007586 <__sflush_r+0x1a>
 8007632:	0793      	lsls	r3, r2, #30
 8007634:	680e      	ldr	r6, [r1, #0]
 8007636:	bf08      	it	eq
 8007638:	694b      	ldreq	r3, [r1, #20]
 800763a:	600f      	str	r7, [r1, #0]
 800763c:	bf18      	it	ne
 800763e:	2300      	movne	r3, #0
 8007640:	eba6 0807 	sub.w	r8, r6, r7
 8007644:	608b      	str	r3, [r1, #8]
 8007646:	f1b8 0f00 	cmp.w	r8, #0
 800764a:	dd9c      	ble.n	8007586 <__sflush_r+0x1a>
 800764c:	6a21      	ldr	r1, [r4, #32]
 800764e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007650:	4643      	mov	r3, r8
 8007652:	463a      	mov	r2, r7
 8007654:	4628      	mov	r0, r5
 8007656:	47b0      	blx	r6
 8007658:	2800      	cmp	r0, #0
 800765a:	dc06      	bgt.n	800766a <__sflush_r+0xfe>
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007662:	81a3      	strh	r3, [r4, #12]
 8007664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007668:	e78e      	b.n	8007588 <__sflush_r+0x1c>
 800766a:	4407      	add	r7, r0
 800766c:	eba8 0800 	sub.w	r8, r8, r0
 8007670:	e7e9      	b.n	8007646 <__sflush_r+0xda>
 8007672:	bf00      	nop
 8007674:	dfbffffe 	.word	0xdfbffffe

08007678 <_fflush_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	690b      	ldr	r3, [r1, #16]
 800767c:	4605      	mov	r5, r0
 800767e:	460c      	mov	r4, r1
 8007680:	b913      	cbnz	r3, 8007688 <_fflush_r+0x10>
 8007682:	2500      	movs	r5, #0
 8007684:	4628      	mov	r0, r5
 8007686:	bd38      	pop	{r3, r4, r5, pc}
 8007688:	b118      	cbz	r0, 8007692 <_fflush_r+0x1a>
 800768a:	6a03      	ldr	r3, [r0, #32]
 800768c:	b90b      	cbnz	r3, 8007692 <_fflush_r+0x1a>
 800768e:	f7fd fb47 	bl	8004d20 <__sinit>
 8007692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0f3      	beq.n	8007682 <_fflush_r+0xa>
 800769a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800769c:	07d0      	lsls	r0, r2, #31
 800769e:	d404      	bmi.n	80076aa <_fflush_r+0x32>
 80076a0:	0599      	lsls	r1, r3, #22
 80076a2:	d402      	bmi.n	80076aa <_fflush_r+0x32>
 80076a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076a6:	f7fe fb02 	bl	8005cae <__retarget_lock_acquire_recursive>
 80076aa:	4628      	mov	r0, r5
 80076ac:	4621      	mov	r1, r4
 80076ae:	f7ff ff5d 	bl	800756c <__sflush_r>
 80076b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076b4:	07da      	lsls	r2, r3, #31
 80076b6:	4605      	mov	r5, r0
 80076b8:	d4e4      	bmi.n	8007684 <_fflush_r+0xc>
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	059b      	lsls	r3, r3, #22
 80076be:	d4e1      	bmi.n	8007684 <_fflush_r+0xc>
 80076c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076c2:	f7fe faf5 	bl	8005cb0 <__retarget_lock_release_recursive>
 80076c6:	e7dd      	b.n	8007684 <_fflush_r+0xc>

080076c8 <__malloc_lock>:
 80076c8:	4801      	ldr	r0, [pc, #4]	; (80076d0 <__malloc_lock+0x8>)
 80076ca:	f7fe baf0 	b.w	8005cae <__retarget_lock_acquire_recursive>
 80076ce:	bf00      	nop
 80076d0:	20000664 	.word	0x20000664

080076d4 <__malloc_unlock>:
 80076d4:	4801      	ldr	r0, [pc, #4]	; (80076dc <__malloc_unlock+0x8>)
 80076d6:	f7fe baeb 	b.w	8005cb0 <__retarget_lock_release_recursive>
 80076da:	bf00      	nop
 80076dc:	20000664 	.word	0x20000664

080076e0 <_Balloc>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	69c6      	ldr	r6, [r0, #28]
 80076e4:	4604      	mov	r4, r0
 80076e6:	460d      	mov	r5, r1
 80076e8:	b976      	cbnz	r6, 8007708 <_Balloc+0x28>
 80076ea:	2010      	movs	r0, #16
 80076ec:	f7ff fe84 	bl	80073f8 <malloc>
 80076f0:	4602      	mov	r2, r0
 80076f2:	61e0      	str	r0, [r4, #28]
 80076f4:	b920      	cbnz	r0, 8007700 <_Balloc+0x20>
 80076f6:	4b18      	ldr	r3, [pc, #96]	; (8007758 <_Balloc+0x78>)
 80076f8:	4818      	ldr	r0, [pc, #96]	; (800775c <_Balloc+0x7c>)
 80076fa:	216b      	movs	r1, #107	; 0x6b
 80076fc:	f7fe fb48 	bl	8005d90 <__assert_func>
 8007700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007704:	6006      	str	r6, [r0, #0]
 8007706:	60c6      	str	r6, [r0, #12]
 8007708:	69e6      	ldr	r6, [r4, #28]
 800770a:	68f3      	ldr	r3, [r6, #12]
 800770c:	b183      	cbz	r3, 8007730 <_Balloc+0x50>
 800770e:	69e3      	ldr	r3, [r4, #28]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007716:	b9b8      	cbnz	r0, 8007748 <_Balloc+0x68>
 8007718:	2101      	movs	r1, #1
 800771a:	fa01 f605 	lsl.w	r6, r1, r5
 800771e:	1d72      	adds	r2, r6, #5
 8007720:	0092      	lsls	r2, r2, #2
 8007722:	4620      	mov	r0, r4
 8007724:	f000 fe8d 	bl	8008442 <_calloc_r>
 8007728:	b160      	cbz	r0, 8007744 <_Balloc+0x64>
 800772a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800772e:	e00e      	b.n	800774e <_Balloc+0x6e>
 8007730:	2221      	movs	r2, #33	; 0x21
 8007732:	2104      	movs	r1, #4
 8007734:	4620      	mov	r0, r4
 8007736:	f000 fe84 	bl	8008442 <_calloc_r>
 800773a:	69e3      	ldr	r3, [r4, #28]
 800773c:	60f0      	str	r0, [r6, #12]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e4      	bne.n	800770e <_Balloc+0x2e>
 8007744:	2000      	movs	r0, #0
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	6802      	ldr	r2, [r0, #0]
 800774a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800774e:	2300      	movs	r3, #0
 8007750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007754:	e7f7      	b.n	8007746 <_Balloc+0x66>
 8007756:	bf00      	nop
 8007758:	08008690 	.word	0x08008690
 800775c:	0800892d 	.word	0x0800892d

08007760 <_Bfree>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	69c6      	ldr	r6, [r0, #28]
 8007764:	4605      	mov	r5, r0
 8007766:	460c      	mov	r4, r1
 8007768:	b976      	cbnz	r6, 8007788 <_Bfree+0x28>
 800776a:	2010      	movs	r0, #16
 800776c:	f7ff fe44 	bl	80073f8 <malloc>
 8007770:	4602      	mov	r2, r0
 8007772:	61e8      	str	r0, [r5, #28]
 8007774:	b920      	cbnz	r0, 8007780 <_Bfree+0x20>
 8007776:	4b09      	ldr	r3, [pc, #36]	; (800779c <_Bfree+0x3c>)
 8007778:	4809      	ldr	r0, [pc, #36]	; (80077a0 <_Bfree+0x40>)
 800777a:	218f      	movs	r1, #143	; 0x8f
 800777c:	f7fe fb08 	bl	8005d90 <__assert_func>
 8007780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007784:	6006      	str	r6, [r0, #0]
 8007786:	60c6      	str	r6, [r0, #12]
 8007788:	b13c      	cbz	r4, 800779a <_Bfree+0x3a>
 800778a:	69eb      	ldr	r3, [r5, #28]
 800778c:	6862      	ldr	r2, [r4, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007794:	6021      	str	r1, [r4, #0]
 8007796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	08008690 	.word	0x08008690
 80077a0:	0800892d 	.word	0x0800892d

080077a4 <__multadd>:
 80077a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a8:	690d      	ldr	r5, [r1, #16]
 80077aa:	4607      	mov	r7, r0
 80077ac:	460c      	mov	r4, r1
 80077ae:	461e      	mov	r6, r3
 80077b0:	f101 0c14 	add.w	ip, r1, #20
 80077b4:	2000      	movs	r0, #0
 80077b6:	f8dc 3000 	ldr.w	r3, [ip]
 80077ba:	b299      	uxth	r1, r3
 80077bc:	fb02 6101 	mla	r1, r2, r1, r6
 80077c0:	0c1e      	lsrs	r6, r3, #16
 80077c2:	0c0b      	lsrs	r3, r1, #16
 80077c4:	fb02 3306 	mla	r3, r2, r6, r3
 80077c8:	b289      	uxth	r1, r1
 80077ca:	3001      	adds	r0, #1
 80077cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077d0:	4285      	cmp	r5, r0
 80077d2:	f84c 1b04 	str.w	r1, [ip], #4
 80077d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077da:	dcec      	bgt.n	80077b6 <__multadd+0x12>
 80077dc:	b30e      	cbz	r6, 8007822 <__multadd+0x7e>
 80077de:	68a3      	ldr	r3, [r4, #8]
 80077e0:	42ab      	cmp	r3, r5
 80077e2:	dc19      	bgt.n	8007818 <__multadd+0x74>
 80077e4:	6861      	ldr	r1, [r4, #4]
 80077e6:	4638      	mov	r0, r7
 80077e8:	3101      	adds	r1, #1
 80077ea:	f7ff ff79 	bl	80076e0 <_Balloc>
 80077ee:	4680      	mov	r8, r0
 80077f0:	b928      	cbnz	r0, 80077fe <__multadd+0x5a>
 80077f2:	4602      	mov	r2, r0
 80077f4:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <__multadd+0x84>)
 80077f6:	480d      	ldr	r0, [pc, #52]	; (800782c <__multadd+0x88>)
 80077f8:	21ba      	movs	r1, #186	; 0xba
 80077fa:	f7fe fac9 	bl	8005d90 <__assert_func>
 80077fe:	6922      	ldr	r2, [r4, #16]
 8007800:	3202      	adds	r2, #2
 8007802:	f104 010c 	add.w	r1, r4, #12
 8007806:	0092      	lsls	r2, r2, #2
 8007808:	300c      	adds	r0, #12
 800780a:	f7fe fa52 	bl	8005cb2 <memcpy>
 800780e:	4621      	mov	r1, r4
 8007810:	4638      	mov	r0, r7
 8007812:	f7ff ffa5 	bl	8007760 <_Bfree>
 8007816:	4644      	mov	r4, r8
 8007818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800781c:	3501      	adds	r5, #1
 800781e:	615e      	str	r6, [r3, #20]
 8007820:	6125      	str	r5, [r4, #16]
 8007822:	4620      	mov	r0, r4
 8007824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007828:	080088ab 	.word	0x080088ab
 800782c:	0800892d 	.word	0x0800892d

08007830 <__s2b>:
 8007830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007834:	460c      	mov	r4, r1
 8007836:	4615      	mov	r5, r2
 8007838:	461f      	mov	r7, r3
 800783a:	2209      	movs	r2, #9
 800783c:	3308      	adds	r3, #8
 800783e:	4606      	mov	r6, r0
 8007840:	fb93 f3f2 	sdiv	r3, r3, r2
 8007844:	2100      	movs	r1, #0
 8007846:	2201      	movs	r2, #1
 8007848:	429a      	cmp	r2, r3
 800784a:	db09      	blt.n	8007860 <__s2b+0x30>
 800784c:	4630      	mov	r0, r6
 800784e:	f7ff ff47 	bl	80076e0 <_Balloc>
 8007852:	b940      	cbnz	r0, 8007866 <__s2b+0x36>
 8007854:	4602      	mov	r2, r0
 8007856:	4b19      	ldr	r3, [pc, #100]	; (80078bc <__s2b+0x8c>)
 8007858:	4819      	ldr	r0, [pc, #100]	; (80078c0 <__s2b+0x90>)
 800785a:	21d3      	movs	r1, #211	; 0xd3
 800785c:	f7fe fa98 	bl	8005d90 <__assert_func>
 8007860:	0052      	lsls	r2, r2, #1
 8007862:	3101      	adds	r1, #1
 8007864:	e7f0      	b.n	8007848 <__s2b+0x18>
 8007866:	9b08      	ldr	r3, [sp, #32]
 8007868:	6143      	str	r3, [r0, #20]
 800786a:	2d09      	cmp	r5, #9
 800786c:	f04f 0301 	mov.w	r3, #1
 8007870:	6103      	str	r3, [r0, #16]
 8007872:	dd16      	ble.n	80078a2 <__s2b+0x72>
 8007874:	f104 0909 	add.w	r9, r4, #9
 8007878:	46c8      	mov	r8, r9
 800787a:	442c      	add	r4, r5
 800787c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007880:	4601      	mov	r1, r0
 8007882:	3b30      	subs	r3, #48	; 0x30
 8007884:	220a      	movs	r2, #10
 8007886:	4630      	mov	r0, r6
 8007888:	f7ff ff8c 	bl	80077a4 <__multadd>
 800788c:	45a0      	cmp	r8, r4
 800788e:	d1f5      	bne.n	800787c <__s2b+0x4c>
 8007890:	f1a5 0408 	sub.w	r4, r5, #8
 8007894:	444c      	add	r4, r9
 8007896:	1b2d      	subs	r5, r5, r4
 8007898:	1963      	adds	r3, r4, r5
 800789a:	42bb      	cmp	r3, r7
 800789c:	db04      	blt.n	80078a8 <__s2b+0x78>
 800789e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a2:	340a      	adds	r4, #10
 80078a4:	2509      	movs	r5, #9
 80078a6:	e7f6      	b.n	8007896 <__s2b+0x66>
 80078a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078ac:	4601      	mov	r1, r0
 80078ae:	3b30      	subs	r3, #48	; 0x30
 80078b0:	220a      	movs	r2, #10
 80078b2:	4630      	mov	r0, r6
 80078b4:	f7ff ff76 	bl	80077a4 <__multadd>
 80078b8:	e7ee      	b.n	8007898 <__s2b+0x68>
 80078ba:	bf00      	nop
 80078bc:	080088ab 	.word	0x080088ab
 80078c0:	0800892d 	.word	0x0800892d

080078c4 <__hi0bits>:
 80078c4:	0c03      	lsrs	r3, r0, #16
 80078c6:	041b      	lsls	r3, r3, #16
 80078c8:	b9d3      	cbnz	r3, 8007900 <__hi0bits+0x3c>
 80078ca:	0400      	lsls	r0, r0, #16
 80078cc:	2310      	movs	r3, #16
 80078ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078d2:	bf04      	itt	eq
 80078d4:	0200      	lsleq	r0, r0, #8
 80078d6:	3308      	addeq	r3, #8
 80078d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078dc:	bf04      	itt	eq
 80078de:	0100      	lsleq	r0, r0, #4
 80078e0:	3304      	addeq	r3, #4
 80078e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078e6:	bf04      	itt	eq
 80078e8:	0080      	lsleq	r0, r0, #2
 80078ea:	3302      	addeq	r3, #2
 80078ec:	2800      	cmp	r0, #0
 80078ee:	db05      	blt.n	80078fc <__hi0bits+0x38>
 80078f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078f4:	f103 0301 	add.w	r3, r3, #1
 80078f8:	bf08      	it	eq
 80078fa:	2320      	moveq	r3, #32
 80078fc:	4618      	mov	r0, r3
 80078fe:	4770      	bx	lr
 8007900:	2300      	movs	r3, #0
 8007902:	e7e4      	b.n	80078ce <__hi0bits+0xa>

08007904 <__lo0bits>:
 8007904:	6803      	ldr	r3, [r0, #0]
 8007906:	f013 0207 	ands.w	r2, r3, #7
 800790a:	d00c      	beq.n	8007926 <__lo0bits+0x22>
 800790c:	07d9      	lsls	r1, r3, #31
 800790e:	d422      	bmi.n	8007956 <__lo0bits+0x52>
 8007910:	079a      	lsls	r2, r3, #30
 8007912:	bf49      	itett	mi
 8007914:	085b      	lsrmi	r3, r3, #1
 8007916:	089b      	lsrpl	r3, r3, #2
 8007918:	6003      	strmi	r3, [r0, #0]
 800791a:	2201      	movmi	r2, #1
 800791c:	bf5c      	itt	pl
 800791e:	6003      	strpl	r3, [r0, #0]
 8007920:	2202      	movpl	r2, #2
 8007922:	4610      	mov	r0, r2
 8007924:	4770      	bx	lr
 8007926:	b299      	uxth	r1, r3
 8007928:	b909      	cbnz	r1, 800792e <__lo0bits+0x2a>
 800792a:	0c1b      	lsrs	r3, r3, #16
 800792c:	2210      	movs	r2, #16
 800792e:	b2d9      	uxtb	r1, r3
 8007930:	b909      	cbnz	r1, 8007936 <__lo0bits+0x32>
 8007932:	3208      	adds	r2, #8
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	0719      	lsls	r1, r3, #28
 8007938:	bf04      	itt	eq
 800793a:	091b      	lsreq	r3, r3, #4
 800793c:	3204      	addeq	r2, #4
 800793e:	0799      	lsls	r1, r3, #30
 8007940:	bf04      	itt	eq
 8007942:	089b      	lsreq	r3, r3, #2
 8007944:	3202      	addeq	r2, #2
 8007946:	07d9      	lsls	r1, r3, #31
 8007948:	d403      	bmi.n	8007952 <__lo0bits+0x4e>
 800794a:	085b      	lsrs	r3, r3, #1
 800794c:	f102 0201 	add.w	r2, r2, #1
 8007950:	d003      	beq.n	800795a <__lo0bits+0x56>
 8007952:	6003      	str	r3, [r0, #0]
 8007954:	e7e5      	b.n	8007922 <__lo0bits+0x1e>
 8007956:	2200      	movs	r2, #0
 8007958:	e7e3      	b.n	8007922 <__lo0bits+0x1e>
 800795a:	2220      	movs	r2, #32
 800795c:	e7e1      	b.n	8007922 <__lo0bits+0x1e>
	...

08007960 <__i2b>:
 8007960:	b510      	push	{r4, lr}
 8007962:	460c      	mov	r4, r1
 8007964:	2101      	movs	r1, #1
 8007966:	f7ff febb 	bl	80076e0 <_Balloc>
 800796a:	4602      	mov	r2, r0
 800796c:	b928      	cbnz	r0, 800797a <__i2b+0x1a>
 800796e:	4b05      	ldr	r3, [pc, #20]	; (8007984 <__i2b+0x24>)
 8007970:	4805      	ldr	r0, [pc, #20]	; (8007988 <__i2b+0x28>)
 8007972:	f240 1145 	movw	r1, #325	; 0x145
 8007976:	f7fe fa0b 	bl	8005d90 <__assert_func>
 800797a:	2301      	movs	r3, #1
 800797c:	6144      	str	r4, [r0, #20]
 800797e:	6103      	str	r3, [r0, #16]
 8007980:	bd10      	pop	{r4, pc}
 8007982:	bf00      	nop
 8007984:	080088ab 	.word	0x080088ab
 8007988:	0800892d 	.word	0x0800892d

0800798c <__multiply>:
 800798c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007990:	4691      	mov	r9, r2
 8007992:	690a      	ldr	r2, [r1, #16]
 8007994:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007998:	429a      	cmp	r2, r3
 800799a:	bfb8      	it	lt
 800799c:	460b      	movlt	r3, r1
 800799e:	460c      	mov	r4, r1
 80079a0:	bfbc      	itt	lt
 80079a2:	464c      	movlt	r4, r9
 80079a4:	4699      	movlt	r9, r3
 80079a6:	6927      	ldr	r7, [r4, #16]
 80079a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079ac:	68a3      	ldr	r3, [r4, #8]
 80079ae:	6861      	ldr	r1, [r4, #4]
 80079b0:	eb07 060a 	add.w	r6, r7, sl
 80079b4:	42b3      	cmp	r3, r6
 80079b6:	b085      	sub	sp, #20
 80079b8:	bfb8      	it	lt
 80079ba:	3101      	addlt	r1, #1
 80079bc:	f7ff fe90 	bl	80076e0 <_Balloc>
 80079c0:	b930      	cbnz	r0, 80079d0 <__multiply+0x44>
 80079c2:	4602      	mov	r2, r0
 80079c4:	4b44      	ldr	r3, [pc, #272]	; (8007ad8 <__multiply+0x14c>)
 80079c6:	4845      	ldr	r0, [pc, #276]	; (8007adc <__multiply+0x150>)
 80079c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80079cc:	f7fe f9e0 	bl	8005d90 <__assert_func>
 80079d0:	f100 0514 	add.w	r5, r0, #20
 80079d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079d8:	462b      	mov	r3, r5
 80079da:	2200      	movs	r2, #0
 80079dc:	4543      	cmp	r3, r8
 80079de:	d321      	bcc.n	8007a24 <__multiply+0x98>
 80079e0:	f104 0314 	add.w	r3, r4, #20
 80079e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079e8:	f109 0314 	add.w	r3, r9, #20
 80079ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079f0:	9202      	str	r2, [sp, #8]
 80079f2:	1b3a      	subs	r2, r7, r4
 80079f4:	3a15      	subs	r2, #21
 80079f6:	f022 0203 	bic.w	r2, r2, #3
 80079fa:	3204      	adds	r2, #4
 80079fc:	f104 0115 	add.w	r1, r4, #21
 8007a00:	428f      	cmp	r7, r1
 8007a02:	bf38      	it	cc
 8007a04:	2204      	movcc	r2, #4
 8007a06:	9201      	str	r2, [sp, #4]
 8007a08:	9a02      	ldr	r2, [sp, #8]
 8007a0a:	9303      	str	r3, [sp, #12]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d80c      	bhi.n	8007a2a <__multiply+0x9e>
 8007a10:	2e00      	cmp	r6, #0
 8007a12:	dd03      	ble.n	8007a1c <__multiply+0x90>
 8007a14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d05b      	beq.n	8007ad4 <__multiply+0x148>
 8007a1c:	6106      	str	r6, [r0, #16]
 8007a1e:	b005      	add	sp, #20
 8007a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a24:	f843 2b04 	str.w	r2, [r3], #4
 8007a28:	e7d8      	b.n	80079dc <__multiply+0x50>
 8007a2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a2e:	f1ba 0f00 	cmp.w	sl, #0
 8007a32:	d024      	beq.n	8007a7e <__multiply+0xf2>
 8007a34:	f104 0e14 	add.w	lr, r4, #20
 8007a38:	46a9      	mov	r9, r5
 8007a3a:	f04f 0c00 	mov.w	ip, #0
 8007a3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a42:	f8d9 1000 	ldr.w	r1, [r9]
 8007a46:	fa1f fb82 	uxth.w	fp, r2
 8007a4a:	b289      	uxth	r1, r1
 8007a4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a54:	f8d9 2000 	ldr.w	r2, [r9]
 8007a58:	4461      	add	r1, ip
 8007a5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a66:	b289      	uxth	r1, r1
 8007a68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a6c:	4577      	cmp	r7, lr
 8007a6e:	f849 1b04 	str.w	r1, [r9], #4
 8007a72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a76:	d8e2      	bhi.n	8007a3e <__multiply+0xb2>
 8007a78:	9a01      	ldr	r2, [sp, #4]
 8007a7a:	f845 c002 	str.w	ip, [r5, r2]
 8007a7e:	9a03      	ldr	r2, [sp, #12]
 8007a80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a84:	3304      	adds	r3, #4
 8007a86:	f1b9 0f00 	cmp.w	r9, #0
 8007a8a:	d021      	beq.n	8007ad0 <__multiply+0x144>
 8007a8c:	6829      	ldr	r1, [r5, #0]
 8007a8e:	f104 0c14 	add.w	ip, r4, #20
 8007a92:	46ae      	mov	lr, r5
 8007a94:	f04f 0a00 	mov.w	sl, #0
 8007a98:	f8bc b000 	ldrh.w	fp, [ip]
 8007a9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007aa0:	fb09 220b 	mla	r2, r9, fp, r2
 8007aa4:	4452      	add	r2, sl
 8007aa6:	b289      	uxth	r1, r1
 8007aa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007aac:	f84e 1b04 	str.w	r1, [lr], #4
 8007ab0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ab4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ab8:	f8be 1000 	ldrh.w	r1, [lr]
 8007abc:	fb09 110a 	mla	r1, r9, sl, r1
 8007ac0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007ac4:	4567      	cmp	r7, ip
 8007ac6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007aca:	d8e5      	bhi.n	8007a98 <__multiply+0x10c>
 8007acc:	9a01      	ldr	r2, [sp, #4]
 8007ace:	50a9      	str	r1, [r5, r2]
 8007ad0:	3504      	adds	r5, #4
 8007ad2:	e799      	b.n	8007a08 <__multiply+0x7c>
 8007ad4:	3e01      	subs	r6, #1
 8007ad6:	e79b      	b.n	8007a10 <__multiply+0x84>
 8007ad8:	080088ab 	.word	0x080088ab
 8007adc:	0800892d 	.word	0x0800892d

08007ae0 <__pow5mult>:
 8007ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ae4:	4615      	mov	r5, r2
 8007ae6:	f012 0203 	ands.w	r2, r2, #3
 8007aea:	4606      	mov	r6, r0
 8007aec:	460f      	mov	r7, r1
 8007aee:	d007      	beq.n	8007b00 <__pow5mult+0x20>
 8007af0:	4c25      	ldr	r4, [pc, #148]	; (8007b88 <__pow5mult+0xa8>)
 8007af2:	3a01      	subs	r2, #1
 8007af4:	2300      	movs	r3, #0
 8007af6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007afa:	f7ff fe53 	bl	80077a4 <__multadd>
 8007afe:	4607      	mov	r7, r0
 8007b00:	10ad      	asrs	r5, r5, #2
 8007b02:	d03d      	beq.n	8007b80 <__pow5mult+0xa0>
 8007b04:	69f4      	ldr	r4, [r6, #28]
 8007b06:	b97c      	cbnz	r4, 8007b28 <__pow5mult+0x48>
 8007b08:	2010      	movs	r0, #16
 8007b0a:	f7ff fc75 	bl	80073f8 <malloc>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	61f0      	str	r0, [r6, #28]
 8007b12:	b928      	cbnz	r0, 8007b20 <__pow5mult+0x40>
 8007b14:	4b1d      	ldr	r3, [pc, #116]	; (8007b8c <__pow5mult+0xac>)
 8007b16:	481e      	ldr	r0, [pc, #120]	; (8007b90 <__pow5mult+0xb0>)
 8007b18:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007b1c:	f7fe f938 	bl	8005d90 <__assert_func>
 8007b20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b24:	6004      	str	r4, [r0, #0]
 8007b26:	60c4      	str	r4, [r0, #12]
 8007b28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b30:	b94c      	cbnz	r4, 8007b46 <__pow5mult+0x66>
 8007b32:	f240 2171 	movw	r1, #625	; 0x271
 8007b36:	4630      	mov	r0, r6
 8007b38:	f7ff ff12 	bl	8007960 <__i2b>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b42:	4604      	mov	r4, r0
 8007b44:	6003      	str	r3, [r0, #0]
 8007b46:	f04f 0900 	mov.w	r9, #0
 8007b4a:	07eb      	lsls	r3, r5, #31
 8007b4c:	d50a      	bpl.n	8007b64 <__pow5mult+0x84>
 8007b4e:	4639      	mov	r1, r7
 8007b50:	4622      	mov	r2, r4
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ff1a 	bl	800798c <__multiply>
 8007b58:	4639      	mov	r1, r7
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f7ff fdff 	bl	8007760 <_Bfree>
 8007b62:	4647      	mov	r7, r8
 8007b64:	106d      	asrs	r5, r5, #1
 8007b66:	d00b      	beq.n	8007b80 <__pow5mult+0xa0>
 8007b68:	6820      	ldr	r0, [r4, #0]
 8007b6a:	b938      	cbnz	r0, 8007b7c <__pow5mult+0x9c>
 8007b6c:	4622      	mov	r2, r4
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4630      	mov	r0, r6
 8007b72:	f7ff ff0b 	bl	800798c <__multiply>
 8007b76:	6020      	str	r0, [r4, #0]
 8007b78:	f8c0 9000 	str.w	r9, [r0]
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	e7e4      	b.n	8007b4a <__pow5mult+0x6a>
 8007b80:	4638      	mov	r0, r7
 8007b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b86:	bf00      	nop
 8007b88:	08008a78 	.word	0x08008a78
 8007b8c:	08008690 	.word	0x08008690
 8007b90:	0800892d 	.word	0x0800892d

08007b94 <__lshift>:
 8007b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b98:	460c      	mov	r4, r1
 8007b9a:	6849      	ldr	r1, [r1, #4]
 8007b9c:	6923      	ldr	r3, [r4, #16]
 8007b9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ba2:	68a3      	ldr	r3, [r4, #8]
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	4691      	mov	r9, r2
 8007ba8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bac:	f108 0601 	add.w	r6, r8, #1
 8007bb0:	42b3      	cmp	r3, r6
 8007bb2:	db0b      	blt.n	8007bcc <__lshift+0x38>
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f7ff fd93 	bl	80076e0 <_Balloc>
 8007bba:	4605      	mov	r5, r0
 8007bbc:	b948      	cbnz	r0, 8007bd2 <__lshift+0x3e>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <__lshift+0xd0>)
 8007bc2:	4829      	ldr	r0, [pc, #164]	; (8007c68 <__lshift+0xd4>)
 8007bc4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007bc8:	f7fe f8e2 	bl	8005d90 <__assert_func>
 8007bcc:	3101      	adds	r1, #1
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	e7ee      	b.n	8007bb0 <__lshift+0x1c>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f100 0114 	add.w	r1, r0, #20
 8007bd8:	f100 0210 	add.w	r2, r0, #16
 8007bdc:	4618      	mov	r0, r3
 8007bde:	4553      	cmp	r3, sl
 8007be0:	db33      	blt.n	8007c4a <__lshift+0xb6>
 8007be2:	6920      	ldr	r0, [r4, #16]
 8007be4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007be8:	f104 0314 	add.w	r3, r4, #20
 8007bec:	f019 091f 	ands.w	r9, r9, #31
 8007bf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bf8:	d02b      	beq.n	8007c52 <__lshift+0xbe>
 8007bfa:	f1c9 0e20 	rsb	lr, r9, #32
 8007bfe:	468a      	mov	sl, r1
 8007c00:	2200      	movs	r2, #0
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	fa00 f009 	lsl.w	r0, r0, r9
 8007c08:	4310      	orrs	r0, r2
 8007c0a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c12:	459c      	cmp	ip, r3
 8007c14:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c18:	d8f3      	bhi.n	8007c02 <__lshift+0x6e>
 8007c1a:	ebac 0304 	sub.w	r3, ip, r4
 8007c1e:	3b15      	subs	r3, #21
 8007c20:	f023 0303 	bic.w	r3, r3, #3
 8007c24:	3304      	adds	r3, #4
 8007c26:	f104 0015 	add.w	r0, r4, #21
 8007c2a:	4584      	cmp	ip, r0
 8007c2c:	bf38      	it	cc
 8007c2e:	2304      	movcc	r3, #4
 8007c30:	50ca      	str	r2, [r1, r3]
 8007c32:	b10a      	cbz	r2, 8007c38 <__lshift+0xa4>
 8007c34:	f108 0602 	add.w	r6, r8, #2
 8007c38:	3e01      	subs	r6, #1
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	612e      	str	r6, [r5, #16]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	f7ff fd8e 	bl	8007760 <_Bfree>
 8007c44:	4628      	mov	r0, r5
 8007c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c4e:	3301      	adds	r3, #1
 8007c50:	e7c5      	b.n	8007bde <__lshift+0x4a>
 8007c52:	3904      	subs	r1, #4
 8007c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c58:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c5c:	459c      	cmp	ip, r3
 8007c5e:	d8f9      	bhi.n	8007c54 <__lshift+0xc0>
 8007c60:	e7ea      	b.n	8007c38 <__lshift+0xa4>
 8007c62:	bf00      	nop
 8007c64:	080088ab 	.word	0x080088ab
 8007c68:	0800892d 	.word	0x0800892d

08007c6c <__mcmp>:
 8007c6c:	b530      	push	{r4, r5, lr}
 8007c6e:	6902      	ldr	r2, [r0, #16]
 8007c70:	690c      	ldr	r4, [r1, #16]
 8007c72:	1b12      	subs	r2, r2, r4
 8007c74:	d10e      	bne.n	8007c94 <__mcmp+0x28>
 8007c76:	f100 0314 	add.w	r3, r0, #20
 8007c7a:	3114      	adds	r1, #20
 8007c7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c8c:	42a5      	cmp	r5, r4
 8007c8e:	d003      	beq.n	8007c98 <__mcmp+0x2c>
 8007c90:	d305      	bcc.n	8007c9e <__mcmp+0x32>
 8007c92:	2201      	movs	r2, #1
 8007c94:	4610      	mov	r0, r2
 8007c96:	bd30      	pop	{r4, r5, pc}
 8007c98:	4283      	cmp	r3, r0
 8007c9a:	d3f3      	bcc.n	8007c84 <__mcmp+0x18>
 8007c9c:	e7fa      	b.n	8007c94 <__mcmp+0x28>
 8007c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ca2:	e7f7      	b.n	8007c94 <__mcmp+0x28>

08007ca4 <__mdiff>:
 8007ca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	460c      	mov	r4, r1
 8007caa:	4606      	mov	r6, r0
 8007cac:	4611      	mov	r1, r2
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4690      	mov	r8, r2
 8007cb2:	f7ff ffdb 	bl	8007c6c <__mcmp>
 8007cb6:	1e05      	subs	r5, r0, #0
 8007cb8:	d110      	bne.n	8007cdc <__mdiff+0x38>
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff fd0f 	bl	80076e0 <_Balloc>
 8007cc2:	b930      	cbnz	r0, 8007cd2 <__mdiff+0x2e>
 8007cc4:	4b3a      	ldr	r3, [pc, #232]	; (8007db0 <__mdiff+0x10c>)
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	f240 2137 	movw	r1, #567	; 0x237
 8007ccc:	4839      	ldr	r0, [pc, #228]	; (8007db4 <__mdiff+0x110>)
 8007cce:	f7fe f85f 	bl	8005d90 <__assert_func>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cdc:	bfa4      	itt	ge
 8007cde:	4643      	movge	r3, r8
 8007ce0:	46a0      	movge	r8, r4
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ce8:	bfa6      	itte	ge
 8007cea:	461c      	movge	r4, r3
 8007cec:	2500      	movge	r5, #0
 8007cee:	2501      	movlt	r5, #1
 8007cf0:	f7ff fcf6 	bl	80076e0 <_Balloc>
 8007cf4:	b920      	cbnz	r0, 8007d00 <__mdiff+0x5c>
 8007cf6:	4b2e      	ldr	r3, [pc, #184]	; (8007db0 <__mdiff+0x10c>)
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	f240 2145 	movw	r1, #581	; 0x245
 8007cfe:	e7e5      	b.n	8007ccc <__mdiff+0x28>
 8007d00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d04:	6926      	ldr	r6, [r4, #16]
 8007d06:	60c5      	str	r5, [r0, #12]
 8007d08:	f104 0914 	add.w	r9, r4, #20
 8007d0c:	f108 0514 	add.w	r5, r8, #20
 8007d10:	f100 0e14 	add.w	lr, r0, #20
 8007d14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d1c:	f108 0210 	add.w	r2, r8, #16
 8007d20:	46f2      	mov	sl, lr
 8007d22:	2100      	movs	r1, #0
 8007d24:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d2c:	fa11 f88b 	uxtah	r8, r1, fp
 8007d30:	b299      	uxth	r1, r3
 8007d32:	0c1b      	lsrs	r3, r3, #16
 8007d34:	eba8 0801 	sub.w	r8, r8, r1
 8007d38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d3c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d40:	fa1f f888 	uxth.w	r8, r8
 8007d44:	1419      	asrs	r1, r3, #16
 8007d46:	454e      	cmp	r6, r9
 8007d48:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d4c:	f84a 3b04 	str.w	r3, [sl], #4
 8007d50:	d8e8      	bhi.n	8007d24 <__mdiff+0x80>
 8007d52:	1b33      	subs	r3, r6, r4
 8007d54:	3b15      	subs	r3, #21
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	3415      	adds	r4, #21
 8007d5e:	42a6      	cmp	r6, r4
 8007d60:	bf38      	it	cc
 8007d62:	2304      	movcc	r3, #4
 8007d64:	441d      	add	r5, r3
 8007d66:	4473      	add	r3, lr
 8007d68:	469e      	mov	lr, r3
 8007d6a:	462e      	mov	r6, r5
 8007d6c:	4566      	cmp	r6, ip
 8007d6e:	d30e      	bcc.n	8007d8e <__mdiff+0xea>
 8007d70:	f10c 0203 	add.w	r2, ip, #3
 8007d74:	1b52      	subs	r2, r2, r5
 8007d76:	f022 0203 	bic.w	r2, r2, #3
 8007d7a:	3d03      	subs	r5, #3
 8007d7c:	45ac      	cmp	ip, r5
 8007d7e:	bf38      	it	cc
 8007d80:	2200      	movcc	r2, #0
 8007d82:	4413      	add	r3, r2
 8007d84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d88:	b17a      	cbz	r2, 8007daa <__mdiff+0x106>
 8007d8a:	6107      	str	r7, [r0, #16]
 8007d8c:	e7a4      	b.n	8007cd8 <__mdiff+0x34>
 8007d8e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d92:	fa11 f288 	uxtah	r2, r1, r8
 8007d96:	1414      	asrs	r4, r2, #16
 8007d98:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d9c:	b292      	uxth	r2, r2
 8007d9e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007da2:	f84e 2b04 	str.w	r2, [lr], #4
 8007da6:	1421      	asrs	r1, r4, #16
 8007da8:	e7e0      	b.n	8007d6c <__mdiff+0xc8>
 8007daa:	3f01      	subs	r7, #1
 8007dac:	e7ea      	b.n	8007d84 <__mdiff+0xe0>
 8007dae:	bf00      	nop
 8007db0:	080088ab 	.word	0x080088ab
 8007db4:	0800892d 	.word	0x0800892d

08007db8 <__ulp>:
 8007db8:	b082      	sub	sp, #8
 8007dba:	ed8d 0b00 	vstr	d0, [sp]
 8007dbe:	9a01      	ldr	r2, [sp, #4]
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <__ulp+0x48>)
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	dc08      	bgt.n	8007dde <__ulp+0x26>
 8007dcc:	425b      	negs	r3, r3
 8007dce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007dd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007dd6:	da04      	bge.n	8007de2 <__ulp+0x2a>
 8007dd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ddc:	4113      	asrs	r3, r2
 8007dde:	2200      	movs	r2, #0
 8007de0:	e008      	b.n	8007df4 <__ulp+0x3c>
 8007de2:	f1a2 0314 	sub.w	r3, r2, #20
 8007de6:	2b1e      	cmp	r3, #30
 8007de8:	bfda      	itte	le
 8007dea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007dee:	40da      	lsrle	r2, r3
 8007df0:	2201      	movgt	r2, #1
 8007df2:	2300      	movs	r3, #0
 8007df4:	4619      	mov	r1, r3
 8007df6:	4610      	mov	r0, r2
 8007df8:	ec41 0b10 	vmov	d0, r0, r1
 8007dfc:	b002      	add	sp, #8
 8007dfe:	4770      	bx	lr
 8007e00:	7ff00000 	.word	0x7ff00000

08007e04 <__b2d>:
 8007e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e08:	6906      	ldr	r6, [r0, #16]
 8007e0a:	f100 0814 	add.w	r8, r0, #20
 8007e0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007e12:	1f37      	subs	r7, r6, #4
 8007e14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e18:	4610      	mov	r0, r2
 8007e1a:	f7ff fd53 	bl	80078c4 <__hi0bits>
 8007e1e:	f1c0 0320 	rsb	r3, r0, #32
 8007e22:	280a      	cmp	r0, #10
 8007e24:	600b      	str	r3, [r1, #0]
 8007e26:	491b      	ldr	r1, [pc, #108]	; (8007e94 <__b2d+0x90>)
 8007e28:	dc15      	bgt.n	8007e56 <__b2d+0x52>
 8007e2a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007e2e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007e32:	45b8      	cmp	r8, r7
 8007e34:	ea43 0501 	orr.w	r5, r3, r1
 8007e38:	bf34      	ite	cc
 8007e3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007e3e:	2300      	movcs	r3, #0
 8007e40:	3015      	adds	r0, #21
 8007e42:	fa02 f000 	lsl.w	r0, r2, r0
 8007e46:	fa23 f30c 	lsr.w	r3, r3, ip
 8007e4a:	4303      	orrs	r3, r0
 8007e4c:	461c      	mov	r4, r3
 8007e4e:	ec45 4b10 	vmov	d0, r4, r5
 8007e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e56:	45b8      	cmp	r8, r7
 8007e58:	bf3a      	itte	cc
 8007e5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007e5e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007e62:	2300      	movcs	r3, #0
 8007e64:	380b      	subs	r0, #11
 8007e66:	d012      	beq.n	8007e8e <__b2d+0x8a>
 8007e68:	f1c0 0120 	rsb	r1, r0, #32
 8007e6c:	fa23 f401 	lsr.w	r4, r3, r1
 8007e70:	4082      	lsls	r2, r0
 8007e72:	4322      	orrs	r2, r4
 8007e74:	4547      	cmp	r7, r8
 8007e76:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007e7a:	bf8c      	ite	hi
 8007e7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007e80:	2200      	movls	r2, #0
 8007e82:	4083      	lsls	r3, r0
 8007e84:	40ca      	lsrs	r2, r1
 8007e86:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	e7de      	b.n	8007e4c <__b2d+0x48>
 8007e8e:	ea42 0501 	orr.w	r5, r2, r1
 8007e92:	e7db      	b.n	8007e4c <__b2d+0x48>
 8007e94:	3ff00000 	.word	0x3ff00000

08007e98 <__d2b>:
 8007e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e9c:	460f      	mov	r7, r1
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	ec59 8b10 	vmov	r8, r9, d0
 8007ea4:	4616      	mov	r6, r2
 8007ea6:	f7ff fc1b 	bl	80076e0 <_Balloc>
 8007eaa:	4604      	mov	r4, r0
 8007eac:	b930      	cbnz	r0, 8007ebc <__d2b+0x24>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	4b24      	ldr	r3, [pc, #144]	; (8007f44 <__d2b+0xac>)
 8007eb2:	4825      	ldr	r0, [pc, #148]	; (8007f48 <__d2b+0xb0>)
 8007eb4:	f240 310f 	movw	r1, #783	; 0x30f
 8007eb8:	f7fd ff6a 	bl	8005d90 <__assert_func>
 8007ebc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ec0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ec4:	bb2d      	cbnz	r5, 8007f12 <__d2b+0x7a>
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	f1b8 0300 	subs.w	r3, r8, #0
 8007ecc:	d026      	beq.n	8007f1c <__d2b+0x84>
 8007ece:	4668      	mov	r0, sp
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	f7ff fd17 	bl	8007904 <__lo0bits>
 8007ed6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007eda:	b1e8      	cbz	r0, 8007f18 <__d2b+0x80>
 8007edc:	f1c0 0320 	rsb	r3, r0, #32
 8007ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	40c2      	lsrs	r2, r0
 8007ee8:	6163      	str	r3, [r4, #20]
 8007eea:	9201      	str	r2, [sp, #4]
 8007eec:	9b01      	ldr	r3, [sp, #4]
 8007eee:	61a3      	str	r3, [r4, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	bf14      	ite	ne
 8007ef4:	2202      	movne	r2, #2
 8007ef6:	2201      	moveq	r2, #1
 8007ef8:	6122      	str	r2, [r4, #16]
 8007efa:	b1bd      	cbz	r5, 8007f2c <__d2b+0x94>
 8007efc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f00:	4405      	add	r5, r0
 8007f02:	603d      	str	r5, [r7, #0]
 8007f04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f08:	6030      	str	r0, [r6, #0]
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	b003      	add	sp, #12
 8007f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f16:	e7d6      	b.n	8007ec6 <__d2b+0x2e>
 8007f18:	6161      	str	r1, [r4, #20]
 8007f1a:	e7e7      	b.n	8007eec <__d2b+0x54>
 8007f1c:	a801      	add	r0, sp, #4
 8007f1e:	f7ff fcf1 	bl	8007904 <__lo0bits>
 8007f22:	9b01      	ldr	r3, [sp, #4]
 8007f24:	6163      	str	r3, [r4, #20]
 8007f26:	3020      	adds	r0, #32
 8007f28:	2201      	movs	r2, #1
 8007f2a:	e7e5      	b.n	8007ef8 <__d2b+0x60>
 8007f2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f34:	6038      	str	r0, [r7, #0]
 8007f36:	6918      	ldr	r0, [r3, #16]
 8007f38:	f7ff fcc4 	bl	80078c4 <__hi0bits>
 8007f3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f40:	e7e2      	b.n	8007f08 <__d2b+0x70>
 8007f42:	bf00      	nop
 8007f44:	080088ab 	.word	0x080088ab
 8007f48:	0800892d 	.word	0x0800892d

08007f4c <__ratio>:
 8007f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	4688      	mov	r8, r1
 8007f52:	4669      	mov	r1, sp
 8007f54:	4681      	mov	r9, r0
 8007f56:	f7ff ff55 	bl	8007e04 <__b2d>
 8007f5a:	a901      	add	r1, sp, #4
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	ec55 4b10 	vmov	r4, r5, d0
 8007f62:	f7ff ff4f 	bl	8007e04 <__b2d>
 8007f66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007f6e:	eba3 0c02 	sub.w	ip, r3, r2
 8007f72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007f7c:	ec51 0b10 	vmov	r0, r1, d0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	bfd6      	itet	le
 8007f84:	460a      	movle	r2, r1
 8007f86:	462a      	movgt	r2, r5
 8007f88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f8c:	468b      	mov	fp, r1
 8007f8e:	462f      	mov	r7, r5
 8007f90:	bfd4      	ite	le
 8007f92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007f96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	ee10 2a10 	vmov	r2, s0
 8007fa0:	465b      	mov	r3, fp
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 fc5c 	bl	8000860 <__aeabi_ddiv>
 8007fa8:	ec41 0b10 	vmov	d0, r0, r1
 8007fac:	b003      	add	sp, #12
 8007fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fb2 <__copybits>:
 8007fb2:	3901      	subs	r1, #1
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	1149      	asrs	r1, r1, #5
 8007fb8:	6914      	ldr	r4, [r2, #16]
 8007fba:	3101      	adds	r1, #1
 8007fbc:	f102 0314 	add.w	r3, r2, #20
 8007fc0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007fc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007fc8:	1f05      	subs	r5, r0, #4
 8007fca:	42a3      	cmp	r3, r4
 8007fcc:	d30c      	bcc.n	8007fe8 <__copybits+0x36>
 8007fce:	1aa3      	subs	r3, r4, r2
 8007fd0:	3b11      	subs	r3, #17
 8007fd2:	f023 0303 	bic.w	r3, r3, #3
 8007fd6:	3211      	adds	r2, #17
 8007fd8:	42a2      	cmp	r2, r4
 8007fda:	bf88      	it	hi
 8007fdc:	2300      	movhi	r3, #0
 8007fde:	4418      	add	r0, r3
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4288      	cmp	r0, r1
 8007fe4:	d305      	bcc.n	8007ff2 <__copybits+0x40>
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}
 8007fe8:	f853 6b04 	ldr.w	r6, [r3], #4
 8007fec:	f845 6f04 	str.w	r6, [r5, #4]!
 8007ff0:	e7eb      	b.n	8007fca <__copybits+0x18>
 8007ff2:	f840 3b04 	str.w	r3, [r0], #4
 8007ff6:	e7f4      	b.n	8007fe2 <__copybits+0x30>

08007ff8 <__any_on>:
 8007ff8:	f100 0214 	add.w	r2, r0, #20
 8007ffc:	6900      	ldr	r0, [r0, #16]
 8007ffe:	114b      	asrs	r3, r1, #5
 8008000:	4298      	cmp	r0, r3
 8008002:	b510      	push	{r4, lr}
 8008004:	db11      	blt.n	800802a <__any_on+0x32>
 8008006:	dd0a      	ble.n	800801e <__any_on+0x26>
 8008008:	f011 011f 	ands.w	r1, r1, #31
 800800c:	d007      	beq.n	800801e <__any_on+0x26>
 800800e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008012:	fa24 f001 	lsr.w	r0, r4, r1
 8008016:	fa00 f101 	lsl.w	r1, r0, r1
 800801a:	428c      	cmp	r4, r1
 800801c:	d10b      	bne.n	8008036 <__any_on+0x3e>
 800801e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008022:	4293      	cmp	r3, r2
 8008024:	d803      	bhi.n	800802e <__any_on+0x36>
 8008026:	2000      	movs	r0, #0
 8008028:	bd10      	pop	{r4, pc}
 800802a:	4603      	mov	r3, r0
 800802c:	e7f7      	b.n	800801e <__any_on+0x26>
 800802e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008032:	2900      	cmp	r1, #0
 8008034:	d0f5      	beq.n	8008022 <__any_on+0x2a>
 8008036:	2001      	movs	r0, #1
 8008038:	e7f6      	b.n	8008028 <__any_on+0x30>

0800803a <__sread>:
 800803a:	b510      	push	{r4, lr}
 800803c:	460c      	mov	r4, r1
 800803e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008042:	f000 f999 	bl	8008378 <_read_r>
 8008046:	2800      	cmp	r0, #0
 8008048:	bfab      	itete	ge
 800804a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800804c:	89a3      	ldrhlt	r3, [r4, #12]
 800804e:	181b      	addge	r3, r3, r0
 8008050:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008054:	bfac      	ite	ge
 8008056:	6563      	strge	r3, [r4, #84]	; 0x54
 8008058:	81a3      	strhlt	r3, [r4, #12]
 800805a:	bd10      	pop	{r4, pc}

0800805c <__swrite>:
 800805c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008060:	461f      	mov	r7, r3
 8008062:	898b      	ldrh	r3, [r1, #12]
 8008064:	05db      	lsls	r3, r3, #23
 8008066:	4605      	mov	r5, r0
 8008068:	460c      	mov	r4, r1
 800806a:	4616      	mov	r6, r2
 800806c:	d505      	bpl.n	800807a <__swrite+0x1e>
 800806e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008072:	2302      	movs	r3, #2
 8008074:	2200      	movs	r2, #0
 8008076:	f000 f96d 	bl	8008354 <_lseek_r>
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008084:	81a3      	strh	r3, [r4, #12]
 8008086:	4632      	mov	r2, r6
 8008088:	463b      	mov	r3, r7
 800808a:	4628      	mov	r0, r5
 800808c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008090:	f000 b994 	b.w	80083bc <_write_r>

08008094 <__sseek>:
 8008094:	b510      	push	{r4, lr}
 8008096:	460c      	mov	r4, r1
 8008098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809c:	f000 f95a 	bl	8008354 <_lseek_r>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	bf15      	itete	ne
 80080a6:	6560      	strne	r0, [r4, #84]	; 0x54
 80080a8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080ac:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080b0:	81a3      	strheq	r3, [r4, #12]
 80080b2:	bf18      	it	ne
 80080b4:	81a3      	strhne	r3, [r4, #12]
 80080b6:	bd10      	pop	{r4, pc}

080080b8 <__sclose>:
 80080b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080bc:	f000 b918 	b.w	80082f0 <_close_r>

080080c0 <fiprintf>:
 80080c0:	b40e      	push	{r1, r2, r3}
 80080c2:	b503      	push	{r0, r1, lr}
 80080c4:	4601      	mov	r1, r0
 80080c6:	ab03      	add	r3, sp, #12
 80080c8:	4805      	ldr	r0, [pc, #20]	; (80080e0 <fiprintf+0x20>)
 80080ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ce:	6800      	ldr	r0, [r0, #0]
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	f7ff f877 	bl	80071c4 <_vfiprintf_r>
 80080d6:	b002      	add	sp, #8
 80080d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080dc:	b003      	add	sp, #12
 80080de:	4770      	bx	lr
 80080e0:	200001d0 	.word	0x200001d0

080080e4 <__swbuf_r>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	460e      	mov	r6, r1
 80080e8:	4614      	mov	r4, r2
 80080ea:	4605      	mov	r5, r0
 80080ec:	b118      	cbz	r0, 80080f6 <__swbuf_r+0x12>
 80080ee:	6a03      	ldr	r3, [r0, #32]
 80080f0:	b90b      	cbnz	r3, 80080f6 <__swbuf_r+0x12>
 80080f2:	f7fc fe15 	bl	8004d20 <__sinit>
 80080f6:	69a3      	ldr	r3, [r4, #24]
 80080f8:	60a3      	str	r3, [r4, #8]
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	071a      	lsls	r2, r3, #28
 80080fe:	d525      	bpl.n	800814c <__swbuf_r+0x68>
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	b31b      	cbz	r3, 800814c <__swbuf_r+0x68>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	6922      	ldr	r2, [r4, #16]
 8008108:	1a98      	subs	r0, r3, r2
 800810a:	6963      	ldr	r3, [r4, #20]
 800810c:	b2f6      	uxtb	r6, r6
 800810e:	4283      	cmp	r3, r0
 8008110:	4637      	mov	r7, r6
 8008112:	dc04      	bgt.n	800811e <__swbuf_r+0x3a>
 8008114:	4621      	mov	r1, r4
 8008116:	4628      	mov	r0, r5
 8008118:	f7ff faae 	bl	8007678 <_fflush_r>
 800811c:	b9e0      	cbnz	r0, 8008158 <__swbuf_r+0x74>
 800811e:	68a3      	ldr	r3, [r4, #8]
 8008120:	3b01      	subs	r3, #1
 8008122:	60a3      	str	r3, [r4, #8]
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	6022      	str	r2, [r4, #0]
 800812a:	701e      	strb	r6, [r3, #0]
 800812c:	6962      	ldr	r2, [r4, #20]
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	429a      	cmp	r2, r3
 8008132:	d004      	beq.n	800813e <__swbuf_r+0x5a>
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	07db      	lsls	r3, r3, #31
 8008138:	d506      	bpl.n	8008148 <__swbuf_r+0x64>
 800813a:	2e0a      	cmp	r6, #10
 800813c:	d104      	bne.n	8008148 <__swbuf_r+0x64>
 800813e:	4621      	mov	r1, r4
 8008140:	4628      	mov	r0, r5
 8008142:	f7ff fa99 	bl	8007678 <_fflush_r>
 8008146:	b938      	cbnz	r0, 8008158 <__swbuf_r+0x74>
 8008148:	4638      	mov	r0, r7
 800814a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800814c:	4621      	mov	r1, r4
 800814e:	4628      	mov	r0, r5
 8008150:	f000 f806 	bl	8008160 <__swsetup_r>
 8008154:	2800      	cmp	r0, #0
 8008156:	d0d5      	beq.n	8008104 <__swbuf_r+0x20>
 8008158:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800815c:	e7f4      	b.n	8008148 <__swbuf_r+0x64>
	...

08008160 <__swsetup_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4b2a      	ldr	r3, [pc, #168]	; (800820c <__swsetup_r+0xac>)
 8008164:	4605      	mov	r5, r0
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	460c      	mov	r4, r1
 800816a:	b118      	cbz	r0, 8008174 <__swsetup_r+0x14>
 800816c:	6a03      	ldr	r3, [r0, #32]
 800816e:	b90b      	cbnz	r3, 8008174 <__swsetup_r+0x14>
 8008170:	f7fc fdd6 	bl	8004d20 <__sinit>
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800817a:	0718      	lsls	r0, r3, #28
 800817c:	d422      	bmi.n	80081c4 <__swsetup_r+0x64>
 800817e:	06d9      	lsls	r1, r3, #27
 8008180:	d407      	bmi.n	8008192 <__swsetup_r+0x32>
 8008182:	2309      	movs	r3, #9
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800818a:	81a3      	strh	r3, [r4, #12]
 800818c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008190:	e034      	b.n	80081fc <__swsetup_r+0x9c>
 8008192:	0758      	lsls	r0, r3, #29
 8008194:	d512      	bpl.n	80081bc <__swsetup_r+0x5c>
 8008196:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008198:	b141      	cbz	r1, 80081ac <__swsetup_r+0x4c>
 800819a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800819e:	4299      	cmp	r1, r3
 80081a0:	d002      	beq.n	80081a8 <__swsetup_r+0x48>
 80081a2:	4628      	mov	r0, r5
 80081a4:	f000 f964 	bl	8008470 <_free_r>
 80081a8:	2300      	movs	r3, #0
 80081aa:	6363      	str	r3, [r4, #52]	; 0x34
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	2300      	movs	r3, #0
 80081b6:	6063      	str	r3, [r4, #4]
 80081b8:	6923      	ldr	r3, [r4, #16]
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	f043 0308 	orr.w	r3, r3, #8
 80081c2:	81a3      	strh	r3, [r4, #12]
 80081c4:	6923      	ldr	r3, [r4, #16]
 80081c6:	b94b      	cbnz	r3, 80081dc <__swsetup_r+0x7c>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081d2:	d003      	beq.n	80081dc <__swsetup_r+0x7c>
 80081d4:	4621      	mov	r1, r4
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 f84d 	bl	8008276 <__smakebuf_r>
 80081dc:	89a0      	ldrh	r0, [r4, #12]
 80081de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081e2:	f010 0301 	ands.w	r3, r0, #1
 80081e6:	d00a      	beq.n	80081fe <__swsetup_r+0x9e>
 80081e8:	2300      	movs	r3, #0
 80081ea:	60a3      	str	r3, [r4, #8]
 80081ec:	6963      	ldr	r3, [r4, #20]
 80081ee:	425b      	negs	r3, r3
 80081f0:	61a3      	str	r3, [r4, #24]
 80081f2:	6923      	ldr	r3, [r4, #16]
 80081f4:	b943      	cbnz	r3, 8008208 <__swsetup_r+0xa8>
 80081f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081fa:	d1c4      	bne.n	8008186 <__swsetup_r+0x26>
 80081fc:	bd38      	pop	{r3, r4, r5, pc}
 80081fe:	0781      	lsls	r1, r0, #30
 8008200:	bf58      	it	pl
 8008202:	6963      	ldrpl	r3, [r4, #20]
 8008204:	60a3      	str	r3, [r4, #8]
 8008206:	e7f4      	b.n	80081f2 <__swsetup_r+0x92>
 8008208:	2000      	movs	r0, #0
 800820a:	e7f7      	b.n	80081fc <__swsetup_r+0x9c>
 800820c:	200001d0 	.word	0x200001d0

08008210 <__ascii_wctomb>:
 8008210:	b149      	cbz	r1, 8008226 <__ascii_wctomb+0x16>
 8008212:	2aff      	cmp	r2, #255	; 0xff
 8008214:	bf85      	ittet	hi
 8008216:	238a      	movhi	r3, #138	; 0x8a
 8008218:	6003      	strhi	r3, [r0, #0]
 800821a:	700a      	strbls	r2, [r1, #0]
 800821c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008220:	bf98      	it	ls
 8008222:	2001      	movls	r0, #1
 8008224:	4770      	bx	lr
 8008226:	4608      	mov	r0, r1
 8008228:	4770      	bx	lr

0800822a <__swhatbuf_r>:
 800822a:	b570      	push	{r4, r5, r6, lr}
 800822c:	460c      	mov	r4, r1
 800822e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008232:	2900      	cmp	r1, #0
 8008234:	b096      	sub	sp, #88	; 0x58
 8008236:	4615      	mov	r5, r2
 8008238:	461e      	mov	r6, r3
 800823a:	da0d      	bge.n	8008258 <__swhatbuf_r+0x2e>
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008242:	f04f 0100 	mov.w	r1, #0
 8008246:	bf0c      	ite	eq
 8008248:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800824c:	2340      	movne	r3, #64	; 0x40
 800824e:	2000      	movs	r0, #0
 8008250:	6031      	str	r1, [r6, #0]
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	b016      	add	sp, #88	; 0x58
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	466a      	mov	r2, sp
 800825a:	f000 f859 	bl	8008310 <_fstat_r>
 800825e:	2800      	cmp	r0, #0
 8008260:	dbec      	blt.n	800823c <__swhatbuf_r+0x12>
 8008262:	9901      	ldr	r1, [sp, #4]
 8008264:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008268:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800826c:	4259      	negs	r1, r3
 800826e:	4159      	adcs	r1, r3
 8008270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008274:	e7eb      	b.n	800824e <__swhatbuf_r+0x24>

08008276 <__smakebuf_r>:
 8008276:	898b      	ldrh	r3, [r1, #12]
 8008278:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800827a:	079d      	lsls	r5, r3, #30
 800827c:	4606      	mov	r6, r0
 800827e:	460c      	mov	r4, r1
 8008280:	d507      	bpl.n	8008292 <__smakebuf_r+0x1c>
 8008282:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	6123      	str	r3, [r4, #16]
 800828a:	2301      	movs	r3, #1
 800828c:	6163      	str	r3, [r4, #20]
 800828e:	b002      	add	sp, #8
 8008290:	bd70      	pop	{r4, r5, r6, pc}
 8008292:	ab01      	add	r3, sp, #4
 8008294:	466a      	mov	r2, sp
 8008296:	f7ff ffc8 	bl	800822a <__swhatbuf_r>
 800829a:	9900      	ldr	r1, [sp, #0]
 800829c:	4605      	mov	r5, r0
 800829e:	4630      	mov	r0, r6
 80082a0:	f7ff f8d2 	bl	8007448 <_malloc_r>
 80082a4:	b948      	cbnz	r0, 80082ba <__smakebuf_r+0x44>
 80082a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082aa:	059a      	lsls	r2, r3, #22
 80082ac:	d4ef      	bmi.n	800828e <__smakebuf_r+0x18>
 80082ae:	f023 0303 	bic.w	r3, r3, #3
 80082b2:	f043 0302 	orr.w	r3, r3, #2
 80082b6:	81a3      	strh	r3, [r4, #12]
 80082b8:	e7e3      	b.n	8008282 <__smakebuf_r+0xc>
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	6020      	str	r0, [r4, #0]
 80082be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	6163      	str	r3, [r4, #20]
 80082c8:	9b01      	ldr	r3, [sp, #4]
 80082ca:	6120      	str	r0, [r4, #16]
 80082cc:	b15b      	cbz	r3, 80082e6 <__smakebuf_r+0x70>
 80082ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d2:	4630      	mov	r0, r6
 80082d4:	f000 f82e 	bl	8008334 <_isatty_r>
 80082d8:	b128      	cbz	r0, 80082e6 <__smakebuf_r+0x70>
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f023 0303 	bic.w	r3, r3, #3
 80082e0:	f043 0301 	orr.w	r3, r3, #1
 80082e4:	81a3      	strh	r3, [r4, #12]
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	431d      	orrs	r5, r3
 80082ea:	81a5      	strh	r5, [r4, #12]
 80082ec:	e7cf      	b.n	800828e <__smakebuf_r+0x18>
	...

080082f0 <_close_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d06      	ldr	r5, [pc, #24]	; (800830c <_close_r+0x1c>)
 80082f4:	2300      	movs	r3, #0
 80082f6:	4604      	mov	r4, r0
 80082f8:	4608      	mov	r0, r1
 80082fa:	602b      	str	r3, [r5, #0]
 80082fc:	f7f9 f9a1 	bl	8001642 <_close>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_close_r+0x1a>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	b103      	cbz	r3, 800830a <_close_r+0x1a>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	20000670 	.word	0x20000670

08008310 <_fstat_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d07      	ldr	r5, [pc, #28]	; (8008330 <_fstat_r+0x20>)
 8008314:	2300      	movs	r3, #0
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	4611      	mov	r1, r2
 800831c:	602b      	str	r3, [r5, #0]
 800831e:	f7f9 f99c 	bl	800165a <_fstat>
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	d102      	bne.n	800832c <_fstat_r+0x1c>
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	b103      	cbz	r3, 800832c <_fstat_r+0x1c>
 800832a:	6023      	str	r3, [r4, #0]
 800832c:	bd38      	pop	{r3, r4, r5, pc}
 800832e:	bf00      	nop
 8008330:	20000670 	.word	0x20000670

08008334 <_isatty_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d06      	ldr	r5, [pc, #24]	; (8008350 <_isatty_r+0x1c>)
 8008338:	2300      	movs	r3, #0
 800833a:	4604      	mov	r4, r0
 800833c:	4608      	mov	r0, r1
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	f7f9 f99b 	bl	800167a <_isatty>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_isatty_r+0x1a>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_isatty_r+0x1a>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	20000670 	.word	0x20000670

08008354 <_lseek_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d07      	ldr	r5, [pc, #28]	; (8008374 <_lseek_r+0x20>)
 8008358:	4604      	mov	r4, r0
 800835a:	4608      	mov	r0, r1
 800835c:	4611      	mov	r1, r2
 800835e:	2200      	movs	r2, #0
 8008360:	602a      	str	r2, [r5, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	f7f9 f994 	bl	8001690 <_lseek>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_lseek_r+0x1e>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_lseek_r+0x1e>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	20000670 	.word	0x20000670

08008378 <_read_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d07      	ldr	r5, [pc, #28]	; (8008398 <_read_r+0x20>)
 800837c:	4604      	mov	r4, r0
 800837e:	4608      	mov	r0, r1
 8008380:	4611      	mov	r1, r2
 8008382:	2200      	movs	r2, #0
 8008384:	602a      	str	r2, [r5, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f7f9 f93e 	bl	8001608 <_read>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_read_r+0x1e>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_read_r+0x1e>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	20000670 	.word	0x20000670

0800839c <_sbrk_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d06      	ldr	r5, [pc, #24]	; (80083b8 <_sbrk_r+0x1c>)
 80083a0:	2300      	movs	r3, #0
 80083a2:	4604      	mov	r4, r0
 80083a4:	4608      	mov	r0, r1
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	f7f9 f980 	bl	80016ac <_sbrk>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d102      	bne.n	80083b6 <_sbrk_r+0x1a>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	b103      	cbz	r3, 80083b6 <_sbrk_r+0x1a>
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	20000670 	.word	0x20000670

080083bc <_write_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4d07      	ldr	r5, [pc, #28]	; (80083dc <_write_r+0x20>)
 80083c0:	4604      	mov	r4, r0
 80083c2:	4608      	mov	r0, r1
 80083c4:	4611      	mov	r1, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	602a      	str	r2, [r5, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f7f8 fe7a 	bl	80010c4 <_write>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_write_r+0x1e>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_write_r+0x1e>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	20000670 	.word	0x20000670

080083e0 <__fpclassifyd>:
 80083e0:	ec51 0b10 	vmov	r0, r1, d0
 80083e4:	b510      	push	{r4, lr}
 80083e6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80083ea:	460b      	mov	r3, r1
 80083ec:	d019      	beq.n	8008422 <__fpclassifyd+0x42>
 80083ee:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80083f2:	490e      	ldr	r1, [pc, #56]	; (800842c <__fpclassifyd+0x4c>)
 80083f4:	428a      	cmp	r2, r1
 80083f6:	d90e      	bls.n	8008416 <__fpclassifyd+0x36>
 80083f8:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 80083fc:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8008400:	428a      	cmp	r2, r1
 8008402:	d908      	bls.n	8008416 <__fpclassifyd+0x36>
 8008404:	4a0a      	ldr	r2, [pc, #40]	; (8008430 <__fpclassifyd+0x50>)
 8008406:	4213      	tst	r3, r2
 8008408:	d007      	beq.n	800841a <__fpclassifyd+0x3a>
 800840a:	4294      	cmp	r4, r2
 800840c:	d107      	bne.n	800841e <__fpclassifyd+0x3e>
 800840e:	fab0 f080 	clz	r0, r0
 8008412:	0940      	lsrs	r0, r0, #5
 8008414:	bd10      	pop	{r4, pc}
 8008416:	2004      	movs	r0, #4
 8008418:	e7fc      	b.n	8008414 <__fpclassifyd+0x34>
 800841a:	2003      	movs	r0, #3
 800841c:	e7fa      	b.n	8008414 <__fpclassifyd+0x34>
 800841e:	2000      	movs	r0, #0
 8008420:	e7f8      	b.n	8008414 <__fpclassifyd+0x34>
 8008422:	2800      	cmp	r0, #0
 8008424:	d1ee      	bne.n	8008404 <__fpclassifyd+0x24>
 8008426:	2002      	movs	r0, #2
 8008428:	e7f4      	b.n	8008414 <__fpclassifyd+0x34>
 800842a:	bf00      	nop
 800842c:	7fdfffff 	.word	0x7fdfffff
 8008430:	7ff00000 	.word	0x7ff00000

08008434 <abort>:
 8008434:	b508      	push	{r3, lr}
 8008436:	2006      	movs	r0, #6
 8008438:	f000 f88e 	bl	8008558 <raise>
 800843c:	2001      	movs	r0, #1
 800843e:	f7f9 f8d9 	bl	80015f4 <_exit>

08008442 <_calloc_r>:
 8008442:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008444:	fba1 2402 	umull	r2, r4, r1, r2
 8008448:	b94c      	cbnz	r4, 800845e <_calloc_r+0x1c>
 800844a:	4611      	mov	r1, r2
 800844c:	9201      	str	r2, [sp, #4]
 800844e:	f7fe fffb 	bl	8007448 <_malloc_r>
 8008452:	9a01      	ldr	r2, [sp, #4]
 8008454:	4605      	mov	r5, r0
 8008456:	b930      	cbnz	r0, 8008466 <_calloc_r+0x24>
 8008458:	4628      	mov	r0, r5
 800845a:	b003      	add	sp, #12
 800845c:	bd30      	pop	{r4, r5, pc}
 800845e:	220c      	movs	r2, #12
 8008460:	6002      	str	r2, [r0, #0]
 8008462:	2500      	movs	r5, #0
 8008464:	e7f8      	b.n	8008458 <_calloc_r+0x16>
 8008466:	4621      	mov	r1, r4
 8008468:	f7fd fbea 	bl	8005c40 <memset>
 800846c:	e7f4      	b.n	8008458 <_calloc_r+0x16>
	...

08008470 <_free_r>:
 8008470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008472:	2900      	cmp	r1, #0
 8008474:	d044      	beq.n	8008500 <_free_r+0x90>
 8008476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800847a:	9001      	str	r0, [sp, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	f1a1 0404 	sub.w	r4, r1, #4
 8008482:	bfb8      	it	lt
 8008484:	18e4      	addlt	r4, r4, r3
 8008486:	f7ff f91f 	bl	80076c8 <__malloc_lock>
 800848a:	4a1e      	ldr	r2, [pc, #120]	; (8008504 <_free_r+0x94>)
 800848c:	9801      	ldr	r0, [sp, #4]
 800848e:	6813      	ldr	r3, [r2, #0]
 8008490:	b933      	cbnz	r3, 80084a0 <_free_r+0x30>
 8008492:	6063      	str	r3, [r4, #4]
 8008494:	6014      	str	r4, [r2, #0]
 8008496:	b003      	add	sp, #12
 8008498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800849c:	f7ff b91a 	b.w	80076d4 <__malloc_unlock>
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	d908      	bls.n	80084b6 <_free_r+0x46>
 80084a4:	6825      	ldr	r5, [r4, #0]
 80084a6:	1961      	adds	r1, r4, r5
 80084a8:	428b      	cmp	r3, r1
 80084aa:	bf01      	itttt	eq
 80084ac:	6819      	ldreq	r1, [r3, #0]
 80084ae:	685b      	ldreq	r3, [r3, #4]
 80084b0:	1949      	addeq	r1, r1, r5
 80084b2:	6021      	streq	r1, [r4, #0]
 80084b4:	e7ed      	b.n	8008492 <_free_r+0x22>
 80084b6:	461a      	mov	r2, r3
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	b10b      	cbz	r3, 80084c0 <_free_r+0x50>
 80084bc:	42a3      	cmp	r3, r4
 80084be:	d9fa      	bls.n	80084b6 <_free_r+0x46>
 80084c0:	6811      	ldr	r1, [r2, #0]
 80084c2:	1855      	adds	r5, r2, r1
 80084c4:	42a5      	cmp	r5, r4
 80084c6:	d10b      	bne.n	80084e0 <_free_r+0x70>
 80084c8:	6824      	ldr	r4, [r4, #0]
 80084ca:	4421      	add	r1, r4
 80084cc:	1854      	adds	r4, r2, r1
 80084ce:	42a3      	cmp	r3, r4
 80084d0:	6011      	str	r1, [r2, #0]
 80084d2:	d1e0      	bne.n	8008496 <_free_r+0x26>
 80084d4:	681c      	ldr	r4, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	6053      	str	r3, [r2, #4]
 80084da:	440c      	add	r4, r1
 80084dc:	6014      	str	r4, [r2, #0]
 80084de:	e7da      	b.n	8008496 <_free_r+0x26>
 80084e0:	d902      	bls.n	80084e8 <_free_r+0x78>
 80084e2:	230c      	movs	r3, #12
 80084e4:	6003      	str	r3, [r0, #0]
 80084e6:	e7d6      	b.n	8008496 <_free_r+0x26>
 80084e8:	6825      	ldr	r5, [r4, #0]
 80084ea:	1961      	adds	r1, r4, r5
 80084ec:	428b      	cmp	r3, r1
 80084ee:	bf04      	itt	eq
 80084f0:	6819      	ldreq	r1, [r3, #0]
 80084f2:	685b      	ldreq	r3, [r3, #4]
 80084f4:	6063      	str	r3, [r4, #4]
 80084f6:	bf04      	itt	eq
 80084f8:	1949      	addeq	r1, r1, r5
 80084fa:	6021      	streq	r1, [r4, #0]
 80084fc:	6054      	str	r4, [r2, #4]
 80084fe:	e7ca      	b.n	8008496 <_free_r+0x26>
 8008500:	b003      	add	sp, #12
 8008502:	bd30      	pop	{r4, r5, pc}
 8008504:	20000668 	.word	0x20000668

08008508 <_raise_r>:
 8008508:	291f      	cmp	r1, #31
 800850a:	b538      	push	{r3, r4, r5, lr}
 800850c:	4604      	mov	r4, r0
 800850e:	460d      	mov	r5, r1
 8008510:	d904      	bls.n	800851c <_raise_r+0x14>
 8008512:	2316      	movs	r3, #22
 8008514:	6003      	str	r3, [r0, #0]
 8008516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800851e:	b112      	cbz	r2, 8008526 <_raise_r+0x1e>
 8008520:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008524:	b94b      	cbnz	r3, 800853a <_raise_r+0x32>
 8008526:	4620      	mov	r0, r4
 8008528:	f000 f830 	bl	800858c <_getpid_r>
 800852c:	462a      	mov	r2, r5
 800852e:	4601      	mov	r1, r0
 8008530:	4620      	mov	r0, r4
 8008532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008536:	f000 b817 	b.w	8008568 <_kill_r>
 800853a:	2b01      	cmp	r3, #1
 800853c:	d00a      	beq.n	8008554 <_raise_r+0x4c>
 800853e:	1c59      	adds	r1, r3, #1
 8008540:	d103      	bne.n	800854a <_raise_r+0x42>
 8008542:	2316      	movs	r3, #22
 8008544:	6003      	str	r3, [r0, #0]
 8008546:	2001      	movs	r0, #1
 8008548:	e7e7      	b.n	800851a <_raise_r+0x12>
 800854a:	2400      	movs	r4, #0
 800854c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008550:	4628      	mov	r0, r5
 8008552:	4798      	blx	r3
 8008554:	2000      	movs	r0, #0
 8008556:	e7e0      	b.n	800851a <_raise_r+0x12>

08008558 <raise>:
 8008558:	4b02      	ldr	r3, [pc, #8]	; (8008564 <raise+0xc>)
 800855a:	4601      	mov	r1, r0
 800855c:	6818      	ldr	r0, [r3, #0]
 800855e:	f7ff bfd3 	b.w	8008508 <_raise_r>
 8008562:	bf00      	nop
 8008564:	200001d0 	.word	0x200001d0

08008568 <_kill_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d07      	ldr	r5, [pc, #28]	; (8008588 <_kill_r+0x20>)
 800856c:	2300      	movs	r3, #0
 800856e:	4604      	mov	r4, r0
 8008570:	4608      	mov	r0, r1
 8008572:	4611      	mov	r1, r2
 8008574:	602b      	str	r3, [r5, #0]
 8008576:	f7f9 f82d 	bl	80015d4 <_kill>
 800857a:	1c43      	adds	r3, r0, #1
 800857c:	d102      	bne.n	8008584 <_kill_r+0x1c>
 800857e:	682b      	ldr	r3, [r5, #0]
 8008580:	b103      	cbz	r3, 8008584 <_kill_r+0x1c>
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	bd38      	pop	{r3, r4, r5, pc}
 8008586:	bf00      	nop
 8008588:	20000670 	.word	0x20000670

0800858c <_getpid_r>:
 800858c:	f7f9 b81a 	b.w	80015c4 <_getpid>

08008590 <_init>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr

0800859c <_fini>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	bf00      	nop
 80085a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a2:	bc08      	pop	{r3}
 80085a4:	469e      	mov	lr, r3
 80085a6:	4770      	bx	lr
