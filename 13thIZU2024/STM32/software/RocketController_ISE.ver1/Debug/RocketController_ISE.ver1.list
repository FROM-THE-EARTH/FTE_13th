
RocketController_ISE.ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08009240  08009240  00019240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096d8  080096d8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  080096d8  080096d8  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096d8  080096d8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096d8  080096d8  000196d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096dc  080096dc  000196dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080096e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000390  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000580  20000580  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d9c3  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000214f  00000000  00000000  0002dc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e10  00000000  00000000  0002fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ae7  00000000  00000000  00030b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c183  00000000  00000000  0003166f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010ff3  00000000  00000000  0004d7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a3886  00000000  00000000  0005e7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e94  00000000  00000000  0010206c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00106f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009228 	.word	0x08009228

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009228 	.word	0x08009228

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <bmpRead8>:
// 標準気圧に対する温度の勾配
#define TEMPERATURE_GRADIENT 0.0065
// 標準気圧に対する重力加速度
#define GRAVITY 9.80665

uint8_t bmpRead8(uint8_t a) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	uint8_t r;
	HAL_I2C_Master_Transmit(bmpPort, BMP180_ADDR, &a, 1, HAL_MAX_DELAY);
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <bmpRead8+0x44>)
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	23ee      	movs	r3, #238	; 0xee
 8000c58:	b299      	uxth	r1, r3
 8000c5a:	1dfa      	adds	r2, r7, #7
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	f001 fdf4 	bl	8002850 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(bmpPort, BMP180_ADDR, &r, 1, HAL_MAX_DELAY);
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <bmpRead8+0x44>)
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	23ee      	movs	r3, #238	; 0xee
 8000c6e:	b299      	uxth	r1, r3
 8000c70:	f107 020f 	add.w	r2, r7, #15
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f001 fedc 	bl	8002a38 <HAL_I2C_Master_Receive>
	return r;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000020c 	.word	0x2000020c

08000c90 <bmpRead16>:
uint16_t bmpRead16(uint8_t a) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	uint8_t retbuf[2];
	uint16_t r;
	HAL_I2C_Master_Transmit(bmpPort, BMP180_ADDR, &a, 1, HAL_MAX_DELAY);
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <bmpRead16+0x54>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	23ee      	movs	r3, #238	; 0xee
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	1dfa      	adds	r2, r7, #7
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	f001 fdd0 	bl	8002850 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(bmpPort, BMP180_ADDR, retbuf, 2, HAL_MAX_DELAY);
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <bmpRead16+0x54>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	23ee      	movs	r3, #238	; 0xee
 8000cb6:	b299      	uxth	r1, r3
 8000cb8:	f107 020c 	add.w	r2, r7, #12
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f001 feb8 	bl	8002a38 <HAL_I2C_Master_Receive>
	r = retbuf[1] | (retbuf[0] << 8);
 8000cc8:	7b7b      	ldrb	r3, [r7, #13]
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	7b3b      	ldrb	r3, [r7, #12]
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81fb      	strh	r3, [r7, #14]
	return r;
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000020c 	.word	0x2000020c

08000ce8 <bmpWrite8>:
void bmpWrite8(uint8_t a, uint8_t d) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	71bb      	strb	r3, [r7, #6]
	uint8_t tBuf[2];
	tBuf[0] = a;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	733b      	strb	r3, [r7, #12]
	tBuf[1] = d;
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(bmpPort, BMP180_ADDR, tBuf, 2, HAL_MAX_DELAY);
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <bmpWrite8+0x38>)
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	23ee      	movs	r3, #238	; 0xee
 8000d06:	b299      	uxth	r1, r3
 8000d08:	f107 020c 	add.w	r2, r7, #12
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2302      	movs	r3, #2
 8000d14:	f001 fd9c 	bl	8002850 <HAL_I2C_Master_Transmit>
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000020c 	.word	0x2000020c

08000d24 <bmpBegin>:
uint8_t bmpBegin(uint8_t mode, I2C_HandleTypeDef *i2cdev) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
	bmpPort = i2cdev;
 8000d30:	4a32      	ldr	r2, [pc, #200]	; (8000dfc <bmpBegin+0xd8>)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	6013      	str	r3, [r2, #0]
	if (mode > BMP180_ULTRAHIGHRES)
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d901      	bls.n	8000d40 <bmpBegin+0x1c>
		mode = BMP180_ULTRAHIGHRES;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	71fb      	strb	r3, [r7, #7]
	oversampling = mode;
 8000d40:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <bmpBegin+0xdc>)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	7013      	strb	r3, [r2, #0]
	if (bmpRead8(0xD0) != 0x55)
 8000d46:	20d0      	movs	r0, #208	; 0xd0
 8000d48:	f7ff ff7e 	bl	8000c48 <bmpRead8>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b55      	cmp	r3, #85	; 0x55
 8000d50:	d001      	beq.n	8000d56 <bmpBegin+0x32>
		return 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e04d      	b.n	8000df2 <bmpBegin+0xce>
	/* read calibration data */
	ac1 = bmpRead16(BMP180_CAL_AC1);
 8000d56:	20aa      	movs	r0, #170	; 0xaa
 8000d58:	f7ff ff9a 	bl	8000c90 <bmpRead16>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <bmpBegin+0xe0>)
 8000d62:	801a      	strh	r2, [r3, #0]
	ac2 = bmpRead16(BMP180_CAL_AC2);
 8000d64:	20ac      	movs	r0, #172	; 0xac
 8000d66:	f7ff ff93 	bl	8000c90 <bmpRead16>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <bmpBegin+0xe4>)
 8000d70:	801a      	strh	r2, [r3, #0]
	ac3 = bmpRead16(BMP180_CAL_AC3);
 8000d72:	20ae      	movs	r0, #174	; 0xae
 8000d74:	f7ff ff8c 	bl	8000c90 <bmpRead16>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <bmpBegin+0xe8>)
 8000d7e:	801a      	strh	r2, [r3, #0]
	ac4 = bmpRead16(BMP180_CAL_AC4);
 8000d80:	20b0      	movs	r0, #176	; 0xb0
 8000d82:	f7ff ff85 	bl	8000c90 <bmpRead16>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <bmpBegin+0xec>)
 8000d8c:	801a      	strh	r2, [r3, #0]
	ac5 = bmpRead16(BMP180_CAL_AC5);
 8000d8e:	20b2      	movs	r0, #178	; 0xb2
 8000d90:	f7ff ff7e 	bl	8000c90 <bmpRead16>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <bmpBegin+0xf0>)
 8000d9a:	801a      	strh	r2, [r3, #0]
	ac6 = bmpRead16(BMP180_CAL_AC6);
 8000d9c:	20b4      	movs	r0, #180	; 0xb4
 8000d9e:	f7ff ff77 	bl	8000c90 <bmpRead16>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <bmpBegin+0xf4>)
 8000da8:	801a      	strh	r2, [r3, #0]
	b1 = bmpRead16(BMP180_CAL_B1);
 8000daa:	20b6      	movs	r0, #182	; 0xb6
 8000dac:	f7ff ff70 	bl	8000c90 <bmpRead16>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <bmpBegin+0xf8>)
 8000db6:	801a      	strh	r2, [r3, #0]
	b2 = bmpRead16(BMP180_CAL_B2);
 8000db8:	20b8      	movs	r0, #184	; 0xb8
 8000dba:	f7ff ff69 	bl	8000c90 <bmpRead16>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <bmpBegin+0xfc>)
 8000dc4:	801a      	strh	r2, [r3, #0]
	mb = bmpRead16(BMP180_CAL_MB);
 8000dc6:	20ba      	movs	r0, #186	; 0xba
 8000dc8:	f7ff ff62 	bl	8000c90 <bmpRead16>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <bmpBegin+0x100>)
 8000dd2:	801a      	strh	r2, [r3, #0]
	mc = bmpRead16(BMP180_CAL_MC);
 8000dd4:	20bc      	movs	r0, #188	; 0xbc
 8000dd6:	f7ff ff5b 	bl	8000c90 <bmpRead16>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <bmpBegin+0x104>)
 8000de0:	801a      	strh	r2, [r3, #0]
	md = bmpRead16(BMP180_CAL_MD);
 8000de2:	20be      	movs	r0, #190	; 0xbe
 8000de4:	f7ff ff54 	bl	8000c90 <bmpRead16>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <bmpBegin+0x108>)
 8000dee:	801a      	strh	r2, [r3, #0]
	return 1;
 8000df0:	2301      	movs	r3, #1
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000020c 	.word	0x2000020c
 8000e00:	20000210 	.word	0x20000210
 8000e04:	20000212 	.word	0x20000212
 8000e08:	20000214 	.word	0x20000214
 8000e0c:	20000216 	.word	0x20000216
 8000e10:	20000222 	.word	0x20000222
 8000e14:	20000224 	.word	0x20000224
 8000e18:	20000226 	.word	0x20000226
 8000e1c:	20000218 	.word	0x20000218
 8000e20:	2000021a 	.word	0x2000021a
 8000e24:	2000021c 	.word	0x2000021c
 8000e28:	2000021e 	.word	0x2000021e
 8000e2c:	20000220 	.word	0x20000220

08000e30 <computeB5>:
// Sensor read functions
int32_t computeB5(int32_t UT) {
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	int32_t X1 = (UT - (int32_t) ac6) * ((int32_t) ac5) >> 15;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <computeB5+0x4c>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <computeB5+0x50>)
 8000e44:	8812      	ldrh	r2, [r2, #0]
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	13db      	asrs	r3, r3, #15
 8000e4c:	60fb      	str	r3, [r7, #12]
	int32_t X2 = ((int32_t) mc << 11) / (X1 + (int32_t) md);
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <computeB5+0x54>)
 8000e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e54:	02da      	lsls	r2, r3, #11
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <computeB5+0x58>)
 8000e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	440b      	add	r3, r1
 8000e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e66:	60bb      	str	r3, [r7, #8]
	return X1 + X2;
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	4413      	add	r3, r2
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000226 	.word	0x20000226
 8000e80:	20000224 	.word	0x20000224
 8000e84:	2000021e 	.word	0x2000021e
 8000e88:	20000220 	.word	0x20000220

08000e8c <readBMPRawTemperature>:
uint16_t readBMPRawTemperature(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	bmpWrite8(BMP180_CONTROL, BMP180_READTEMPCMD);
 8000e90:	212e      	movs	r1, #46	; 0x2e
 8000e92:	20f4      	movs	r0, #244	; 0xf4
 8000e94:	f7ff ff28 	bl	8000ce8 <bmpWrite8>
	HAL_Delay(5);
 8000e98:	2005      	movs	r0, #5
 8000e9a:	f001 f99d 	bl	80021d8 <HAL_Delay>
	return bmpRead16(BMP180_TEMPDATA);
 8000e9e:	20f6      	movs	r0, #246	; 0xf6
 8000ea0:	f7ff fef6 	bl	8000c90 <bmpRead16>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <readBMPRawPressure>:
uint32_t readBMPRawPressure(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	uint32_t raw;
	bmpWrite8(BMP180_CONTROL, BMP180_READPRESSURECMD + (oversampling << 6));
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	019b      	lsls	r3, r3, #6
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3334      	adds	r3, #52	; 0x34
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	20f4      	movs	r0, #244	; 0xf4
 8000ec2:	f7ff ff11 	bl	8000ce8 <bmpWrite8>
	if (oversampling == BMP180_ULTRALOWPOWER)
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <readBMPRawPressure+0x2a>
		HAL_Delay(5);
 8000ece:	2005      	movs	r0, #5
 8000ed0:	f001 f982 	bl	80021d8 <HAL_Delay>
 8000ed4:	e012      	b.n	8000efc <readBMPRawPressure+0x50>
	else if (oversampling == BMP180_STANDARD)
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d103      	bne.n	8000ee6 <readBMPRawPressure+0x3a>
		HAL_Delay(8);
 8000ede:	2008      	movs	r0, #8
 8000ee0:	f001 f97a 	bl	80021d8 <HAL_Delay>
 8000ee4:	e00a      	b.n	8000efc <readBMPRawPressure+0x50>
	else if (oversampling == BMP180_HIGHRES)
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d103      	bne.n	8000ef6 <readBMPRawPressure+0x4a>
		HAL_Delay(14);
 8000eee:	200e      	movs	r0, #14
 8000ef0:	f001 f972 	bl	80021d8 <HAL_Delay>
 8000ef4:	e002      	b.n	8000efc <readBMPRawPressure+0x50>
	else
		HAL_Delay(26);
 8000ef6:	201a      	movs	r0, #26
 8000ef8:	f001 f96e 	bl	80021d8 <HAL_Delay>
	raw = bmpRead16(BMP180_PRESSUREDATA);
 8000efc:	20f6      	movs	r0, #246	; 0xf6
 8000efe:	f7ff fec7 	bl	8000c90 <bmpRead16>
 8000f02:	4603      	mov	r3, r0
 8000f04:	607b      	str	r3, [r7, #4]
	raw <<= 8;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	607b      	str	r3, [r7, #4]
	raw |= bmpRead8(BMP180_PRESSUREDATA + 2);
 8000f0c:	20f8      	movs	r0, #248	; 0xf8
 8000f0e:	f7ff fe9b 	bl	8000c48 <bmpRead8>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	607b      	str	r3, [r7, #4]
	raw >>= (8 - oversampling);
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	f1c3 0308 	rsb	r3, r3, #8
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2a:	607b      	str	r3, [r7, #4]
	return raw;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000210 	.word	0x20000210

08000f3c <readBMPTemperature>:
float readBMPTemperature(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
	int32_t UT, B5; // following ds convention
	float temp;
	UT = readBMPRawTemperature();
 8000f42:	f7ff ffa3 	bl	8000e8c <readBMPRawTemperature>
 8000f46:	4603      	mov	r3, r0
 8000f48:	60fb      	str	r3, [r7, #12]
	B5 = computeB5(UT);
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff ff70 	bl	8000e30 <computeB5>
 8000f50:	60b8      	str	r0, [r7, #8]
	temp = (B5 + 8) >> 4;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	3308      	adds	r3, #8
 8000f56:	111b      	asrs	r3, r3, #4
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f60:	edc7 7a01 	vstr	s15, [r7, #4]
	temp /= 10;
 8000f64:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f68:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f70:	edc7 7a01 	vstr	s15, [r7, #4]
	return temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	ee07 3a90 	vmov	s15, r3
}
 8000f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <readBMPPressure>:
int32_t readBMPPressure(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
	int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
	uint32_t B4, B7;
	UT = readBMPRawTemperature();
 8000f8a:	f7ff ff7f 	bl	8000e8c <readBMPRawTemperature>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
	UP = readBMPRawPressure();
 8000f92:	f7ff ff8b 	bl	8000eac <readBMPRawPressure>
 8000f96:	4603      	mov	r3, r0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
	B5 = computeB5(UT);
 8000f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f9c:	f7ff ff48 	bl	8000e30 <computeB5>
 8000fa0:	6238      	str	r0, [r7, #32]
	// do pressure calcs
	B6 = B5 - 4000;
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000fa8:	61fb      	str	r3, [r7, #28]
	X1 = ((int32_t) b2 * ((B6 * B6) >> 12)) >> 11;
 8000faa:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <readBMPPressure+0x13c>)
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fb03 f303 	mul.w	r3, r3, r3
 8000fb8:	131b      	asrs	r3, r3, #12
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	12db      	asrs	r3, r3, #11
 8000fc0:	61bb      	str	r3, [r7, #24]
	X2 = ((int32_t) ac2 * B6) >> 11;
 8000fc2:	4b40      	ldr	r3, [pc, #256]	; (80010c4 <readBMPPressure+0x140>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fb02 f303 	mul.w	r3, r2, r3
 8000fd0:	12db      	asrs	r3, r3, #11
 8000fd2:	617b      	str	r3, [r7, #20]
	X3 = X1 + X2;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	4413      	add	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
	B3 = ((((int32_t) ac1 * 4 + X3) << oversampling) + 2) / 4;
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <readBMPPressure+0x144>)
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	009a      	lsls	r2, r3, #2
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a38      	ldr	r2, [pc, #224]	; (80010cc <readBMPPressure+0x148>)
 8000fea:	7812      	ldrb	r2, [r2, #0]
 8000fec:	4093      	lsls	r3, r2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da00      	bge.n	8000ff6 <readBMPPressure+0x72>
 8000ff4:	3303      	adds	r3, #3
 8000ff6:	109b      	asrs	r3, r3, #2
 8000ff8:	60fb      	str	r3, [r7, #12]
	X1 = ((int32_t) ac3 * B6) >> 13;
 8000ffa:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <readBMPPressure+0x14c>)
 8000ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001000:	461a      	mov	r2, r3
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	135b      	asrs	r3, r3, #13
 800100a:	61bb      	str	r3, [r7, #24]
	X2 = ((int32_t) b1 * ((B6 * B6) >> 12)) >> 16;
 800100c:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <readBMPPressure+0x150>)
 800100e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001012:	461a      	mov	r2, r3
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	fb03 f303 	mul.w	r3, r3, r3
 800101a:	131b      	asrs	r3, r3, #12
 800101c:	fb02 f303 	mul.w	r3, r2, r3
 8001020:	141b      	asrs	r3, r3, #16
 8001022:	617b      	str	r3, [r7, #20]
	X3 = ((X1 + X2) + 2) >> 2;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	4413      	add	r3, r2
 800102a:	3302      	adds	r3, #2
 800102c:	109b      	asrs	r3, r3, #2
 800102e:	613b      	str	r3, [r7, #16]
	B4 = ((uint32_t) ac4 * (uint32_t) (X3 + 32768)) >> 15;
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <readBMPPressure+0x154>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	0bdb      	lsrs	r3, r3, #15
 8001042:	60bb      	str	r3, [r7, #8]
	B7 = ((uint32_t) UP - B3) * (uint32_t) (50000UL >> oversampling);
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4a20      	ldr	r2, [pc, #128]	; (80010cc <readBMPPressure+0x148>)
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	4611      	mov	r1, r2
 8001050:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001054:	40ca      	lsrs	r2, r1
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	607b      	str	r3, [r7, #4]
	if (B7 < 0x80000000) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db06      	blt.n	8001070 <readBMPPressure+0xec>
		p = (B7 * 2) / B4;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	005a      	lsls	r2, r3, #1
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	fbb2 f3f3 	udiv	r3, r2, r3
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800106e:	e005      	b.n	800107c <readBMPPressure+0xf8>
	} else {
		p = (B7 / B4) * 2;
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	X1 = (p >> 8) * (p >> 8);
 800107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107e:	121b      	asrs	r3, r3, #8
 8001080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001082:	1212      	asrs	r2, r2, #8
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	61bb      	str	r3, [r7, #24]
	X1 = (X1 * 3038) >> 16;
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	f640 32de 	movw	r2, #3038	; 0xbde
 8001090:	fb02 f303 	mul.w	r3, r2, r3
 8001094:	141b      	asrs	r3, r3, #16
 8001096:	61bb      	str	r3, [r7, #24]
	X2 = (-7357 * p) >> 16;
 8001098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <readBMPPressure+0x158>)
 800109c:	fb02 f303 	mul.w	r3, r2, r3
 80010a0:	141b      	asrs	r3, r3, #16
 80010a2:	617b      	str	r3, [r7, #20]
	p = p + ((X1 + X2 + (int32_t) 3791) >> 4);
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	4413      	add	r3, r2
 80010aa:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80010ae:	111b      	asrs	r3, r3, #4
 80010b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010b2:	4413      	add	r3, r2
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 80010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3730      	adds	r7, #48	; 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000021a 	.word	0x2000021a
 80010c4:	20000214 	.word	0x20000214
 80010c8:	20000212 	.word	0x20000212
 80010cc:	20000210 	.word	0x20000210
 80010d0:	20000216 	.word	0x20000216
 80010d4:	20000218 	.word	0x20000218
 80010d8:	20000222 	.word	0x20000222
 80010dc:	ffffe343 	.word	0xffffe343

080010e0 <calculateAltitude>:

double calculateAltitude(int32_t pressure, float temp) {
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	ed87 0a00 	vstr	s0, [r7]
    double pressureRatio = SEA_LEVEL_PRESSURE / pressure;
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fa19 	bl	8000524 <__aeabi_i2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	a127      	add	r1, pc, #156	; (adr r1, 8001194 <calculateAltitude+0xb4>)
 80010f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010fc:	f7ff fba6 	bl	800084c <__aeabi_ddiv>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double altitude = (pow(pressureRatio, 1.0 / 5.257) - 1.0) * (temp + 273.15) / 0.0065;
 8001108:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8001178 <calculateAltitude+0x98>
 800110c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001110:	f007 f952 	bl	80083b8 <pow>
 8001114:	ec51 0b10 	vmov	r0, r1, d0
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <calculateAltitude+0xb0>)
 800111e:	f7ff f8b3 	bl	8000288 <__aeabi_dsub>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4614      	mov	r4, r2
 8001128:	461d      	mov	r5, r3
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_f2d>
 8001130:	a313      	add	r3, pc, #76	; (adr r3, 8001180 <calculateAltitude+0xa0>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff f8a9 	bl	800028c <__adddf3>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4620      	mov	r0, r4
 8001140:	4629      	mov	r1, r5
 8001142:	f7ff fa59 	bl	80005f8 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	a30e      	add	r3, pc, #56	; (adr r3, 8001188 <calculateAltitude+0xa8>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fb7a 	bl	800084c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return altitude;
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	ec43 2b17 	vmov	d7, r2, r3
}
 8001168:	eeb0 0a47 	vmov.f32	s0, s14
 800116c:	eef0 0a67 	vmov.f32	s1, s15
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bdb0      	pop	{r4, r5, r7, pc}
 8001176:	bf00      	nop
 8001178:	7dee2d4a 	.word	0x7dee2d4a
 800117c:	3fc85936 	.word	0x3fc85936
 8001180:	66666666 	.word	0x66666666
 8001184:	40711266 	.word	0x40711266
 8001188:	76c8b439 	.word	0x76c8b439
 800118c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001190:	3ff00000 	.word	0x3ff00000
 8001194:	00000000 	.word	0x00000000
 8001198:	40f8bcd0 	.word	0x40f8bcd0

0800119c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80011bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00b      	beq.n	80011dc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011c4:	e000      	b.n	80011c8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f9      	beq.n	80011c6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011d2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f000 ff8b 	bl	800210c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f959 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fa:	f000 fab5 	bl	8001768 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011fe:	f000 f9ad 	bl	800155c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001202:	f000 f9eb 	bl	80015dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001206:	f000 fa61 	bl	80016cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //ServoMotor
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800120a:	2100      	movs	r1, #0
 800120c:	4894      	ldr	r0, [pc, #592]	; (8001460 <main+0x274>)
 800120e:	f003 fc93 	bl	8004b38 <HAL_TIM_PWM_Start>
  //servoTest(80,60,5);

  //bmp180
  int initBMP180 = bmpBegin(1, &hi2c1);
 8001212:	4994      	ldr	r1, [pc, #592]	; (8001464 <main+0x278>)
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fd85 	bl	8000d24 <bmpBegin>
 800121a:	4603      	mov	r3, r0
 800121c:	607b      	str	r3, [r7, #4]

  	if (initBMP180 == 1) {
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d138      	bne.n	8001296 <main+0xaa>
  		printf("successfully initialized BMP180\n");
 8001224:	4890      	ldr	r0, [pc, #576]	; (8001468 <main+0x27c>)
 8001226:	f005 f92b 	bl	8006480 <puts>
  		HAL_Delay(20);
 800122a:	2014      	movs	r0, #20
 800122c:	f000 ffd4 	bl	80021d8 <HAL_Delay>
  		initializeAltitudeArray(getRawAltitude());
 8001230:	f000 fbca 	bl	80019c8 <getRawAltitude>
 8001234:	eeb0 7a40 	vmov.f32	s14, s0
 8001238:	eef0 7a60 	vmov.f32	s15, s1
 800123c:	eeb0 0a47 	vmov.f32	s0, s14
 8001240:	eef0 0a67 	vmov.f32	s1, s15
 8001244:	f000 fba0 	bl	8001988 <initializeAltitudeArray>
  		SEALEVEL_ALTITUDE = getFilteredAltitude(getRawAltitude());
 8001248:	f000 fbbe 	bl	80019c8 <getRawAltitude>
 800124c:	eeb0 7a40 	vmov.f32	s14, s0
 8001250:	eef0 7a60 	vmov.f32	s15, s1
 8001254:	eeb0 0a47 	vmov.f32	s0, s14
 8001258:	eef0 0a67 	vmov.f32	s1, s15
 800125c:	f000 fbe8 	bl	8001a30 <getFilteredAltitude>
 8001260:	eeb0 7a40 	vmov.f32	s14, s0
 8001264:	eef0 7a60 	vmov.f32	s15, s1
 8001268:	4b80      	ldr	r3, [pc, #512]	; (800146c <main+0x280>)
 800126a:	ed83 7b00 	vstr	d7, [r3]
  		initializeAltitudeArray(getRawAltitude() - SEALEVEL_ALTITUDE);
 800126e:	f000 fbab 	bl	80019c8 <getRawAltitude>
 8001272:	ec51 0b10 	vmov	r0, r1, d0
 8001276:	4b7d      	ldr	r3, [pc, #500]	; (800146c <main+0x280>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff f804 	bl	8000288 <__aeabi_dsub>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	ec43 2b17 	vmov	d7, r2, r3
 8001288:	eeb0 0a47 	vmov.f32	s0, s14
 800128c:	eef0 0a67 	vmov.f32	s1, s15
 8001290:	f000 fb7a 	bl	8001988 <initializeAltitudeArray>
 8001294:	e002      	b.n	800129c <main+0xb0>

  	} else {
  		printf("initializing BMP180 failed\n");
 8001296:	4876      	ldr	r0, [pc, #472]	; (8001470 <main+0x284>)
 8001298:	f005 f8f2 	bl	8006480 <puts>
  	}

  //fpState
  fpState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800129c:	2110      	movs	r1, #16
 800129e:	4875      	ldr	r0, [pc, #468]	; (8001474 <main+0x288>)
 80012a0:	f001 fa16 	bl	80026d0 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b73      	ldr	r3, [pc, #460]	; (8001478 <main+0x28c>)
 80012aa:	601a      	str	r2, [r3, #0]
  initializeFpStateArray(fpState);
 80012ac:	4b72      	ldr	r3, [pc, #456]	; (8001478 <main+0x28c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fb4d 	bl	8001950 <initializeFpStateArray>
  servoWrite(closeAngle);
 80012b6:	231e      	movs	r3, #30
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fabb 	bl	8001834 <servoWrite>



	  //update Altitude

	  if (initBMP180) {
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d040      	beq.n	8001346 <main+0x15a>
	  			altitude = getRawAltitude() - SEALEVEL_ALTITUDE;
 80012c4:	f000 fb80 	bl	80019c8 <getRawAltitude>
 80012c8:	ec51 0b10 	vmov	r0, r1, d0
 80012cc:	4b67      	ldr	r3, [pc, #412]	; (800146c <main+0x280>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7fe ffd9 	bl	8000288 <__aeabi_dsub>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4968      	ldr	r1, [pc, #416]	; (800147c <main+0x290>)
 80012dc:	e9c1 2300 	strd	r2, r3, [r1]
	  			filteredAltitude = getFilteredAltitude(altitude);
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <main+0x290>)
 80012e2:	ed93 7b00 	vldr	d7, [r3]
 80012e6:	eeb0 0a47 	vmov.f32	s0, s14
 80012ea:	eef0 0a67 	vmov.f32	s1, s15
 80012ee:	f000 fb9f 	bl	8001a30 <getFilteredAltitude>
 80012f2:	eeb0 7a40 	vmov.f32	s14, s0
 80012f6:	eef0 7a60 	vmov.f32	s15, s1
 80012fa:	4b61      	ldr	r3, [pc, #388]	; (8001480 <main+0x294>)
 80012fc:	ed83 7b00 	vstr	d7, [r3]

	  			if (filteredAltitude > maxAltitude) {
 8001300:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <main+0x294>)
 8001302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001306:	4b5f      	ldr	r3, [pc, #380]	; (8001484 <main+0x298>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff fc04 	bl	8000b18 <__aeabi_dcmpgt>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <main+0x136>
	  				maxAltitude = filteredAltitude;
 8001316:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <main+0x294>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	4959      	ldr	r1, [pc, #356]	; (8001484 <main+0x298>)
 800131e:	e9c1 2300 	strd	r2, r3, [r1]
	  			}

	  			printf("rawAltiude= %f, fileteredAltitude = %f, maxAltitude = %f\n",
 8001322:	4b56      	ldr	r3, [pc, #344]	; (800147c <main+0x290>)
 8001324:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001328:	4b55      	ldr	r3, [pc, #340]	; (8001480 <main+0x294>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	4955      	ldr	r1, [pc, #340]	; (8001484 <main+0x298>)
 8001330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001338:	e9cd 2300 	strd	r2, r3, [sp]
 800133c:	4622      	mov	r2, r4
 800133e:	462b      	mov	r3, r5
 8001340:	4851      	ldr	r0, [pc, #324]	; (8001488 <main+0x29c>)
 8001342:	f005 f837 	bl	80063b4 <iprintf>
	  					altitude, filteredAltitude, maxAltitude);
	  		}


	  //update Flight Pin Value
	  		fpState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001346:	2110      	movs	r1, #16
 8001348:	484a      	ldr	r0, [pc, #296]	; (8001474 <main+0x288>)
 800134a:	f001 f9c1 	bl	80026d0 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <main+0x28c>)
 8001354:	601a      	str	r2, [r3, #0]
	  		printf("mode = %d, FlightPin = %d\n", mode, fpState);
 8001356:	4b4d      	ldr	r3, [pc, #308]	; (800148c <main+0x2a0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a47      	ldr	r2, [pc, #284]	; (8001478 <main+0x28c>)
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	484b      	ldr	r0, [pc, #300]	; (8001490 <main+0x2a4>)
 8001362:	f005 f827 	bl	80063b4 <iprintf>

	  		//update LED state
	  		indicateMode(mode);
 8001366:	4b49      	ldr	r3, [pc, #292]	; (800148c <main+0x2a0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fc98 	bl	8001ca0 <indicateMode>

	  		if (mode != 0) {
 8001370:	4b46      	ldr	r3, [pc, #280]	; (800148c <main+0x2a0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00e      	beq.n	8001396 <main+0x1aa>
	  			if (!isLaunched(fpState)) {
 8001378:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <main+0x28c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fa7f 	bl	8001880 <isLaunched>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d106      	bne.n	8001396 <main+0x1aa>
	  				mode = 0;
 8001388:	4b40      	ldr	r3, [pc, #256]	; (800148c <main+0x2a0>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
	  				servoWrite(closeAngle);
 800138e:	231e      	movs	r3, #30
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fa4f 	bl	8001834 <servoWrite>
	  			}
	  		}

	  		switch (mode) {
 8001396:	4b3d      	ldr	r3, [pc, #244]	; (800148c <main+0x2a0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d04f      	beq.n	800143e <main+0x252>
 800139e:	2b02      	cmp	r3, #2
 80013a0:	dc8d      	bgt.n	80012be <main+0xd2>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <main+0x1c0>
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d01a      	beq.n	80013e0 <main+0x1f4>
 80013aa:	e057      	b.n	800145c <main+0x270>
	  		//mode0: standby, mode1:launched, mode2: paraOpen, mode3: lowPower
	  		case 0:
	  			if (isLaunched(fpState)) {
 80013ac:	4b32      	ldr	r3, [pc, #200]	; (8001478 <main+0x28c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fa65 	bl	8001880 <isLaunched>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d04a      	beq.n	8001452 <main+0x266>
	  				HAL_TIM_Base_Start_IT(&htim3);
 80013bc:	4835      	ldr	r0, [pc, #212]	; (8001494 <main+0x2a8>)
 80013be:	f003 fafd 	bl	80049bc <HAL_TIM_Base_Start_IT>
	  				startTime = HAL_GetTick();
 80013c2:	f000 fefd 	bl	80021c0 <HAL_GetTick>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <main+0x2ac>)
 80013cc:	601a      	str	r2, [r3, #0]
	  				printf("launched\n");
 80013ce:	4833      	ldr	r0, [pc, #204]	; (800149c <main+0x2b0>)
 80013d0:	f005 f856 	bl	8006480 <puts>
	  				mode++;
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <main+0x2a0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a2c      	ldr	r2, [pc, #176]	; (800148c <main+0x2a0>)
 80013dc:	6013      	str	r3, [r2, #0]
	  			}
	  			break;
 80013de:	e038      	b.n	8001452 <main+0x266>
	  		case 1:
	  			timeFromLaunch = HAL_GetTick() - startTime;
 80013e0:	f000 feee 	bl	80021c0 <HAL_GetTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <main+0x2ac>)
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <main+0x2b4>)
 80013f0:	601a      	str	r2, [r3, #0]
	  			printf("timeFromLaunch = %d\n", timeFromLaunch);
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <main+0x2b4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4619      	mov	r1, r3
 80013f8:	482a      	ldr	r0, [pc, #168]	; (80014a4 <main+0x2b8>)
 80013fa:	f004 ffdb 	bl	80063b4 <iprintf>

	  			if (isTopReached(timeFromLaunch, altitude, maxAltitude)) {
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <main+0x2b4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <main+0x290>)
 8001404:	ed92 7b00 	vldr	d7, [r2]
 8001408:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <main+0x298>)
 800140a:	ed92 6b00 	vldr	d6, [r2]
 800140e:	eeb0 1a46 	vmov.f32	s2, s12
 8001412:	eef0 1a66 	vmov.f32	s3, s13
 8001416:	eeb0 0a47 	vmov.f32	s0, s14
 800141a:	eef0 0a67 	vmov.f32	s1, s15
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fa62 	bl	80018e8 <isTopReached>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d015      	beq.n	8001456 <main+0x26a>
	  				servoWrite(openAngle);
 800142a:	2396      	movs	r3, #150	; 0x96
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fa01 	bl	8001834 <servoWrite>
	  				mode++;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <main+0x2a0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <main+0x2a0>)
 800143a:	6013      	str	r3, [r2, #0]
	  			}
	  			break;
 800143c:	e00b      	b.n	8001456 <main+0x26a>
	  		case 2:
	  			if (timeFromLaunch > 100 * 60) {
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <main+0x2b4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f241 7270 	movw	r2, #6000	; 0x1770
 8001446:	4293      	cmp	r3, r2
 8001448:	dd07      	ble.n	800145a <main+0x26e>
	  				//servoWrite(closeAngle);
	  				printf("servoclose\n");
 800144a:	4817      	ldr	r0, [pc, #92]	; (80014a8 <main+0x2bc>)
 800144c:	f005 f818 	bl	8006480 <puts>
	  				//break;
	  			}
	  			break;
 8001450:	e003      	b.n	800145a <main+0x26e>
	  			break;
 8001452:	bf00      	nop
 8001454:	e733      	b.n	80012be <main+0xd2>
	  			break;
 8001456:	bf00      	nop
 8001458:	e731      	b.n	80012be <main+0xd2>
	  			break;
 800145a:	bf00      	nop
	  if (initBMP180) {
 800145c:	e72f      	b.n	80012be <main+0xd2>
 800145e:	bf00      	nop
 8001460:	20000394 	.word	0x20000394
 8001464:	20000340 	.word	0x20000340
 8001468:	08009240 	.word	0x08009240
 800146c:	20000288 	.word	0x20000288
 8001470:	08009260 	.word	0x08009260
 8001474:	48000400 	.word	0x48000400
 8001478:	2000027c 	.word	0x2000027c
 800147c:	20000290 	.word	0x20000290
 8001480:	20000298 	.word	0x20000298
 8001484:	20000000 	.word	0x20000000
 8001488:	0800927c 	.word	0x0800927c
 800148c:	20000228 	.word	0x20000228
 8001490:	080092b8 	.word	0x080092b8
 8001494:	200003e0 	.word	0x200003e0
 8001498:	20000280 	.word	0x20000280
 800149c:	080092d4 	.word	0x080092d4
 80014a0:	20000284 	.word	0x20000284
 80014a4:	080092e0 	.word	0x080092e0
 80014a8:	080092f8 	.word	0x080092f8

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b096      	sub	sp, #88	; 0x58
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b6:	2228      	movs	r2, #40	; 0x28
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f004 ffe8 	bl	8006490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014e0:	2302      	movs	r3, #2
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e4:	2301      	movs	r3, #1
 80014e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e8:	2310      	movs	r3, #16
 80014ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ec:	2302      	movs	r3, #2
 80014ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014f0:	2300      	movs	r3, #0
 80014f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL11;
 80014f4:	f44f 1310 	mov.w	r3, #2359296	; 0x240000
 80014f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 feba 	bl	8003278 <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800150a:	f000 fbfd 	bl	8001d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2302      	movs	r3, #2
 8001514:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	2101      	movs	r1, #1
 800152a:	4618      	mov	r0, r3
 800152c:	f002 fee2 	bl	80042f4 <HAL_RCC_ClockConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001536:	f000 fbe7 	bl	8001d08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800153a:	2320      	movs	r3, #32
 800153c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4618      	mov	r0, r3
 8001546:	f003 f8bb 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001550:	f000 fbda 	bl	8001d08 <Error_Handler>
  }
}
 8001554:	bf00      	nop
 8001556:	3758      	adds	r7, #88	; 0x58
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_I2C1_Init+0x74>)
 8001562:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <MX_I2C1_Init+0x78>)
 8001564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_I2C1_Init+0x74>)
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <MX_I2C1_Init+0x7c>)
 800156a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_I2C1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_I2C1_Init+0x74>)
 8001574:	2201      	movs	r2, #1
 8001576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_I2C1_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_I2C1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_I2C1_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_I2C1_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_I2C1_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001596:	480e      	ldr	r0, [pc, #56]	; (80015d0 <MX_I2C1_Init+0x74>)
 8001598:	f001 f8ca 	bl	8002730 <HAL_I2C_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015a2:	f000 fbb1 	bl	8001d08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a6:	2100      	movs	r1, #0
 80015a8:	4809      	ldr	r0, [pc, #36]	; (80015d0 <MX_I2C1_Init+0x74>)
 80015aa:	f001 fdcd 	bl	8003148 <HAL_I2CEx_ConfigAnalogFilter>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015b4:	f000 fba8 	bl	8001d08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015b8:	2100      	movs	r1, #0
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_I2C1_Init+0x74>)
 80015bc:	f001 fe0f 	bl	80031de <HAL_I2CEx_ConfigDigitalFilter>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015c6:	f000 fb9f 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000340 	.word	0x20000340
 80015d4:	40005400 	.word	0x40005400
 80015d8:	2000090e 	.word	0x2000090e

080015dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	; 0x38
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <MX_TIM2_Init+0xec>)
 8001610:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001614:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <MX_TIM2_Init+0xec>)
 8001618:	f44f 7252 	mov.w	r2, #840	; 0x348
 800161c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <MX_TIM2_Init+0xec>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1048;
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_TIM2_Init+0xec>)
 8001626:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800162a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <MX_TIM2_Init+0xec>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <MX_TIM2_Init+0xec>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001638:	4823      	ldr	r0, [pc, #140]	; (80016c8 <MX_TIM2_Init+0xec>)
 800163a:	f003 f967 	bl	800490c <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001644:	f000 fb60 	bl	8001d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800164e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001652:	4619      	mov	r1, r3
 8001654:	481c      	ldr	r0, [pc, #112]	; (80016c8 <MX_TIM2_Init+0xec>)
 8001656:	f003 fc6f 	bl	8004f38 <HAL_TIM_ConfigClockSource>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001660:	f000 fb52 	bl	8001d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001664:	4818      	ldr	r0, [pc, #96]	; (80016c8 <MX_TIM2_Init+0xec>)
 8001666:	f003 fa05 	bl	8004a74 <HAL_TIM_PWM_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001670:	f000 fb4a 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4811      	ldr	r0, [pc, #68]	; (80016c8 <MX_TIM2_Init+0xec>)
 8001684:	f004 f900 	bl	8005888 <HAL_TIMEx_MasterConfigSynchronization>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800168e:	f000 fb3b 	bl	8001d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001692:	2360      	movs	r3, #96	; 0x60
 8001694:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a2:	463b      	mov	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	4807      	ldr	r0, [pc, #28]	; (80016c8 <MX_TIM2_Init+0xec>)
 80016aa:	f003 fb31 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80016b4:	f000 fb28 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016b8:	4803      	ldr	r0, [pc, #12]	; (80016c8 <MX_TIM2_Init+0xec>)
 80016ba:	f000 fbe3 	bl	8001e84 <HAL_TIM_MspPostInit>

}
 80016be:	bf00      	nop
 80016c0:	3738      	adds	r7, #56	; 0x38
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000394 	.word	0x20000394

080016cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_TIM3_Init+0x94>)
 80016ec:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <MX_TIM3_Init+0x98>)
 80016ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_TIM3_Init+0x94>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <MX_TIM3_Init+0x94>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_TIM3_Init+0x94>)
 80016fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001702:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_TIM3_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_TIM3_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001710:	4813      	ldr	r0, [pc, #76]	; (8001760 <MX_TIM3_Init+0x94>)
 8001712:	f003 f8fb 	bl	800490c <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800171c:	f000 faf4 	bl	8001d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	4619      	mov	r1, r3
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <MX_TIM3_Init+0x94>)
 800172e:	f003 fc03 	bl	8004f38 <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001738:	f000 fae6 	bl	8001d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_TIM3_Init+0x94>)
 800174a:	f004 f89d 	bl	8005888 <HAL_TIMEx_MasterConfigSynchronization>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001754:	f000 fad8 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200003e0 	.word	0x200003e0
 8001764:	40000400 	.word	0x40000400

08001768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <MX_GPIO_Init+0x8c>)
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <MX_GPIO_Init+0x8c>)
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	6153      	str	r3, [r2, #20]
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_GPIO_Init+0x8c>)
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_GPIO_Init+0x8c>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <MX_GPIO_Init+0x8c>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6153      	str	r3, [r2, #20]
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_GPIO_Init+0x8c>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2103      	movs	r1, #3
 80017b2:	4811      	ldr	r0, [pc, #68]	; (80017f8 <MX_GPIO_Init+0x90>)
 80017b4:	f000 ffa4 	bl	8002700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017b8:	2303      	movs	r3, #3
 80017ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	4619      	mov	r1, r3
 80017ce:	480a      	ldr	r0, [pc, #40]	; (80017f8 <MX_GPIO_Init+0x90>)
 80017d0:	f000 fe0c 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017d4:	2310      	movs	r3, #16
 80017d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MX_GPIO_Init+0x90>)
 80017e8:	f000 fe00 	bl	80023ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000
 80017f8:	48000400 	.word	0x48000400

080017fc <_write>:

/* USER CODE BEGIN 4 */

//printf
int _write(int file, char *ptr, int len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e009      	b.n	8001822 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	60ba      	str	r2, [r7, #8]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fcc0 	bl	800119c <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	dbf1      	blt.n	800180e <_write+0x12>
  }
  return len;
 800182a:	687b      	ldr	r3, [r7, #4]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <servoWrite>:

//servo
void servoWrite(int angle) {
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	// Calculate pulse value based on the angle
	int pulseValue = 25 + angle * (120 - 25) / 180;
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	015b      	lsls	r3, r3, #5
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <servoWrite+0x44>)
 800184a:	fb82 1203 	smull	r1, r2, r2, r3
 800184e:	441a      	add	r2, r3
 8001850:	11d2      	asrs	r2, r2, #7
 8001852:	17db      	asrs	r3, r3, #31
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	3319      	adds	r3, #25
 8001858:	60fb      	str	r3, [r7, #12]

	// Ensure pulseValue is within valid range
	if (pulseValue > 120) {
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b78      	cmp	r3, #120	; 0x78
 800185e:	dd01      	ble.n	8001864 <servoWrite+0x30>
		pulseValue = 120;
 8001860:	2378      	movs	r3, #120	; 0x78
 8001862:	60fb      	str	r3, [r7, #12]
	}

	// Set the pulse width using TIM2 and specified channel
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulseValue);
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <servoWrite+0x48>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	b60b60b7 	.word	0xb60b60b7
 800187c:	20000394 	.word	0x20000394

08001880 <isLaunched>:
}

//FpState


int isLaunched(int FlighPinState) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

	fpStateArray[0] = FlighPinState;
 8001888:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <isLaunched+0x60>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]

	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 800188e:	2313      	movs	r3, #19
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e00b      	b.n	80018ac <isLaunched+0x2c>
		fpStateArray[i] = fpStateArray[i - 1];
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3b01      	subs	r3, #1
 8001898:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <isLaunched+0x60>)
 800189a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800189e:	4910      	ldr	r1, [pc, #64]	; (80018e0 <isLaunched+0x60>)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	dcf0      	bgt.n	8001894 <isLaunched+0x14>
	}

	if (calcMedian(fpStateArray, SAMPLENUM, 0) == 1) { //launched
 80018b2:	2200      	movs	r2, #0
 80018b4:	2114      	movs	r1, #20
 80018b6:	480a      	ldr	r0, [pc, #40]	; (80018e0 <isLaunched+0x60>)
 80018b8:	f000 f8ee 	bl	8001a98 <calcMedian>
 80018bc:	ec51 0b10 	vmov	r0, r1, d0
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <isLaunched+0x64>)
 80018c6:	f7ff f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <isLaunched+0x54>
		return 1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <isLaunched+0x56>
	} else {
		return 0;
 80018d4:	2300      	movs	r3, #0
	}

}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000022c 	.word	0x2000022c
 80018e4:	3ff00000 	.word	0x3ff00000

080018e8 <isTopReached>:

int isTopReached(int time, double currentHeight, double maxHeight) {
 80018e8:	b5b0      	push	{r4, r5, r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6178      	str	r0, [r7, #20]
 80018f0:	ed87 0b02 	vstr	d0, [r7, #8]
 80018f4:	ed87 1b00 	vstr	d1, [r7]
	if (time > topReachTime) {
 80018f8:	f247 5230 	movw	r2, #30000	; 0x7530
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	4293      	cmp	r3, r2
 8001900:	dd01      	ble.n	8001906 <isTopReached+0x1e>
		return 1;
 8001902:	2301      	movs	r3, #1
 8001904:	e01e      	b.n	8001944 <isTopReached+0x5c>
	}else if (maxHeight - currentHeight > refHeightDelta&& time > engineBurnTime) {
 8001906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800190a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800190e:	f7fe fcbb 	bl	8000288 <__aeabi_dsub>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4614      	mov	r4, r2
 8001918:	461d      	mov	r5, r3
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <isTopReached+0x64>)
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe13 	bl	8000548 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7ff f8f5 	bl	8000b18 <__aeabi_dcmpgt>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <isTopReached+0x5a>
 8001934:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	4293      	cmp	r3, r2
 800193c:	dd01      	ble.n	8001942 <isTopReached+0x5a>
		return 1;
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <isTopReached+0x5c>
	} else {
		return 0;
 8001942:	2300      	movs	r3, #0
	}
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	40400000 	.word	0x40400000

08001950 <initializeFpStateArray>:

void initializeFpStateArray(int FlightPinState) {
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e007      	b.n	800196e <initializeFpStateArray+0x1e>
		fpStateArray[i] = FlightPinState;
 800195e:	4909      	ldr	r1, [pc, #36]	; (8001984 <initializeFpStateArray+0x34>)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b13      	cmp	r3, #19
 8001972:	ddf4      	ble.n	800195e <initializeFpStateArray+0xe>
	}
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	2000022c 	.word	0x2000022c

08001988 <initializeAltitudeArray>:

//Altitude

void initializeAltitudeArray(double _altitude) {
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	ed87 0b00 	vstr	d0, [r7]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e00a      	b.n	80019ae <initializeAltitudeArray+0x26>
		altitudeArray[i] = _altitude;
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <initializeAltitudeArray+0x3c>)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	18d1      	adds	r1, r2, r3
 80019a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019a4:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < SAMPLENUM; i++) {
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b13      	cmp	r3, #19
 80019b2:	ddf1      	ble.n	8001998 <initializeAltitudeArray+0x10>
	}
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200002a0 	.word	0x200002a0

080019c8 <getRawAltitude>:

double getRawAltitude() {
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
	double pressure = readBMPPressure();
 80019ce:	f7ff fad9 	bl	8000f84 <readBMPPressure>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fda5 	bl	8000524 <__aeabi_i2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double temperature = readBMPTemperature();
 80019e2:	f7ff faab 	bl	8000f3c <readBMPTemperature>
 80019e6:	ee10 3a10 	vmov	r3, s0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdac 	bl	8000548 <__aeabi_f2d>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double _altitude = calculateAltitude(pressure, temperature);
 80019f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019fc:	f7ff f8ac 	bl	8000b58 <__aeabi_d2iz>
 8001a00:	4604      	mov	r4, r0
 8001a02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a06:	f7ff f8cf 	bl	8000ba8 <__aeabi_d2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	ee00 3a10 	vmov	s0, r3
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7ff fb65 	bl	80010e0 <calculateAltitude>
 8001a16:	ed87 0b00 	vstr	d0, [r7]

	return _altitude;
 8001a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a1e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a22:	eeb0 0a47 	vmov.f32	s0, s14
 8001a26:	eef0 0a67 	vmov.f32	s1, s15
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}

08001a30 <getFilteredAltitude>:

double getFilteredAltitude(double rawAltitude) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	ed87 0b00 	vstr	d0, [r7]
	altitudeArray[0] = rawAltitude;
 8001a3a:	4916      	ldr	r1, [pc, #88]	; (8001a94 <getFilteredAltitude+0x64>)
 8001a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a40:	e9c1 2300 	strd	r2, r3, [r1]

	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 8001a44:	2313      	movs	r3, #19
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e00f      	b.n	8001a6a <getFilteredAltitude+0x3a>
		altitudeArray[i] = altitudeArray[i - 1];
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <getFilteredAltitude+0x64>)
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	480e      	ldr	r0, [pc, #56]	; (8001a94 <getFilteredAltitude+0x64>)
 8001a5a:	6979      	ldr	r1, [r7, #20]
 8001a5c:	00c9      	lsls	r1, r1, #3
 8001a5e:	4401      	add	r1, r0
 8001a60:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dcec      	bgt.n	8001a4a <getFilteredAltitude+0x1a>
	}

	double filteredAltitude = calcMedian(altitudeArray, SAMPLENUM, 1);
 8001a70:	2201      	movs	r2, #1
 8001a72:	2114      	movs	r1, #20
 8001a74:	4807      	ldr	r0, [pc, #28]	; (8001a94 <getFilteredAltitude+0x64>)
 8001a76:	f000 f80f 	bl	8001a98 <calcMedian>
 8001a7a:	ed87 0b02 	vstr	d0, [r7, #8]

	return filteredAltitude;
 8001a7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a82:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a86:	eeb0 0a47 	vmov.f32	s0, s14
 8001a8a:	eef0 0a67 	vmov.f32	s1, s15
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200002a0 	.word	0x200002a0

08001a98 <calcMedian>:

//Median
double calcMedian(void *array, int n, int type) {
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b08d      	sub	sp, #52	; 0x34
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
	if (type == 0) { // If data type is int
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d16b      	bne.n	8001b82 <calcMedian+0xea>
		int *intArray = (int*) array;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	617b      	str	r3, [r7, #20]

		for (int i = 0; i < n; i++) {
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab2:	e02f      	b.n	8001b14 <calcMedian+0x7c>
			for (int j = i + 1; j < n; j++) {
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aba:	e024      	b.n	8001b06 <calcMedian+0x6e>
				if (intArray[i] > intArray[j]) {
 8001abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	6979      	ldr	r1, [r7, #20]
 8001acc:	440b      	add	r3, r1
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dd15      	ble.n	8001b00 <calcMedian+0x68>
					int changer = intArray[j];
 8001ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	4413      	add	r3, r2
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
					intArray[j] = intArray[i];
 8001ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	441a      	add	r2, r3
 8001ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	6979      	ldr	r1, [r7, #20]
 8001aee:	440b      	add	r3, r1
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	601a      	str	r2, [r3, #0]
					intArray[i] = changer;
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4413      	add	r3, r2
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	601a      	str	r2, [r3, #0]
			for (int j = i + 1; j < n; j++) {
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	3301      	adds	r3, #1
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	dbd6      	blt.n	8001abc <calcMedian+0x24>
		for (int i = 0; i < n; i++) {
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	3301      	adds	r3, #1
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbcb      	blt.n	8001ab4 <calcMedian+0x1c>
				}
			}
		}

		if (n % 2 == 0) {
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d11f      	bne.n	8001b66 <calcMedian+0xce>
			return (double) (intArray[n / 2] + intArray[n / 2 - 1]) / 2;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	0fda      	lsrs	r2, r3, #31
 8001b2a:	4413      	add	r3, r2
 8001b2c:	105b      	asrs	r3, r3, #1
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4413      	add	r3, r2
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	0fd9      	lsrs	r1, r3, #31
 8001b3a:	440b      	add	r3, r1
 8001b3c:	105b      	asrs	r3, r3, #1
 8001b3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b42:	3b01      	subs	r3, #1
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	6979      	ldr	r1, [r7, #20]
 8001b48:	440b      	add	r3, r1
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fce8 	bl	8000524 <__aeabi_i2d>
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b5c:	f7fe fe76 	bl	800084c <__aeabi_ddiv>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	e092      	b.n	8001c8c <calcMedian+0x1f4>
		} else {
			return (double) intArray[n / 2];
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	0fda      	lsrs	r2, r3, #31
 8001b6a:	4413      	add	r3, r2
 8001b6c:	105b      	asrs	r3, r3, #1
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4413      	add	r3, r2
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fcd4 	bl	8000524 <__aeabi_i2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e084      	b.n	8001c8c <calcMedian+0x1f4>
		}
	} else if (type == 1) { // If data type is float
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d17d      	bne.n	8001c84 <calcMedian+0x1ec>
		double *doubleArray = (double*) array;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	61fb      	str	r3, [r7, #28]

		for (int i = 0; i < n; i++) {
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b90:	e041      	b.n	8001c16 <calcMedian+0x17e>
			for (int j = i + 1; j < n; j++) {
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	3301      	adds	r3, #1
 8001b96:	623b      	str	r3, [r7, #32]
 8001b98:	e036      	b.n	8001c08 <calcMedian+0x170>
				if (doubleArray[i] > doubleArray[j]) {
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	4413      	add	r3, r2
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	f7fe ffb1 	bl	8000b18 <__aeabi_dcmpgt>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d022      	beq.n	8001c02 <calcMedian+0x16a>
					float changer = doubleArray[j];
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	69fa      	ldr	r2, [r7, #28]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7fe ffec 	bl	8000ba8 <__aeabi_d2f>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	61bb      	str	r3, [r7, #24]
					doubleArray[j] = doubleArray[i];
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	4413      	add	r3, r2
 8001bdc:	6a3a      	ldr	r2, [r7, #32]
 8001bde:	00d2      	lsls	r2, r2, #3
 8001be0:	69f9      	ldr	r1, [r7, #28]
 8001be2:	4411      	add	r1, r2
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	e9c1 2300 	strd	r2, r3, [r1]
					doubleArray[i] = changer;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	18d4      	adds	r4, r2, r3
 8001bf4:	69b8      	ldr	r0, [r7, #24]
 8001bf6:	f7fe fca7 	bl	8000548 <__aeabi_f2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	e9c4 2300 	strd	r2, r3, [r4]
			for (int j = i + 1; j < n; j++) {
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	3301      	adds	r3, #1
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	6a3a      	ldr	r2, [r7, #32]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbc4      	blt.n	8001b9a <calcMedian+0x102>
		for (int i = 0; i < n; i++) {
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	3301      	adds	r3, #1
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
 8001c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbb9      	blt.n	8001b92 <calcMedian+0xfa>
				}
			}
		}

		if (n % 2 == 0) {
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d123      	bne.n	8001c70 <calcMedian+0x1d8>
			return (doubleArray[n / 2] + doubleArray[n / 2 - 1]) / 2;
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	0fda      	lsrs	r2, r3, #31
 8001c2c:	4413      	add	r3, r2
 8001c2e:	105b      	asrs	r3, r3, #1
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	4413      	add	r3, r2
 8001c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0fda      	lsrs	r2, r3, #31
 8001c3e:	4413      	add	r3, r2
 8001c40:	105b      	asrs	r3, r3, #1
 8001c42:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001c46:	3b01      	subs	r3, #1
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fb1b 	bl	800028c <__adddf3>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c66:	f7fe fdf1 	bl	800084c <__aeabi_ddiv>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	e00d      	b.n	8001c8c <calcMedian+0x1f4>
		} else {
			return doubleArray[n / 2];
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	0fda      	lsrs	r2, r3, #31
 8001c74:	4413      	add	r3, r2
 8001c76:	105b      	asrs	r3, r3, #1
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	e003      	b.n	8001c8c <calcMedian+0x1f4>
		}
	} else {
		// Error or unknown data type
		return 0.0;
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
	}
}
 8001c8c:	ec43 2b17 	vmov	d7, r2, r3
 8001c90:	eeb0 0a47 	vmov.f32	s0, s14
 8001c94:	eef0 0a67 	vmov.f32	s1, s15
 8001c98:	3734      	adds	r7, #52	; 0x34
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}
	...

08001ca0 <indicateMode>:


//ModeLed
void indicateMode(int _mode) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	if (_mode == 0) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10a      	bne.n	8001cc4 <indicateMode+0x24>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4814      	ldr	r0, [pc, #80]	; (8001d04 <indicateMode+0x64>)
 8001cb4:	f000 fd24 	bl	8002700 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2102      	movs	r1, #2
 8001cbc:	4811      	ldr	r0, [pc, #68]	; (8001d04 <indicateMode+0x64>)
 8001cbe:	f000 fd1f 	bl	8002700 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	} else if (_mode == 2) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	}
}
 8001cc2:	e01a      	b.n	8001cfa <indicateMode+0x5a>
	} else if (_mode == 1) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d10a      	bne.n	8001ce0 <indicateMode+0x40>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2101      	movs	r1, #1
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <indicateMode+0x64>)
 8001cd0:	f000 fd16 	bl	8002700 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2102      	movs	r1, #2
 8001cd8:	480a      	ldr	r0, [pc, #40]	; (8001d04 <indicateMode+0x64>)
 8001cda:	f000 fd11 	bl	8002700 <HAL_GPIO_WritePin>
}
 8001cde:	e00c      	b.n	8001cfa <indicateMode+0x5a>
	} else if (_mode == 2) {
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d109      	bne.n	8001cfa <indicateMode+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4806      	ldr	r0, [pc, #24]	; (8001d04 <indicateMode+0x64>)
 8001cec:	f000 fd08 	bl	8002700 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	4803      	ldr	r0, [pc, #12]	; (8001d04 <indicateMode+0x64>)
 8001cf6:	f000 fd03 	bl	8002700 <HAL_GPIO_WritePin>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	48000400 	.word	0x48000400

08001d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0c:	b672      	cpsid	i
}
 8001d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <Error_Handler+0x8>
	...

08001d14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_MspInit+0x44>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <HAL_MspInit+0x44>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6193      	str	r3, [r2, #24]
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_MspInit+0x44>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_MspInit+0x44>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_MspInit+0x44>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	61d3      	str	r3, [r2, #28]
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_MspInit+0x44>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40021000 	.word	0x40021000

08001d5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <HAL_I2C_MspInit+0xb8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d145      	bne.n	8001e0a <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_I2C_MspInit+0xbc>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4a25      	ldr	r2, [pc, #148]	; (8001e18 <HAL_I2C_MspInit+0xbc>)
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	6153      	str	r3, [r2, #20]
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <HAL_I2C_MspInit+0xbc>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <HAL_I2C_MspInit+0xbc>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <HAL_I2C_MspInit+0xbc>)
 8001d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da0:	6153      	str	r3, [r2, #20]
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <HAL_I2C_MspInit+0xbc>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db4:	2312      	movs	r3, #18
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dce:	f000 fb0d 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd6:	2312      	movs	r3, #18
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001de2:	2304      	movs	r3, #4
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	480b      	ldr	r0, [pc, #44]	; (8001e1c <HAL_I2C_MspInit+0xc0>)
 8001dee:	f000 fafd 	bl	80023ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_I2C_MspInit+0xbc>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <HAL_I2C_MspInit+0xbc>)
 8001df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dfc:	61d3      	str	r3, [r2, #28]
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_I2C_MspInit+0xbc>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	; 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40005400 	.word	0x40005400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	48000400 	.word	0x48000400

08001e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d10c      	bne.n	8001e4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_TIM_Base_MspInit+0x5c>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_TIM_Base_MspInit+0x5c>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	61d3      	str	r3, [r2, #28]
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_TIM_Base_MspInit+0x5c>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e4a:	e010      	b.n	8001e6e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_TIM_Base_MspInit+0x60>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10b      	bne.n	8001e6e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_TIM_Base_MspInit+0x5c>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_TIM_Base_MspInit+0x5c>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_TIM_Base_MspInit+0x5c>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40000400 	.word	0x40000400

08001e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea4:	d11c      	bne.n	8001ee0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_TIM_MspPostInit+0x64>)
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_TIM_MspPostInit+0x64>)
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	6153      	str	r3, [r2, #20]
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_TIM_MspPostInit+0x64>)
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001edc:	f000 fa86 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 f92e 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return 1;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_kill>:

int _kill(int pid, int sig)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f5a:	f004 faa5 	bl	80064a8 <__errno>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2216      	movs	r2, #22
 8001f62:	601a      	str	r2, [r3, #0]
  return -1;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_exit>:

void _exit (int status)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ffe7 	bl	8001f50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f82:	e7fe      	b.n	8001f82 <_exit+0x12>

08001f84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e00a      	b.n	8001fac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f96:	f3af 8000 	nop.w
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	60ba      	str	r2, [r7, #8]
 8001fa2:	b2ca      	uxtb	r2, r1
 8001fa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dbf0      	blt.n	8001f96 <_read+0x12>
  }

  return len;
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_isatty>:

int _isatty(int file)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002030:	4a14      	ldr	r2, [pc, #80]	; (8002084 <_sbrk+0x5c>)
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <_sbrk+0x60>)
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <_sbrk+0x64>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <_sbrk+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d207      	bcs.n	8002068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002058:	f004 fa26 	bl	80064a8 <__errno>
 800205c:	4603      	mov	r3, r0
 800205e:	220c      	movs	r2, #12
 8002060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002066:	e009      	b.n	800207c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <_sbrk+0x64>)
 8002078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20003000 	.word	0x20003000
 8002088:	00000400 	.word	0x00000400
 800208c:	2000042c 	.word	0x2000042c
 8002090:	20000580 	.word	0x20000580

08002094 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <SystemInit+0x20>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <SystemInit+0x20>)
 80020a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020bc:	f7ff ffea 	bl	8002094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c0:	480c      	ldr	r0, [pc, #48]	; (80020f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80020c2:	490d      	ldr	r1, [pc, #52]	; (80020f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c4:	4a0d      	ldr	r2, [pc, #52]	; (80020fc <LoopForever+0xe>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020d8:	4c0a      	ldr	r4, [pc, #40]	; (8002104 <LoopForever+0x16>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020e6:	f004 f9e5 	bl	80064b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ea:	f7ff f87f 	bl	80011ec <main>

080020ee <LoopForever>:

LoopForever:
    b LoopForever
 80020ee:	e7fe      	b.n	80020ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020f0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80020fc:	080096e0 	.word	0x080096e0
  ldr r2, =_sbss
 8002100:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002104:	20000580 	.word	0x20000580

08002108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002108:	e7fe      	b.n	8002108 <ADC1_2_IRQHandler>
	...

0800210c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_Init+0x28>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_Init+0x28>)
 8002116:	f043 0310 	orr.w	r3, r3, #16
 800211a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211c:	2003      	movs	r0, #3
 800211e:	f000 f931 	bl	8002384 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002122:	200f      	movs	r0, #15
 8002124:	f000 f808 	bl	8002138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002128:	f7ff fdf4 	bl	8001d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40022000 	.word	0x40022000

08002138 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_InitTick+0x54>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_InitTick+0x58>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f93b 	bl	80023d2 <HAL_SYSTICK_Config>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e00e      	b.n	8002184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0f      	cmp	r3, #15
 800216a:	d80a      	bhi.n	8002182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002174:	f000 f911 	bl	800239a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4a06      	ldr	r2, [pc, #24]	; (8002194 <HAL_InitTick+0x5c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000008 	.word	0x20000008
 8002190:	20000010 	.word	0x20000010
 8002194:	2000000c 	.word	0x2000000c

08002198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_IncTick+0x20>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_IncTick+0x24>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_IncTick+0x24>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000010 	.word	0x20000010
 80021bc:	20000430 	.word	0x20000430

080021c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_GetTick+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000430 	.word	0x20000430

080021d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e0:	f7ff ffee 	bl	80021c0 <HAL_GetTick>
 80021e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f0:	d005      	beq.n	80021fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_Delay+0x44>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021fe:	bf00      	nop
 8002200:	f7ff ffde 	bl	80021c0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	429a      	cmp	r2, r3
 800220e:	d8f7      	bhi.n	8002200 <HAL_Delay+0x28>
  {
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000010 	.word	0x20000010

08002220 <__NVIC_SetPriorityGrouping>:
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	; (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_GetPriorityGrouping>:
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_SetPriority>:
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	; (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <NVIC_EncodePriority>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f1c3 0307 	rsb	r3, r3, #7
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf28      	it	cs
 80022f6:	2304      	movcs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d902      	bls.n	8002308 <NVIC_EncodePriority+0x30>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b03      	subs	r3, #3
 8002306:	e000      	b.n	800230a <NVIC_EncodePriority+0x32>
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43d9      	mvns	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	4313      	orrs	r3, r2
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <SysTick_Config>:
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002350:	d301      	bcc.n	8002356 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002352:	2301      	movs	r3, #1
 8002354:	e00f      	b.n	8002376 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <SysTick_Config+0x40>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235e:	210f      	movs	r1, #15
 8002360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002364:	f7ff ff8e 	bl	8002284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <SysTick_Config+0x40>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <SysTick_Config+0x40>)
 8002370:	2207      	movs	r2, #7
 8002372:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	e000e010 	.word	0xe000e010

08002384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff47 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ac:	f7ff ff5c 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f7ff ff8e 	bl	80022d8 <NVIC_EncodePriority>
 80023bc:	4602      	mov	r2, r0
 80023be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff5d 	bl	8002284 <__NVIC_SetPriority>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffb0 	bl	8002340 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fa:	e14e      	b.n	800269a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8140 	beq.w	8002694 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d005      	beq.n	800242c <HAL_GPIO_Init+0x40>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d130      	bne.n	800248e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002462:	2201      	movs	r2, #1
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 0201 	and.w	r2, r3, #1
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b03      	cmp	r3, #3
 8002498:	d017      	beq.n	80024ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d123      	bne.n	800251e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	08da      	lsrs	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3208      	adds	r2, #8
 80024de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	6939      	ldr	r1, [r7, #16]
 800251a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0203 	and.w	r2, r3, #3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 809a 	beq.w	8002694 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002560:	4b55      	ldr	r3, [pc, #340]	; (80026b8 <HAL_GPIO_Init+0x2cc>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <HAL_GPIO_Init+0x2cc>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6193      	str	r3, [r2, #24]
 800256c:	4b52      	ldr	r3, [pc, #328]	; (80026b8 <HAL_GPIO_Init+0x2cc>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002578:	4a50      	ldr	r2, [pc, #320]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025a2:	d013      	beq.n	80025cc <HAL_GPIO_Init+0x1e0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a46      	ldr	r2, [pc, #280]	; (80026c0 <HAL_GPIO_Init+0x2d4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00d      	beq.n	80025c8 <HAL_GPIO_Init+0x1dc>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a45      	ldr	r2, [pc, #276]	; (80026c4 <HAL_GPIO_Init+0x2d8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d007      	beq.n	80025c4 <HAL_GPIO_Init+0x1d8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a44      	ldr	r2, [pc, #272]	; (80026c8 <HAL_GPIO_Init+0x2dc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <HAL_GPIO_Init+0x1d4>
 80025bc:	2303      	movs	r3, #3
 80025be:	e006      	b.n	80025ce <HAL_GPIO_Init+0x1e2>
 80025c0:	2305      	movs	r3, #5
 80025c2:	e004      	b.n	80025ce <HAL_GPIO_Init+0x1e2>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e002      	b.n	80025ce <HAL_GPIO_Init+0x1e2>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <HAL_GPIO_Init+0x1e2>
 80025cc:	2300      	movs	r3, #0
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	f002 0203 	and.w	r2, r2, #3
 80025d4:	0092      	lsls	r2, r2, #2
 80025d6:	4093      	lsls	r3, r2
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025de:	4937      	ldr	r1, [pc, #220]	; (80026bc <HAL_GPIO_Init+0x2d0>)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ec:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002610:	4a2e      	ldr	r2, [pc, #184]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800263a:	4a24      	ldr	r2, [pc, #144]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002640:	4b22      	ldr	r3, [pc, #136]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002664:	4a19      	ldr	r2, [pc, #100]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <HAL_GPIO_Init+0x2e0>)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3301      	adds	r3, #1
 8002698:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f47f aea9 	bne.w	80023fc <HAL_GPIO_Init+0x10>
  }
}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40010000 	.word	0x40010000
 80026c0:	48000400 	.word	0x48000400
 80026c4:	48000800 	.word	0x48000800
 80026c8:	48000c00 	.word	0x48000c00
 80026cc:	40010400 	.word	0x40010400

080026d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	887b      	ldrh	r3, [r7, #2]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
 80026ec:	e001      	b.n	80026f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800271c:	e002      	b.n	8002724 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800271e:	887a      	ldrh	r2, [r7, #2]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e081      	b.n	8002846 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff fb00 	bl	8001d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002780:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002790:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d107      	bne.n	80027aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	e006      	b.n	80027b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d104      	bne.n	80027ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69d9      	ldr	r1, [r3, #28]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	461a      	mov	r2, r3
 800285c:	460b      	mov	r3, r1
 800285e:	817b      	strh	r3, [r7, #10]
 8002860:	4613      	mov	r3, r2
 8002862:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b20      	cmp	r3, #32
 800286e:	f040 80da 	bne.w	8002a26 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_I2C_Master_Transmit+0x30>
 800287c:	2302      	movs	r3, #2
 800287e:	e0d3      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x1d8>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002888:	f7ff fc9a 	bl	80021c0 <HAL_GetTick>
 800288c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2319      	movs	r3, #25
 8002894:	2201      	movs	r2, #1
 8002896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f9e6 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0be      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2221      	movs	r2, #33	; 0x21
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2210      	movs	r2, #16
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	893a      	ldrh	r2, [r7, #8]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2bff      	cmp	r3, #255	; 0xff
 80028da:	d90e      	bls.n	80028fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	22ff      	movs	r2, #255	; 0xff
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	4b51      	ldr	r3, [pc, #324]	; (8002a30 <HAL_I2C_Master_Transmit+0x1e0>)
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fbf6 	bl	80030e4 <I2C_TransferConfig>
 80028f8:	e06c      	b.n	80029d4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002908:	b2da      	uxtb	r2, r3
 800290a:	8979      	ldrh	r1, [r7, #10]
 800290c:	4b48      	ldr	r3, [pc, #288]	; (8002a30 <HAL_I2C_Master_Transmit+0x1e0>)
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fbe5 	bl	80030e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800291a:	e05b      	b.n	80029d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	6a39      	ldr	r1, [r7, #32]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f9f2 	bl	8002d0a <I2C_WaitOnTXISFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e07b      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d034      	beq.n	80029d4 <HAL_I2C_Master_Transmit+0x184>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	2b00      	cmp	r3, #0
 8002970:	d130      	bne.n	80029d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	2200      	movs	r2, #0
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f975 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e04d      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	2bff      	cmp	r3, #255	; 0xff
 8002994:	d90e      	bls.n	80029b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	8979      	ldrh	r1, [r7, #10]
 80029a4:	2300      	movs	r3, #0
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 fb99 	bl	80030e4 <I2C_TransferConfig>
 80029b2:	e00f      	b.n	80029d4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	8979      	ldrh	r1, [r7, #10]
 80029c6:	2300      	movs	r3, #0
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fb88 	bl	80030e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d19e      	bne.n	800291c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	6a39      	ldr	r1, [r7, #32]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f9d8 	bl	8002d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e01a      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2220      	movs	r2, #32
 80029f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_I2C_Master_Transmit+0x1e4>)
 8002a06:	400b      	ands	r3, r1
 8002a08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	80002000 	.word	0x80002000
 8002a34:	fe00e800 	.word	0xfe00e800

08002a38 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	461a      	mov	r2, r3
 8002a44:	460b      	mov	r3, r1
 8002a46:	817b      	strh	r3, [r7, #10]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	f040 80db 	bne.w	8002c10 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_I2C_Master_Receive+0x30>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e0d4      	b.n	8002c12 <HAL_I2C_Master_Receive+0x1da>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a70:	f7ff fba6 	bl	80021c0 <HAL_GetTick>
 8002a74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	2319      	movs	r3, #25
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f8f2 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0bf      	b.n	8002c12 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2222      	movs	r2, #34	; 0x22
 8002a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	893a      	ldrh	r2, [r7, #8]
 8002ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2bff      	cmp	r3, #255	; 0xff
 8002ac2:	d90e      	bls.n	8002ae2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	22ff      	movs	r2, #255	; 0xff
 8002ac8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	8979      	ldrh	r1, [r7, #10]
 8002ad2:	4b52      	ldr	r3, [pc, #328]	; (8002c1c <HAL_I2C_Master_Receive+0x1e4>)
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fb02 	bl	80030e4 <I2C_TransferConfig>
 8002ae0:	e06d      	b.n	8002bbe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	8979      	ldrh	r1, [r7, #10]
 8002af4:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <HAL_I2C_Master_Receive+0x1e4>)
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 faf1 	bl	80030e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002b02:	e05c      	b.n	8002bbe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	6a39      	ldr	r1, [r7, #32]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f989 	bl	8002e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e07c      	b.n	8002c12 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d034      	beq.n	8002bbe <HAL_I2C_Master_Receive+0x186>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d130      	bne.n	8002bbe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	2200      	movs	r2, #0
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f880 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e04d      	b.n	8002c12 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2bff      	cmp	r3, #255	; 0xff
 8002b7e:	d90e      	bls.n	8002b9e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	22ff      	movs	r2, #255	; 0xff
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	8979      	ldrh	r1, [r7, #10]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 faa4 	bl	80030e4 <I2C_TransferConfig>
 8002b9c:	e00f      	b.n	8002bbe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	8979      	ldrh	r1, [r7, #10]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fa93 	bl	80030e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d19d      	bne.n	8002b04 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	6a39      	ldr	r1, [r7, #32]
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f8e3 	bl	8002d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e01a      	b.n	8002c12 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2220      	movs	r2, #32
 8002be2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <HAL_I2C_Master_Receive+0x1e8>)
 8002bf0:	400b      	ands	r3, r1
 8002bf2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	80002400 	.word	0x80002400
 8002c20:	fe00e800 	.word	0xfe00e800

08002c24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d103      	bne.n	8002c42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d007      	beq.n	8002c60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	619a      	str	r2, [r3, #24]
  }
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7c:	e031      	b.n	8002ce2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c84:	d02d      	beq.n	8002ce2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7ff fa9b 	bl	80021c0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d122      	bne.n	8002ce2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d113      	bne.n	8002ce2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f043 0220 	orr.w	r2, r3, #32
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00f      	b.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4013      	ands	r3, r2
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d0be      	beq.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d16:	e033      	b.n	8002d80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f901 	bl	8002f24 <I2C_IsErrorOccurred>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e031      	b.n	8002d90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d32:	d025      	beq.n	8002d80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d34:	f7ff fa44 	bl	80021c0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d302      	bcc.n	8002d4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11a      	bne.n	8002d80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d013      	beq.n	8002d80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e007      	b.n	8002d90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d1c4      	bne.n	8002d18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da4:	e02f      	b.n	8002e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68b9      	ldr	r1, [r7, #8]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f8ba 	bl	8002f24 <I2C_IsErrorOccurred>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e02d      	b.n	8002e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dba:	f7ff fa01 	bl	80021c0 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11a      	bne.n	8002e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d013      	beq.n	8002e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f043 0220 	orr.w	r2, r3, #32
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e007      	b.n	8002e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d1c8      	bne.n	8002da6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e2c:	e06b      	b.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f876 	bl	8002f24 <I2C_IsErrorOccurred>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e069      	b.n	8002f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d138      	bne.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d105      	bne.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e055      	b.n	8002f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d107      	bne.n	8002e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2204      	movs	r2, #4
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
 8002e86:	e002      	b.n	8002e8e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2220      	movs	r2, #32
 8002e94:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e029      	b.n	8002f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec2:	f7ff f97d 	bl	80021c0 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d00f      	beq.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e007      	b.n	8002f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d18c      	bne.n	8002e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	fe00e800 	.word	0xfe00e800

08002f24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d068      	beq.n	8003022 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2210      	movs	r2, #16
 8002f56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f58:	e049      	b.n	8002fee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f60:	d045      	beq.n	8002fee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f62:	f7ff f92d 	bl	80021c0 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d302      	bcc.n	8002f78 <I2C_IsErrorOccurred+0x54>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d13a      	bne.n	8002fee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9a:	d121      	bne.n	8002fe0 <I2C_IsErrorOccurred+0xbc>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa2:	d01d      	beq.n	8002fe0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d01a      	beq.n	8002fe0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fba:	f7ff f901 	bl	80021c0 <HAL_GetTick>
 8002fbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc0:	e00e      	b.n	8002fe0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fc2:	f7ff f8fd 	bl	80021c0 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b19      	cmp	r3, #25
 8002fce:	d907      	bls.n	8002fe0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	f043 0320 	orr.w	r3, r3, #32
 8002fd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002fde:	e006      	b.n	8002fee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d1e9      	bne.n	8002fc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d003      	beq.n	8003004 <I2C_IsErrorOccurred+0xe0>
 8002ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0aa      	beq.n	8002f5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003008:	2b00      	cmp	r3, #0
 800300a:	d103      	bne.n	8003014 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2220      	movs	r2, #32
 8003012:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003044:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	f043 0308 	orr.w	r3, r3, #8
 800305c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003066:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	f043 0302 	orr.w	r3, r3, #2
 800307e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003088:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01c      	beq.n	80030d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7ff fdc3 	bl	8002c24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <I2C_IsErrorOccurred+0x1bc>)
 80030aa:	400b      	ands	r3, r1
 80030ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3728      	adds	r7, #40	; 0x28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	fe00e800 	.word	0xfe00e800

080030e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	817b      	strh	r3, [r7, #10]
 80030f2:	4613      	mov	r3, r2
 80030f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030f6:	897b      	ldrh	r3, [r7, #10]
 80030f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030fc:	7a7b      	ldrb	r3, [r7, #9]
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003104:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	4313      	orrs	r3, r2
 800310e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003112:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	0d5b      	lsrs	r3, r3, #21
 800311e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <I2C_TransferConfig+0x60>)
 8003124:	430b      	orrs	r3, r1
 8003126:	43db      	mvns	r3, r3
 8003128:	ea02 0103 	and.w	r1, r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003136:	bf00      	nop
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	03ff63ff 	.word	0x03ff63ff

08003148 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b20      	cmp	r3, #32
 800315c:	d138      	bne.n	80031d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003168:	2302      	movs	r3, #2
 800316a:	e032      	b.n	80031d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2224      	movs	r2, #36	; 0x24
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800319a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d139      	bne.n	8003268 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031fe:	2302      	movs	r3, #2
 8003200:	e033      	b.n	800326a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2224      	movs	r2, #36	; 0x24
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003230:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	e000      	b.n	800326a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
  }
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800327e:	af00      	add	r7, sp, #0
 8003280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003284:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003288:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800328a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f001 b823 	b.w	80042e4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 817d 	beq.w	80035ae <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032b4:	4bbc      	ldr	r3, [pc, #752]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d00c      	beq.n	80032da <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032c0:	4bb9      	ldr	r3, [pc, #740]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d15c      	bne.n	8003386 <HAL_RCC_OscConfig+0x10e>
 80032cc:	4bb6      	ldr	r3, [pc, #728]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d155      	bne.n	8003386 <HAL_RCC_OscConfig+0x10e>
 80032da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	095b      	lsrs	r3, r3, #5
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d102      	bne.n	800330c <HAL_RCC_OscConfig+0x94>
 8003306:	4ba8      	ldr	r3, [pc, #672]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	e015      	b.n	8003338 <HAL_RCC_OscConfig+0xc0>
 800330c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003310:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003324:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003328:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003334:	4b9c      	ldr	r3, [pc, #624]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800333c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003340:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003344:	fa92 f2a2 	rbit	r2, r2
 8003348:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800334c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003350:	fab2 f282 	clz	r2, r2
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	f042 0220 	orr.w	r2, r2, #32
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	f002 021f 	and.w	r2, r2, #31
 8003360:	2101      	movs	r1, #1
 8003362:	fa01 f202 	lsl.w	r2, r1, r2
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 811f 	beq.w	80035ac <HAL_RCC_OscConfig+0x334>
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f040 8116 	bne.w	80035ac <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	f000 bfaf 	b.w	80042e4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x12e>
 8003398:	4b83      	ldr	r3, [pc, #524]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a82      	ldr	r2, [pc, #520]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 800339e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e036      	b.n	8003414 <HAL_RCC_OscConfig+0x19c>
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x158>
 80033b6:	4b7c      	ldr	r3, [pc, #496]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7b      	ldr	r2, [pc, #492]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	4b79      	ldr	r3, [pc, #484]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a78      	ldr	r2, [pc, #480]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80033c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e021      	b.n	8003414 <HAL_RCC_OscConfig+0x19c>
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x184>
 80033e2:	4b71      	ldr	r3, [pc, #452]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a70      	ldr	r2, [pc, #448]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80033e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b6e      	ldr	r3, [pc, #440]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6d      	ldr	r2, [pc, #436]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0x19c>
 80033fc:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a69      	ldr	r2, [pc, #420]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b67      	ldr	r3, [pc, #412]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a66      	ldr	r2, [pc, #408]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003412:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003414:	4b64      	ldr	r3, [pc, #400]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	f023 020f 	bic.w	r2, r3, #15
 800341c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003420:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	495f      	ldr	r1, [pc, #380]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 800342a:	4313      	orrs	r3, r2
 800342c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d059      	beq.n	80034f2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fe febf 	bl	80021c0 <HAL_GetTick>
 8003442:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	e00a      	b.n	800345e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003448:	f7fe feba 	bl	80021c0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b64      	cmp	r3, #100	; 0x64
 8003456:	d902      	bls.n	800345e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	f000 bf43 	b.w	80042e4 <HAL_RCC_OscConfig+0x106c>
 800345e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003462:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003472:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <HAL_RCC_OscConfig+0x218>
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	e015      	b.n	80034bc <HAL_RCC_OscConfig+0x244>
 8003490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003494:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80034a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80034b8:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80034c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034c8:	fa92 f2a2 	rbit	r2, r2
 80034cc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80034d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80034d4:	fab2 f282 	clz	r2, r2
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f042 0220 	orr.w	r2, r2, #32
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f002 021f 	and.w	r2, r2, #31
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ab      	beq.n	8003448 <HAL_RCC_OscConfig+0x1d0>
 80034f0:	e05d      	b.n	80035ae <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fe fe65 	bl	80021c0 <HAL_GetTick>
 80034f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034fc:	f7fe fe60 	bl	80021c0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b64      	cmp	r3, #100	; 0x64
 800350a:	d902      	bls.n	8003512 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	f000 bee9 	b.w	80042e4 <HAL_RCC_OscConfig+0x106c>
 8003512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003516:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003526:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d102      	bne.n	8003544 <HAL_RCC_OscConfig+0x2cc>
 800353e:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	e015      	b.n	8003570 <HAL_RCC_OscConfig+0x2f8>
 8003544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003548:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800355c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003560:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003564:	fa93 f3a3 	rbit	r3, r3
 8003568:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800356c:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <HAL_RCC_OscConfig+0x330>)
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003574:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003578:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800357c:	fa92 f2a2 	rbit	r2, r2
 8003580:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003584:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003588:	fab2 f282 	clz	r2, r2
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f042 0220 	orr.w	r2, r2, #32
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	f002 021f 	and.w	r2, r2, #31
 8003598:	2101      	movs	r1, #1
 800359a:	fa01 f202 	lsl.w	r2, r1, r2
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ab      	bne.n	80034fc <HAL_RCC_OscConfig+0x284>
 80035a4:	e003      	b.n	80035ae <HAL_RCC_OscConfig+0x336>
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 817d 	beq.w	80038be <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035c4:	4ba6      	ldr	r3, [pc, #664]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035d0:	4ba3      	ldr	r3, [pc, #652]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d172      	bne.n	80036c2 <HAL_RCC_OscConfig+0x44a>
 80035dc:	4ba0      	ldr	r3, [pc, #640]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d16c      	bne.n	80036c2 <HAL_RCC_OscConfig+0x44a>
 80035e8:	2302      	movs	r3, #2
 80035ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <HAL_RCC_OscConfig+0x3a0>
 8003612:	4b93      	ldr	r3, [pc, #588]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	e013      	b.n	8003640 <HAL_RCC_OscConfig+0x3c8>
 8003618:	2302      	movs	r3, #2
 800361a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800362a:	2302      	movs	r3, #2
 800362c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003630:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800363c:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	2202      	movs	r2, #2
 8003642:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003646:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800364a:	fa92 f2a2 	rbit	r2, r2
 800364e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003652:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003656:	fab2 f282 	clz	r2, r2
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f042 0220 	orr.w	r2, r2, #32
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f002 021f 	and.w	r2, r2, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCC_OscConfig+0x410>
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d002      	beq.n	8003688 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f000 be2e 	b.w	80042e4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b75      	ldr	r3, [pc, #468]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	21f8      	movs	r1, #248	; 0xf8
 800369e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80036a6:	fa91 f1a1 	rbit	r1, r1
 80036aa:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80036ae:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80036b2:	fab1 f181 	clz	r1, r1
 80036b6:	b2c9      	uxtb	r1, r1
 80036b8:	408b      	lsls	r3, r1
 80036ba:	4969      	ldr	r1, [pc, #420]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c0:	e0fd      	b.n	80038be <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8088 	beq.w	80037e4 <HAL_RCC_OscConfig+0x56c>
 80036d4:	2301      	movs	r3, #1
 80036d6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80036e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	461a      	mov	r2, r3
 80036fc:	2301      	movs	r3, #1
 80036fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fe fd5e 	bl	80021c0 <HAL_GetTick>
 8003704:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800370a:	f7fe fd59 	bl	80021c0 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d902      	bls.n	8003720 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	f000 bde2 	b.w	80042e4 <HAL_RCC_OscConfig+0x106c>
 8003720:	2302      	movs	r3, #2
 8003722:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003732:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d102      	bne.n	8003750 <HAL_RCC_OscConfig+0x4d8>
 800374a:	4b45      	ldr	r3, [pc, #276]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	e013      	b.n	8003778 <HAL_RCC_OscConfig+0x500>
 8003750:	2302      	movs	r3, #2
 8003752:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003762:	2302      	movs	r3, #2
 8003764:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003768:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800376c:	fa93 f3a3 	rbit	r3, r3
 8003770:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003774:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	2202      	movs	r2, #2
 800377a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800377e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003782:	fa92 f2a2 	rbit	r2, r2
 8003786:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800378a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800378e:	fab2 f282 	clz	r2, r2
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	f042 0220 	orr.w	r2, r2, #32
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	f002 021f 	and.w	r2, r2, #31
 800379e:	2101      	movs	r1, #1
 80037a0:	fa01 f202 	lsl.w	r2, r1, r2
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0af      	beq.n	800370a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037aa:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	21f8      	movs	r1, #248	; 0xf8
 80037c0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037c8:	fa91 f1a1 	rbit	r1, r1
 80037cc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80037d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80037d4:	fab1 f181 	clz	r1, r1
 80037d8:	b2c9      	uxtb	r1, r1
 80037da:	408b      	lsls	r3, r1
 80037dc:	4920      	ldr	r1, [pc, #128]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
 80037e2:	e06c      	b.n	80038be <HAL_RCC_OscConfig+0x646>
 80037e4:	2301      	movs	r3, #1
 80037e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80037f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003804:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	461a      	mov	r2, r3
 800380c:	2300      	movs	r3, #0
 800380e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7fe fcd6 	bl	80021c0 <HAL_GetTick>
 8003814:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003818:	e00a      	b.n	8003830 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800381a:	f7fe fcd1 	bl	80021c0 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d902      	bls.n	8003830 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	f000 bd5a 	b.w	80042e4 <HAL_RCC_OscConfig+0x106c>
 8003830:	2302      	movs	r3, #2
 8003832:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d104      	bne.n	8003864 <HAL_RCC_OscConfig+0x5ec>
 800385a:	4b01      	ldr	r3, [pc, #4]	; (8003860 <HAL_RCC_OscConfig+0x5e8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	e015      	b.n	800388c <HAL_RCC_OscConfig+0x614>
 8003860:	40021000 	.word	0x40021000
 8003864:	2302      	movs	r3, #2
 8003866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003876:	2302      	movs	r3, #2
 8003878:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800387c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003888:	4bc8      	ldr	r3, [pc, #800]	; (8003bac <HAL_RCC_OscConfig+0x934>)
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	2202      	movs	r2, #2
 800388e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003892:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003896:	fa92 f2a2 	rbit	r2, r2
 800389a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800389e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80038a2:	fab2 f282 	clz	r2, r2
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	f042 0220 	orr.w	r2, r2, #32
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	f002 021f 	and.w	r2, r2, #31
 80038b2:	2101      	movs	r1, #1
 80038b4:	fa01 f202 	lsl.w	r2, r1, r2
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ad      	bne.n	800381a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8110 	beq.w	8003af4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d079      	beq.n	80039d8 <HAL_RCC_OscConfig+0x760>
 80038e4:	2301      	movs	r3, #1
 80038e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80038f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fa:	fab3 f383 	clz	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	4bab      	ldr	r3, [pc, #684]	; (8003bb0 <HAL_RCC_OscConfig+0x938>)
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	461a      	mov	r2, r3
 800390a:	2301      	movs	r3, #1
 800390c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390e:	f7fe fc57 	bl	80021c0 <HAL_GetTick>
 8003912:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003918:	f7fe fc52 	bl	80021c0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d902      	bls.n	800392e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	f000 bcdb 	b.w	80042e4 <HAL_RCC_OscConfig+0x106c>
 800392e:	2302      	movs	r3, #2
 8003930:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003948:	2202      	movs	r2, #2
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003950:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	fa93 f2a3 	rbit	r2, r3
 800395a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800396c:	2202      	movs	r2, #2
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	fa93 f2a3 	rbit	r2, r3
 800397e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003982:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003986:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003988:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x934>)
 800398a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003994:	2102      	movs	r1, #2
 8003996:	6019      	str	r1, [r3, #0]
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	fa93 f1a3 	rbit	r1, r3
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039ae:	6019      	str	r1, [r3, #0]
  return result;
 80039b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2101      	movs	r1, #1
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0a0      	beq.n	8003918 <HAL_RCC_OscConfig+0x6a0>
 80039d6:	e08d      	b.n	8003af4 <HAL_RCC_OscConfig+0x87c>
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039e0:	2201      	movs	r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	fa93 f2a3 	rbit	r2, r3
 80039f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039fa:	601a      	str	r2, [r3, #0]
  return result;
 80039fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a04:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4b68      	ldr	r3, [pc, #416]	; (8003bb0 <HAL_RCC_OscConfig+0x938>)
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	461a      	mov	r2, r3
 8003a16:	2300      	movs	r3, #0
 8003a18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1a:	f7fe fbd1 	bl	80021c0 <HAL_GetTick>
 8003a1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a24:	f7fe fbcc 	bl	80021c0 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d902      	bls.n	8003a3a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	f000 bc55 	b.w	80042e4 <HAL_RCC_OscConfig+0x106c>
 8003a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a42:	2202      	movs	r2, #2
 8003a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fa93 f2a3 	rbit	r2, r3
 8003a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a66:	2202      	movs	r2, #2
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	fa93 f2a3 	rbit	r2, r3
 8003a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	fa93 f2a3 	rbit	r2, r3
 8003a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003aa4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <HAL_RCC_OscConfig+0x934>)
 8003aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	6019      	str	r1, [r3, #0]
 8003ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	fa93 f1a3 	rbit	r1, r3
 8003ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003acc:	6019      	str	r1, [r3, #0]
  return result;
 8003ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d197      	bne.n	8003a24 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 81a1 	beq.w	8003e4c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b10:	4b26      	ldr	r3, [pc, #152]	; (8003bac <HAL_RCC_OscConfig+0x934>)
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d116      	bne.n	8003b4a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1c:	4b23      	ldr	r3, [pc, #140]	; (8003bac <HAL_RCC_OscConfig+0x934>)
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	4a22      	ldr	r2, [pc, #136]	; (8003bac <HAL_RCC_OscConfig+0x934>)
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b26:	61d3      	str	r3, [r2, #28]
 8003b28:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_RCC_OscConfig+0x934>)
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b34:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b42:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <HAL_RCC_OscConfig+0x93c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d11a      	bne.n	8003b8c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <HAL_RCC_OscConfig+0x93c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a16      	ldr	r2, [pc, #88]	; (8003bb4 <HAL_RCC_OscConfig+0x93c>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fe fb2d 	bl	80021c0 <HAL_GetTick>
 8003b66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6a:	e009      	b.n	8003b80 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6c:	f7fe fb28 	bl	80021c0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b64      	cmp	r3, #100	; 0x64
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e3b1      	b.n	80042e4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_RCC_OscConfig+0x93c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ef      	beq.n	8003b6c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10d      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x940>
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_OscConfig+0x934>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	4a02      	ldr	r2, [pc, #8]	; (8003bac <HAL_RCC_OscConfig+0x934>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	6213      	str	r3, [r2, #32]
 8003ba8:	e03c      	b.n	8003c24 <HAL_RCC_OscConfig+0x9ac>
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	10908120 	.word	0x10908120
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCC_OscConfig+0x96a>
 8003bc8:	4bc1      	ldr	r3, [pc, #772]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4ac0      	ldr	r2, [pc, #768]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6213      	str	r3, [r2, #32]
 8003bd4:	4bbe      	ldr	r3, [pc, #760]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4abd      	ldr	r2, [pc, #756]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003bda:	f023 0304 	bic.w	r3, r3, #4
 8003bde:	6213      	str	r3, [r2, #32]
 8003be0:	e020      	b.n	8003c24 <HAL_RCC_OscConfig+0x9ac>
 8003be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x994>
 8003bf2:	4bb7      	ldr	r3, [pc, #732]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4ab6      	ldr	r2, [pc, #728]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6213      	str	r3, [r2, #32]
 8003bfe:	4bb4      	ldr	r3, [pc, #720]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4ab3      	ldr	r2, [pc, #716]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6213      	str	r3, [r2, #32]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0x9ac>
 8003c0c:	4bb0      	ldr	r3, [pc, #704]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4aaf      	ldr	r2, [pc, #700]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6213      	str	r3, [r2, #32]
 8003c18:	4bad      	ldr	r3, [pc, #692]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	4aac      	ldr	r2, [pc, #688]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003c1e:	f023 0304 	bic.w	r3, r3, #4
 8003c22:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8081 	beq.w	8003d38 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c36:	f7fe fac3 	bl	80021c0 <HAL_GetTick>
 8003c3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f7fe fabe 	bl	80021c0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e345      	b.n	80042e4 <HAL_RCC_OscConfig+0x106c>
 8003c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c60:	2202      	movs	r2, #2
 8003c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c68:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	fa93 f2a3 	rbit	r2, r3
 8003c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c84:	2202      	movs	r2, #2
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	fa93 f2a3 	rbit	r2, r3
 8003c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c9e:	601a      	str	r2, [r3, #0]
  return result;
 8003ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ca8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCC_OscConfig+0xa4c>
 8003cbe:	4b84      	ldr	r3, [pc, #528]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	e013      	b.n	8003cec <HAL_RCC_OscConfig+0xa74>
 8003cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ccc:	2202      	movs	r2, #2
 8003cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	fa93 f2a3 	rbit	r2, r3
 8003cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	4b79      	ldr	r3, [pc, #484]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cf0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	6011      	str	r1, [r2, #0]
 8003cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cfc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	fa92 f1a2 	rbit	r1, r2
 8003d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d0a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d0e:	6011      	str	r1, [r2, #0]
  return result;
 8003d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d14:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	fab2 f282 	clz	r2, r2
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	f002 021f 	and.w	r2, r2, #31
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d084      	beq.n	8003c40 <HAL_RCC_OscConfig+0x9c8>
 8003d36:	e07f      	b.n	8003e38 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d38:	f7fe fa42 	bl	80021c0 <HAL_GetTick>
 8003d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d40:	e00b      	b.n	8003d5a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fe fa3d 	bl	80021c0 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e2c4      	b.n	80042e4 <HAL_RCC_OscConfig+0x106c>
 8003d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d62:	2202      	movs	r2, #2
 8003d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	fa93 f2a3 	rbit	r2, r3
 8003d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d78:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d82:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d86:	2202      	movs	r2, #2
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	fa93 f2a3 	rbit	r2, r3
 8003d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003da0:	601a      	str	r2, [r3, #0]
  return result;
 8003da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003daa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f043 0302 	orr.w	r3, r3, #2
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d102      	bne.n	8003dc6 <HAL_RCC_OscConfig+0xb4e>
 8003dc0:	4b43      	ldr	r3, [pc, #268]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	e013      	b.n	8003dee <HAL_RCC_OscConfig+0xb76>
 8003dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dce:	2202      	movs	r2, #2
 8003dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	fa93 f2a3 	rbit	r2, r3
 8003de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	4b39      	ldr	r3, [pc, #228]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003df2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003df6:	2102      	movs	r1, #2
 8003df8:	6011      	str	r1, [r2, #0]
 8003dfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dfe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	fa92 f1a2 	rbit	r1, r2
 8003e08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e10:	6011      	str	r1, [r2, #0]
  return result;
 8003e12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e16:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	fab2 f282 	clz	r2, r2
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	f002 021f 	and.w	r2, r2, #31
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d184      	bne.n	8003d42 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e38:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d105      	bne.n	8003e4c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e40:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	4a22      	ldr	r2, [pc, #136]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8242 	beq.w	80042e2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	; (8003ed0 <HAL_RCC_OscConfig+0xc58>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	f000 8213 	beq.w	8004292 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	f040 8162 	bne.w	8004142 <HAL_RCC_OscConfig+0xeca>
 8003e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e82:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e90:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	fa93 f2a3 	rbit	r2, r3
 8003e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ea2:	601a      	str	r2, [r3, #0]
  return result;
 8003ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003eac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe f97c 	bl	80021c0 <HAL_GetTick>
 8003ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ecc:	e00c      	b.n	8003ee8 <HAL_RCC_OscConfig+0xc70>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fe f974 	bl	80021c0 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e1fd      	b.n	80042e4 <HAL_RCC_OscConfig+0x106c>
 8003ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	fa93 f2a3 	rbit	r2, r3
 8003f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f08:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f0c:	601a      	str	r2, [r3, #0]
  return result;
 8003f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f12:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f18:	fab3 f383 	clz	r3, r3
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d102      	bne.n	8003f32 <HAL_RCC_OscConfig+0xcba>
 8003f2c:	4bb0      	ldr	r3, [pc, #704]	; (80041f0 <HAL_RCC_OscConfig+0xf78>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	e027      	b.n	8003f82 <HAL_RCC_OscConfig+0xd0a>
 8003f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f36:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f44:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	fa93 f2a3 	rbit	r2, r3
 8003f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f52:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	fa93 f2a3 	rbit	r2, r3
 8003f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f78:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	4b9c      	ldr	r3, [pc, #624]	; (80041f0 <HAL_RCC_OscConfig+0xf78>)
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f86:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f8e:	6011      	str	r1, [r2, #0]
 8003f90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f94:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	fa92 f1a2 	rbit	r1, r2
 8003f9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fa2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fa6:	6011      	str	r1, [r2, #0]
  return result;
 8003fa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	fab2 f282 	clz	r2, r2
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	f042 0220 	orr.w	r2, r2, #32
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	f002 021f 	and.w	r2, r2, #31
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d182      	bne.n	8003ed4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fce:	4b88      	ldr	r3, [pc, #544]	; (80041f0 <HAL_RCC_OscConfig+0xf78>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	497f      	ldr	r1, [pc, #508]	; (80041f0 <HAL_RCC_OscConfig+0xf78>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
 8003ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003ffe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004008:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	fa93 f2a3 	rbit	r2, r3
 8004012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004016:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800401a:	601a      	str	r2, [r3, #0]
  return result;
 800401c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004020:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004024:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004026:	fab3 f383 	clz	r3, r3
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004030:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	461a      	mov	r2, r3
 8004038:	2301      	movs	r3, #1
 800403a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fe f8c0 	bl	80021c0 <HAL_GetTick>
 8004040:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004044:	e009      	b.n	800405a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004046:	f7fe f8bb 	bl	80021c0 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e144      	b.n	80042e4 <HAL_RCC_OscConfig+0x106c>
 800405a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	fa93 f2a3 	rbit	r2, r3
 8004076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800407e:	601a      	str	r2, [r3, #0]
  return result;
 8004080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004084:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004088:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d102      	bne.n	80040a4 <HAL_RCC_OscConfig+0xe2c>
 800409e:	4b54      	ldr	r3, [pc, #336]	; (80041f0 <HAL_RCC_OscConfig+0xf78>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	e027      	b.n	80040f4 <HAL_RCC_OscConfig+0xe7c>
 80040a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	fa93 f2a3 	rbit	r2, r3
 80040c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ce:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	fa93 f2a3 	rbit	r2, r3
 80040e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <HAL_RCC_OscConfig+0xf78>)
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040f8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004100:	6011      	str	r1, [r2, #0]
 8004102:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004106:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	fa92 f1a2 	rbit	r1, r2
 8004110:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004114:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004118:	6011      	str	r1, [r2, #0]
  return result;
 800411a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800411e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	fab2 f282 	clz	r2, r2
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	f042 0220 	orr.w	r2, r2, #32
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	f002 021f 	and.w	r2, r2, #31
 8004134:	2101      	movs	r1, #1
 8004136:	fa01 f202 	lsl.w	r2, r1, r2
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d082      	beq.n	8004046 <HAL_RCC_OscConfig+0xdce>
 8004140:	e0cf      	b.n	80042e2 <HAL_RCC_OscConfig+0x106a>
 8004142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004146:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800414a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800414e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004154:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	fa93 f2a3 	rbit	r2, r3
 800415e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004162:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004166:	601a      	str	r2, [r3, #0]
  return result;
 8004168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004170:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	fab3 f383 	clz	r3, r3
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800417c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	461a      	mov	r2, r3
 8004184:	2300      	movs	r3, #0
 8004186:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fe f81a 	bl	80021c0 <HAL_GetTick>
 800418c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004190:	e009      	b.n	80041a6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004192:	f7fe f815 	bl	80021c0 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e09e      	b.n	80042e4 <HAL_RCC_OscConfig+0x106c>
 80041a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	fa93 f2a3 	rbit	r2, r3
 80041c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041ca:	601a      	str	r2, [r3, #0]
  return result;
 80041cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d104      	bne.n	80041f4 <HAL_RCC_OscConfig+0xf7c>
 80041ea:	4b01      	ldr	r3, [pc, #4]	; (80041f0 <HAL_RCC_OscConfig+0xf78>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	e029      	b.n	8004244 <HAL_RCC_OscConfig+0xfcc>
 80041f0:	40021000 	.word	0x40021000
 80041f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004206:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	fa93 f2a3 	rbit	r2, r3
 8004210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004214:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	fa93 f2a3 	rbit	r2, r3
 8004236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_OscConfig+0x1078>)
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004248:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800424c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004250:	6011      	str	r1, [r2, #0]
 8004252:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004256:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	fa92 f1a2 	rbit	r1, r2
 8004260:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004264:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004268:	6011      	str	r1, [r2, #0]
  return result;
 800426a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800426e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	fab2 f282 	clz	r2, r2
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	f042 0220 	orr.w	r2, r2, #32
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	f002 021f 	and.w	r2, r2, #31
 8004284:	2101      	movs	r1, #1
 8004286:	fa01 f202 	lsl.w	r2, r1, r2
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d180      	bne.n	8004192 <HAL_RCC_OscConfig+0xf1a>
 8004290:	e027      	b.n	80042e2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e01e      	b.n	80042e4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_RCC_OscConfig+0x1078>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d10b      	bne.n	80042de <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042da:	429a      	cmp	r2, r3
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000

080042f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b09e      	sub	sp, #120	; 0x78
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e162      	b.n	80045d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800430c:	4b90      	ldr	r3, [pc, #576]	; (8004550 <HAL_RCC_ClockConfig+0x25c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d910      	bls.n	800433c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b8d      	ldr	r3, [pc, #564]	; (8004550 <HAL_RCC_ClockConfig+0x25c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 0207 	bic.w	r2, r3, #7
 8004322:	498b      	ldr	r1, [pc, #556]	; (8004550 <HAL_RCC_ClockConfig+0x25c>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b89      	ldr	r3, [pc, #548]	; (8004550 <HAL_RCC_ClockConfig+0x25c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e14a      	b.n	80045d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004348:	4b82      	ldr	r3, [pc, #520]	; (8004554 <HAL_RCC_ClockConfig+0x260>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	497f      	ldr	r1, [pc, #508]	; (8004554 <HAL_RCC_ClockConfig+0x260>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80dc 	beq.w	8004520 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d13c      	bne.n	80043ea <HAL_RCC_ClockConfig+0xf6>
 8004370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004374:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800437e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	b2db      	uxtb	r3, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d102      	bne.n	800439a <HAL_RCC_ClockConfig+0xa6>
 8004394:	4b6f      	ldr	r3, [pc, #444]	; (8004554 <HAL_RCC_ClockConfig+0x260>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	e00f      	b.n	80043ba <HAL_RCC_ClockConfig+0xc6>
 800439a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800439e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	667b      	str	r3, [r7, #100]	; 0x64
 80043a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043ac:	663b      	str	r3, [r7, #96]	; 0x60
 80043ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b6:	4b67      	ldr	r3, [pc, #412]	; (8004554 <HAL_RCC_ClockConfig+0x260>)
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043be:	65ba      	str	r2, [r7, #88]	; 0x58
 80043c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c2:	fa92 f2a2 	rbit	r2, r2
 80043c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80043c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043ca:	fab2 f282 	clz	r2, r2
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	f042 0220 	orr.w	r2, r2, #32
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	f002 021f 	and.w	r2, r2, #31
 80043da:	2101      	movs	r1, #1
 80043dc:	fa01 f202 	lsl.w	r2, r1, r2
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d17b      	bne.n	80044de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e0f3      	b.n	80045d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d13c      	bne.n	800446c <HAL_RCC_ClockConfig+0x178>
 80043f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	d102      	bne.n	800441c <HAL_RCC_ClockConfig+0x128>
 8004416:	4b4f      	ldr	r3, [pc, #316]	; (8004554 <HAL_RCC_ClockConfig+0x260>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	e00f      	b.n	800443c <HAL_RCC_ClockConfig+0x148>
 800441c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004420:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004424:	fa93 f3a3 	rbit	r3, r3
 8004428:	647b      	str	r3, [r7, #68]	; 0x44
 800442a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800442e:	643b      	str	r3, [r7, #64]	; 0x40
 8004430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004438:	4b46      	ldr	r3, [pc, #280]	; (8004554 <HAL_RCC_ClockConfig+0x260>)
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004440:	63ba      	str	r2, [r7, #56]	; 0x38
 8004442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004444:	fa92 f2a2 	rbit	r2, r2
 8004448:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800444a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800444c:	fab2 f282 	clz	r2, r2
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	f042 0220 	orr.w	r2, r2, #32
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	f002 021f 	and.w	r2, r2, #31
 800445c:	2101      	movs	r1, #1
 800445e:	fa01 f202 	lsl.w	r2, r1, r2
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d13a      	bne.n	80044de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0b2      	b.n	80045d2 <HAL_RCC_ClockConfig+0x2de>
 800446c:	2302      	movs	r3, #2
 800446e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	fa93 f3a3 	rbit	r3, r3
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d102      	bne.n	8004494 <HAL_RCC_ClockConfig+0x1a0>
 800448e:	4b31      	ldr	r3, [pc, #196]	; (8004554 <HAL_RCC_ClockConfig+0x260>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	e00d      	b.n	80044b0 <HAL_RCC_ClockConfig+0x1bc>
 8004494:	2302      	movs	r3, #2
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	fa93 f3a3 	rbit	r3, r3
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	2302      	movs	r3, #2
 80044a2:	623b      	str	r3, [r7, #32]
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	fa93 f3a3 	rbit	r3, r3
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	4b29      	ldr	r3, [pc, #164]	; (8004554 <HAL_RCC_ClockConfig+0x260>)
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2202      	movs	r2, #2
 80044b2:	61ba      	str	r2, [r7, #24]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	fa92 f2a2 	rbit	r2, r2
 80044ba:	617a      	str	r2, [r7, #20]
  return result;
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	fab2 f282 	clz	r2, r2
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	f042 0220 	orr.w	r2, r2, #32
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	f002 021f 	and.w	r2, r2, #31
 80044ce:	2101      	movs	r1, #1
 80044d0:	fa01 f202 	lsl.w	r2, r1, r2
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e079      	b.n	80045d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044de:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <HAL_RCC_ClockConfig+0x260>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f023 0203 	bic.w	r2, r3, #3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	491a      	ldr	r1, [pc, #104]	; (8004554 <HAL_RCC_ClockConfig+0x260>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044f0:	f7fd fe66 	bl	80021c0 <HAL_GetTick>
 80044f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f6:	e00a      	b.n	800450e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f8:	f7fd fe62 	bl	80021c0 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e061      	b.n	80045d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	4b11      	ldr	r3, [pc, #68]	; (8004554 <HAL_RCC_ClockConfig+0x260>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 020c 	and.w	r2, r3, #12
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	429a      	cmp	r2, r3
 800451e:	d1eb      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCC_ClockConfig+0x25c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d214      	bcs.n	8004558 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_RCC_ClockConfig+0x25c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 0207 	bic.w	r2, r3, #7
 8004536:	4906      	ldr	r1, [pc, #24]	; (8004550 <HAL_RCC_ClockConfig+0x25c>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b04      	ldr	r3, [pc, #16]	; (8004550 <HAL_RCC_ClockConfig+0x25c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d005      	beq.n	8004558 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e040      	b.n	80045d2 <HAL_RCC_ClockConfig+0x2de>
 8004550:	40022000 	.word	0x40022000
 8004554:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <HAL_RCC_ClockConfig+0x2e8>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	491a      	ldr	r1, [pc, #104]	; (80045dc <HAL_RCC_ClockConfig+0x2e8>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004582:	4b16      	ldr	r3, [pc, #88]	; (80045dc <HAL_RCC_ClockConfig+0x2e8>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4912      	ldr	r1, [pc, #72]	; (80045dc <HAL_RCC_ClockConfig+0x2e8>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004596:	f000 f829 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 800459a:	4601      	mov	r1, r0
 800459c:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <HAL_RCC_ClockConfig+0x2e8>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a4:	22f0      	movs	r2, #240	; 0xf0
 80045a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	fa92 f2a2 	rbit	r2, r2
 80045ae:	60fa      	str	r2, [r7, #12]
  return result;
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	fab2 f282 	clz	r2, r2
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	40d3      	lsrs	r3, r2
 80045ba:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <HAL_RCC_ClockConfig+0x2ec>)
 80045bc:	5cd3      	ldrb	r3, [r2, r3]
 80045be:	fa21 f303 	lsr.w	r3, r1, r3
 80045c2:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <HAL_RCC_ClockConfig+0x2f0>)
 80045c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045c6:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_RCC_ClockConfig+0x2f4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fd fdb4 	bl	8002138 <HAL_InitTick>
  
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3778      	adds	r7, #120	; 0x78
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000
 80045e0:	08009304 	.word	0x08009304
 80045e4:	20000008 	.word	0x20000008
 80045e8:	2000000c 	.word	0x2000000c

080045ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b08b      	sub	sp, #44	; 0x2c
 80045f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004606:	4b29      	ldr	r3, [pc, #164]	; (80046ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b04      	cmp	r3, #4
 8004614:	d002      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x30>
 8004616:	2b08      	cmp	r3, #8
 8004618:	d003      	beq.n	8004622 <HAL_RCC_GetSysClockFreq+0x36>
 800461a:	e03c      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800461e:	623b      	str	r3, [r7, #32]
      break;
 8004620:	e03c      	b.n	800469c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004628:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800462c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	fa92 f2a2 	rbit	r2, r2
 8004634:	607a      	str	r2, [r7, #4]
  return result;
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	fab2 f282 	clz	r2, r2
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	40d3      	lsrs	r3, r2
 8004640:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004642:	5cd3      	ldrb	r3, [r2, r3]
 8004644:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004646:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	220f      	movs	r2, #15
 8004650:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	fa92 f2a2 	rbit	r2, r2
 8004658:	60fa      	str	r2, [r7, #12]
  return result;
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	fab2 f282 	clz	r2, r2
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	40d3      	lsrs	r3, r2
 8004664:	4a14      	ldr	r2, [pc, #80]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004674:	4a0e      	ldr	r2, [pc, #56]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	fbb2 f2f3 	udiv	r2, r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
 8004684:	e004      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4a0c      	ldr	r2, [pc, #48]	; (80046bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	623b      	str	r3, [r7, #32]
      break;
 8004694:	e002      	b.n	800469c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004696:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004698:	623b      	str	r3, [r7, #32]
      break;
 800469a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800469c:	6a3b      	ldr	r3, [r7, #32]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	372c      	adds	r7, #44	; 0x2c
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000
 80046b0:	007a1200 	.word	0x007a1200
 80046b4:	08009314 	.word	0x08009314
 80046b8:	08009324 	.word	0x08009324
 80046bc:	003d0900 	.word	0x003d0900

080046c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b092      	sub	sp, #72	; 0x48
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 80cd 	beq.w	800487e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e4:	4b86      	ldr	r3, [pc, #536]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10e      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f0:	4b83      	ldr	r3, [pc, #524]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4a82      	ldr	r2, [pc, #520]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fa:	61d3      	str	r3, [r2, #28]
 80046fc:	4b80      	ldr	r3, [pc, #512]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470e:	4b7d      	ldr	r3, [pc, #500]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d118      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800471a:	4b7a      	ldr	r3, [pc, #488]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a79      	ldr	r2, [pc, #484]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004724:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004726:	f7fd fd4b 	bl	80021c0 <HAL_GetTick>
 800472a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	e008      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472e:	f7fd fd47 	bl	80021c0 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b64      	cmp	r3, #100	; 0x64
 800473a:	d901      	bls.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0db      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	4b70      	ldr	r3, [pc, #448]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800474c:	4b6c      	ldr	r3, [pc, #432]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004754:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d07d      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004766:	429a      	cmp	r2, r3
 8004768:	d076      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800476a:	4b65      	ldr	r3, [pc, #404]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004778:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004784:	fab3 f383 	clz	r3, r3
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	4b5e      	ldr	r3, [pc, #376]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	461a      	mov	r2, r3
 8004794:	2301      	movs	r3, #1
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800479c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	fa93 f3a3 	rbit	r3, r3
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	4b55      	ldr	r3, [pc, #340]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	461a      	mov	r2, r3
 80047b8:	2300      	movs	r3, #0
 80047ba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047bc:	4a50      	ldr	r2, [pc, #320]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d045      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fd fcf8 	bl	80021c0 <HAL_GetTick>
 80047d0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d2:	e00a      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fd fcf4 	bl	80021c0 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e086      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80047ea:	2302      	movs	r3, #2
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
 80047f6:	2302      	movs	r3, #2
 80047f8:	623b      	str	r3, [r7, #32]
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	61fb      	str	r3, [r7, #28]
  return result;
 8004802:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	b2db      	uxtb	r3, r3
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f043 0302 	orr.w	r3, r3, #2
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d102      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004818:	4b39      	ldr	r3, [pc, #228]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	e007      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800481e:	2302      	movs	r3, #2
 8004820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	4b35      	ldr	r3, [pc, #212]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	2202      	movs	r2, #2
 8004830:	613a      	str	r2, [r7, #16]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	fa92 f2a2 	rbit	r2, r2
 8004838:	60fa      	str	r2, [r7, #12]
  return result;
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	fab2 f282 	clz	r2, r2
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	f002 021f 	and.w	r2, r2, #31
 800484c:	2101      	movs	r1, #1
 800484e:	fa01 f202 	lsl.w	r2, r1, r2
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0bd      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004858:	4b29      	ldr	r3, [pc, #164]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4926      	ldr	r1, [pc, #152]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004866:	4313      	orrs	r3, r2
 8004868:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800486a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800486e:	2b01      	cmp	r3, #1
 8004870:	d105      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004872:	4b23      	ldr	r3, [pc, #140]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	4a22      	ldr	r2, [pc, #136]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	491a      	ldr	r1, [pc, #104]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004898:	4313      	orrs	r3, r2
 800489a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048a8:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	f023 0210 	bic.w	r2, r3, #16
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4912      	ldr	r1, [pc, #72]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d008      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	490b      	ldr	r1, [pc, #44]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	4903      	ldr	r1, [pc, #12]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3748      	adds	r7, #72	; 0x48
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000
 8004904:	40007000 	.word	0x40007000
 8004908:	10908100 	.word	0x10908100

0800490c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e049      	b.n	80049b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fd fa74 	bl	8001e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 fbbe 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d001      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e040      	b.n	8004a56 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <HAL_TIM_Base_Start_IT+0xa8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x58>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fe:	d009      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x58>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <HAL_TIM_Base_Start_IT+0xac>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x58>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <HAL_TIM_Base_Start_IT+0xb0>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d115      	bne.n	8004a40 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d015      	beq.n	8004a52 <HAL_TIM_Base_Start_IT+0x96>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2c:	d011      	beq.n	8004a52 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0201 	orr.w	r2, r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3e:	e008      	b.n	8004a52 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e000      	b.n	8004a54 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	00010007 	.word	0x00010007

08004a74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e049      	b.n	8004b1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f841 	bl	8004b22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	f000 fb0a 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <HAL_TIM_PWM_Start+0x24>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e03c      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x9e>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d109      	bne.n	8004b76 <HAL_TIM_PWM_Start+0x3e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	bf14      	ite	ne
 8004b6e:	2301      	movne	r3, #1
 8004b70:	2300      	moveq	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e02f      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x9e>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d109      	bne.n	8004b90 <HAL_TIM_PWM_Start+0x58>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e022      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x9e>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b0c      	cmp	r3, #12
 8004b94:	d109      	bne.n	8004baa <HAL_TIM_PWM_Start+0x72>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	bf14      	ite	ne
 8004ba2:	2301      	movne	r3, #1
 8004ba4:	2300      	moveq	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	e015      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x9e>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d109      	bne.n	8004bc4 <HAL_TIM_PWM_Start+0x8c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e008      	b.n	8004bd6 <HAL_TIM_PWM_Start+0x9e>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e088      	b.n	8004cf0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_PWM_Start+0xb6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bec:	e023      	b.n	8004c36 <HAL_TIM_PWM_Start+0xfe>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_PWM_Start+0xc6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bfc:	e01b      	b.n	8004c36 <HAL_TIM_PWM_Start+0xfe>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Start+0xd6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c0c:	e013      	b.n	8004c36 <HAL_TIM_PWM_Start+0xfe>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Start+0xe6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c1c:	e00b      	b.n	8004c36 <HAL_TIM_PWM_Start+0xfe>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d104      	bne.n	8004c2e <HAL_TIM_PWM_Start+0xf6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c2c:	e003      	b.n	8004c36 <HAL_TIM_PWM_Start+0xfe>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	6839      	ldr	r1, [r7, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fdfc 	bl	800583c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2b      	ldr	r2, [pc, #172]	; (8004cf8 <HAL_TIM_PWM_Start+0x1c0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00e      	beq.n	8004c6c <HAL_TIM_PWM_Start+0x134>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <HAL_TIM_PWM_Start+0x1c4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_TIM_PWM_Start+0x134>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <HAL_TIM_PWM_Start+0x1c8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_TIM_PWM_Start+0x134>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a27      	ldr	r2, [pc, #156]	; (8004d04 <HAL_TIM_PWM_Start+0x1cc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIM_PWM_Start+0x138>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <HAL_TIM_PWM_Start+0x13a>
 8004c70:	2300      	movs	r3, #0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a1b      	ldr	r2, [pc, #108]	; (8004cf8 <HAL_TIM_PWM_Start+0x1c0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00e      	beq.n	8004cae <HAL_TIM_PWM_Start+0x176>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c98:	d009      	beq.n	8004cae <HAL_TIM_PWM_Start+0x176>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1a      	ldr	r2, [pc, #104]	; (8004d08 <HAL_TIM_PWM_Start+0x1d0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <HAL_TIM_PWM_Start+0x176>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <HAL_TIM_PWM_Start+0x1c4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d115      	bne.n	8004cda <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <HAL_TIM_PWM_Start+0x1d4>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b06      	cmp	r3, #6
 8004cbe:	d015      	beq.n	8004cec <HAL_TIM_PWM_Start+0x1b4>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc6:	d011      	beq.n	8004cec <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd8:	e008      	b.n	8004cec <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0201 	orr.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e000      	b.n	8004cee <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40014000 	.word	0x40014000
 8004d00:	40014400 	.word	0x40014400
 8004d04:	40014800 	.word	0x40014800
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	00010007 	.word	0x00010007

08004d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e0ff      	b.n	8004f2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b14      	cmp	r3, #20
 8004d3a:	f200 80f0 	bhi.w	8004f1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d99 	.word	0x08004d99
 8004d48:	08004f1f 	.word	0x08004f1f
 8004d4c:	08004f1f 	.word	0x08004f1f
 8004d50:	08004f1f 	.word	0x08004f1f
 8004d54:	08004dd9 	.word	0x08004dd9
 8004d58:	08004f1f 	.word	0x08004f1f
 8004d5c:	08004f1f 	.word	0x08004f1f
 8004d60:	08004f1f 	.word	0x08004f1f
 8004d64:	08004e1b 	.word	0x08004e1b
 8004d68:	08004f1f 	.word	0x08004f1f
 8004d6c:	08004f1f 	.word	0x08004f1f
 8004d70:	08004f1f 	.word	0x08004f1f
 8004d74:	08004e5b 	.word	0x08004e5b
 8004d78:	08004f1f 	.word	0x08004f1f
 8004d7c:	08004f1f 	.word	0x08004f1f
 8004d80:	08004f1f 	.word	0x08004f1f
 8004d84:	08004e9d 	.word	0x08004e9d
 8004d88:	08004f1f 	.word	0x08004f1f
 8004d8c:	08004f1f 	.word	0x08004f1f
 8004d90:	08004f1f 	.word	0x08004f1f
 8004d94:	08004edd 	.word	0x08004edd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fa0c 	bl	80051bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0208 	orr.w	r2, r2, #8
 8004db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0204 	bic.w	r2, r2, #4
 8004dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6999      	ldr	r1, [r3, #24]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	619a      	str	r2, [r3, #24]
      break;
 8004dd6:	e0a5      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fa72 	bl	80052c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6999      	ldr	r1, [r3, #24]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	021a      	lsls	r2, r3, #8
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	619a      	str	r2, [r3, #24]
      break;
 8004e18:	e084      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fad1 	bl	80053c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0208 	orr.w	r2, r2, #8
 8004e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0204 	bic.w	r2, r2, #4
 8004e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69d9      	ldr	r1, [r3, #28]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	61da      	str	r2, [r3, #28]
      break;
 8004e58:	e064      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fb2f 	bl	80054c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69d9      	ldr	r1, [r3, #28]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	021a      	lsls	r2, r3, #8
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	61da      	str	r2, [r3, #28]
      break;
 8004e9a:	e043      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fb72 	bl	800558c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0208 	orr.w	r2, r2, #8
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0204 	bic.w	r2, r2, #4
 8004ec6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004eda:	e023      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fbb0 	bl	8005648 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	021a      	lsls	r2, r3, #8
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f1c:	e002      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
      break;
 8004f22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop

08004f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIM_ConfigClockSource+0x1c>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e0b6      	b.n	80050c2 <HAL_TIM_ConfigClockSource+0x18a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f90:	d03e      	beq.n	8005010 <HAL_TIM_ConfigClockSource+0xd8>
 8004f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f96:	f200 8087 	bhi.w	80050a8 <HAL_TIM_ConfigClockSource+0x170>
 8004f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9e:	f000 8086 	beq.w	80050ae <HAL_TIM_ConfigClockSource+0x176>
 8004fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa6:	d87f      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x170>
 8004fa8:	2b70      	cmp	r3, #112	; 0x70
 8004faa:	d01a      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0xaa>
 8004fac:	2b70      	cmp	r3, #112	; 0x70
 8004fae:	d87b      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x170>
 8004fb0:	2b60      	cmp	r3, #96	; 0x60
 8004fb2:	d050      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x11e>
 8004fb4:	2b60      	cmp	r3, #96	; 0x60
 8004fb6:	d877      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x170>
 8004fb8:	2b50      	cmp	r3, #80	; 0x50
 8004fba:	d03c      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0xfe>
 8004fbc:	2b50      	cmp	r3, #80	; 0x50
 8004fbe:	d873      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x170>
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d058      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x13e>
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d86f      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x170>
 8004fc8:	2b30      	cmp	r3, #48	; 0x30
 8004fca:	d064      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x15e>
 8004fcc:	2b30      	cmp	r3, #48	; 0x30
 8004fce:	d86b      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x170>
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d060      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x15e>
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d867      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x170>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d05c      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x15e>
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d05a      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x15e>
 8004fe0:	e062      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ff2:	f000 fc03 	bl	80057fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005004:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	609a      	str	r2, [r3, #8]
      break;
 800500e:	e04f      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005020:	f000 fbec 	bl	80057fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005032:	609a      	str	r2, [r3, #8]
      break;
 8005034:	e03c      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005042:	461a      	mov	r2, r3
 8005044:	f000 fb60 	bl	8005708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2150      	movs	r1, #80	; 0x50
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fbb9 	bl	80057c6 <TIM_ITRx_SetConfig>
      break;
 8005054:	e02c      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005062:	461a      	mov	r2, r3
 8005064:	f000 fb7f 	bl	8005766 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2160      	movs	r1, #96	; 0x60
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fba9 	bl	80057c6 <TIM_ITRx_SetConfig>
      break;
 8005074:	e01c      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005082:	461a      	mov	r2, r3
 8005084:	f000 fb40 	bl	8005708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2140      	movs	r1, #64	; 0x40
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fb99 	bl	80057c6 <TIM_ITRx_SetConfig>
      break;
 8005094:	e00c      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f000 fb90 	bl	80057c6 <TIM_ITRx_SetConfig>
      break;
 80050a6:	e003      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
      break;
 80050ac:	e000      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a32      	ldr	r2, [pc, #200]	; (80051a8 <TIM_Base_SetConfig+0xdc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <TIM_Base_SetConfig+0x28>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ea:	d003      	beq.n	80050f4 <TIM_Base_SetConfig+0x28>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a2f      	ldr	r2, [pc, #188]	; (80051ac <TIM_Base_SetConfig+0xe0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d108      	bne.n	8005106 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a27      	ldr	r2, [pc, #156]	; (80051a8 <TIM_Base_SetConfig+0xdc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <TIM_Base_SetConfig+0x6a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005114:	d00f      	beq.n	8005136 <TIM_Base_SetConfig+0x6a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a24      	ldr	r2, [pc, #144]	; (80051ac <TIM_Base_SetConfig+0xe0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_Base_SetConfig+0x6a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a23      	ldr	r2, [pc, #140]	; (80051b0 <TIM_Base_SetConfig+0xe4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_Base_SetConfig+0x6a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a22      	ldr	r2, [pc, #136]	; (80051b4 <TIM_Base_SetConfig+0xe8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_Base_SetConfig+0x6a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a21      	ldr	r2, [pc, #132]	; (80051b8 <TIM_Base_SetConfig+0xec>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d108      	bne.n	8005148 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0e      	ldr	r2, [pc, #56]	; (80051a8 <TIM_Base_SetConfig+0xdc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00b      	beq.n	800518c <TIM_Base_SetConfig+0xc0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a0e      	ldr	r2, [pc, #56]	; (80051b0 <TIM_Base_SetConfig+0xe4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_Base_SetConfig+0xc0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a0d      	ldr	r2, [pc, #52]	; (80051b4 <TIM_Base_SetConfig+0xe8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_Base_SetConfig+0xc0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <TIM_Base_SetConfig+0xec>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d103      	bne.n	8005194 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	615a      	str	r2, [r3, #20]
}
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40014000 	.word	0x40014000
 80051b4:	40014400 	.word	0x40014400
 80051b8:	40014800 	.word	0x40014800

080051bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f023 0201 	bic.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0303 	bic.w	r3, r3, #3
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f023 0302 	bic.w	r3, r3, #2
 8005208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a28      	ldr	r2, [pc, #160]	; (80052b8 <TIM_OC1_SetConfig+0xfc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00b      	beq.n	8005234 <TIM_OC1_SetConfig+0x78>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a27      	ldr	r2, [pc, #156]	; (80052bc <TIM_OC1_SetConfig+0x100>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_OC1_SetConfig+0x78>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <TIM_OC1_SetConfig+0x104>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC1_SetConfig+0x78>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a25      	ldr	r2, [pc, #148]	; (80052c4 <TIM_OC1_SetConfig+0x108>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10c      	bne.n	800524e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0308 	bic.w	r3, r3, #8
 800523a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 0304 	bic.w	r3, r3, #4
 800524c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <TIM_OC1_SetConfig+0xfc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_OC1_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a18      	ldr	r2, [pc, #96]	; (80052bc <TIM_OC1_SetConfig+0x100>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_OC1_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <TIM_OC1_SetConfig+0x104>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_OC1_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <TIM_OC1_SetConfig+0x108>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d111      	bne.n	8005292 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800527c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	621a      	str	r2, [r3, #32]
}
 80052ac:	bf00      	nop
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40014400 	.word	0x40014400
 80052c4:	40014800 	.word	0x40014800

080052c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f023 0210 	bic.w	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0320 	bic.w	r3, r3, #32
 8005316:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a24      	ldr	r2, [pc, #144]	; (80053b8 <TIM_OC2_SetConfig+0xf0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d10d      	bne.n	8005348 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005346:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <TIM_OC2_SetConfig+0xf0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00b      	beq.n	8005368 <TIM_OC2_SetConfig+0xa0>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <TIM_OC2_SetConfig+0xf4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <TIM_OC2_SetConfig+0xa0>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <TIM_OC2_SetConfig+0xf8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_OC2_SetConfig+0xa0>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a18      	ldr	r2, [pc, #96]	; (80053c4 <TIM_OC2_SetConfig+0xfc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d113      	bne.n	8005390 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800536e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005376:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	621a      	str	r2, [r3, #32]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40014400 	.word	0x40014400
 80053c4:	40014800 	.word	0x40014800

080053c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0303 	bic.w	r3, r3, #3
 8005402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a23      	ldr	r2, [pc, #140]	; (80054b4 <TIM_OC3_SetConfig+0xec>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d10d      	bne.n	8005446 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005444:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a1a      	ldr	r2, [pc, #104]	; (80054b4 <TIM_OC3_SetConfig+0xec>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00b      	beq.n	8005466 <TIM_OC3_SetConfig+0x9e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <TIM_OC3_SetConfig+0xf0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d007      	beq.n	8005466 <TIM_OC3_SetConfig+0x9e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a18      	ldr	r2, [pc, #96]	; (80054bc <TIM_OC3_SetConfig+0xf4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_OC3_SetConfig+0x9e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <TIM_OC3_SetConfig+0xf8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d113      	bne.n	800548e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800546c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	621a      	str	r2, [r3, #32]
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40014400 	.word	0x40014400
 80054c0:	40014800 	.word	0x40014800

080054c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	031b      	lsls	r3, r3, #12
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a16      	ldr	r2, [pc, #88]	; (800557c <TIM_OC4_SetConfig+0xb8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_OC4_SetConfig+0x7c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a15      	ldr	r2, [pc, #84]	; (8005580 <TIM_OC4_SetConfig+0xbc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_OC4_SetConfig+0x7c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a14      	ldr	r2, [pc, #80]	; (8005584 <TIM_OC4_SetConfig+0xc0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC4_SetConfig+0x7c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a13      	ldr	r2, [pc, #76]	; (8005588 <TIM_OC4_SetConfig+0xc4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d109      	bne.n	8005554 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	019b      	lsls	r3, r3, #6
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800

0800558c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a15      	ldr	r2, [pc, #84]	; (8005638 <TIM_OC5_SetConfig+0xac>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00b      	beq.n	80055fe <TIM_OC5_SetConfig+0x72>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a14      	ldr	r2, [pc, #80]	; (800563c <TIM_OC5_SetConfig+0xb0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_OC5_SetConfig+0x72>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a13      	ldr	r2, [pc, #76]	; (8005640 <TIM_OC5_SetConfig+0xb4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_OC5_SetConfig+0x72>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a12      	ldr	r2, [pc, #72]	; (8005644 <TIM_OC5_SetConfig+0xb8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d109      	bne.n	8005612 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005604:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	021b      	lsls	r3, r3, #8
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	621a      	str	r2, [r3, #32]
}
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40014000 	.word	0x40014000
 8005640:	40014400 	.word	0x40014400
 8005644:	40014800 	.word	0x40014800

08005648 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800568e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	051b      	lsls	r3, r3, #20
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <TIM_OC6_SetConfig+0xb0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_OC6_SetConfig+0x74>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a15      	ldr	r2, [pc, #84]	; (80056fc <TIM_OC6_SetConfig+0xb4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_OC6_SetConfig+0x74>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a14      	ldr	r2, [pc, #80]	; (8005700 <TIM_OC6_SetConfig+0xb8>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_OC6_SetConfig+0x74>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a13      	ldr	r2, [pc, #76]	; (8005704 <TIM_OC6_SetConfig+0xbc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d109      	bne.n	80056d0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	029b      	lsls	r3, r3, #10
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800

08005708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f023 0201 	bic.w	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f023 030a 	bic.w	r3, r3, #10
 8005744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	621a      	str	r2, [r3, #32]
}
 800575a:	bf00      	nop
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005766:	b480      	push	{r7}
 8005768:	b087      	sub	sp, #28
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f023 0210 	bic.w	r2, r3, #16
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005790:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	031b      	lsls	r3, r3, #12
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f043 0307 	orr.w	r3, r3, #7
 80057e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	609a      	str	r2, [r3, #8]
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	021a      	lsls	r2, r3, #8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	431a      	orrs	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4313      	orrs	r3, r2
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	609a      	str	r2, [r3, #8]
}
 8005830:	bf00      	nop
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	2201      	movs	r2, #1
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1a      	ldr	r2, [r3, #32]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	43db      	mvns	r3, r3
 800585e:	401a      	ands	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a1a      	ldr	r2, [r3, #32]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f003 031f 	and.w	r3, r3, #31
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	fa01 f303 	lsl.w	r3, r1, r3
 8005874:	431a      	orrs	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
	...

08005888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800589c:	2302      	movs	r3, #2
 800589e:	e054      	b.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a24      	ldr	r2, [pc, #144]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d108      	bne.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a17      	ldr	r2, [pc, #92]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00e      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005908:	d009      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a13      	ldr	r2, [pc, #76]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a11      	ldr	r2, [pc, #68]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10c      	bne.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	4313      	orrs	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40012c00 	.word	0x40012c00
 800595c:	40000400 	.word	0x40000400
 8005960:	40014000 	.word	0x40014000

08005964 <__cvt>:
 8005964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005968:	ec55 4b10 	vmov	r4, r5, d0
 800596c:	2d00      	cmp	r5, #0
 800596e:	460e      	mov	r6, r1
 8005970:	4619      	mov	r1, r3
 8005972:	462b      	mov	r3, r5
 8005974:	bfbb      	ittet	lt
 8005976:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800597a:	461d      	movlt	r5, r3
 800597c:	2300      	movge	r3, #0
 800597e:	232d      	movlt	r3, #45	; 0x2d
 8005980:	700b      	strb	r3, [r1, #0]
 8005982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005984:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005988:	4691      	mov	r9, r2
 800598a:	f023 0820 	bic.w	r8, r3, #32
 800598e:	bfbc      	itt	lt
 8005990:	4622      	movlt	r2, r4
 8005992:	4614      	movlt	r4, r2
 8005994:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005998:	d005      	beq.n	80059a6 <__cvt+0x42>
 800599a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800599e:	d100      	bne.n	80059a2 <__cvt+0x3e>
 80059a0:	3601      	adds	r6, #1
 80059a2:	2102      	movs	r1, #2
 80059a4:	e000      	b.n	80059a8 <__cvt+0x44>
 80059a6:	2103      	movs	r1, #3
 80059a8:	ab03      	add	r3, sp, #12
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	ab02      	add	r3, sp, #8
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	ec45 4b10 	vmov	d0, r4, r5
 80059b4:	4653      	mov	r3, sl
 80059b6:	4632      	mov	r2, r6
 80059b8:	f000 fe2e 	bl	8006618 <_dtoa_r>
 80059bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059c0:	4607      	mov	r7, r0
 80059c2:	d102      	bne.n	80059ca <__cvt+0x66>
 80059c4:	f019 0f01 	tst.w	r9, #1
 80059c8:	d022      	beq.n	8005a10 <__cvt+0xac>
 80059ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059ce:	eb07 0906 	add.w	r9, r7, r6
 80059d2:	d110      	bne.n	80059f6 <__cvt+0x92>
 80059d4:	783b      	ldrb	r3, [r7, #0]
 80059d6:	2b30      	cmp	r3, #48	; 0x30
 80059d8:	d10a      	bne.n	80059f0 <__cvt+0x8c>
 80059da:	2200      	movs	r2, #0
 80059dc:	2300      	movs	r3, #0
 80059de:	4620      	mov	r0, r4
 80059e0:	4629      	mov	r1, r5
 80059e2:	f7fb f871 	bl	8000ac8 <__aeabi_dcmpeq>
 80059e6:	b918      	cbnz	r0, 80059f0 <__cvt+0x8c>
 80059e8:	f1c6 0601 	rsb	r6, r6, #1
 80059ec:	f8ca 6000 	str.w	r6, [sl]
 80059f0:	f8da 3000 	ldr.w	r3, [sl]
 80059f4:	4499      	add	r9, r3
 80059f6:	2200      	movs	r2, #0
 80059f8:	2300      	movs	r3, #0
 80059fa:	4620      	mov	r0, r4
 80059fc:	4629      	mov	r1, r5
 80059fe:	f7fb f863 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a02:	b108      	cbz	r0, 8005a08 <__cvt+0xa4>
 8005a04:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a08:	2230      	movs	r2, #48	; 0x30
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	454b      	cmp	r3, r9
 8005a0e:	d307      	bcc.n	8005a20 <__cvt+0xbc>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a14:	1bdb      	subs	r3, r3, r7
 8005a16:	4638      	mov	r0, r7
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	b004      	add	sp, #16
 8005a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	9103      	str	r1, [sp, #12]
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	e7f0      	b.n	8005a0a <__cvt+0xa6>

08005a28 <__exponent>:
 8005a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	bfb8      	it	lt
 8005a30:	4249      	neglt	r1, r1
 8005a32:	f803 2b02 	strb.w	r2, [r3], #2
 8005a36:	bfb4      	ite	lt
 8005a38:	222d      	movlt	r2, #45	; 0x2d
 8005a3a:	222b      	movge	r2, #43	; 0x2b
 8005a3c:	2909      	cmp	r1, #9
 8005a3e:	7042      	strb	r2, [r0, #1]
 8005a40:	dd2a      	ble.n	8005a98 <__exponent+0x70>
 8005a42:	f10d 0207 	add.w	r2, sp, #7
 8005a46:	4617      	mov	r7, r2
 8005a48:	260a      	movs	r6, #10
 8005a4a:	4694      	mov	ip, r2
 8005a4c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005a50:	fb06 1415 	mls	r4, r6, r5, r1
 8005a54:	3430      	adds	r4, #48	; 0x30
 8005a56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	2c63      	cmp	r4, #99	; 0x63
 8005a5e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005a62:	4629      	mov	r1, r5
 8005a64:	dcf1      	bgt.n	8005a4a <__exponent+0x22>
 8005a66:	3130      	adds	r1, #48	; 0x30
 8005a68:	f1ac 0402 	sub.w	r4, ip, #2
 8005a6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005a70:	1c41      	adds	r1, r0, #1
 8005a72:	4622      	mov	r2, r4
 8005a74:	42ba      	cmp	r2, r7
 8005a76:	d30a      	bcc.n	8005a8e <__exponent+0x66>
 8005a78:	f10d 0209 	add.w	r2, sp, #9
 8005a7c:	eba2 020c 	sub.w	r2, r2, ip
 8005a80:	42bc      	cmp	r4, r7
 8005a82:	bf88      	it	hi
 8005a84:	2200      	movhi	r2, #0
 8005a86:	4413      	add	r3, r2
 8005a88:	1a18      	subs	r0, r3, r0
 8005a8a:	b003      	add	sp, #12
 8005a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005a92:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005a96:	e7ed      	b.n	8005a74 <__exponent+0x4c>
 8005a98:	2330      	movs	r3, #48	; 0x30
 8005a9a:	3130      	adds	r1, #48	; 0x30
 8005a9c:	7083      	strb	r3, [r0, #2]
 8005a9e:	70c1      	strb	r1, [r0, #3]
 8005aa0:	1d03      	adds	r3, r0, #4
 8005aa2:	e7f1      	b.n	8005a88 <__exponent+0x60>

08005aa4 <_printf_float>:
 8005aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa8:	ed2d 8b02 	vpush	{d8}
 8005aac:	b08d      	sub	sp, #52	; 0x34
 8005aae:	460c      	mov	r4, r1
 8005ab0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	461f      	mov	r7, r3
 8005ab8:	4605      	mov	r5, r0
 8005aba:	f000 fcf1 	bl	80064a0 <_localeconv_r>
 8005abe:	f8d0 a000 	ldr.w	sl, [r0]
 8005ac2:	4650      	mov	r0, sl
 8005ac4:	f7fa fbd4 	bl	8000270 <strlen>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	930a      	str	r3, [sp, #40]	; 0x28
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	9305      	str	r3, [sp, #20]
 8005ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ad8:	3307      	adds	r3, #7
 8005ada:	f023 0307 	bic.w	r3, r3, #7
 8005ade:	f103 0208 	add.w	r2, r3, #8
 8005ae2:	f8c8 2000 	str.w	r2, [r8]
 8005ae6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005aea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005aee:	9307      	str	r3, [sp, #28]
 8005af0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005af4:	ee08 0a10 	vmov	s16, r0
 8005af8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005afc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b00:	4b9e      	ldr	r3, [pc, #632]	; (8005d7c <_printf_float+0x2d8>)
 8005b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b06:	f7fb f811 	bl	8000b2c <__aeabi_dcmpun>
 8005b0a:	bb88      	cbnz	r0, 8005b70 <_printf_float+0xcc>
 8005b0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b10:	4b9a      	ldr	r3, [pc, #616]	; (8005d7c <_printf_float+0x2d8>)
 8005b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b16:	f7fa ffeb 	bl	8000af0 <__aeabi_dcmple>
 8005b1a:	bb48      	cbnz	r0, 8005b70 <_printf_float+0xcc>
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2300      	movs	r3, #0
 8005b20:	4640      	mov	r0, r8
 8005b22:	4649      	mov	r1, r9
 8005b24:	f7fa ffda 	bl	8000adc <__aeabi_dcmplt>
 8005b28:	b110      	cbz	r0, 8005b30 <_printf_float+0x8c>
 8005b2a:	232d      	movs	r3, #45	; 0x2d
 8005b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b30:	4a93      	ldr	r2, [pc, #588]	; (8005d80 <_printf_float+0x2dc>)
 8005b32:	4b94      	ldr	r3, [pc, #592]	; (8005d84 <_printf_float+0x2e0>)
 8005b34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b38:	bf94      	ite	ls
 8005b3a:	4690      	movls	r8, r2
 8005b3c:	4698      	movhi	r8, r3
 8005b3e:	2303      	movs	r3, #3
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	9b05      	ldr	r3, [sp, #20]
 8005b44:	f023 0304 	bic.w	r3, r3, #4
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	f04f 0900 	mov.w	r9, #0
 8005b4e:	9700      	str	r7, [sp, #0]
 8005b50:	4633      	mov	r3, r6
 8005b52:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b54:	4621      	mov	r1, r4
 8005b56:	4628      	mov	r0, r5
 8005b58:	f000 f9da 	bl	8005f10 <_printf_common>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	f040 8090 	bne.w	8005c82 <_printf_float+0x1de>
 8005b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b66:	b00d      	add	sp, #52	; 0x34
 8005b68:	ecbd 8b02 	vpop	{d8}
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	4649      	mov	r1, r9
 8005b78:	f7fa ffd8 	bl	8000b2c <__aeabi_dcmpun>
 8005b7c:	b140      	cbz	r0, 8005b90 <_printf_float+0xec>
 8005b7e:	464b      	mov	r3, r9
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfbc      	itt	lt
 8005b84:	232d      	movlt	r3, #45	; 0x2d
 8005b86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b8a:	4a7f      	ldr	r2, [pc, #508]	; (8005d88 <_printf_float+0x2e4>)
 8005b8c:	4b7f      	ldr	r3, [pc, #508]	; (8005d8c <_printf_float+0x2e8>)
 8005b8e:	e7d1      	b.n	8005b34 <_printf_float+0x90>
 8005b90:	6863      	ldr	r3, [r4, #4]
 8005b92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b96:	9206      	str	r2, [sp, #24]
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	d13f      	bne.n	8005c1c <_printf_float+0x178>
 8005b9c:	2306      	movs	r3, #6
 8005b9e:	6063      	str	r3, [r4, #4]
 8005ba0:	9b05      	ldr	r3, [sp, #20]
 8005ba2:	6861      	ldr	r1, [r4, #4]
 8005ba4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9303      	str	r3, [sp, #12]
 8005bac:	ab0a      	add	r3, sp, #40	; 0x28
 8005bae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005bb2:	ab09      	add	r3, sp, #36	; 0x24
 8005bb4:	ec49 8b10 	vmov	d0, r8, r9
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	6022      	str	r2, [r4, #0]
 8005bbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f7ff fecf 	bl	8005964 <__cvt>
 8005bc6:	9b06      	ldr	r3, [sp, #24]
 8005bc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bca:	2b47      	cmp	r3, #71	; 0x47
 8005bcc:	4680      	mov	r8, r0
 8005bce:	d108      	bne.n	8005be2 <_printf_float+0x13e>
 8005bd0:	1cc8      	adds	r0, r1, #3
 8005bd2:	db02      	blt.n	8005bda <_printf_float+0x136>
 8005bd4:	6863      	ldr	r3, [r4, #4]
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	dd41      	ble.n	8005c5e <_printf_float+0x1ba>
 8005bda:	f1ab 0302 	sub.w	r3, fp, #2
 8005bde:	fa5f fb83 	uxtb.w	fp, r3
 8005be2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005be6:	d820      	bhi.n	8005c2a <_printf_float+0x186>
 8005be8:	3901      	subs	r1, #1
 8005bea:	465a      	mov	r2, fp
 8005bec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bf0:	9109      	str	r1, [sp, #36]	; 0x24
 8005bf2:	f7ff ff19 	bl	8005a28 <__exponent>
 8005bf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bf8:	1813      	adds	r3, r2, r0
 8005bfa:	2a01      	cmp	r2, #1
 8005bfc:	4681      	mov	r9, r0
 8005bfe:	6123      	str	r3, [r4, #16]
 8005c00:	dc02      	bgt.n	8005c08 <_printf_float+0x164>
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	07d2      	lsls	r2, r2, #31
 8005c06:	d501      	bpl.n	8005c0c <_printf_float+0x168>
 8005c08:	3301      	adds	r3, #1
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d09c      	beq.n	8005b4e <_printf_float+0xaa>
 8005c14:	232d      	movs	r3, #45	; 0x2d
 8005c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c1a:	e798      	b.n	8005b4e <_printf_float+0xaa>
 8005c1c:	9a06      	ldr	r2, [sp, #24]
 8005c1e:	2a47      	cmp	r2, #71	; 0x47
 8005c20:	d1be      	bne.n	8005ba0 <_printf_float+0xfc>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1bc      	bne.n	8005ba0 <_printf_float+0xfc>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e7b9      	b.n	8005b9e <_printf_float+0xfa>
 8005c2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c2e:	d118      	bne.n	8005c62 <_printf_float+0x1be>
 8005c30:	2900      	cmp	r1, #0
 8005c32:	6863      	ldr	r3, [r4, #4]
 8005c34:	dd0b      	ble.n	8005c4e <_printf_float+0x1aa>
 8005c36:	6121      	str	r1, [r4, #16]
 8005c38:	b913      	cbnz	r3, 8005c40 <_printf_float+0x19c>
 8005c3a:	6822      	ldr	r2, [r4, #0]
 8005c3c:	07d0      	lsls	r0, r2, #31
 8005c3e:	d502      	bpl.n	8005c46 <_printf_float+0x1a2>
 8005c40:	3301      	adds	r3, #1
 8005c42:	440b      	add	r3, r1
 8005c44:	6123      	str	r3, [r4, #16]
 8005c46:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c48:	f04f 0900 	mov.w	r9, #0
 8005c4c:	e7de      	b.n	8005c0c <_printf_float+0x168>
 8005c4e:	b913      	cbnz	r3, 8005c56 <_printf_float+0x1b2>
 8005c50:	6822      	ldr	r2, [r4, #0]
 8005c52:	07d2      	lsls	r2, r2, #31
 8005c54:	d501      	bpl.n	8005c5a <_printf_float+0x1b6>
 8005c56:	3302      	adds	r3, #2
 8005c58:	e7f4      	b.n	8005c44 <_printf_float+0x1a0>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e7f2      	b.n	8005c44 <_printf_float+0x1a0>
 8005c5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c64:	4299      	cmp	r1, r3
 8005c66:	db05      	blt.n	8005c74 <_printf_float+0x1d0>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	6121      	str	r1, [r4, #16]
 8005c6c:	07d8      	lsls	r0, r3, #31
 8005c6e:	d5ea      	bpl.n	8005c46 <_printf_float+0x1a2>
 8005c70:	1c4b      	adds	r3, r1, #1
 8005c72:	e7e7      	b.n	8005c44 <_printf_float+0x1a0>
 8005c74:	2900      	cmp	r1, #0
 8005c76:	bfd4      	ite	le
 8005c78:	f1c1 0202 	rsble	r2, r1, #2
 8005c7c:	2201      	movgt	r2, #1
 8005c7e:	4413      	add	r3, r2
 8005c80:	e7e0      	b.n	8005c44 <_printf_float+0x1a0>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	055a      	lsls	r2, r3, #21
 8005c86:	d407      	bmi.n	8005c98 <_printf_float+0x1f4>
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	4628      	mov	r0, r5
 8005c90:	47b8      	blx	r7
 8005c92:	3001      	adds	r0, #1
 8005c94:	d12c      	bne.n	8005cf0 <_printf_float+0x24c>
 8005c96:	e764      	b.n	8005b62 <_printf_float+0xbe>
 8005c98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c9c:	f240 80e0 	bls.w	8005e60 <_printf_float+0x3bc>
 8005ca0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f7fa ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d034      	beq.n	8005d1a <_printf_float+0x276>
 8005cb0:	4a37      	ldr	r2, [pc, #220]	; (8005d90 <_printf_float+0x2ec>)
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	47b8      	blx	r7
 8005cba:	3001      	adds	r0, #1
 8005cbc:	f43f af51 	beq.w	8005b62 <_printf_float+0xbe>
 8005cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	db02      	blt.n	8005cce <_printf_float+0x22a>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	07d8      	lsls	r0, r3, #31
 8005ccc:	d510      	bpl.n	8005cf0 <_printf_float+0x24c>
 8005cce:	ee18 3a10 	vmov	r3, s16
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	47b8      	blx	r7
 8005cda:	3001      	adds	r0, #1
 8005cdc:	f43f af41 	beq.w	8005b62 <_printf_float+0xbe>
 8005ce0:	f04f 0800 	mov.w	r8, #0
 8005ce4:	f104 091a 	add.w	r9, r4, #26
 8005ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cea:	3b01      	subs	r3, #1
 8005cec:	4543      	cmp	r3, r8
 8005cee:	dc09      	bgt.n	8005d04 <_printf_float+0x260>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	079b      	lsls	r3, r3, #30
 8005cf4:	f100 8107 	bmi.w	8005f06 <_printf_float+0x462>
 8005cf8:	68e0      	ldr	r0, [r4, #12]
 8005cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cfc:	4298      	cmp	r0, r3
 8005cfe:	bfb8      	it	lt
 8005d00:	4618      	movlt	r0, r3
 8005d02:	e730      	b.n	8005b66 <_printf_float+0xc2>
 8005d04:	2301      	movs	r3, #1
 8005d06:	464a      	mov	r2, r9
 8005d08:	4631      	mov	r1, r6
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	47b8      	blx	r7
 8005d0e:	3001      	adds	r0, #1
 8005d10:	f43f af27 	beq.w	8005b62 <_printf_float+0xbe>
 8005d14:	f108 0801 	add.w	r8, r8, #1
 8005d18:	e7e6      	b.n	8005ce8 <_printf_float+0x244>
 8005d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	dc39      	bgt.n	8005d94 <_printf_float+0x2f0>
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <_printf_float+0x2ec>)
 8005d22:	2301      	movs	r3, #1
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f af19 	beq.w	8005b62 <_printf_float+0xbe>
 8005d30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d34:	4313      	orrs	r3, r2
 8005d36:	d102      	bne.n	8005d3e <_printf_float+0x29a>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	07d9      	lsls	r1, r3, #31
 8005d3c:	d5d8      	bpl.n	8005cf0 <_printf_float+0x24c>
 8005d3e:	ee18 3a10 	vmov	r3, s16
 8005d42:	4652      	mov	r2, sl
 8005d44:	4631      	mov	r1, r6
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b8      	blx	r7
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f43f af09 	beq.w	8005b62 <_printf_float+0xbe>
 8005d50:	f04f 0900 	mov.w	r9, #0
 8005d54:	f104 0a1a 	add.w	sl, r4, #26
 8005d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5a:	425b      	negs	r3, r3
 8005d5c:	454b      	cmp	r3, r9
 8005d5e:	dc01      	bgt.n	8005d64 <_printf_float+0x2c0>
 8005d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d62:	e792      	b.n	8005c8a <_printf_float+0x1e6>
 8005d64:	2301      	movs	r3, #1
 8005d66:	4652      	mov	r2, sl
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	f43f aef7 	beq.w	8005b62 <_printf_float+0xbe>
 8005d74:	f109 0901 	add.w	r9, r9, #1
 8005d78:	e7ee      	b.n	8005d58 <_printf_float+0x2b4>
 8005d7a:	bf00      	nop
 8005d7c:	7fefffff 	.word	0x7fefffff
 8005d80:	08009334 	.word	0x08009334
 8005d84:	08009338 	.word	0x08009338
 8005d88:	0800933c 	.word	0x0800933c
 8005d8c:	08009340 	.word	0x08009340
 8005d90:	08009344 	.word	0x08009344
 8005d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	bfa8      	it	ge
 8005d9c:	461a      	movge	r2, r3
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	4691      	mov	r9, r2
 8005da2:	dc37      	bgt.n	8005e14 <_printf_float+0x370>
 8005da4:	f04f 0b00 	mov.w	fp, #0
 8005da8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dac:	f104 021a 	add.w	r2, r4, #26
 8005db0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005db2:	9305      	str	r3, [sp, #20]
 8005db4:	eba3 0309 	sub.w	r3, r3, r9
 8005db8:	455b      	cmp	r3, fp
 8005dba:	dc33      	bgt.n	8005e24 <_printf_float+0x380>
 8005dbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	db3b      	blt.n	8005e3c <_printf_float+0x398>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	07da      	lsls	r2, r3, #31
 8005dc8:	d438      	bmi.n	8005e3c <_printf_float+0x398>
 8005dca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005dce:	eba2 0903 	sub.w	r9, r2, r3
 8005dd2:	9b05      	ldr	r3, [sp, #20]
 8005dd4:	1ad2      	subs	r2, r2, r3
 8005dd6:	4591      	cmp	r9, r2
 8005dd8:	bfa8      	it	ge
 8005dda:	4691      	movge	r9, r2
 8005ddc:	f1b9 0f00 	cmp.w	r9, #0
 8005de0:	dc35      	bgt.n	8005e4e <_printf_float+0x3aa>
 8005de2:	f04f 0800 	mov.w	r8, #0
 8005de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dea:	f104 0a1a 	add.w	sl, r4, #26
 8005dee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	eba3 0309 	sub.w	r3, r3, r9
 8005df8:	4543      	cmp	r3, r8
 8005dfa:	f77f af79 	ble.w	8005cf0 <_printf_float+0x24c>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4652      	mov	r2, sl
 8005e02:	4631      	mov	r1, r6
 8005e04:	4628      	mov	r0, r5
 8005e06:	47b8      	blx	r7
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f43f aeaa 	beq.w	8005b62 <_printf_float+0xbe>
 8005e0e:	f108 0801 	add.w	r8, r8, #1
 8005e12:	e7ec      	b.n	8005dee <_printf_float+0x34a>
 8005e14:	4613      	mov	r3, r2
 8005e16:	4631      	mov	r1, r6
 8005e18:	4642      	mov	r2, r8
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d1c0      	bne.n	8005da4 <_printf_float+0x300>
 8005e22:	e69e      	b.n	8005b62 <_printf_float+0xbe>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4631      	mov	r1, r6
 8005e28:	4628      	mov	r0, r5
 8005e2a:	9205      	str	r2, [sp, #20]
 8005e2c:	47b8      	blx	r7
 8005e2e:	3001      	adds	r0, #1
 8005e30:	f43f ae97 	beq.w	8005b62 <_printf_float+0xbe>
 8005e34:	9a05      	ldr	r2, [sp, #20]
 8005e36:	f10b 0b01 	add.w	fp, fp, #1
 8005e3a:	e7b9      	b.n	8005db0 <_printf_float+0x30c>
 8005e3c:	ee18 3a10 	vmov	r3, s16
 8005e40:	4652      	mov	r2, sl
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d1be      	bne.n	8005dca <_printf_float+0x326>
 8005e4c:	e689      	b.n	8005b62 <_printf_float+0xbe>
 8005e4e:	9a05      	ldr	r2, [sp, #20]
 8005e50:	464b      	mov	r3, r9
 8005e52:	4442      	add	r2, r8
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	d1c1      	bne.n	8005de2 <_printf_float+0x33e>
 8005e5e:	e680      	b.n	8005b62 <_printf_float+0xbe>
 8005e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e62:	2a01      	cmp	r2, #1
 8005e64:	dc01      	bgt.n	8005e6a <_printf_float+0x3c6>
 8005e66:	07db      	lsls	r3, r3, #31
 8005e68:	d53a      	bpl.n	8005ee0 <_printf_float+0x43c>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b8      	blx	r7
 8005e74:	3001      	adds	r0, #1
 8005e76:	f43f ae74 	beq.w	8005b62 <_printf_float+0xbe>
 8005e7a:	ee18 3a10 	vmov	r3, s16
 8005e7e:	4652      	mov	r2, sl
 8005e80:	4631      	mov	r1, r6
 8005e82:	4628      	mov	r0, r5
 8005e84:	47b8      	blx	r7
 8005e86:	3001      	adds	r0, #1
 8005e88:	f43f ae6b 	beq.w	8005b62 <_printf_float+0xbe>
 8005e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e90:	2200      	movs	r2, #0
 8005e92:	2300      	movs	r3, #0
 8005e94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005e98:	f7fa fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e9c:	b9d8      	cbnz	r0, 8005ed6 <_printf_float+0x432>
 8005e9e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005ea2:	f108 0201 	add.w	r2, r8, #1
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	47b8      	blx	r7
 8005eac:	3001      	adds	r0, #1
 8005eae:	d10e      	bne.n	8005ece <_printf_float+0x42a>
 8005eb0:	e657      	b.n	8005b62 <_printf_float+0xbe>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	f43f ae50 	beq.w	8005b62 <_printf_float+0xbe>
 8005ec2:	f108 0801 	add.w	r8, r8, #1
 8005ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	4543      	cmp	r3, r8
 8005ecc:	dcf1      	bgt.n	8005eb2 <_printf_float+0x40e>
 8005ece:	464b      	mov	r3, r9
 8005ed0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ed4:	e6da      	b.n	8005c8c <_printf_float+0x1e8>
 8005ed6:	f04f 0800 	mov.w	r8, #0
 8005eda:	f104 0a1a 	add.w	sl, r4, #26
 8005ede:	e7f2      	b.n	8005ec6 <_printf_float+0x422>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	e7df      	b.n	8005ea6 <_printf_float+0x402>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	464a      	mov	r2, r9
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b8      	blx	r7
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	f43f ae36 	beq.w	8005b62 <_printf_float+0xbe>
 8005ef6:	f108 0801 	add.w	r8, r8, #1
 8005efa:	68e3      	ldr	r3, [r4, #12]
 8005efc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005efe:	1a5b      	subs	r3, r3, r1
 8005f00:	4543      	cmp	r3, r8
 8005f02:	dcf0      	bgt.n	8005ee6 <_printf_float+0x442>
 8005f04:	e6f8      	b.n	8005cf8 <_printf_float+0x254>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	f104 0919 	add.w	r9, r4, #25
 8005f0e:	e7f4      	b.n	8005efa <_printf_float+0x456>

08005f10 <_printf_common>:
 8005f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	4616      	mov	r6, r2
 8005f16:	4699      	mov	r9, r3
 8005f18:	688a      	ldr	r2, [r1, #8]
 8005f1a:	690b      	ldr	r3, [r1, #16]
 8005f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f20:	4293      	cmp	r3, r2
 8005f22:	bfb8      	it	lt
 8005f24:	4613      	movlt	r3, r2
 8005f26:	6033      	str	r3, [r6, #0]
 8005f28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f2c:	4607      	mov	r7, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	b10a      	cbz	r2, 8005f36 <_printf_common+0x26>
 8005f32:	3301      	adds	r3, #1
 8005f34:	6033      	str	r3, [r6, #0]
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	0699      	lsls	r1, r3, #26
 8005f3a:	bf42      	ittt	mi
 8005f3c:	6833      	ldrmi	r3, [r6, #0]
 8005f3e:	3302      	addmi	r3, #2
 8005f40:	6033      	strmi	r3, [r6, #0]
 8005f42:	6825      	ldr	r5, [r4, #0]
 8005f44:	f015 0506 	ands.w	r5, r5, #6
 8005f48:	d106      	bne.n	8005f58 <_printf_common+0x48>
 8005f4a:	f104 0a19 	add.w	sl, r4, #25
 8005f4e:	68e3      	ldr	r3, [r4, #12]
 8005f50:	6832      	ldr	r2, [r6, #0]
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	42ab      	cmp	r3, r5
 8005f56:	dc26      	bgt.n	8005fa6 <_printf_common+0x96>
 8005f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f5c:	1e13      	subs	r3, r2, #0
 8005f5e:	6822      	ldr	r2, [r4, #0]
 8005f60:	bf18      	it	ne
 8005f62:	2301      	movne	r3, #1
 8005f64:	0692      	lsls	r2, r2, #26
 8005f66:	d42b      	bmi.n	8005fc0 <_printf_common+0xb0>
 8005f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	4638      	mov	r0, r7
 8005f70:	47c0      	blx	r8
 8005f72:	3001      	adds	r0, #1
 8005f74:	d01e      	beq.n	8005fb4 <_printf_common+0xa4>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	6922      	ldr	r2, [r4, #16]
 8005f7a:	f003 0306 	and.w	r3, r3, #6
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	bf02      	ittt	eq
 8005f82:	68e5      	ldreq	r5, [r4, #12]
 8005f84:	6833      	ldreq	r3, [r6, #0]
 8005f86:	1aed      	subeq	r5, r5, r3
 8005f88:	68a3      	ldr	r3, [r4, #8]
 8005f8a:	bf0c      	ite	eq
 8005f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f90:	2500      	movne	r5, #0
 8005f92:	4293      	cmp	r3, r2
 8005f94:	bfc4      	itt	gt
 8005f96:	1a9b      	subgt	r3, r3, r2
 8005f98:	18ed      	addgt	r5, r5, r3
 8005f9a:	2600      	movs	r6, #0
 8005f9c:	341a      	adds	r4, #26
 8005f9e:	42b5      	cmp	r5, r6
 8005fa0:	d11a      	bne.n	8005fd8 <_printf_common+0xc8>
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	e008      	b.n	8005fb8 <_printf_common+0xa8>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	4652      	mov	r2, sl
 8005faa:	4649      	mov	r1, r9
 8005fac:	4638      	mov	r0, r7
 8005fae:	47c0      	blx	r8
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d103      	bne.n	8005fbc <_printf_common+0xac>
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbc:	3501      	adds	r5, #1
 8005fbe:	e7c6      	b.n	8005f4e <_printf_common+0x3e>
 8005fc0:	18e1      	adds	r1, r4, r3
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	2030      	movs	r0, #48	; 0x30
 8005fc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fca:	4422      	add	r2, r4
 8005fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	e7c7      	b.n	8005f68 <_printf_common+0x58>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	4622      	mov	r2, r4
 8005fdc:	4649      	mov	r1, r9
 8005fde:	4638      	mov	r0, r7
 8005fe0:	47c0      	blx	r8
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d0e6      	beq.n	8005fb4 <_printf_common+0xa4>
 8005fe6:	3601      	adds	r6, #1
 8005fe8:	e7d9      	b.n	8005f9e <_printf_common+0x8e>
	...

08005fec <_printf_i>:
 8005fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	7e0f      	ldrb	r7, [r1, #24]
 8005ff2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ff4:	2f78      	cmp	r7, #120	; 0x78
 8005ff6:	4691      	mov	r9, r2
 8005ff8:	4680      	mov	r8, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	469a      	mov	sl, r3
 8005ffe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006002:	d807      	bhi.n	8006014 <_printf_i+0x28>
 8006004:	2f62      	cmp	r7, #98	; 0x62
 8006006:	d80a      	bhi.n	800601e <_printf_i+0x32>
 8006008:	2f00      	cmp	r7, #0
 800600a:	f000 80d4 	beq.w	80061b6 <_printf_i+0x1ca>
 800600e:	2f58      	cmp	r7, #88	; 0x58
 8006010:	f000 80c0 	beq.w	8006194 <_printf_i+0x1a8>
 8006014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800601c:	e03a      	b.n	8006094 <_printf_i+0xa8>
 800601e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006022:	2b15      	cmp	r3, #21
 8006024:	d8f6      	bhi.n	8006014 <_printf_i+0x28>
 8006026:	a101      	add	r1, pc, #4	; (adr r1, 800602c <_printf_i+0x40>)
 8006028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800602c:	08006085 	.word	0x08006085
 8006030:	08006099 	.word	0x08006099
 8006034:	08006015 	.word	0x08006015
 8006038:	08006015 	.word	0x08006015
 800603c:	08006015 	.word	0x08006015
 8006040:	08006015 	.word	0x08006015
 8006044:	08006099 	.word	0x08006099
 8006048:	08006015 	.word	0x08006015
 800604c:	08006015 	.word	0x08006015
 8006050:	08006015 	.word	0x08006015
 8006054:	08006015 	.word	0x08006015
 8006058:	0800619d 	.word	0x0800619d
 800605c:	080060c5 	.word	0x080060c5
 8006060:	08006157 	.word	0x08006157
 8006064:	08006015 	.word	0x08006015
 8006068:	08006015 	.word	0x08006015
 800606c:	080061bf 	.word	0x080061bf
 8006070:	08006015 	.word	0x08006015
 8006074:	080060c5 	.word	0x080060c5
 8006078:	08006015 	.word	0x08006015
 800607c:	08006015 	.word	0x08006015
 8006080:	0800615f 	.word	0x0800615f
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	1d1a      	adds	r2, r3, #4
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	602a      	str	r2, [r5, #0]
 800608c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006094:	2301      	movs	r3, #1
 8006096:	e09f      	b.n	80061d8 <_printf_i+0x1ec>
 8006098:	6820      	ldr	r0, [r4, #0]
 800609a:	682b      	ldr	r3, [r5, #0]
 800609c:	0607      	lsls	r7, r0, #24
 800609e:	f103 0104 	add.w	r1, r3, #4
 80060a2:	6029      	str	r1, [r5, #0]
 80060a4:	d501      	bpl.n	80060aa <_printf_i+0xbe>
 80060a6:	681e      	ldr	r6, [r3, #0]
 80060a8:	e003      	b.n	80060b2 <_printf_i+0xc6>
 80060aa:	0646      	lsls	r6, r0, #25
 80060ac:	d5fb      	bpl.n	80060a6 <_printf_i+0xba>
 80060ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80060b2:	2e00      	cmp	r6, #0
 80060b4:	da03      	bge.n	80060be <_printf_i+0xd2>
 80060b6:	232d      	movs	r3, #45	; 0x2d
 80060b8:	4276      	negs	r6, r6
 80060ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060be:	485a      	ldr	r0, [pc, #360]	; (8006228 <_printf_i+0x23c>)
 80060c0:	230a      	movs	r3, #10
 80060c2:	e012      	b.n	80060ea <_printf_i+0xfe>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	6820      	ldr	r0, [r4, #0]
 80060c8:	1d19      	adds	r1, r3, #4
 80060ca:	6029      	str	r1, [r5, #0]
 80060cc:	0605      	lsls	r5, r0, #24
 80060ce:	d501      	bpl.n	80060d4 <_printf_i+0xe8>
 80060d0:	681e      	ldr	r6, [r3, #0]
 80060d2:	e002      	b.n	80060da <_printf_i+0xee>
 80060d4:	0641      	lsls	r1, r0, #25
 80060d6:	d5fb      	bpl.n	80060d0 <_printf_i+0xe4>
 80060d8:	881e      	ldrh	r6, [r3, #0]
 80060da:	4853      	ldr	r0, [pc, #332]	; (8006228 <_printf_i+0x23c>)
 80060dc:	2f6f      	cmp	r7, #111	; 0x6f
 80060de:	bf0c      	ite	eq
 80060e0:	2308      	moveq	r3, #8
 80060e2:	230a      	movne	r3, #10
 80060e4:	2100      	movs	r1, #0
 80060e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060ea:	6865      	ldr	r5, [r4, #4]
 80060ec:	60a5      	str	r5, [r4, #8]
 80060ee:	2d00      	cmp	r5, #0
 80060f0:	bfa2      	ittt	ge
 80060f2:	6821      	ldrge	r1, [r4, #0]
 80060f4:	f021 0104 	bicge.w	r1, r1, #4
 80060f8:	6021      	strge	r1, [r4, #0]
 80060fa:	b90e      	cbnz	r6, 8006100 <_printf_i+0x114>
 80060fc:	2d00      	cmp	r5, #0
 80060fe:	d04b      	beq.n	8006198 <_printf_i+0x1ac>
 8006100:	4615      	mov	r5, r2
 8006102:	fbb6 f1f3 	udiv	r1, r6, r3
 8006106:	fb03 6711 	mls	r7, r3, r1, r6
 800610a:	5dc7      	ldrb	r7, [r0, r7]
 800610c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006110:	4637      	mov	r7, r6
 8006112:	42bb      	cmp	r3, r7
 8006114:	460e      	mov	r6, r1
 8006116:	d9f4      	bls.n	8006102 <_printf_i+0x116>
 8006118:	2b08      	cmp	r3, #8
 800611a:	d10b      	bne.n	8006134 <_printf_i+0x148>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	07de      	lsls	r6, r3, #31
 8006120:	d508      	bpl.n	8006134 <_printf_i+0x148>
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	6861      	ldr	r1, [r4, #4]
 8006126:	4299      	cmp	r1, r3
 8006128:	bfde      	ittt	le
 800612a:	2330      	movle	r3, #48	; 0x30
 800612c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006130:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006134:	1b52      	subs	r2, r2, r5
 8006136:	6122      	str	r2, [r4, #16]
 8006138:	f8cd a000 	str.w	sl, [sp]
 800613c:	464b      	mov	r3, r9
 800613e:	aa03      	add	r2, sp, #12
 8006140:	4621      	mov	r1, r4
 8006142:	4640      	mov	r0, r8
 8006144:	f7ff fee4 	bl	8005f10 <_printf_common>
 8006148:	3001      	adds	r0, #1
 800614a:	d14a      	bne.n	80061e2 <_printf_i+0x1f6>
 800614c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006150:	b004      	add	sp, #16
 8006152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	f043 0320 	orr.w	r3, r3, #32
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	4833      	ldr	r0, [pc, #204]	; (800622c <_printf_i+0x240>)
 8006160:	2778      	movs	r7, #120	; 0x78
 8006162:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	6829      	ldr	r1, [r5, #0]
 800616a:	061f      	lsls	r7, r3, #24
 800616c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006170:	d402      	bmi.n	8006178 <_printf_i+0x18c>
 8006172:	065f      	lsls	r7, r3, #25
 8006174:	bf48      	it	mi
 8006176:	b2b6      	uxthmi	r6, r6
 8006178:	07df      	lsls	r7, r3, #31
 800617a:	bf48      	it	mi
 800617c:	f043 0320 	orrmi.w	r3, r3, #32
 8006180:	6029      	str	r1, [r5, #0]
 8006182:	bf48      	it	mi
 8006184:	6023      	strmi	r3, [r4, #0]
 8006186:	b91e      	cbnz	r6, 8006190 <_printf_i+0x1a4>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	f023 0320 	bic.w	r3, r3, #32
 800618e:	6023      	str	r3, [r4, #0]
 8006190:	2310      	movs	r3, #16
 8006192:	e7a7      	b.n	80060e4 <_printf_i+0xf8>
 8006194:	4824      	ldr	r0, [pc, #144]	; (8006228 <_printf_i+0x23c>)
 8006196:	e7e4      	b.n	8006162 <_printf_i+0x176>
 8006198:	4615      	mov	r5, r2
 800619a:	e7bd      	b.n	8006118 <_printf_i+0x12c>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	6826      	ldr	r6, [r4, #0]
 80061a0:	6961      	ldr	r1, [r4, #20]
 80061a2:	1d18      	adds	r0, r3, #4
 80061a4:	6028      	str	r0, [r5, #0]
 80061a6:	0635      	lsls	r5, r6, #24
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	d501      	bpl.n	80061b0 <_printf_i+0x1c4>
 80061ac:	6019      	str	r1, [r3, #0]
 80061ae:	e002      	b.n	80061b6 <_printf_i+0x1ca>
 80061b0:	0670      	lsls	r0, r6, #25
 80061b2:	d5fb      	bpl.n	80061ac <_printf_i+0x1c0>
 80061b4:	8019      	strh	r1, [r3, #0]
 80061b6:	2300      	movs	r3, #0
 80061b8:	6123      	str	r3, [r4, #16]
 80061ba:	4615      	mov	r5, r2
 80061bc:	e7bc      	b.n	8006138 <_printf_i+0x14c>
 80061be:	682b      	ldr	r3, [r5, #0]
 80061c0:	1d1a      	adds	r2, r3, #4
 80061c2:	602a      	str	r2, [r5, #0]
 80061c4:	681d      	ldr	r5, [r3, #0]
 80061c6:	6862      	ldr	r2, [r4, #4]
 80061c8:	2100      	movs	r1, #0
 80061ca:	4628      	mov	r0, r5
 80061cc:	f7fa f800 	bl	80001d0 <memchr>
 80061d0:	b108      	cbz	r0, 80061d6 <_printf_i+0x1ea>
 80061d2:	1b40      	subs	r0, r0, r5
 80061d4:	6060      	str	r0, [r4, #4]
 80061d6:	6863      	ldr	r3, [r4, #4]
 80061d8:	6123      	str	r3, [r4, #16]
 80061da:	2300      	movs	r3, #0
 80061dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061e0:	e7aa      	b.n	8006138 <_printf_i+0x14c>
 80061e2:	6923      	ldr	r3, [r4, #16]
 80061e4:	462a      	mov	r2, r5
 80061e6:	4649      	mov	r1, r9
 80061e8:	4640      	mov	r0, r8
 80061ea:	47d0      	blx	sl
 80061ec:	3001      	adds	r0, #1
 80061ee:	d0ad      	beq.n	800614c <_printf_i+0x160>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	079b      	lsls	r3, r3, #30
 80061f4:	d413      	bmi.n	800621e <_printf_i+0x232>
 80061f6:	68e0      	ldr	r0, [r4, #12]
 80061f8:	9b03      	ldr	r3, [sp, #12]
 80061fa:	4298      	cmp	r0, r3
 80061fc:	bfb8      	it	lt
 80061fe:	4618      	movlt	r0, r3
 8006200:	e7a6      	b.n	8006150 <_printf_i+0x164>
 8006202:	2301      	movs	r3, #1
 8006204:	4632      	mov	r2, r6
 8006206:	4649      	mov	r1, r9
 8006208:	4640      	mov	r0, r8
 800620a:	47d0      	blx	sl
 800620c:	3001      	adds	r0, #1
 800620e:	d09d      	beq.n	800614c <_printf_i+0x160>
 8006210:	3501      	adds	r5, #1
 8006212:	68e3      	ldr	r3, [r4, #12]
 8006214:	9903      	ldr	r1, [sp, #12]
 8006216:	1a5b      	subs	r3, r3, r1
 8006218:	42ab      	cmp	r3, r5
 800621a:	dcf2      	bgt.n	8006202 <_printf_i+0x216>
 800621c:	e7eb      	b.n	80061f6 <_printf_i+0x20a>
 800621e:	2500      	movs	r5, #0
 8006220:	f104 0619 	add.w	r6, r4, #25
 8006224:	e7f5      	b.n	8006212 <_printf_i+0x226>
 8006226:	bf00      	nop
 8006228:	08009346 	.word	0x08009346
 800622c:	08009357 	.word	0x08009357

08006230 <std>:
 8006230:	2300      	movs	r3, #0
 8006232:	b510      	push	{r4, lr}
 8006234:	4604      	mov	r4, r0
 8006236:	e9c0 3300 	strd	r3, r3, [r0]
 800623a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800623e:	6083      	str	r3, [r0, #8]
 8006240:	8181      	strh	r1, [r0, #12]
 8006242:	6643      	str	r3, [r0, #100]	; 0x64
 8006244:	81c2      	strh	r2, [r0, #14]
 8006246:	6183      	str	r3, [r0, #24]
 8006248:	4619      	mov	r1, r3
 800624a:	2208      	movs	r2, #8
 800624c:	305c      	adds	r0, #92	; 0x5c
 800624e:	f000 f91f 	bl	8006490 <memset>
 8006252:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <std+0x58>)
 8006254:	6263      	str	r3, [r4, #36]	; 0x24
 8006256:	4b0d      	ldr	r3, [pc, #52]	; (800628c <std+0x5c>)
 8006258:	62a3      	str	r3, [r4, #40]	; 0x28
 800625a:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <std+0x60>)
 800625c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800625e:	4b0d      	ldr	r3, [pc, #52]	; (8006294 <std+0x64>)
 8006260:	6323      	str	r3, [r4, #48]	; 0x30
 8006262:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <std+0x68>)
 8006264:	6224      	str	r4, [r4, #32]
 8006266:	429c      	cmp	r4, r3
 8006268:	d006      	beq.n	8006278 <std+0x48>
 800626a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800626e:	4294      	cmp	r4, r2
 8006270:	d002      	beq.n	8006278 <std+0x48>
 8006272:	33d0      	adds	r3, #208	; 0xd0
 8006274:	429c      	cmp	r4, r3
 8006276:	d105      	bne.n	8006284 <std+0x54>
 8006278:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800627c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006280:	f000 b93c 	b.w	80064fc <__retarget_lock_init_recursive>
 8006284:	bd10      	pop	{r4, pc}
 8006286:	bf00      	nop
 8006288:	08007e41 	.word	0x08007e41
 800628c:	08007e63 	.word	0x08007e63
 8006290:	08007e9b 	.word	0x08007e9b
 8006294:	08007ebf 	.word	0x08007ebf
 8006298:	20000434 	.word	0x20000434

0800629c <stdio_exit_handler>:
 800629c:	4a02      	ldr	r2, [pc, #8]	; (80062a8 <stdio_exit_handler+0xc>)
 800629e:	4903      	ldr	r1, [pc, #12]	; (80062ac <stdio_exit_handler+0x10>)
 80062a0:	4803      	ldr	r0, [pc, #12]	; (80062b0 <stdio_exit_handler+0x14>)
 80062a2:	f000 b869 	b.w	8006378 <_fwalk_sglue>
 80062a6:	bf00      	nop
 80062a8:	20000014 	.word	0x20000014
 80062ac:	080076e1 	.word	0x080076e1
 80062b0:	20000020 	.word	0x20000020

080062b4 <cleanup_stdio>:
 80062b4:	6841      	ldr	r1, [r0, #4]
 80062b6:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <cleanup_stdio+0x34>)
 80062b8:	4299      	cmp	r1, r3
 80062ba:	b510      	push	{r4, lr}
 80062bc:	4604      	mov	r4, r0
 80062be:	d001      	beq.n	80062c4 <cleanup_stdio+0x10>
 80062c0:	f001 fa0e 	bl	80076e0 <_fflush_r>
 80062c4:	68a1      	ldr	r1, [r4, #8]
 80062c6:	4b09      	ldr	r3, [pc, #36]	; (80062ec <cleanup_stdio+0x38>)
 80062c8:	4299      	cmp	r1, r3
 80062ca:	d002      	beq.n	80062d2 <cleanup_stdio+0x1e>
 80062cc:	4620      	mov	r0, r4
 80062ce:	f001 fa07 	bl	80076e0 <_fflush_r>
 80062d2:	68e1      	ldr	r1, [r4, #12]
 80062d4:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <cleanup_stdio+0x3c>)
 80062d6:	4299      	cmp	r1, r3
 80062d8:	d004      	beq.n	80062e4 <cleanup_stdio+0x30>
 80062da:	4620      	mov	r0, r4
 80062dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e0:	f001 b9fe 	b.w	80076e0 <_fflush_r>
 80062e4:	bd10      	pop	{r4, pc}
 80062e6:	bf00      	nop
 80062e8:	20000434 	.word	0x20000434
 80062ec:	2000049c 	.word	0x2000049c
 80062f0:	20000504 	.word	0x20000504

080062f4 <global_stdio_init.part.0>:
 80062f4:	b510      	push	{r4, lr}
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <global_stdio_init.part.0+0x30>)
 80062f8:	4c0b      	ldr	r4, [pc, #44]	; (8006328 <global_stdio_init.part.0+0x34>)
 80062fa:	4a0c      	ldr	r2, [pc, #48]	; (800632c <global_stdio_init.part.0+0x38>)
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	4620      	mov	r0, r4
 8006300:	2200      	movs	r2, #0
 8006302:	2104      	movs	r1, #4
 8006304:	f7ff ff94 	bl	8006230 <std>
 8006308:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800630c:	2201      	movs	r2, #1
 800630e:	2109      	movs	r1, #9
 8006310:	f7ff ff8e 	bl	8006230 <std>
 8006314:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006318:	2202      	movs	r2, #2
 800631a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800631e:	2112      	movs	r1, #18
 8006320:	f7ff bf86 	b.w	8006230 <std>
 8006324:	2000056c 	.word	0x2000056c
 8006328:	20000434 	.word	0x20000434
 800632c:	0800629d 	.word	0x0800629d

08006330 <__sfp_lock_acquire>:
 8006330:	4801      	ldr	r0, [pc, #4]	; (8006338 <__sfp_lock_acquire+0x8>)
 8006332:	f000 b8e4 	b.w	80064fe <__retarget_lock_acquire_recursive>
 8006336:	bf00      	nop
 8006338:	20000571 	.word	0x20000571

0800633c <__sfp_lock_release>:
 800633c:	4801      	ldr	r0, [pc, #4]	; (8006344 <__sfp_lock_release+0x8>)
 800633e:	f000 b8df 	b.w	8006500 <__retarget_lock_release_recursive>
 8006342:	bf00      	nop
 8006344:	20000571 	.word	0x20000571

08006348 <__sinit>:
 8006348:	b510      	push	{r4, lr}
 800634a:	4604      	mov	r4, r0
 800634c:	f7ff fff0 	bl	8006330 <__sfp_lock_acquire>
 8006350:	6a23      	ldr	r3, [r4, #32]
 8006352:	b11b      	cbz	r3, 800635c <__sinit+0x14>
 8006354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006358:	f7ff bff0 	b.w	800633c <__sfp_lock_release>
 800635c:	4b04      	ldr	r3, [pc, #16]	; (8006370 <__sinit+0x28>)
 800635e:	6223      	str	r3, [r4, #32]
 8006360:	4b04      	ldr	r3, [pc, #16]	; (8006374 <__sinit+0x2c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1f5      	bne.n	8006354 <__sinit+0xc>
 8006368:	f7ff ffc4 	bl	80062f4 <global_stdio_init.part.0>
 800636c:	e7f2      	b.n	8006354 <__sinit+0xc>
 800636e:	bf00      	nop
 8006370:	080062b5 	.word	0x080062b5
 8006374:	2000056c 	.word	0x2000056c

08006378 <_fwalk_sglue>:
 8006378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800637c:	4607      	mov	r7, r0
 800637e:	4688      	mov	r8, r1
 8006380:	4614      	mov	r4, r2
 8006382:	2600      	movs	r6, #0
 8006384:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006388:	f1b9 0901 	subs.w	r9, r9, #1
 800638c:	d505      	bpl.n	800639a <_fwalk_sglue+0x22>
 800638e:	6824      	ldr	r4, [r4, #0]
 8006390:	2c00      	cmp	r4, #0
 8006392:	d1f7      	bne.n	8006384 <_fwalk_sglue+0xc>
 8006394:	4630      	mov	r0, r6
 8006396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800639a:	89ab      	ldrh	r3, [r5, #12]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d907      	bls.n	80063b0 <_fwalk_sglue+0x38>
 80063a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063a4:	3301      	adds	r3, #1
 80063a6:	d003      	beq.n	80063b0 <_fwalk_sglue+0x38>
 80063a8:	4629      	mov	r1, r5
 80063aa:	4638      	mov	r0, r7
 80063ac:	47c0      	blx	r8
 80063ae:	4306      	orrs	r6, r0
 80063b0:	3568      	adds	r5, #104	; 0x68
 80063b2:	e7e9      	b.n	8006388 <_fwalk_sglue+0x10>

080063b4 <iprintf>:
 80063b4:	b40f      	push	{r0, r1, r2, r3}
 80063b6:	b507      	push	{r0, r1, r2, lr}
 80063b8:	4906      	ldr	r1, [pc, #24]	; (80063d4 <iprintf+0x20>)
 80063ba:	ab04      	add	r3, sp, #16
 80063bc:	6808      	ldr	r0, [r1, #0]
 80063be:	f853 2b04 	ldr.w	r2, [r3], #4
 80063c2:	6881      	ldr	r1, [r0, #8]
 80063c4:	9301      	str	r3, [sp, #4]
 80063c6:	f000 ff43 	bl	8007250 <_vfiprintf_r>
 80063ca:	b003      	add	sp, #12
 80063cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80063d0:	b004      	add	sp, #16
 80063d2:	4770      	bx	lr
 80063d4:	2000006c 	.word	0x2000006c

080063d8 <_puts_r>:
 80063d8:	6a03      	ldr	r3, [r0, #32]
 80063da:	b570      	push	{r4, r5, r6, lr}
 80063dc:	6884      	ldr	r4, [r0, #8]
 80063de:	4605      	mov	r5, r0
 80063e0:	460e      	mov	r6, r1
 80063e2:	b90b      	cbnz	r3, 80063e8 <_puts_r+0x10>
 80063e4:	f7ff ffb0 	bl	8006348 <__sinit>
 80063e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063ea:	07db      	lsls	r3, r3, #31
 80063ec:	d405      	bmi.n	80063fa <_puts_r+0x22>
 80063ee:	89a3      	ldrh	r3, [r4, #12]
 80063f0:	0598      	lsls	r0, r3, #22
 80063f2:	d402      	bmi.n	80063fa <_puts_r+0x22>
 80063f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063f6:	f000 f882 	bl	80064fe <__retarget_lock_acquire_recursive>
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	0719      	lsls	r1, r3, #28
 80063fe:	d513      	bpl.n	8006428 <_puts_r+0x50>
 8006400:	6923      	ldr	r3, [r4, #16]
 8006402:	b18b      	cbz	r3, 8006428 <_puts_r+0x50>
 8006404:	3e01      	subs	r6, #1
 8006406:	68a3      	ldr	r3, [r4, #8]
 8006408:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800640c:	3b01      	subs	r3, #1
 800640e:	60a3      	str	r3, [r4, #8]
 8006410:	b9e9      	cbnz	r1, 800644e <_puts_r+0x76>
 8006412:	2b00      	cmp	r3, #0
 8006414:	da2e      	bge.n	8006474 <_puts_r+0x9c>
 8006416:	4622      	mov	r2, r4
 8006418:	210a      	movs	r1, #10
 800641a:	4628      	mov	r0, r5
 800641c:	f001 fd53 	bl	8007ec6 <__swbuf_r>
 8006420:	3001      	adds	r0, #1
 8006422:	d007      	beq.n	8006434 <_puts_r+0x5c>
 8006424:	250a      	movs	r5, #10
 8006426:	e007      	b.n	8006438 <_puts_r+0x60>
 8006428:	4621      	mov	r1, r4
 800642a:	4628      	mov	r0, r5
 800642c:	f001 fd88 	bl	8007f40 <__swsetup_r>
 8006430:	2800      	cmp	r0, #0
 8006432:	d0e7      	beq.n	8006404 <_puts_r+0x2c>
 8006434:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800643a:	07da      	lsls	r2, r3, #31
 800643c:	d405      	bmi.n	800644a <_puts_r+0x72>
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	059b      	lsls	r3, r3, #22
 8006442:	d402      	bmi.n	800644a <_puts_r+0x72>
 8006444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006446:	f000 f85b 	bl	8006500 <__retarget_lock_release_recursive>
 800644a:	4628      	mov	r0, r5
 800644c:	bd70      	pop	{r4, r5, r6, pc}
 800644e:	2b00      	cmp	r3, #0
 8006450:	da04      	bge.n	800645c <_puts_r+0x84>
 8006452:	69a2      	ldr	r2, [r4, #24]
 8006454:	429a      	cmp	r2, r3
 8006456:	dc06      	bgt.n	8006466 <_puts_r+0x8e>
 8006458:	290a      	cmp	r1, #10
 800645a:	d004      	beq.n	8006466 <_puts_r+0x8e>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	6022      	str	r2, [r4, #0]
 8006462:	7019      	strb	r1, [r3, #0]
 8006464:	e7cf      	b.n	8006406 <_puts_r+0x2e>
 8006466:	4622      	mov	r2, r4
 8006468:	4628      	mov	r0, r5
 800646a:	f001 fd2c 	bl	8007ec6 <__swbuf_r>
 800646e:	3001      	adds	r0, #1
 8006470:	d1c9      	bne.n	8006406 <_puts_r+0x2e>
 8006472:	e7df      	b.n	8006434 <_puts_r+0x5c>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	250a      	movs	r5, #10
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	6022      	str	r2, [r4, #0]
 800647c:	701d      	strb	r5, [r3, #0]
 800647e:	e7db      	b.n	8006438 <_puts_r+0x60>

08006480 <puts>:
 8006480:	4b02      	ldr	r3, [pc, #8]	; (800648c <puts+0xc>)
 8006482:	4601      	mov	r1, r0
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	f7ff bfa7 	b.w	80063d8 <_puts_r>
 800648a:	bf00      	nop
 800648c:	2000006c 	.word	0x2000006c

08006490 <memset>:
 8006490:	4402      	add	r2, r0
 8006492:	4603      	mov	r3, r0
 8006494:	4293      	cmp	r3, r2
 8006496:	d100      	bne.n	800649a <memset+0xa>
 8006498:	4770      	bx	lr
 800649a:	f803 1b01 	strb.w	r1, [r3], #1
 800649e:	e7f9      	b.n	8006494 <memset+0x4>

080064a0 <_localeconv_r>:
 80064a0:	4800      	ldr	r0, [pc, #0]	; (80064a4 <_localeconv_r+0x4>)
 80064a2:	4770      	bx	lr
 80064a4:	20000160 	.word	0x20000160

080064a8 <__errno>:
 80064a8:	4b01      	ldr	r3, [pc, #4]	; (80064b0 <__errno+0x8>)
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	2000006c 	.word	0x2000006c

080064b4 <__libc_init_array>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	4d0d      	ldr	r5, [pc, #52]	; (80064ec <__libc_init_array+0x38>)
 80064b8:	4c0d      	ldr	r4, [pc, #52]	; (80064f0 <__libc_init_array+0x3c>)
 80064ba:	1b64      	subs	r4, r4, r5
 80064bc:	10a4      	asrs	r4, r4, #2
 80064be:	2600      	movs	r6, #0
 80064c0:	42a6      	cmp	r6, r4
 80064c2:	d109      	bne.n	80064d8 <__libc_init_array+0x24>
 80064c4:	4d0b      	ldr	r5, [pc, #44]	; (80064f4 <__libc_init_array+0x40>)
 80064c6:	4c0c      	ldr	r4, [pc, #48]	; (80064f8 <__libc_init_array+0x44>)
 80064c8:	f002 feae 	bl	8009228 <_init>
 80064cc:	1b64      	subs	r4, r4, r5
 80064ce:	10a4      	asrs	r4, r4, #2
 80064d0:	2600      	movs	r6, #0
 80064d2:	42a6      	cmp	r6, r4
 80064d4:	d105      	bne.n	80064e2 <__libc_init_array+0x2e>
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064dc:	4798      	blx	r3
 80064de:	3601      	adds	r6, #1
 80064e0:	e7ee      	b.n	80064c0 <__libc_init_array+0xc>
 80064e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e6:	4798      	blx	r3
 80064e8:	3601      	adds	r6, #1
 80064ea:	e7f2      	b.n	80064d2 <__libc_init_array+0x1e>
 80064ec:	080096d8 	.word	0x080096d8
 80064f0:	080096d8 	.word	0x080096d8
 80064f4:	080096d8 	.word	0x080096d8
 80064f8:	080096dc 	.word	0x080096dc

080064fc <__retarget_lock_init_recursive>:
 80064fc:	4770      	bx	lr

080064fe <__retarget_lock_acquire_recursive>:
 80064fe:	4770      	bx	lr

08006500 <__retarget_lock_release_recursive>:
 8006500:	4770      	bx	lr

08006502 <quorem>:
 8006502:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	6903      	ldr	r3, [r0, #16]
 8006508:	690c      	ldr	r4, [r1, #16]
 800650a:	42a3      	cmp	r3, r4
 800650c:	4607      	mov	r7, r0
 800650e:	db7e      	blt.n	800660e <quorem+0x10c>
 8006510:	3c01      	subs	r4, #1
 8006512:	f101 0814 	add.w	r8, r1, #20
 8006516:	f100 0514 	add.w	r5, r0, #20
 800651a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006524:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006528:	3301      	adds	r3, #1
 800652a:	429a      	cmp	r2, r3
 800652c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006530:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006534:	fbb2 f6f3 	udiv	r6, r2, r3
 8006538:	d331      	bcc.n	800659e <quorem+0x9c>
 800653a:	f04f 0e00 	mov.w	lr, #0
 800653e:	4640      	mov	r0, r8
 8006540:	46ac      	mov	ip, r5
 8006542:	46f2      	mov	sl, lr
 8006544:	f850 2b04 	ldr.w	r2, [r0], #4
 8006548:	b293      	uxth	r3, r2
 800654a:	fb06 e303 	mla	r3, r6, r3, lr
 800654e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006552:	0c1a      	lsrs	r2, r3, #16
 8006554:	b29b      	uxth	r3, r3
 8006556:	ebaa 0303 	sub.w	r3, sl, r3
 800655a:	f8dc a000 	ldr.w	sl, [ip]
 800655e:	fa13 f38a 	uxtah	r3, r3, sl
 8006562:	fb06 220e 	mla	r2, r6, lr, r2
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	9b00      	ldr	r3, [sp, #0]
 800656a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800656e:	b292      	uxth	r2, r2
 8006570:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006578:	f8bd 3000 	ldrh.w	r3, [sp]
 800657c:	4581      	cmp	r9, r0
 800657e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006582:	f84c 3b04 	str.w	r3, [ip], #4
 8006586:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800658a:	d2db      	bcs.n	8006544 <quorem+0x42>
 800658c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006590:	b92b      	cbnz	r3, 800659e <quorem+0x9c>
 8006592:	9b01      	ldr	r3, [sp, #4]
 8006594:	3b04      	subs	r3, #4
 8006596:	429d      	cmp	r5, r3
 8006598:	461a      	mov	r2, r3
 800659a:	d32c      	bcc.n	80065f6 <quorem+0xf4>
 800659c:	613c      	str	r4, [r7, #16]
 800659e:	4638      	mov	r0, r7
 80065a0:	f001 fb4e 	bl	8007c40 <__mcmp>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	db22      	blt.n	80065ee <quorem+0xec>
 80065a8:	3601      	adds	r6, #1
 80065aa:	4629      	mov	r1, r5
 80065ac:	2000      	movs	r0, #0
 80065ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80065b2:	f8d1 c000 	ldr.w	ip, [r1]
 80065b6:	b293      	uxth	r3, r2
 80065b8:	1ac3      	subs	r3, r0, r3
 80065ba:	0c12      	lsrs	r2, r2, #16
 80065bc:	fa13 f38c 	uxtah	r3, r3, ip
 80065c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80065c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065ce:	45c1      	cmp	r9, r8
 80065d0:	f841 3b04 	str.w	r3, [r1], #4
 80065d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065d8:	d2e9      	bcs.n	80065ae <quorem+0xac>
 80065da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065e2:	b922      	cbnz	r2, 80065ee <quorem+0xec>
 80065e4:	3b04      	subs	r3, #4
 80065e6:	429d      	cmp	r5, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	d30a      	bcc.n	8006602 <quorem+0x100>
 80065ec:	613c      	str	r4, [r7, #16]
 80065ee:	4630      	mov	r0, r6
 80065f0:	b003      	add	sp, #12
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	3b04      	subs	r3, #4
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	d1ce      	bne.n	800659c <quorem+0x9a>
 80065fe:	3c01      	subs	r4, #1
 8006600:	e7c9      	b.n	8006596 <quorem+0x94>
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	3b04      	subs	r3, #4
 8006606:	2a00      	cmp	r2, #0
 8006608:	d1f0      	bne.n	80065ec <quorem+0xea>
 800660a:	3c01      	subs	r4, #1
 800660c:	e7eb      	b.n	80065e6 <quorem+0xe4>
 800660e:	2000      	movs	r0, #0
 8006610:	e7ee      	b.n	80065f0 <quorem+0xee>
 8006612:	0000      	movs	r0, r0
 8006614:	0000      	movs	r0, r0
	...

08006618 <_dtoa_r>:
 8006618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	ed2d 8b04 	vpush	{d8-d9}
 8006620:	69c5      	ldr	r5, [r0, #28]
 8006622:	b093      	sub	sp, #76	; 0x4c
 8006624:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006628:	ec57 6b10 	vmov	r6, r7, d0
 800662c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006630:	9107      	str	r1, [sp, #28]
 8006632:	4604      	mov	r4, r0
 8006634:	920a      	str	r2, [sp, #40]	; 0x28
 8006636:	930d      	str	r3, [sp, #52]	; 0x34
 8006638:	b975      	cbnz	r5, 8006658 <_dtoa_r+0x40>
 800663a:	2010      	movs	r0, #16
 800663c:	f000 ff22 	bl	8007484 <malloc>
 8006640:	4602      	mov	r2, r0
 8006642:	61e0      	str	r0, [r4, #28]
 8006644:	b920      	cbnz	r0, 8006650 <_dtoa_r+0x38>
 8006646:	4bae      	ldr	r3, [pc, #696]	; (8006900 <_dtoa_r+0x2e8>)
 8006648:	21ef      	movs	r1, #239	; 0xef
 800664a:	48ae      	ldr	r0, [pc, #696]	; (8006904 <_dtoa_r+0x2ec>)
 800664c:	f001 fdb8 	bl	80081c0 <__assert_func>
 8006650:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006654:	6005      	str	r5, [r0, #0]
 8006656:	60c5      	str	r5, [r0, #12]
 8006658:	69e3      	ldr	r3, [r4, #28]
 800665a:	6819      	ldr	r1, [r3, #0]
 800665c:	b151      	cbz	r1, 8006674 <_dtoa_r+0x5c>
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	604a      	str	r2, [r1, #4]
 8006662:	2301      	movs	r3, #1
 8006664:	4093      	lsls	r3, r2
 8006666:	608b      	str	r3, [r1, #8]
 8006668:	4620      	mov	r0, r4
 800666a:	f001 f8ad 	bl	80077c8 <_Bfree>
 800666e:	69e3      	ldr	r3, [r4, #28]
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	1e3b      	subs	r3, r7, #0
 8006676:	bfbb      	ittet	lt
 8006678:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800667c:	9303      	strlt	r3, [sp, #12]
 800667e:	2300      	movge	r3, #0
 8006680:	2201      	movlt	r2, #1
 8006682:	bfac      	ite	ge
 8006684:	f8c8 3000 	strge.w	r3, [r8]
 8006688:	f8c8 2000 	strlt.w	r2, [r8]
 800668c:	4b9e      	ldr	r3, [pc, #632]	; (8006908 <_dtoa_r+0x2f0>)
 800668e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006692:	ea33 0308 	bics.w	r3, r3, r8
 8006696:	d11b      	bne.n	80066d0 <_dtoa_r+0xb8>
 8006698:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800669a:	f242 730f 	movw	r3, #9999	; 0x270f
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80066a4:	4333      	orrs	r3, r6
 80066a6:	f000 8593 	beq.w	80071d0 <_dtoa_r+0xbb8>
 80066aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066ac:	b963      	cbnz	r3, 80066c8 <_dtoa_r+0xb0>
 80066ae:	4b97      	ldr	r3, [pc, #604]	; (800690c <_dtoa_r+0x2f4>)
 80066b0:	e027      	b.n	8006702 <_dtoa_r+0xea>
 80066b2:	4b97      	ldr	r3, [pc, #604]	; (8006910 <_dtoa_r+0x2f8>)
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	9800      	ldr	r0, [sp, #0]
 80066be:	b013      	add	sp, #76	; 0x4c
 80066c0:	ecbd 8b04 	vpop	{d8-d9}
 80066c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c8:	4b90      	ldr	r3, [pc, #576]	; (800690c <_dtoa_r+0x2f4>)
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	3303      	adds	r3, #3
 80066ce:	e7f3      	b.n	80066b8 <_dtoa_r+0xa0>
 80066d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066d4:	2200      	movs	r2, #0
 80066d6:	ec51 0b17 	vmov	r0, r1, d7
 80066da:	eeb0 8a47 	vmov.f32	s16, s14
 80066de:	eef0 8a67 	vmov.f32	s17, s15
 80066e2:	2300      	movs	r3, #0
 80066e4:	f7fa f9f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80066e8:	4681      	mov	r9, r0
 80066ea:	b160      	cbz	r0, 8006706 <_dtoa_r+0xee>
 80066ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066ee:	2301      	movs	r3, #1
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8568 	beq.w	80071ca <_dtoa_r+0xbb2>
 80066fa:	4b86      	ldr	r3, [pc, #536]	; (8006914 <_dtoa_r+0x2fc>)
 80066fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	3b01      	subs	r3, #1
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	e7da      	b.n	80066bc <_dtoa_r+0xa4>
 8006706:	aa10      	add	r2, sp, #64	; 0x40
 8006708:	a911      	add	r1, sp, #68	; 0x44
 800670a:	4620      	mov	r0, r4
 800670c:	eeb0 0a48 	vmov.f32	s0, s16
 8006710:	eef0 0a68 	vmov.f32	s1, s17
 8006714:	f001 fb3a 	bl	8007d8c <__d2b>
 8006718:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800671c:	4682      	mov	sl, r0
 800671e:	2d00      	cmp	r5, #0
 8006720:	d07f      	beq.n	8006822 <_dtoa_r+0x20a>
 8006722:	ee18 3a90 	vmov	r3, s17
 8006726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800672a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800672e:	ec51 0b18 	vmov	r0, r1, d8
 8006732:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006736:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800673a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800673e:	4619      	mov	r1, r3
 8006740:	2200      	movs	r2, #0
 8006742:	4b75      	ldr	r3, [pc, #468]	; (8006918 <_dtoa_r+0x300>)
 8006744:	f7f9 fda0 	bl	8000288 <__aeabi_dsub>
 8006748:	a367      	add	r3, pc, #412	; (adr r3, 80068e8 <_dtoa_r+0x2d0>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	f7f9 ff53 	bl	80005f8 <__aeabi_dmul>
 8006752:	a367      	add	r3, pc, #412	; (adr r3, 80068f0 <_dtoa_r+0x2d8>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f7f9 fd98 	bl	800028c <__adddf3>
 800675c:	4606      	mov	r6, r0
 800675e:	4628      	mov	r0, r5
 8006760:	460f      	mov	r7, r1
 8006762:	f7f9 fedf 	bl	8000524 <__aeabi_i2d>
 8006766:	a364      	add	r3, pc, #400	; (adr r3, 80068f8 <_dtoa_r+0x2e0>)
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f7f9 ff44 	bl	80005f8 <__aeabi_dmul>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4630      	mov	r0, r6
 8006776:	4639      	mov	r1, r7
 8006778:	f7f9 fd88 	bl	800028c <__adddf3>
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
 8006780:	f7fa f9ea 	bl	8000b58 <__aeabi_d2iz>
 8006784:	2200      	movs	r2, #0
 8006786:	4683      	mov	fp, r0
 8006788:	2300      	movs	r3, #0
 800678a:	4630      	mov	r0, r6
 800678c:	4639      	mov	r1, r7
 800678e:	f7fa f9a5 	bl	8000adc <__aeabi_dcmplt>
 8006792:	b148      	cbz	r0, 80067a8 <_dtoa_r+0x190>
 8006794:	4658      	mov	r0, fp
 8006796:	f7f9 fec5 	bl	8000524 <__aeabi_i2d>
 800679a:	4632      	mov	r2, r6
 800679c:	463b      	mov	r3, r7
 800679e:	f7fa f993 	bl	8000ac8 <__aeabi_dcmpeq>
 80067a2:	b908      	cbnz	r0, 80067a8 <_dtoa_r+0x190>
 80067a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80067a8:	f1bb 0f16 	cmp.w	fp, #22
 80067ac:	d857      	bhi.n	800685e <_dtoa_r+0x246>
 80067ae:	4b5b      	ldr	r3, [pc, #364]	; (800691c <_dtoa_r+0x304>)
 80067b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	ec51 0b18 	vmov	r0, r1, d8
 80067bc:	f7fa f98e 	bl	8000adc <__aeabi_dcmplt>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d04e      	beq.n	8006862 <_dtoa_r+0x24a>
 80067c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80067c8:	2300      	movs	r3, #0
 80067ca:	930c      	str	r3, [sp, #48]	; 0x30
 80067cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067ce:	1b5b      	subs	r3, r3, r5
 80067d0:	1e5a      	subs	r2, r3, #1
 80067d2:	bf45      	ittet	mi
 80067d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80067d8:	9305      	strmi	r3, [sp, #20]
 80067da:	2300      	movpl	r3, #0
 80067dc:	2300      	movmi	r3, #0
 80067de:	9206      	str	r2, [sp, #24]
 80067e0:	bf54      	ite	pl
 80067e2:	9305      	strpl	r3, [sp, #20]
 80067e4:	9306      	strmi	r3, [sp, #24]
 80067e6:	f1bb 0f00 	cmp.w	fp, #0
 80067ea:	db3c      	blt.n	8006866 <_dtoa_r+0x24e>
 80067ec:	9b06      	ldr	r3, [sp, #24]
 80067ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80067f2:	445b      	add	r3, fp
 80067f4:	9306      	str	r3, [sp, #24]
 80067f6:	2300      	movs	r3, #0
 80067f8:	9308      	str	r3, [sp, #32]
 80067fa:	9b07      	ldr	r3, [sp, #28]
 80067fc:	2b09      	cmp	r3, #9
 80067fe:	d868      	bhi.n	80068d2 <_dtoa_r+0x2ba>
 8006800:	2b05      	cmp	r3, #5
 8006802:	bfc4      	itt	gt
 8006804:	3b04      	subgt	r3, #4
 8006806:	9307      	strgt	r3, [sp, #28]
 8006808:	9b07      	ldr	r3, [sp, #28]
 800680a:	f1a3 0302 	sub.w	r3, r3, #2
 800680e:	bfcc      	ite	gt
 8006810:	2500      	movgt	r5, #0
 8006812:	2501      	movle	r5, #1
 8006814:	2b03      	cmp	r3, #3
 8006816:	f200 8085 	bhi.w	8006924 <_dtoa_r+0x30c>
 800681a:	e8df f003 	tbb	[pc, r3]
 800681e:	3b2e      	.short	0x3b2e
 8006820:	5839      	.short	0x5839
 8006822:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006826:	441d      	add	r5, r3
 8006828:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800682c:	2b20      	cmp	r3, #32
 800682e:	bfc1      	itttt	gt
 8006830:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006834:	fa08 f803 	lslgt.w	r8, r8, r3
 8006838:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800683c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006840:	bfd6      	itet	le
 8006842:	f1c3 0320 	rsble	r3, r3, #32
 8006846:	ea48 0003 	orrgt.w	r0, r8, r3
 800684a:	fa06 f003 	lslle.w	r0, r6, r3
 800684e:	f7f9 fe59 	bl	8000504 <__aeabi_ui2d>
 8006852:	2201      	movs	r2, #1
 8006854:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006858:	3d01      	subs	r5, #1
 800685a:	920e      	str	r2, [sp, #56]	; 0x38
 800685c:	e76f      	b.n	800673e <_dtoa_r+0x126>
 800685e:	2301      	movs	r3, #1
 8006860:	e7b3      	b.n	80067ca <_dtoa_r+0x1b2>
 8006862:	900c      	str	r0, [sp, #48]	; 0x30
 8006864:	e7b2      	b.n	80067cc <_dtoa_r+0x1b4>
 8006866:	9b05      	ldr	r3, [sp, #20]
 8006868:	eba3 030b 	sub.w	r3, r3, fp
 800686c:	9305      	str	r3, [sp, #20]
 800686e:	f1cb 0300 	rsb	r3, fp, #0
 8006872:	9308      	str	r3, [sp, #32]
 8006874:	2300      	movs	r3, #0
 8006876:	930b      	str	r3, [sp, #44]	; 0x2c
 8006878:	e7bf      	b.n	80067fa <_dtoa_r+0x1e2>
 800687a:	2300      	movs	r3, #0
 800687c:	9309      	str	r3, [sp, #36]	; 0x24
 800687e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006880:	2b00      	cmp	r3, #0
 8006882:	dc52      	bgt.n	800692a <_dtoa_r+0x312>
 8006884:	2301      	movs	r3, #1
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	9304      	str	r3, [sp, #16]
 800688a:	461a      	mov	r2, r3
 800688c:	920a      	str	r2, [sp, #40]	; 0x28
 800688e:	e00b      	b.n	80068a8 <_dtoa_r+0x290>
 8006890:	2301      	movs	r3, #1
 8006892:	e7f3      	b.n	800687c <_dtoa_r+0x264>
 8006894:	2300      	movs	r3, #0
 8006896:	9309      	str	r3, [sp, #36]	; 0x24
 8006898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689a:	445b      	add	r3, fp
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	3301      	adds	r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	9304      	str	r3, [sp, #16]
 80068a4:	bfb8      	it	lt
 80068a6:	2301      	movlt	r3, #1
 80068a8:	69e0      	ldr	r0, [r4, #28]
 80068aa:	2100      	movs	r1, #0
 80068ac:	2204      	movs	r2, #4
 80068ae:	f102 0614 	add.w	r6, r2, #20
 80068b2:	429e      	cmp	r6, r3
 80068b4:	d93d      	bls.n	8006932 <_dtoa_r+0x31a>
 80068b6:	6041      	str	r1, [r0, #4]
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 ff45 	bl	8007748 <_Balloc>
 80068be:	9000      	str	r0, [sp, #0]
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d139      	bne.n	8006938 <_dtoa_r+0x320>
 80068c4:	4b16      	ldr	r3, [pc, #88]	; (8006920 <_dtoa_r+0x308>)
 80068c6:	4602      	mov	r2, r0
 80068c8:	f240 11af 	movw	r1, #431	; 0x1af
 80068cc:	e6bd      	b.n	800664a <_dtoa_r+0x32>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e7e1      	b.n	8006896 <_dtoa_r+0x27e>
 80068d2:	2501      	movs	r5, #1
 80068d4:	2300      	movs	r3, #0
 80068d6:	9307      	str	r3, [sp, #28]
 80068d8:	9509      	str	r5, [sp, #36]	; 0x24
 80068da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	9304      	str	r3, [sp, #16]
 80068e2:	2200      	movs	r2, #0
 80068e4:	2312      	movs	r3, #18
 80068e6:	e7d1      	b.n	800688c <_dtoa_r+0x274>
 80068e8:	636f4361 	.word	0x636f4361
 80068ec:	3fd287a7 	.word	0x3fd287a7
 80068f0:	8b60c8b3 	.word	0x8b60c8b3
 80068f4:	3fc68a28 	.word	0x3fc68a28
 80068f8:	509f79fb 	.word	0x509f79fb
 80068fc:	3fd34413 	.word	0x3fd34413
 8006900:	08009375 	.word	0x08009375
 8006904:	0800938c 	.word	0x0800938c
 8006908:	7ff00000 	.word	0x7ff00000
 800690c:	08009371 	.word	0x08009371
 8006910:	08009368 	.word	0x08009368
 8006914:	08009345 	.word	0x08009345
 8006918:	3ff80000 	.word	0x3ff80000
 800691c:	08009488 	.word	0x08009488
 8006920:	080093e4 	.word	0x080093e4
 8006924:	2301      	movs	r3, #1
 8006926:	9309      	str	r3, [sp, #36]	; 0x24
 8006928:	e7d7      	b.n	80068da <_dtoa_r+0x2c2>
 800692a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	9304      	str	r3, [sp, #16]
 8006930:	e7ba      	b.n	80068a8 <_dtoa_r+0x290>
 8006932:	3101      	adds	r1, #1
 8006934:	0052      	lsls	r2, r2, #1
 8006936:	e7ba      	b.n	80068ae <_dtoa_r+0x296>
 8006938:	69e3      	ldr	r3, [r4, #28]
 800693a:	9a00      	ldr	r2, [sp, #0]
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	9b04      	ldr	r3, [sp, #16]
 8006940:	2b0e      	cmp	r3, #14
 8006942:	f200 80a8 	bhi.w	8006a96 <_dtoa_r+0x47e>
 8006946:	2d00      	cmp	r5, #0
 8006948:	f000 80a5 	beq.w	8006a96 <_dtoa_r+0x47e>
 800694c:	f1bb 0f00 	cmp.w	fp, #0
 8006950:	dd38      	ble.n	80069c4 <_dtoa_r+0x3ac>
 8006952:	4bc0      	ldr	r3, [pc, #768]	; (8006c54 <_dtoa_r+0x63c>)
 8006954:	f00b 020f 	and.w	r2, fp, #15
 8006958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800695c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006960:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006964:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006968:	d019      	beq.n	800699e <_dtoa_r+0x386>
 800696a:	4bbb      	ldr	r3, [pc, #748]	; (8006c58 <_dtoa_r+0x640>)
 800696c:	ec51 0b18 	vmov	r0, r1, d8
 8006970:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006974:	f7f9 ff6a 	bl	800084c <__aeabi_ddiv>
 8006978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800697c:	f008 080f 	and.w	r8, r8, #15
 8006980:	2503      	movs	r5, #3
 8006982:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006c58 <_dtoa_r+0x640>
 8006986:	f1b8 0f00 	cmp.w	r8, #0
 800698a:	d10a      	bne.n	80069a2 <_dtoa_r+0x38a>
 800698c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006990:	4632      	mov	r2, r6
 8006992:	463b      	mov	r3, r7
 8006994:	f7f9 ff5a 	bl	800084c <__aeabi_ddiv>
 8006998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800699c:	e02b      	b.n	80069f6 <_dtoa_r+0x3de>
 800699e:	2502      	movs	r5, #2
 80069a0:	e7ef      	b.n	8006982 <_dtoa_r+0x36a>
 80069a2:	f018 0f01 	tst.w	r8, #1
 80069a6:	d008      	beq.n	80069ba <_dtoa_r+0x3a2>
 80069a8:	4630      	mov	r0, r6
 80069aa:	4639      	mov	r1, r7
 80069ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069b0:	f7f9 fe22 	bl	80005f8 <__aeabi_dmul>
 80069b4:	3501      	adds	r5, #1
 80069b6:	4606      	mov	r6, r0
 80069b8:	460f      	mov	r7, r1
 80069ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069be:	f109 0908 	add.w	r9, r9, #8
 80069c2:	e7e0      	b.n	8006986 <_dtoa_r+0x36e>
 80069c4:	f000 809f 	beq.w	8006b06 <_dtoa_r+0x4ee>
 80069c8:	f1cb 0600 	rsb	r6, fp, #0
 80069cc:	4ba1      	ldr	r3, [pc, #644]	; (8006c54 <_dtoa_r+0x63c>)
 80069ce:	4fa2      	ldr	r7, [pc, #648]	; (8006c58 <_dtoa_r+0x640>)
 80069d0:	f006 020f 	and.w	r2, r6, #15
 80069d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	ec51 0b18 	vmov	r0, r1, d8
 80069e0:	f7f9 fe0a 	bl	80005f8 <__aeabi_dmul>
 80069e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069e8:	1136      	asrs	r6, r6, #4
 80069ea:	2300      	movs	r3, #0
 80069ec:	2502      	movs	r5, #2
 80069ee:	2e00      	cmp	r6, #0
 80069f0:	d17e      	bne.n	8006af0 <_dtoa_r+0x4d8>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1d0      	bne.n	8006998 <_dtoa_r+0x380>
 80069f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8084 	beq.w	8006b0a <_dtoa_r+0x4f2>
 8006a02:	4b96      	ldr	r3, [pc, #600]	; (8006c5c <_dtoa_r+0x644>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	4640      	mov	r0, r8
 8006a08:	4649      	mov	r1, r9
 8006a0a:	f7fa f867 	bl	8000adc <__aeabi_dcmplt>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d07b      	beq.n	8006b0a <_dtoa_r+0x4f2>
 8006a12:	9b04      	ldr	r3, [sp, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d078      	beq.n	8006b0a <_dtoa_r+0x4f2>
 8006a18:	9b01      	ldr	r3, [sp, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dd39      	ble.n	8006a92 <_dtoa_r+0x47a>
 8006a1e:	4b90      	ldr	r3, [pc, #576]	; (8006c60 <_dtoa_r+0x648>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f7f9 fde7 	bl	80005f8 <__aeabi_dmul>
 8006a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a2e:	9e01      	ldr	r6, [sp, #4]
 8006a30:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006a34:	3501      	adds	r5, #1
 8006a36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f7f9 fd72 	bl	8000524 <__aeabi_i2d>
 8006a40:	4642      	mov	r2, r8
 8006a42:	464b      	mov	r3, r9
 8006a44:	f7f9 fdd8 	bl	80005f8 <__aeabi_dmul>
 8006a48:	4b86      	ldr	r3, [pc, #536]	; (8006c64 <_dtoa_r+0x64c>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f7f9 fc1e 	bl	800028c <__adddf3>
 8006a50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a58:	9303      	str	r3, [sp, #12]
 8006a5a:	2e00      	cmp	r6, #0
 8006a5c:	d158      	bne.n	8006b10 <_dtoa_r+0x4f8>
 8006a5e:	4b82      	ldr	r3, [pc, #520]	; (8006c68 <_dtoa_r+0x650>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	4640      	mov	r0, r8
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7f9 fc0f 	bl	8000288 <__aeabi_dsub>
 8006a6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a6e:	4680      	mov	r8, r0
 8006a70:	4689      	mov	r9, r1
 8006a72:	f7fa f851 	bl	8000b18 <__aeabi_dcmpgt>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	f040 8296 	bne.w	8006fa8 <_dtoa_r+0x990>
 8006a7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a80:	4640      	mov	r0, r8
 8006a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a86:	4649      	mov	r1, r9
 8006a88:	f7fa f828 	bl	8000adc <__aeabi_dcmplt>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	f040 8289 	bne.w	8006fa4 <_dtoa_r+0x98c>
 8006a92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f2c0 814e 	blt.w	8006d3a <_dtoa_r+0x722>
 8006a9e:	f1bb 0f0e 	cmp.w	fp, #14
 8006aa2:	f300 814a 	bgt.w	8006d3a <_dtoa_r+0x722>
 8006aa6:	4b6b      	ldr	r3, [pc, #428]	; (8006c54 <_dtoa_r+0x63c>)
 8006aa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006aac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f280 80dc 	bge.w	8006c70 <_dtoa_r+0x658>
 8006ab8:	9b04      	ldr	r3, [sp, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f300 80d8 	bgt.w	8006c70 <_dtoa_r+0x658>
 8006ac0:	f040 826f 	bne.w	8006fa2 <_dtoa_r+0x98a>
 8006ac4:	4b68      	ldr	r3, [pc, #416]	; (8006c68 <_dtoa_r+0x650>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	f7f9 fd94 	bl	80005f8 <__aeabi_dmul>
 8006ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ad4:	f7fa f816 	bl	8000b04 <__aeabi_dcmpge>
 8006ad8:	9e04      	ldr	r6, [sp, #16]
 8006ada:	4637      	mov	r7, r6
 8006adc:	2800      	cmp	r0, #0
 8006ade:	f040 8245 	bne.w	8006f6c <_dtoa_r+0x954>
 8006ae2:	9d00      	ldr	r5, [sp, #0]
 8006ae4:	2331      	movs	r3, #49	; 0x31
 8006ae6:	f805 3b01 	strb.w	r3, [r5], #1
 8006aea:	f10b 0b01 	add.w	fp, fp, #1
 8006aee:	e241      	b.n	8006f74 <_dtoa_r+0x95c>
 8006af0:	07f2      	lsls	r2, r6, #31
 8006af2:	d505      	bpl.n	8006b00 <_dtoa_r+0x4e8>
 8006af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af8:	f7f9 fd7e 	bl	80005f8 <__aeabi_dmul>
 8006afc:	3501      	adds	r5, #1
 8006afe:	2301      	movs	r3, #1
 8006b00:	1076      	asrs	r6, r6, #1
 8006b02:	3708      	adds	r7, #8
 8006b04:	e773      	b.n	80069ee <_dtoa_r+0x3d6>
 8006b06:	2502      	movs	r5, #2
 8006b08:	e775      	b.n	80069f6 <_dtoa_r+0x3de>
 8006b0a:	9e04      	ldr	r6, [sp, #16]
 8006b0c:	465f      	mov	r7, fp
 8006b0e:	e792      	b.n	8006a36 <_dtoa_r+0x41e>
 8006b10:	9900      	ldr	r1, [sp, #0]
 8006b12:	4b50      	ldr	r3, [pc, #320]	; (8006c54 <_dtoa_r+0x63c>)
 8006b14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b18:	4431      	add	r1, r6
 8006b1a:	9102      	str	r1, [sp, #8]
 8006b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b1e:	eeb0 9a47 	vmov.f32	s18, s14
 8006b22:	eef0 9a67 	vmov.f32	s19, s15
 8006b26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d044      	beq.n	8006bbc <_dtoa_r+0x5a4>
 8006b32:	494e      	ldr	r1, [pc, #312]	; (8006c6c <_dtoa_r+0x654>)
 8006b34:	2000      	movs	r0, #0
 8006b36:	f7f9 fe89 	bl	800084c <__aeabi_ddiv>
 8006b3a:	ec53 2b19 	vmov	r2, r3, d9
 8006b3e:	f7f9 fba3 	bl	8000288 <__aeabi_dsub>
 8006b42:	9d00      	ldr	r5, [sp, #0]
 8006b44:	ec41 0b19 	vmov	d9, r0, r1
 8006b48:	4649      	mov	r1, r9
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f7fa f804 	bl	8000b58 <__aeabi_d2iz>
 8006b50:	4606      	mov	r6, r0
 8006b52:	f7f9 fce7 	bl	8000524 <__aeabi_i2d>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 fb93 	bl	8000288 <__aeabi_dsub>
 8006b62:	3630      	adds	r6, #48	; 0x30
 8006b64:	f805 6b01 	strb.w	r6, [r5], #1
 8006b68:	ec53 2b19 	vmov	r2, r3, d9
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	4689      	mov	r9, r1
 8006b70:	f7f9 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d164      	bne.n	8006c42 <_dtoa_r+0x62a>
 8006b78:	4642      	mov	r2, r8
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	4937      	ldr	r1, [pc, #220]	; (8006c5c <_dtoa_r+0x644>)
 8006b7e:	2000      	movs	r0, #0
 8006b80:	f7f9 fb82 	bl	8000288 <__aeabi_dsub>
 8006b84:	ec53 2b19 	vmov	r2, r3, d9
 8006b88:	f7f9 ffa8 	bl	8000adc <__aeabi_dcmplt>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f040 80b6 	bne.w	8006cfe <_dtoa_r+0x6e6>
 8006b92:	9b02      	ldr	r3, [sp, #8]
 8006b94:	429d      	cmp	r5, r3
 8006b96:	f43f af7c 	beq.w	8006a92 <_dtoa_r+0x47a>
 8006b9a:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <_dtoa_r+0x648>)
 8006b9c:	ec51 0b19 	vmov	r0, r1, d9
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f7f9 fd29 	bl	80005f8 <__aeabi_dmul>
 8006ba6:	4b2e      	ldr	r3, [pc, #184]	; (8006c60 <_dtoa_r+0x648>)
 8006ba8:	ec41 0b19 	vmov	d9, r0, r1
 8006bac:	2200      	movs	r2, #0
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	f7f9 fd21 	bl	80005f8 <__aeabi_dmul>
 8006bb6:	4680      	mov	r8, r0
 8006bb8:	4689      	mov	r9, r1
 8006bba:	e7c5      	b.n	8006b48 <_dtoa_r+0x530>
 8006bbc:	ec51 0b17 	vmov	r0, r1, d7
 8006bc0:	f7f9 fd1a 	bl	80005f8 <__aeabi_dmul>
 8006bc4:	9b02      	ldr	r3, [sp, #8]
 8006bc6:	9d00      	ldr	r5, [sp, #0]
 8006bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bca:	ec41 0b19 	vmov	d9, r0, r1
 8006bce:	4649      	mov	r1, r9
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	f7f9 ffc1 	bl	8000b58 <__aeabi_d2iz>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	f7f9 fca4 	bl	8000524 <__aeabi_i2d>
 8006bdc:	3630      	adds	r6, #48	; 0x30
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4640      	mov	r0, r8
 8006be4:	4649      	mov	r1, r9
 8006be6:	f7f9 fb4f 	bl	8000288 <__aeabi_dsub>
 8006bea:	f805 6b01 	strb.w	r6, [r5], #1
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	429d      	cmp	r5, r3
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	4689      	mov	r9, r1
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	d124      	bne.n	8006c46 <_dtoa_r+0x62e>
 8006bfc:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <_dtoa_r+0x654>)
 8006bfe:	ec51 0b19 	vmov	r0, r1, d9
 8006c02:	f7f9 fb43 	bl	800028c <__adddf3>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	f7f9 ff83 	bl	8000b18 <__aeabi_dcmpgt>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d173      	bne.n	8006cfe <_dtoa_r+0x6e6>
 8006c16:	ec53 2b19 	vmov	r2, r3, d9
 8006c1a:	4914      	ldr	r1, [pc, #80]	; (8006c6c <_dtoa_r+0x654>)
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	f7f9 fb33 	bl	8000288 <__aeabi_dsub>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4640      	mov	r0, r8
 8006c28:	4649      	mov	r1, r9
 8006c2a:	f7f9 ff57 	bl	8000adc <__aeabi_dcmplt>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f43f af2f 	beq.w	8006a92 <_dtoa_r+0x47a>
 8006c34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c36:	1e6b      	subs	r3, r5, #1
 8006c38:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c3e:	2b30      	cmp	r3, #48	; 0x30
 8006c40:	d0f8      	beq.n	8006c34 <_dtoa_r+0x61c>
 8006c42:	46bb      	mov	fp, r7
 8006c44:	e04a      	b.n	8006cdc <_dtoa_r+0x6c4>
 8006c46:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <_dtoa_r+0x648>)
 8006c48:	f7f9 fcd6 	bl	80005f8 <__aeabi_dmul>
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	4689      	mov	r9, r1
 8006c50:	e7bd      	b.n	8006bce <_dtoa_r+0x5b6>
 8006c52:	bf00      	nop
 8006c54:	08009488 	.word	0x08009488
 8006c58:	08009460 	.word	0x08009460
 8006c5c:	3ff00000 	.word	0x3ff00000
 8006c60:	40240000 	.word	0x40240000
 8006c64:	401c0000 	.word	0x401c0000
 8006c68:	40140000 	.word	0x40140000
 8006c6c:	3fe00000 	.word	0x3fe00000
 8006c70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c74:	9d00      	ldr	r5, [sp, #0]
 8006c76:	4642      	mov	r2, r8
 8006c78:	464b      	mov	r3, r9
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	f7f9 fde5 	bl	800084c <__aeabi_ddiv>
 8006c82:	f7f9 ff69 	bl	8000b58 <__aeabi_d2iz>
 8006c86:	9001      	str	r0, [sp, #4]
 8006c88:	f7f9 fc4c 	bl	8000524 <__aeabi_i2d>
 8006c8c:	4642      	mov	r2, r8
 8006c8e:	464b      	mov	r3, r9
 8006c90:	f7f9 fcb2 	bl	80005f8 <__aeabi_dmul>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4630      	mov	r0, r6
 8006c9a:	4639      	mov	r1, r7
 8006c9c:	f7f9 faf4 	bl	8000288 <__aeabi_dsub>
 8006ca0:	9e01      	ldr	r6, [sp, #4]
 8006ca2:	9f04      	ldr	r7, [sp, #16]
 8006ca4:	3630      	adds	r6, #48	; 0x30
 8006ca6:	f805 6b01 	strb.w	r6, [r5], #1
 8006caa:	9e00      	ldr	r6, [sp, #0]
 8006cac:	1bae      	subs	r6, r5, r6
 8006cae:	42b7      	cmp	r7, r6
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	d134      	bne.n	8006d20 <_dtoa_r+0x708>
 8006cb6:	f7f9 fae9 	bl	800028c <__adddf3>
 8006cba:	4642      	mov	r2, r8
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	460f      	mov	r7, r1
 8006cc2:	f7f9 ff29 	bl	8000b18 <__aeabi_dcmpgt>
 8006cc6:	b9c8      	cbnz	r0, 8006cfc <_dtoa_r+0x6e4>
 8006cc8:	4642      	mov	r2, r8
 8006cca:	464b      	mov	r3, r9
 8006ccc:	4630      	mov	r0, r6
 8006cce:	4639      	mov	r1, r7
 8006cd0:	f7f9 fefa 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cd4:	b110      	cbz	r0, 8006cdc <_dtoa_r+0x6c4>
 8006cd6:	9b01      	ldr	r3, [sp, #4]
 8006cd8:	07db      	lsls	r3, r3, #31
 8006cda:	d40f      	bmi.n	8006cfc <_dtoa_r+0x6e4>
 8006cdc:	4651      	mov	r1, sl
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f000 fd72 	bl	80077c8 <_Bfree>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ce8:	702b      	strb	r3, [r5, #0]
 8006cea:	f10b 0301 	add.w	r3, fp, #1
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f43f ace2 	beq.w	80066bc <_dtoa_r+0xa4>
 8006cf8:	601d      	str	r5, [r3, #0]
 8006cfa:	e4df      	b.n	80066bc <_dtoa_r+0xa4>
 8006cfc:	465f      	mov	r7, fp
 8006cfe:	462b      	mov	r3, r5
 8006d00:	461d      	mov	r5, r3
 8006d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d06:	2a39      	cmp	r2, #57	; 0x39
 8006d08:	d106      	bne.n	8006d18 <_dtoa_r+0x700>
 8006d0a:	9a00      	ldr	r2, [sp, #0]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d1f7      	bne.n	8006d00 <_dtoa_r+0x6e8>
 8006d10:	9900      	ldr	r1, [sp, #0]
 8006d12:	2230      	movs	r2, #48	; 0x30
 8006d14:	3701      	adds	r7, #1
 8006d16:	700a      	strb	r2, [r1, #0]
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	3201      	adds	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	e790      	b.n	8006c42 <_dtoa_r+0x62a>
 8006d20:	4ba3      	ldr	r3, [pc, #652]	; (8006fb0 <_dtoa_r+0x998>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	f7f9 fc68 	bl	80005f8 <__aeabi_dmul>
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	460f      	mov	r7, r1
 8006d30:	f7f9 feca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d09e      	beq.n	8006c76 <_dtoa_r+0x65e>
 8006d38:	e7d0      	b.n	8006cdc <_dtoa_r+0x6c4>
 8006d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d3c:	2a00      	cmp	r2, #0
 8006d3e:	f000 80ca 	beq.w	8006ed6 <_dtoa_r+0x8be>
 8006d42:	9a07      	ldr	r2, [sp, #28]
 8006d44:	2a01      	cmp	r2, #1
 8006d46:	f300 80ad 	bgt.w	8006ea4 <_dtoa_r+0x88c>
 8006d4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d4c:	2a00      	cmp	r2, #0
 8006d4e:	f000 80a5 	beq.w	8006e9c <_dtoa_r+0x884>
 8006d52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d56:	9e08      	ldr	r6, [sp, #32]
 8006d58:	9d05      	ldr	r5, [sp, #20]
 8006d5a:	9a05      	ldr	r2, [sp, #20]
 8006d5c:	441a      	add	r2, r3
 8006d5e:	9205      	str	r2, [sp, #20]
 8006d60:	9a06      	ldr	r2, [sp, #24]
 8006d62:	2101      	movs	r1, #1
 8006d64:	441a      	add	r2, r3
 8006d66:	4620      	mov	r0, r4
 8006d68:	9206      	str	r2, [sp, #24]
 8006d6a:	f000 fde3 	bl	8007934 <__i2b>
 8006d6e:	4607      	mov	r7, r0
 8006d70:	b165      	cbz	r5, 8006d8c <_dtoa_r+0x774>
 8006d72:	9b06      	ldr	r3, [sp, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dd09      	ble.n	8006d8c <_dtoa_r+0x774>
 8006d78:	42ab      	cmp	r3, r5
 8006d7a:	9a05      	ldr	r2, [sp, #20]
 8006d7c:	bfa8      	it	ge
 8006d7e:	462b      	movge	r3, r5
 8006d80:	1ad2      	subs	r2, r2, r3
 8006d82:	9205      	str	r2, [sp, #20]
 8006d84:	9a06      	ldr	r2, [sp, #24]
 8006d86:	1aed      	subs	r5, r5, r3
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	9306      	str	r3, [sp, #24]
 8006d8c:	9b08      	ldr	r3, [sp, #32]
 8006d8e:	b1f3      	cbz	r3, 8006dce <_dtoa_r+0x7b6>
 8006d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80a3 	beq.w	8006ede <_dtoa_r+0x8c6>
 8006d98:	2e00      	cmp	r6, #0
 8006d9a:	dd10      	ble.n	8006dbe <_dtoa_r+0x7a6>
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	4632      	mov	r2, r6
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 fe87 	bl	8007ab4 <__pow5mult>
 8006da6:	4652      	mov	r2, sl
 8006da8:	4601      	mov	r1, r0
 8006daa:	4607      	mov	r7, r0
 8006dac:	4620      	mov	r0, r4
 8006dae:	f000 fdd7 	bl	8007960 <__multiply>
 8006db2:	4651      	mov	r1, sl
 8006db4:	4680      	mov	r8, r0
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 fd06 	bl	80077c8 <_Bfree>
 8006dbc:	46c2      	mov	sl, r8
 8006dbe:	9b08      	ldr	r3, [sp, #32]
 8006dc0:	1b9a      	subs	r2, r3, r6
 8006dc2:	d004      	beq.n	8006dce <_dtoa_r+0x7b6>
 8006dc4:	4651      	mov	r1, sl
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f000 fe74 	bl	8007ab4 <__pow5mult>
 8006dcc:	4682      	mov	sl, r0
 8006dce:	2101      	movs	r1, #1
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fdaf 	bl	8007934 <__i2b>
 8006dd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	4606      	mov	r6, r0
 8006ddc:	f340 8081 	ble.w	8006ee2 <_dtoa_r+0x8ca>
 8006de0:	461a      	mov	r2, r3
 8006de2:	4601      	mov	r1, r0
 8006de4:	4620      	mov	r0, r4
 8006de6:	f000 fe65 	bl	8007ab4 <__pow5mult>
 8006dea:	9b07      	ldr	r3, [sp, #28]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	4606      	mov	r6, r0
 8006df0:	dd7a      	ble.n	8006ee8 <_dtoa_r+0x8d0>
 8006df2:	f04f 0800 	mov.w	r8, #0
 8006df6:	6933      	ldr	r3, [r6, #16]
 8006df8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dfc:	6918      	ldr	r0, [r3, #16]
 8006dfe:	f000 fd4b 	bl	8007898 <__hi0bits>
 8006e02:	f1c0 0020 	rsb	r0, r0, #32
 8006e06:	9b06      	ldr	r3, [sp, #24]
 8006e08:	4418      	add	r0, r3
 8006e0a:	f010 001f 	ands.w	r0, r0, #31
 8006e0e:	f000 8094 	beq.w	8006f3a <_dtoa_r+0x922>
 8006e12:	f1c0 0320 	rsb	r3, r0, #32
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	f340 8085 	ble.w	8006f26 <_dtoa_r+0x90e>
 8006e1c:	9b05      	ldr	r3, [sp, #20]
 8006e1e:	f1c0 001c 	rsb	r0, r0, #28
 8006e22:	4403      	add	r3, r0
 8006e24:	9305      	str	r3, [sp, #20]
 8006e26:	9b06      	ldr	r3, [sp, #24]
 8006e28:	4403      	add	r3, r0
 8006e2a:	4405      	add	r5, r0
 8006e2c:	9306      	str	r3, [sp, #24]
 8006e2e:	9b05      	ldr	r3, [sp, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	dd05      	ble.n	8006e40 <_dtoa_r+0x828>
 8006e34:	4651      	mov	r1, sl
 8006e36:	461a      	mov	r2, r3
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 fe95 	bl	8007b68 <__lshift>
 8006e3e:	4682      	mov	sl, r0
 8006e40:	9b06      	ldr	r3, [sp, #24]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	dd05      	ble.n	8006e52 <_dtoa_r+0x83a>
 8006e46:	4631      	mov	r1, r6
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 fe8c 	bl	8007b68 <__lshift>
 8006e50:	4606      	mov	r6, r0
 8006e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d072      	beq.n	8006f3e <_dtoa_r+0x926>
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4650      	mov	r0, sl
 8006e5c:	f000 fef0 	bl	8007c40 <__mcmp>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	da6c      	bge.n	8006f3e <_dtoa_r+0x926>
 8006e64:	2300      	movs	r3, #0
 8006e66:	4651      	mov	r1, sl
 8006e68:	220a      	movs	r2, #10
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 fcce 	bl	800780c <__multadd>
 8006e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006e76:	4682      	mov	sl, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 81b0 	beq.w	80071de <_dtoa_r+0xbc6>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	4639      	mov	r1, r7
 8006e82:	220a      	movs	r2, #10
 8006e84:	4620      	mov	r0, r4
 8006e86:	f000 fcc1 	bl	800780c <__multadd>
 8006e8a:	9b01      	ldr	r3, [sp, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	4607      	mov	r7, r0
 8006e90:	f300 8096 	bgt.w	8006fc0 <_dtoa_r+0x9a8>
 8006e94:	9b07      	ldr	r3, [sp, #28]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	dc59      	bgt.n	8006f4e <_dtoa_r+0x936>
 8006e9a:	e091      	b.n	8006fc0 <_dtoa_r+0x9a8>
 8006e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ea2:	e758      	b.n	8006d56 <_dtoa_r+0x73e>
 8006ea4:	9b04      	ldr	r3, [sp, #16]
 8006ea6:	1e5e      	subs	r6, r3, #1
 8006ea8:	9b08      	ldr	r3, [sp, #32]
 8006eaa:	42b3      	cmp	r3, r6
 8006eac:	bfbf      	itttt	lt
 8006eae:	9b08      	ldrlt	r3, [sp, #32]
 8006eb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006eb2:	9608      	strlt	r6, [sp, #32]
 8006eb4:	1af3      	sublt	r3, r6, r3
 8006eb6:	bfb4      	ite	lt
 8006eb8:	18d2      	addlt	r2, r2, r3
 8006eba:	1b9e      	subge	r6, r3, r6
 8006ebc:	9b04      	ldr	r3, [sp, #16]
 8006ebe:	bfbc      	itt	lt
 8006ec0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006ec2:	2600      	movlt	r6, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfb7      	itett	lt
 8006ec8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ecc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ed0:	1a9d      	sublt	r5, r3, r2
 8006ed2:	2300      	movlt	r3, #0
 8006ed4:	e741      	b.n	8006d5a <_dtoa_r+0x742>
 8006ed6:	9e08      	ldr	r6, [sp, #32]
 8006ed8:	9d05      	ldr	r5, [sp, #20]
 8006eda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006edc:	e748      	b.n	8006d70 <_dtoa_r+0x758>
 8006ede:	9a08      	ldr	r2, [sp, #32]
 8006ee0:	e770      	b.n	8006dc4 <_dtoa_r+0x7ac>
 8006ee2:	9b07      	ldr	r3, [sp, #28]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	dc19      	bgt.n	8006f1c <_dtoa_r+0x904>
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	b9bb      	cbnz	r3, 8006f1c <_dtoa_r+0x904>
 8006eec:	9b03      	ldr	r3, [sp, #12]
 8006eee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ef2:	b99b      	cbnz	r3, 8006f1c <_dtoa_r+0x904>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006efa:	0d1b      	lsrs	r3, r3, #20
 8006efc:	051b      	lsls	r3, r3, #20
 8006efe:	b183      	cbz	r3, 8006f22 <_dtoa_r+0x90a>
 8006f00:	9b05      	ldr	r3, [sp, #20]
 8006f02:	3301      	adds	r3, #1
 8006f04:	9305      	str	r3, [sp, #20]
 8006f06:	9b06      	ldr	r3, [sp, #24]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	9306      	str	r3, [sp, #24]
 8006f0c:	f04f 0801 	mov.w	r8, #1
 8006f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f47f af6f 	bne.w	8006df6 <_dtoa_r+0x7de>
 8006f18:	2001      	movs	r0, #1
 8006f1a:	e774      	b.n	8006e06 <_dtoa_r+0x7ee>
 8006f1c:	f04f 0800 	mov.w	r8, #0
 8006f20:	e7f6      	b.n	8006f10 <_dtoa_r+0x8f8>
 8006f22:	4698      	mov	r8, r3
 8006f24:	e7f4      	b.n	8006f10 <_dtoa_r+0x8f8>
 8006f26:	d082      	beq.n	8006e2e <_dtoa_r+0x816>
 8006f28:	9a05      	ldr	r2, [sp, #20]
 8006f2a:	331c      	adds	r3, #28
 8006f2c:	441a      	add	r2, r3
 8006f2e:	9205      	str	r2, [sp, #20]
 8006f30:	9a06      	ldr	r2, [sp, #24]
 8006f32:	441a      	add	r2, r3
 8006f34:	441d      	add	r5, r3
 8006f36:	9206      	str	r2, [sp, #24]
 8006f38:	e779      	b.n	8006e2e <_dtoa_r+0x816>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	e7f4      	b.n	8006f28 <_dtoa_r+0x910>
 8006f3e:	9b04      	ldr	r3, [sp, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dc37      	bgt.n	8006fb4 <_dtoa_r+0x99c>
 8006f44:	9b07      	ldr	r3, [sp, #28]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	dd34      	ble.n	8006fb4 <_dtoa_r+0x99c>
 8006f4a:	9b04      	ldr	r3, [sp, #16]
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	b963      	cbnz	r3, 8006f6c <_dtoa_r+0x954>
 8006f52:	4631      	mov	r1, r6
 8006f54:	2205      	movs	r2, #5
 8006f56:	4620      	mov	r0, r4
 8006f58:	f000 fc58 	bl	800780c <__multadd>
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	4606      	mov	r6, r0
 8006f60:	4650      	mov	r0, sl
 8006f62:	f000 fe6d 	bl	8007c40 <__mcmp>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f73f adbb 	bgt.w	8006ae2 <_dtoa_r+0x4ca>
 8006f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f6e:	9d00      	ldr	r5, [sp, #0]
 8006f70:	ea6f 0b03 	mvn.w	fp, r3
 8006f74:	f04f 0800 	mov.w	r8, #0
 8006f78:	4631      	mov	r1, r6
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f000 fc24 	bl	80077c8 <_Bfree>
 8006f80:	2f00      	cmp	r7, #0
 8006f82:	f43f aeab 	beq.w	8006cdc <_dtoa_r+0x6c4>
 8006f86:	f1b8 0f00 	cmp.w	r8, #0
 8006f8a:	d005      	beq.n	8006f98 <_dtoa_r+0x980>
 8006f8c:	45b8      	cmp	r8, r7
 8006f8e:	d003      	beq.n	8006f98 <_dtoa_r+0x980>
 8006f90:	4641      	mov	r1, r8
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 fc18 	bl	80077c8 <_Bfree>
 8006f98:	4639      	mov	r1, r7
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 fc14 	bl	80077c8 <_Bfree>
 8006fa0:	e69c      	b.n	8006cdc <_dtoa_r+0x6c4>
 8006fa2:	2600      	movs	r6, #0
 8006fa4:	4637      	mov	r7, r6
 8006fa6:	e7e1      	b.n	8006f6c <_dtoa_r+0x954>
 8006fa8:	46bb      	mov	fp, r7
 8006faa:	4637      	mov	r7, r6
 8006fac:	e599      	b.n	8006ae2 <_dtoa_r+0x4ca>
 8006fae:	bf00      	nop
 8006fb0:	40240000 	.word	0x40240000
 8006fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80c8 	beq.w	800714c <_dtoa_r+0xb34>
 8006fbc:	9b04      	ldr	r3, [sp, #16]
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	2d00      	cmp	r5, #0
 8006fc2:	dd05      	ble.n	8006fd0 <_dtoa_r+0x9b8>
 8006fc4:	4639      	mov	r1, r7
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 fdcd 	bl	8007b68 <__lshift>
 8006fce:	4607      	mov	r7, r0
 8006fd0:	f1b8 0f00 	cmp.w	r8, #0
 8006fd4:	d05b      	beq.n	800708e <_dtoa_r+0xa76>
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fbb5 	bl	8007748 <_Balloc>
 8006fde:	4605      	mov	r5, r0
 8006fe0:	b928      	cbnz	r0, 8006fee <_dtoa_r+0x9d6>
 8006fe2:	4b83      	ldr	r3, [pc, #524]	; (80071f0 <_dtoa_r+0xbd8>)
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006fea:	f7ff bb2e 	b.w	800664a <_dtoa_r+0x32>
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	3202      	adds	r2, #2
 8006ff2:	0092      	lsls	r2, r2, #2
 8006ff4:	f107 010c 	add.w	r1, r7, #12
 8006ff8:	300c      	adds	r0, #12
 8006ffa:	f001 f8d3 	bl	80081a4 <memcpy>
 8006ffe:	2201      	movs	r2, #1
 8007000:	4629      	mov	r1, r5
 8007002:	4620      	mov	r0, r4
 8007004:	f000 fdb0 	bl	8007b68 <__lshift>
 8007008:	9b00      	ldr	r3, [sp, #0]
 800700a:	3301      	adds	r3, #1
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007012:	4413      	add	r3, r2
 8007014:	9308      	str	r3, [sp, #32]
 8007016:	9b02      	ldr	r3, [sp, #8]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	46b8      	mov	r8, r7
 800701e:	9306      	str	r3, [sp, #24]
 8007020:	4607      	mov	r7, r0
 8007022:	9b04      	ldr	r3, [sp, #16]
 8007024:	4631      	mov	r1, r6
 8007026:	3b01      	subs	r3, #1
 8007028:	4650      	mov	r0, sl
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	f7ff fa69 	bl	8006502 <quorem>
 8007030:	4641      	mov	r1, r8
 8007032:	9002      	str	r0, [sp, #8]
 8007034:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007038:	4650      	mov	r0, sl
 800703a:	f000 fe01 	bl	8007c40 <__mcmp>
 800703e:	463a      	mov	r2, r7
 8007040:	9005      	str	r0, [sp, #20]
 8007042:	4631      	mov	r1, r6
 8007044:	4620      	mov	r0, r4
 8007046:	f000 fe17 	bl	8007c78 <__mdiff>
 800704a:	68c2      	ldr	r2, [r0, #12]
 800704c:	4605      	mov	r5, r0
 800704e:	bb02      	cbnz	r2, 8007092 <_dtoa_r+0xa7a>
 8007050:	4601      	mov	r1, r0
 8007052:	4650      	mov	r0, sl
 8007054:	f000 fdf4 	bl	8007c40 <__mcmp>
 8007058:	4602      	mov	r2, r0
 800705a:	4629      	mov	r1, r5
 800705c:	4620      	mov	r0, r4
 800705e:	9209      	str	r2, [sp, #36]	; 0x24
 8007060:	f000 fbb2 	bl	80077c8 <_Bfree>
 8007064:	9b07      	ldr	r3, [sp, #28]
 8007066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007068:	9d04      	ldr	r5, [sp, #16]
 800706a:	ea43 0102 	orr.w	r1, r3, r2
 800706e:	9b06      	ldr	r3, [sp, #24]
 8007070:	4319      	orrs	r1, r3
 8007072:	d110      	bne.n	8007096 <_dtoa_r+0xa7e>
 8007074:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007078:	d029      	beq.n	80070ce <_dtoa_r+0xab6>
 800707a:	9b05      	ldr	r3, [sp, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	dd02      	ble.n	8007086 <_dtoa_r+0xa6e>
 8007080:	9b02      	ldr	r3, [sp, #8]
 8007082:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	f883 9000 	strb.w	r9, [r3]
 800708c:	e774      	b.n	8006f78 <_dtoa_r+0x960>
 800708e:	4638      	mov	r0, r7
 8007090:	e7ba      	b.n	8007008 <_dtoa_r+0x9f0>
 8007092:	2201      	movs	r2, #1
 8007094:	e7e1      	b.n	800705a <_dtoa_r+0xa42>
 8007096:	9b05      	ldr	r3, [sp, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	db04      	blt.n	80070a6 <_dtoa_r+0xa8e>
 800709c:	9907      	ldr	r1, [sp, #28]
 800709e:	430b      	orrs	r3, r1
 80070a0:	9906      	ldr	r1, [sp, #24]
 80070a2:	430b      	orrs	r3, r1
 80070a4:	d120      	bne.n	80070e8 <_dtoa_r+0xad0>
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	dded      	ble.n	8007086 <_dtoa_r+0xa6e>
 80070aa:	4651      	mov	r1, sl
 80070ac:	2201      	movs	r2, #1
 80070ae:	4620      	mov	r0, r4
 80070b0:	f000 fd5a 	bl	8007b68 <__lshift>
 80070b4:	4631      	mov	r1, r6
 80070b6:	4682      	mov	sl, r0
 80070b8:	f000 fdc2 	bl	8007c40 <__mcmp>
 80070bc:	2800      	cmp	r0, #0
 80070be:	dc03      	bgt.n	80070c8 <_dtoa_r+0xab0>
 80070c0:	d1e1      	bne.n	8007086 <_dtoa_r+0xa6e>
 80070c2:	f019 0f01 	tst.w	r9, #1
 80070c6:	d0de      	beq.n	8007086 <_dtoa_r+0xa6e>
 80070c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070cc:	d1d8      	bne.n	8007080 <_dtoa_r+0xa68>
 80070ce:	9a01      	ldr	r2, [sp, #4]
 80070d0:	2339      	movs	r3, #57	; 0x39
 80070d2:	7013      	strb	r3, [r2, #0]
 80070d4:	462b      	mov	r3, r5
 80070d6:	461d      	mov	r5, r3
 80070d8:	3b01      	subs	r3, #1
 80070da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070de:	2a39      	cmp	r2, #57	; 0x39
 80070e0:	d06c      	beq.n	80071bc <_dtoa_r+0xba4>
 80070e2:	3201      	adds	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	e747      	b.n	8006f78 <_dtoa_r+0x960>
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	dd07      	ble.n	80070fc <_dtoa_r+0xae4>
 80070ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070f0:	d0ed      	beq.n	80070ce <_dtoa_r+0xab6>
 80070f2:	9a01      	ldr	r2, [sp, #4]
 80070f4:	f109 0301 	add.w	r3, r9, #1
 80070f8:	7013      	strb	r3, [r2, #0]
 80070fa:	e73d      	b.n	8006f78 <_dtoa_r+0x960>
 80070fc:	9b04      	ldr	r3, [sp, #16]
 80070fe:	9a08      	ldr	r2, [sp, #32]
 8007100:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007104:	4293      	cmp	r3, r2
 8007106:	d043      	beq.n	8007190 <_dtoa_r+0xb78>
 8007108:	4651      	mov	r1, sl
 800710a:	2300      	movs	r3, #0
 800710c:	220a      	movs	r2, #10
 800710e:	4620      	mov	r0, r4
 8007110:	f000 fb7c 	bl	800780c <__multadd>
 8007114:	45b8      	cmp	r8, r7
 8007116:	4682      	mov	sl, r0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	f04f 020a 	mov.w	r2, #10
 8007120:	4641      	mov	r1, r8
 8007122:	4620      	mov	r0, r4
 8007124:	d107      	bne.n	8007136 <_dtoa_r+0xb1e>
 8007126:	f000 fb71 	bl	800780c <__multadd>
 800712a:	4680      	mov	r8, r0
 800712c:	4607      	mov	r7, r0
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	3301      	adds	r3, #1
 8007132:	9304      	str	r3, [sp, #16]
 8007134:	e775      	b.n	8007022 <_dtoa_r+0xa0a>
 8007136:	f000 fb69 	bl	800780c <__multadd>
 800713a:	4639      	mov	r1, r7
 800713c:	4680      	mov	r8, r0
 800713e:	2300      	movs	r3, #0
 8007140:	220a      	movs	r2, #10
 8007142:	4620      	mov	r0, r4
 8007144:	f000 fb62 	bl	800780c <__multadd>
 8007148:	4607      	mov	r7, r0
 800714a:	e7f0      	b.n	800712e <_dtoa_r+0xb16>
 800714c:	9b04      	ldr	r3, [sp, #16]
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	9d00      	ldr	r5, [sp, #0]
 8007152:	4631      	mov	r1, r6
 8007154:	4650      	mov	r0, sl
 8007156:	f7ff f9d4 	bl	8006502 <quorem>
 800715a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800715e:	9b00      	ldr	r3, [sp, #0]
 8007160:	f805 9b01 	strb.w	r9, [r5], #1
 8007164:	1aea      	subs	r2, r5, r3
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	4293      	cmp	r3, r2
 800716a:	dd07      	ble.n	800717c <_dtoa_r+0xb64>
 800716c:	4651      	mov	r1, sl
 800716e:	2300      	movs	r3, #0
 8007170:	220a      	movs	r2, #10
 8007172:	4620      	mov	r0, r4
 8007174:	f000 fb4a 	bl	800780c <__multadd>
 8007178:	4682      	mov	sl, r0
 800717a:	e7ea      	b.n	8007152 <_dtoa_r+0xb3a>
 800717c:	9b01      	ldr	r3, [sp, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bfc8      	it	gt
 8007182:	461d      	movgt	r5, r3
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	bfd8      	it	le
 8007188:	2501      	movle	r5, #1
 800718a:	441d      	add	r5, r3
 800718c:	f04f 0800 	mov.w	r8, #0
 8007190:	4651      	mov	r1, sl
 8007192:	2201      	movs	r2, #1
 8007194:	4620      	mov	r0, r4
 8007196:	f000 fce7 	bl	8007b68 <__lshift>
 800719a:	4631      	mov	r1, r6
 800719c:	4682      	mov	sl, r0
 800719e:	f000 fd4f 	bl	8007c40 <__mcmp>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	dc96      	bgt.n	80070d4 <_dtoa_r+0xabc>
 80071a6:	d102      	bne.n	80071ae <_dtoa_r+0xb96>
 80071a8:	f019 0f01 	tst.w	r9, #1
 80071ac:	d192      	bne.n	80070d4 <_dtoa_r+0xabc>
 80071ae:	462b      	mov	r3, r5
 80071b0:	461d      	mov	r5, r3
 80071b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071b6:	2a30      	cmp	r2, #48	; 0x30
 80071b8:	d0fa      	beq.n	80071b0 <_dtoa_r+0xb98>
 80071ba:	e6dd      	b.n	8006f78 <_dtoa_r+0x960>
 80071bc:	9a00      	ldr	r2, [sp, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d189      	bne.n	80070d6 <_dtoa_r+0xabe>
 80071c2:	f10b 0b01 	add.w	fp, fp, #1
 80071c6:	2331      	movs	r3, #49	; 0x31
 80071c8:	e796      	b.n	80070f8 <_dtoa_r+0xae0>
 80071ca:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <_dtoa_r+0xbdc>)
 80071cc:	f7ff ba99 	b.w	8006702 <_dtoa_r+0xea>
 80071d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f47f aa6d 	bne.w	80066b2 <_dtoa_r+0x9a>
 80071d8:	4b07      	ldr	r3, [pc, #28]	; (80071f8 <_dtoa_r+0xbe0>)
 80071da:	f7ff ba92 	b.w	8006702 <_dtoa_r+0xea>
 80071de:	9b01      	ldr	r3, [sp, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	dcb5      	bgt.n	8007150 <_dtoa_r+0xb38>
 80071e4:	9b07      	ldr	r3, [sp, #28]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	f73f aeb1 	bgt.w	8006f4e <_dtoa_r+0x936>
 80071ec:	e7b0      	b.n	8007150 <_dtoa_r+0xb38>
 80071ee:	bf00      	nop
 80071f0:	080093e4 	.word	0x080093e4
 80071f4:	08009344 	.word	0x08009344
 80071f8:	08009368 	.word	0x08009368

080071fc <__sfputc_r>:
 80071fc:	6893      	ldr	r3, [r2, #8]
 80071fe:	3b01      	subs	r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	b410      	push	{r4}
 8007204:	6093      	str	r3, [r2, #8]
 8007206:	da08      	bge.n	800721a <__sfputc_r+0x1e>
 8007208:	6994      	ldr	r4, [r2, #24]
 800720a:	42a3      	cmp	r3, r4
 800720c:	db01      	blt.n	8007212 <__sfputc_r+0x16>
 800720e:	290a      	cmp	r1, #10
 8007210:	d103      	bne.n	800721a <__sfputc_r+0x1e>
 8007212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007216:	f000 be56 	b.w	8007ec6 <__swbuf_r>
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	1c58      	adds	r0, r3, #1
 800721e:	6010      	str	r0, [r2, #0]
 8007220:	7019      	strb	r1, [r3, #0]
 8007222:	4608      	mov	r0, r1
 8007224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007228:	4770      	bx	lr

0800722a <__sfputs_r>:
 800722a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722c:	4606      	mov	r6, r0
 800722e:	460f      	mov	r7, r1
 8007230:	4614      	mov	r4, r2
 8007232:	18d5      	adds	r5, r2, r3
 8007234:	42ac      	cmp	r4, r5
 8007236:	d101      	bne.n	800723c <__sfputs_r+0x12>
 8007238:	2000      	movs	r0, #0
 800723a:	e007      	b.n	800724c <__sfputs_r+0x22>
 800723c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007240:	463a      	mov	r2, r7
 8007242:	4630      	mov	r0, r6
 8007244:	f7ff ffda 	bl	80071fc <__sfputc_r>
 8007248:	1c43      	adds	r3, r0, #1
 800724a:	d1f3      	bne.n	8007234 <__sfputs_r+0xa>
 800724c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007250 <_vfiprintf_r>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	460d      	mov	r5, r1
 8007256:	b09d      	sub	sp, #116	; 0x74
 8007258:	4614      	mov	r4, r2
 800725a:	4698      	mov	r8, r3
 800725c:	4606      	mov	r6, r0
 800725e:	b118      	cbz	r0, 8007268 <_vfiprintf_r+0x18>
 8007260:	6a03      	ldr	r3, [r0, #32]
 8007262:	b90b      	cbnz	r3, 8007268 <_vfiprintf_r+0x18>
 8007264:	f7ff f870 	bl	8006348 <__sinit>
 8007268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800726a:	07d9      	lsls	r1, r3, #31
 800726c:	d405      	bmi.n	800727a <_vfiprintf_r+0x2a>
 800726e:	89ab      	ldrh	r3, [r5, #12]
 8007270:	059a      	lsls	r2, r3, #22
 8007272:	d402      	bmi.n	800727a <_vfiprintf_r+0x2a>
 8007274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007276:	f7ff f942 	bl	80064fe <__retarget_lock_acquire_recursive>
 800727a:	89ab      	ldrh	r3, [r5, #12]
 800727c:	071b      	lsls	r3, r3, #28
 800727e:	d501      	bpl.n	8007284 <_vfiprintf_r+0x34>
 8007280:	692b      	ldr	r3, [r5, #16]
 8007282:	b99b      	cbnz	r3, 80072ac <_vfiprintf_r+0x5c>
 8007284:	4629      	mov	r1, r5
 8007286:	4630      	mov	r0, r6
 8007288:	f000 fe5a 	bl	8007f40 <__swsetup_r>
 800728c:	b170      	cbz	r0, 80072ac <_vfiprintf_r+0x5c>
 800728e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007290:	07dc      	lsls	r4, r3, #31
 8007292:	d504      	bpl.n	800729e <_vfiprintf_r+0x4e>
 8007294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007298:	b01d      	add	sp, #116	; 0x74
 800729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729e:	89ab      	ldrh	r3, [r5, #12]
 80072a0:	0598      	lsls	r0, r3, #22
 80072a2:	d4f7      	bmi.n	8007294 <_vfiprintf_r+0x44>
 80072a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072a6:	f7ff f92b 	bl	8006500 <__retarget_lock_release_recursive>
 80072aa:	e7f3      	b.n	8007294 <_vfiprintf_r+0x44>
 80072ac:	2300      	movs	r3, #0
 80072ae:	9309      	str	r3, [sp, #36]	; 0x24
 80072b0:	2320      	movs	r3, #32
 80072b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ba:	2330      	movs	r3, #48	; 0x30
 80072bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007470 <_vfiprintf_r+0x220>
 80072c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072c4:	f04f 0901 	mov.w	r9, #1
 80072c8:	4623      	mov	r3, r4
 80072ca:	469a      	mov	sl, r3
 80072cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072d0:	b10a      	cbz	r2, 80072d6 <_vfiprintf_r+0x86>
 80072d2:	2a25      	cmp	r2, #37	; 0x25
 80072d4:	d1f9      	bne.n	80072ca <_vfiprintf_r+0x7a>
 80072d6:	ebba 0b04 	subs.w	fp, sl, r4
 80072da:	d00b      	beq.n	80072f4 <_vfiprintf_r+0xa4>
 80072dc:	465b      	mov	r3, fp
 80072de:	4622      	mov	r2, r4
 80072e0:	4629      	mov	r1, r5
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7ff ffa1 	bl	800722a <__sfputs_r>
 80072e8:	3001      	adds	r0, #1
 80072ea:	f000 80a9 	beq.w	8007440 <_vfiprintf_r+0x1f0>
 80072ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072f0:	445a      	add	r2, fp
 80072f2:	9209      	str	r2, [sp, #36]	; 0x24
 80072f4:	f89a 3000 	ldrb.w	r3, [sl]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80a1 	beq.w	8007440 <_vfiprintf_r+0x1f0>
 80072fe:	2300      	movs	r3, #0
 8007300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007308:	f10a 0a01 	add.w	sl, sl, #1
 800730c:	9304      	str	r3, [sp, #16]
 800730e:	9307      	str	r3, [sp, #28]
 8007310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007314:	931a      	str	r3, [sp, #104]	; 0x68
 8007316:	4654      	mov	r4, sl
 8007318:	2205      	movs	r2, #5
 800731a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731e:	4854      	ldr	r0, [pc, #336]	; (8007470 <_vfiprintf_r+0x220>)
 8007320:	f7f8 ff56 	bl	80001d0 <memchr>
 8007324:	9a04      	ldr	r2, [sp, #16]
 8007326:	b9d8      	cbnz	r0, 8007360 <_vfiprintf_r+0x110>
 8007328:	06d1      	lsls	r1, r2, #27
 800732a:	bf44      	itt	mi
 800732c:	2320      	movmi	r3, #32
 800732e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007332:	0713      	lsls	r3, r2, #28
 8007334:	bf44      	itt	mi
 8007336:	232b      	movmi	r3, #43	; 0x2b
 8007338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800733c:	f89a 3000 	ldrb.w	r3, [sl]
 8007340:	2b2a      	cmp	r3, #42	; 0x2a
 8007342:	d015      	beq.n	8007370 <_vfiprintf_r+0x120>
 8007344:	9a07      	ldr	r2, [sp, #28]
 8007346:	4654      	mov	r4, sl
 8007348:	2000      	movs	r0, #0
 800734a:	f04f 0c0a 	mov.w	ip, #10
 800734e:	4621      	mov	r1, r4
 8007350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007354:	3b30      	subs	r3, #48	; 0x30
 8007356:	2b09      	cmp	r3, #9
 8007358:	d94d      	bls.n	80073f6 <_vfiprintf_r+0x1a6>
 800735a:	b1b0      	cbz	r0, 800738a <_vfiprintf_r+0x13a>
 800735c:	9207      	str	r2, [sp, #28]
 800735e:	e014      	b.n	800738a <_vfiprintf_r+0x13a>
 8007360:	eba0 0308 	sub.w	r3, r0, r8
 8007364:	fa09 f303 	lsl.w	r3, r9, r3
 8007368:	4313      	orrs	r3, r2
 800736a:	9304      	str	r3, [sp, #16]
 800736c:	46a2      	mov	sl, r4
 800736e:	e7d2      	b.n	8007316 <_vfiprintf_r+0xc6>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	1d19      	adds	r1, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	9103      	str	r1, [sp, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	bfbb      	ittet	lt
 800737c:	425b      	neglt	r3, r3
 800737e:	f042 0202 	orrlt.w	r2, r2, #2
 8007382:	9307      	strge	r3, [sp, #28]
 8007384:	9307      	strlt	r3, [sp, #28]
 8007386:	bfb8      	it	lt
 8007388:	9204      	strlt	r2, [sp, #16]
 800738a:	7823      	ldrb	r3, [r4, #0]
 800738c:	2b2e      	cmp	r3, #46	; 0x2e
 800738e:	d10c      	bne.n	80073aa <_vfiprintf_r+0x15a>
 8007390:	7863      	ldrb	r3, [r4, #1]
 8007392:	2b2a      	cmp	r3, #42	; 0x2a
 8007394:	d134      	bne.n	8007400 <_vfiprintf_r+0x1b0>
 8007396:	9b03      	ldr	r3, [sp, #12]
 8007398:	1d1a      	adds	r2, r3, #4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	9203      	str	r2, [sp, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfb8      	it	lt
 80073a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073a6:	3402      	adds	r4, #2
 80073a8:	9305      	str	r3, [sp, #20]
 80073aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007480 <_vfiprintf_r+0x230>
 80073ae:	7821      	ldrb	r1, [r4, #0]
 80073b0:	2203      	movs	r2, #3
 80073b2:	4650      	mov	r0, sl
 80073b4:	f7f8 ff0c 	bl	80001d0 <memchr>
 80073b8:	b138      	cbz	r0, 80073ca <_vfiprintf_r+0x17a>
 80073ba:	9b04      	ldr	r3, [sp, #16]
 80073bc:	eba0 000a 	sub.w	r0, r0, sl
 80073c0:	2240      	movs	r2, #64	; 0x40
 80073c2:	4082      	lsls	r2, r0
 80073c4:	4313      	orrs	r3, r2
 80073c6:	3401      	adds	r4, #1
 80073c8:	9304      	str	r3, [sp, #16]
 80073ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ce:	4829      	ldr	r0, [pc, #164]	; (8007474 <_vfiprintf_r+0x224>)
 80073d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073d4:	2206      	movs	r2, #6
 80073d6:	f7f8 fefb 	bl	80001d0 <memchr>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d03f      	beq.n	800745e <_vfiprintf_r+0x20e>
 80073de:	4b26      	ldr	r3, [pc, #152]	; (8007478 <_vfiprintf_r+0x228>)
 80073e0:	bb1b      	cbnz	r3, 800742a <_vfiprintf_r+0x1da>
 80073e2:	9b03      	ldr	r3, [sp, #12]
 80073e4:	3307      	adds	r3, #7
 80073e6:	f023 0307 	bic.w	r3, r3, #7
 80073ea:	3308      	adds	r3, #8
 80073ec:	9303      	str	r3, [sp, #12]
 80073ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f0:	443b      	add	r3, r7
 80073f2:	9309      	str	r3, [sp, #36]	; 0x24
 80073f4:	e768      	b.n	80072c8 <_vfiprintf_r+0x78>
 80073f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073fa:	460c      	mov	r4, r1
 80073fc:	2001      	movs	r0, #1
 80073fe:	e7a6      	b.n	800734e <_vfiprintf_r+0xfe>
 8007400:	2300      	movs	r3, #0
 8007402:	3401      	adds	r4, #1
 8007404:	9305      	str	r3, [sp, #20]
 8007406:	4619      	mov	r1, r3
 8007408:	f04f 0c0a 	mov.w	ip, #10
 800740c:	4620      	mov	r0, r4
 800740e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007412:	3a30      	subs	r2, #48	; 0x30
 8007414:	2a09      	cmp	r2, #9
 8007416:	d903      	bls.n	8007420 <_vfiprintf_r+0x1d0>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0c6      	beq.n	80073aa <_vfiprintf_r+0x15a>
 800741c:	9105      	str	r1, [sp, #20]
 800741e:	e7c4      	b.n	80073aa <_vfiprintf_r+0x15a>
 8007420:	fb0c 2101 	mla	r1, ip, r1, r2
 8007424:	4604      	mov	r4, r0
 8007426:	2301      	movs	r3, #1
 8007428:	e7f0      	b.n	800740c <_vfiprintf_r+0x1bc>
 800742a:	ab03      	add	r3, sp, #12
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	462a      	mov	r2, r5
 8007430:	4b12      	ldr	r3, [pc, #72]	; (800747c <_vfiprintf_r+0x22c>)
 8007432:	a904      	add	r1, sp, #16
 8007434:	4630      	mov	r0, r6
 8007436:	f7fe fb35 	bl	8005aa4 <_printf_float>
 800743a:	4607      	mov	r7, r0
 800743c:	1c78      	adds	r0, r7, #1
 800743e:	d1d6      	bne.n	80073ee <_vfiprintf_r+0x19e>
 8007440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007442:	07d9      	lsls	r1, r3, #31
 8007444:	d405      	bmi.n	8007452 <_vfiprintf_r+0x202>
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	059a      	lsls	r2, r3, #22
 800744a:	d402      	bmi.n	8007452 <_vfiprintf_r+0x202>
 800744c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800744e:	f7ff f857 	bl	8006500 <__retarget_lock_release_recursive>
 8007452:	89ab      	ldrh	r3, [r5, #12]
 8007454:	065b      	lsls	r3, r3, #25
 8007456:	f53f af1d 	bmi.w	8007294 <_vfiprintf_r+0x44>
 800745a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800745c:	e71c      	b.n	8007298 <_vfiprintf_r+0x48>
 800745e:	ab03      	add	r3, sp, #12
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	462a      	mov	r2, r5
 8007464:	4b05      	ldr	r3, [pc, #20]	; (800747c <_vfiprintf_r+0x22c>)
 8007466:	a904      	add	r1, sp, #16
 8007468:	4630      	mov	r0, r6
 800746a:	f7fe fdbf 	bl	8005fec <_printf_i>
 800746e:	e7e4      	b.n	800743a <_vfiprintf_r+0x1ea>
 8007470:	080093f5 	.word	0x080093f5
 8007474:	080093ff 	.word	0x080093ff
 8007478:	08005aa5 	.word	0x08005aa5
 800747c:	0800722b 	.word	0x0800722b
 8007480:	080093fb 	.word	0x080093fb

08007484 <malloc>:
 8007484:	4b02      	ldr	r3, [pc, #8]	; (8007490 <malloc+0xc>)
 8007486:	4601      	mov	r1, r0
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	f000 b823 	b.w	80074d4 <_malloc_r>
 800748e:	bf00      	nop
 8007490:	2000006c 	.word	0x2000006c

08007494 <sbrk_aligned>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	4e0e      	ldr	r6, [pc, #56]	; (80074d0 <sbrk_aligned+0x3c>)
 8007498:	460c      	mov	r4, r1
 800749a:	6831      	ldr	r1, [r6, #0]
 800749c:	4605      	mov	r5, r0
 800749e:	b911      	cbnz	r1, 80074a6 <sbrk_aligned+0x12>
 80074a0:	f000 fe5e 	bl	8008160 <_sbrk_r>
 80074a4:	6030      	str	r0, [r6, #0]
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 fe59 	bl	8008160 <_sbrk_r>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	d00a      	beq.n	80074c8 <sbrk_aligned+0x34>
 80074b2:	1cc4      	adds	r4, r0, #3
 80074b4:	f024 0403 	bic.w	r4, r4, #3
 80074b8:	42a0      	cmp	r0, r4
 80074ba:	d007      	beq.n	80074cc <sbrk_aligned+0x38>
 80074bc:	1a21      	subs	r1, r4, r0
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 fe4e 	bl	8008160 <_sbrk_r>
 80074c4:	3001      	adds	r0, #1
 80074c6:	d101      	bne.n	80074cc <sbrk_aligned+0x38>
 80074c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80074cc:	4620      	mov	r0, r4
 80074ce:	bd70      	pop	{r4, r5, r6, pc}
 80074d0:	20000578 	.word	0x20000578

080074d4 <_malloc_r>:
 80074d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d8:	1ccd      	adds	r5, r1, #3
 80074da:	f025 0503 	bic.w	r5, r5, #3
 80074de:	3508      	adds	r5, #8
 80074e0:	2d0c      	cmp	r5, #12
 80074e2:	bf38      	it	cc
 80074e4:	250c      	movcc	r5, #12
 80074e6:	2d00      	cmp	r5, #0
 80074e8:	4607      	mov	r7, r0
 80074ea:	db01      	blt.n	80074f0 <_malloc_r+0x1c>
 80074ec:	42a9      	cmp	r1, r5
 80074ee:	d905      	bls.n	80074fc <_malloc_r+0x28>
 80074f0:	230c      	movs	r3, #12
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	2600      	movs	r6, #0
 80074f6:	4630      	mov	r0, r6
 80074f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075d0 <_malloc_r+0xfc>
 8007500:	f000 f916 	bl	8007730 <__malloc_lock>
 8007504:	f8d8 3000 	ldr.w	r3, [r8]
 8007508:	461c      	mov	r4, r3
 800750a:	bb5c      	cbnz	r4, 8007564 <_malloc_r+0x90>
 800750c:	4629      	mov	r1, r5
 800750e:	4638      	mov	r0, r7
 8007510:	f7ff ffc0 	bl	8007494 <sbrk_aligned>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	4604      	mov	r4, r0
 8007518:	d155      	bne.n	80075c6 <_malloc_r+0xf2>
 800751a:	f8d8 4000 	ldr.w	r4, [r8]
 800751e:	4626      	mov	r6, r4
 8007520:	2e00      	cmp	r6, #0
 8007522:	d145      	bne.n	80075b0 <_malloc_r+0xdc>
 8007524:	2c00      	cmp	r4, #0
 8007526:	d048      	beq.n	80075ba <_malloc_r+0xe6>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	4631      	mov	r1, r6
 800752c:	4638      	mov	r0, r7
 800752e:	eb04 0903 	add.w	r9, r4, r3
 8007532:	f000 fe15 	bl	8008160 <_sbrk_r>
 8007536:	4581      	cmp	r9, r0
 8007538:	d13f      	bne.n	80075ba <_malloc_r+0xe6>
 800753a:	6821      	ldr	r1, [r4, #0]
 800753c:	1a6d      	subs	r5, r5, r1
 800753e:	4629      	mov	r1, r5
 8007540:	4638      	mov	r0, r7
 8007542:	f7ff ffa7 	bl	8007494 <sbrk_aligned>
 8007546:	3001      	adds	r0, #1
 8007548:	d037      	beq.n	80075ba <_malloc_r+0xe6>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	442b      	add	r3, r5
 800754e:	6023      	str	r3, [r4, #0]
 8007550:	f8d8 3000 	ldr.w	r3, [r8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d038      	beq.n	80075ca <_malloc_r+0xf6>
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	42a2      	cmp	r2, r4
 800755c:	d12b      	bne.n	80075b6 <_malloc_r+0xe2>
 800755e:	2200      	movs	r2, #0
 8007560:	605a      	str	r2, [r3, #4]
 8007562:	e00f      	b.n	8007584 <_malloc_r+0xb0>
 8007564:	6822      	ldr	r2, [r4, #0]
 8007566:	1b52      	subs	r2, r2, r5
 8007568:	d41f      	bmi.n	80075aa <_malloc_r+0xd6>
 800756a:	2a0b      	cmp	r2, #11
 800756c:	d917      	bls.n	800759e <_malloc_r+0xca>
 800756e:	1961      	adds	r1, r4, r5
 8007570:	42a3      	cmp	r3, r4
 8007572:	6025      	str	r5, [r4, #0]
 8007574:	bf18      	it	ne
 8007576:	6059      	strne	r1, [r3, #4]
 8007578:	6863      	ldr	r3, [r4, #4]
 800757a:	bf08      	it	eq
 800757c:	f8c8 1000 	streq.w	r1, [r8]
 8007580:	5162      	str	r2, [r4, r5]
 8007582:	604b      	str	r3, [r1, #4]
 8007584:	4638      	mov	r0, r7
 8007586:	f104 060b 	add.w	r6, r4, #11
 800758a:	f000 f8d7 	bl	800773c <__malloc_unlock>
 800758e:	f026 0607 	bic.w	r6, r6, #7
 8007592:	1d23      	adds	r3, r4, #4
 8007594:	1af2      	subs	r2, r6, r3
 8007596:	d0ae      	beq.n	80074f6 <_malloc_r+0x22>
 8007598:	1b9b      	subs	r3, r3, r6
 800759a:	50a3      	str	r3, [r4, r2]
 800759c:	e7ab      	b.n	80074f6 <_malloc_r+0x22>
 800759e:	42a3      	cmp	r3, r4
 80075a0:	6862      	ldr	r2, [r4, #4]
 80075a2:	d1dd      	bne.n	8007560 <_malloc_r+0x8c>
 80075a4:	f8c8 2000 	str.w	r2, [r8]
 80075a8:	e7ec      	b.n	8007584 <_malloc_r+0xb0>
 80075aa:	4623      	mov	r3, r4
 80075ac:	6864      	ldr	r4, [r4, #4]
 80075ae:	e7ac      	b.n	800750a <_malloc_r+0x36>
 80075b0:	4634      	mov	r4, r6
 80075b2:	6876      	ldr	r6, [r6, #4]
 80075b4:	e7b4      	b.n	8007520 <_malloc_r+0x4c>
 80075b6:	4613      	mov	r3, r2
 80075b8:	e7cc      	b.n	8007554 <_malloc_r+0x80>
 80075ba:	230c      	movs	r3, #12
 80075bc:	603b      	str	r3, [r7, #0]
 80075be:	4638      	mov	r0, r7
 80075c0:	f000 f8bc 	bl	800773c <__malloc_unlock>
 80075c4:	e797      	b.n	80074f6 <_malloc_r+0x22>
 80075c6:	6025      	str	r5, [r4, #0]
 80075c8:	e7dc      	b.n	8007584 <_malloc_r+0xb0>
 80075ca:	605b      	str	r3, [r3, #4]
 80075cc:	deff      	udf	#255	; 0xff
 80075ce:	bf00      	nop
 80075d0:	20000574 	.word	0x20000574

080075d4 <__sflush_r>:
 80075d4:	898a      	ldrh	r2, [r1, #12]
 80075d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075da:	4605      	mov	r5, r0
 80075dc:	0710      	lsls	r0, r2, #28
 80075de:	460c      	mov	r4, r1
 80075e0:	d458      	bmi.n	8007694 <__sflush_r+0xc0>
 80075e2:	684b      	ldr	r3, [r1, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	dc05      	bgt.n	80075f4 <__sflush_r+0x20>
 80075e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	dc02      	bgt.n	80075f4 <__sflush_r+0x20>
 80075ee:	2000      	movs	r0, #0
 80075f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075f6:	2e00      	cmp	r6, #0
 80075f8:	d0f9      	beq.n	80075ee <__sflush_r+0x1a>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007600:	682f      	ldr	r7, [r5, #0]
 8007602:	6a21      	ldr	r1, [r4, #32]
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	d032      	beq.n	800766e <__sflush_r+0x9a>
 8007608:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800760a:	89a3      	ldrh	r3, [r4, #12]
 800760c:	075a      	lsls	r2, r3, #29
 800760e:	d505      	bpl.n	800761c <__sflush_r+0x48>
 8007610:	6863      	ldr	r3, [r4, #4]
 8007612:	1ac0      	subs	r0, r0, r3
 8007614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007616:	b10b      	cbz	r3, 800761c <__sflush_r+0x48>
 8007618:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800761a:	1ac0      	subs	r0, r0, r3
 800761c:	2300      	movs	r3, #0
 800761e:	4602      	mov	r2, r0
 8007620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007622:	6a21      	ldr	r1, [r4, #32]
 8007624:	4628      	mov	r0, r5
 8007626:	47b0      	blx	r6
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	d106      	bne.n	800763c <__sflush_r+0x68>
 800762e:	6829      	ldr	r1, [r5, #0]
 8007630:	291d      	cmp	r1, #29
 8007632:	d82b      	bhi.n	800768c <__sflush_r+0xb8>
 8007634:	4a29      	ldr	r2, [pc, #164]	; (80076dc <__sflush_r+0x108>)
 8007636:	410a      	asrs	r2, r1
 8007638:	07d6      	lsls	r6, r2, #31
 800763a:	d427      	bmi.n	800768c <__sflush_r+0xb8>
 800763c:	2200      	movs	r2, #0
 800763e:	6062      	str	r2, [r4, #4]
 8007640:	04d9      	lsls	r1, r3, #19
 8007642:	6922      	ldr	r2, [r4, #16]
 8007644:	6022      	str	r2, [r4, #0]
 8007646:	d504      	bpl.n	8007652 <__sflush_r+0x7e>
 8007648:	1c42      	adds	r2, r0, #1
 800764a:	d101      	bne.n	8007650 <__sflush_r+0x7c>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	b903      	cbnz	r3, 8007652 <__sflush_r+0x7e>
 8007650:	6560      	str	r0, [r4, #84]	; 0x54
 8007652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007654:	602f      	str	r7, [r5, #0]
 8007656:	2900      	cmp	r1, #0
 8007658:	d0c9      	beq.n	80075ee <__sflush_r+0x1a>
 800765a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800765e:	4299      	cmp	r1, r3
 8007660:	d002      	beq.n	8007668 <__sflush_r+0x94>
 8007662:	4628      	mov	r0, r5
 8007664:	f000 fde0 	bl	8008228 <_free_r>
 8007668:	2000      	movs	r0, #0
 800766a:	6360      	str	r0, [r4, #52]	; 0x34
 800766c:	e7c0      	b.n	80075f0 <__sflush_r+0x1c>
 800766e:	2301      	movs	r3, #1
 8007670:	4628      	mov	r0, r5
 8007672:	47b0      	blx	r6
 8007674:	1c41      	adds	r1, r0, #1
 8007676:	d1c8      	bne.n	800760a <__sflush_r+0x36>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0c5      	beq.n	800760a <__sflush_r+0x36>
 800767e:	2b1d      	cmp	r3, #29
 8007680:	d001      	beq.n	8007686 <__sflush_r+0xb2>
 8007682:	2b16      	cmp	r3, #22
 8007684:	d101      	bne.n	800768a <__sflush_r+0xb6>
 8007686:	602f      	str	r7, [r5, #0]
 8007688:	e7b1      	b.n	80075ee <__sflush_r+0x1a>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	e7ad      	b.n	80075f0 <__sflush_r+0x1c>
 8007694:	690f      	ldr	r7, [r1, #16]
 8007696:	2f00      	cmp	r7, #0
 8007698:	d0a9      	beq.n	80075ee <__sflush_r+0x1a>
 800769a:	0793      	lsls	r3, r2, #30
 800769c:	680e      	ldr	r6, [r1, #0]
 800769e:	bf08      	it	eq
 80076a0:	694b      	ldreq	r3, [r1, #20]
 80076a2:	600f      	str	r7, [r1, #0]
 80076a4:	bf18      	it	ne
 80076a6:	2300      	movne	r3, #0
 80076a8:	eba6 0807 	sub.w	r8, r6, r7
 80076ac:	608b      	str	r3, [r1, #8]
 80076ae:	f1b8 0f00 	cmp.w	r8, #0
 80076b2:	dd9c      	ble.n	80075ee <__sflush_r+0x1a>
 80076b4:	6a21      	ldr	r1, [r4, #32]
 80076b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076b8:	4643      	mov	r3, r8
 80076ba:	463a      	mov	r2, r7
 80076bc:	4628      	mov	r0, r5
 80076be:	47b0      	blx	r6
 80076c0:	2800      	cmp	r0, #0
 80076c2:	dc06      	bgt.n	80076d2 <__sflush_r+0xfe>
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076d0:	e78e      	b.n	80075f0 <__sflush_r+0x1c>
 80076d2:	4407      	add	r7, r0
 80076d4:	eba8 0800 	sub.w	r8, r8, r0
 80076d8:	e7e9      	b.n	80076ae <__sflush_r+0xda>
 80076da:	bf00      	nop
 80076dc:	dfbffffe 	.word	0xdfbffffe

080076e0 <_fflush_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	690b      	ldr	r3, [r1, #16]
 80076e4:	4605      	mov	r5, r0
 80076e6:	460c      	mov	r4, r1
 80076e8:	b913      	cbnz	r3, 80076f0 <_fflush_r+0x10>
 80076ea:	2500      	movs	r5, #0
 80076ec:	4628      	mov	r0, r5
 80076ee:	bd38      	pop	{r3, r4, r5, pc}
 80076f0:	b118      	cbz	r0, 80076fa <_fflush_r+0x1a>
 80076f2:	6a03      	ldr	r3, [r0, #32]
 80076f4:	b90b      	cbnz	r3, 80076fa <_fflush_r+0x1a>
 80076f6:	f7fe fe27 	bl	8006348 <__sinit>
 80076fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0f3      	beq.n	80076ea <_fflush_r+0xa>
 8007702:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007704:	07d0      	lsls	r0, r2, #31
 8007706:	d404      	bmi.n	8007712 <_fflush_r+0x32>
 8007708:	0599      	lsls	r1, r3, #22
 800770a:	d402      	bmi.n	8007712 <_fflush_r+0x32>
 800770c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800770e:	f7fe fef6 	bl	80064fe <__retarget_lock_acquire_recursive>
 8007712:	4628      	mov	r0, r5
 8007714:	4621      	mov	r1, r4
 8007716:	f7ff ff5d 	bl	80075d4 <__sflush_r>
 800771a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800771c:	07da      	lsls	r2, r3, #31
 800771e:	4605      	mov	r5, r0
 8007720:	d4e4      	bmi.n	80076ec <_fflush_r+0xc>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	059b      	lsls	r3, r3, #22
 8007726:	d4e1      	bmi.n	80076ec <_fflush_r+0xc>
 8007728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800772a:	f7fe fee9 	bl	8006500 <__retarget_lock_release_recursive>
 800772e:	e7dd      	b.n	80076ec <_fflush_r+0xc>

08007730 <__malloc_lock>:
 8007730:	4801      	ldr	r0, [pc, #4]	; (8007738 <__malloc_lock+0x8>)
 8007732:	f7fe bee4 	b.w	80064fe <__retarget_lock_acquire_recursive>
 8007736:	bf00      	nop
 8007738:	20000570 	.word	0x20000570

0800773c <__malloc_unlock>:
 800773c:	4801      	ldr	r0, [pc, #4]	; (8007744 <__malloc_unlock+0x8>)
 800773e:	f7fe bedf 	b.w	8006500 <__retarget_lock_release_recursive>
 8007742:	bf00      	nop
 8007744:	20000570 	.word	0x20000570

08007748 <_Balloc>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	69c6      	ldr	r6, [r0, #28]
 800774c:	4604      	mov	r4, r0
 800774e:	460d      	mov	r5, r1
 8007750:	b976      	cbnz	r6, 8007770 <_Balloc+0x28>
 8007752:	2010      	movs	r0, #16
 8007754:	f7ff fe96 	bl	8007484 <malloc>
 8007758:	4602      	mov	r2, r0
 800775a:	61e0      	str	r0, [r4, #28]
 800775c:	b920      	cbnz	r0, 8007768 <_Balloc+0x20>
 800775e:	4b18      	ldr	r3, [pc, #96]	; (80077c0 <_Balloc+0x78>)
 8007760:	4818      	ldr	r0, [pc, #96]	; (80077c4 <_Balloc+0x7c>)
 8007762:	216b      	movs	r1, #107	; 0x6b
 8007764:	f000 fd2c 	bl	80081c0 <__assert_func>
 8007768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800776c:	6006      	str	r6, [r0, #0]
 800776e:	60c6      	str	r6, [r0, #12]
 8007770:	69e6      	ldr	r6, [r4, #28]
 8007772:	68f3      	ldr	r3, [r6, #12]
 8007774:	b183      	cbz	r3, 8007798 <_Balloc+0x50>
 8007776:	69e3      	ldr	r3, [r4, #28]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800777e:	b9b8      	cbnz	r0, 80077b0 <_Balloc+0x68>
 8007780:	2101      	movs	r1, #1
 8007782:	fa01 f605 	lsl.w	r6, r1, r5
 8007786:	1d72      	adds	r2, r6, #5
 8007788:	0092      	lsls	r2, r2, #2
 800778a:	4620      	mov	r0, r4
 800778c:	f000 fd36 	bl	80081fc <_calloc_r>
 8007790:	b160      	cbz	r0, 80077ac <_Balloc+0x64>
 8007792:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007796:	e00e      	b.n	80077b6 <_Balloc+0x6e>
 8007798:	2221      	movs	r2, #33	; 0x21
 800779a:	2104      	movs	r1, #4
 800779c:	4620      	mov	r0, r4
 800779e:	f000 fd2d 	bl	80081fc <_calloc_r>
 80077a2:	69e3      	ldr	r3, [r4, #28]
 80077a4:	60f0      	str	r0, [r6, #12]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e4      	bne.n	8007776 <_Balloc+0x2e>
 80077ac:	2000      	movs	r0, #0
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	6802      	ldr	r2, [r0, #0]
 80077b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077b6:	2300      	movs	r3, #0
 80077b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077bc:	e7f7      	b.n	80077ae <_Balloc+0x66>
 80077be:	bf00      	nop
 80077c0:	08009375 	.word	0x08009375
 80077c4:	08009406 	.word	0x08009406

080077c8 <_Bfree>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	69c6      	ldr	r6, [r0, #28]
 80077cc:	4605      	mov	r5, r0
 80077ce:	460c      	mov	r4, r1
 80077d0:	b976      	cbnz	r6, 80077f0 <_Bfree+0x28>
 80077d2:	2010      	movs	r0, #16
 80077d4:	f7ff fe56 	bl	8007484 <malloc>
 80077d8:	4602      	mov	r2, r0
 80077da:	61e8      	str	r0, [r5, #28]
 80077dc:	b920      	cbnz	r0, 80077e8 <_Bfree+0x20>
 80077de:	4b09      	ldr	r3, [pc, #36]	; (8007804 <_Bfree+0x3c>)
 80077e0:	4809      	ldr	r0, [pc, #36]	; (8007808 <_Bfree+0x40>)
 80077e2:	218f      	movs	r1, #143	; 0x8f
 80077e4:	f000 fcec 	bl	80081c0 <__assert_func>
 80077e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077ec:	6006      	str	r6, [r0, #0]
 80077ee:	60c6      	str	r6, [r0, #12]
 80077f0:	b13c      	cbz	r4, 8007802 <_Bfree+0x3a>
 80077f2:	69eb      	ldr	r3, [r5, #28]
 80077f4:	6862      	ldr	r2, [r4, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077fc:	6021      	str	r1, [r4, #0]
 80077fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	08009375 	.word	0x08009375
 8007808:	08009406 	.word	0x08009406

0800780c <__multadd>:
 800780c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007810:	690d      	ldr	r5, [r1, #16]
 8007812:	4607      	mov	r7, r0
 8007814:	460c      	mov	r4, r1
 8007816:	461e      	mov	r6, r3
 8007818:	f101 0c14 	add.w	ip, r1, #20
 800781c:	2000      	movs	r0, #0
 800781e:	f8dc 3000 	ldr.w	r3, [ip]
 8007822:	b299      	uxth	r1, r3
 8007824:	fb02 6101 	mla	r1, r2, r1, r6
 8007828:	0c1e      	lsrs	r6, r3, #16
 800782a:	0c0b      	lsrs	r3, r1, #16
 800782c:	fb02 3306 	mla	r3, r2, r6, r3
 8007830:	b289      	uxth	r1, r1
 8007832:	3001      	adds	r0, #1
 8007834:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007838:	4285      	cmp	r5, r0
 800783a:	f84c 1b04 	str.w	r1, [ip], #4
 800783e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007842:	dcec      	bgt.n	800781e <__multadd+0x12>
 8007844:	b30e      	cbz	r6, 800788a <__multadd+0x7e>
 8007846:	68a3      	ldr	r3, [r4, #8]
 8007848:	42ab      	cmp	r3, r5
 800784a:	dc19      	bgt.n	8007880 <__multadd+0x74>
 800784c:	6861      	ldr	r1, [r4, #4]
 800784e:	4638      	mov	r0, r7
 8007850:	3101      	adds	r1, #1
 8007852:	f7ff ff79 	bl	8007748 <_Balloc>
 8007856:	4680      	mov	r8, r0
 8007858:	b928      	cbnz	r0, 8007866 <__multadd+0x5a>
 800785a:	4602      	mov	r2, r0
 800785c:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <__multadd+0x84>)
 800785e:	480d      	ldr	r0, [pc, #52]	; (8007894 <__multadd+0x88>)
 8007860:	21ba      	movs	r1, #186	; 0xba
 8007862:	f000 fcad 	bl	80081c0 <__assert_func>
 8007866:	6922      	ldr	r2, [r4, #16]
 8007868:	3202      	adds	r2, #2
 800786a:	f104 010c 	add.w	r1, r4, #12
 800786e:	0092      	lsls	r2, r2, #2
 8007870:	300c      	adds	r0, #12
 8007872:	f000 fc97 	bl	80081a4 <memcpy>
 8007876:	4621      	mov	r1, r4
 8007878:	4638      	mov	r0, r7
 800787a:	f7ff ffa5 	bl	80077c8 <_Bfree>
 800787e:	4644      	mov	r4, r8
 8007880:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007884:	3501      	adds	r5, #1
 8007886:	615e      	str	r6, [r3, #20]
 8007888:	6125      	str	r5, [r4, #16]
 800788a:	4620      	mov	r0, r4
 800788c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007890:	080093e4 	.word	0x080093e4
 8007894:	08009406 	.word	0x08009406

08007898 <__hi0bits>:
 8007898:	0c03      	lsrs	r3, r0, #16
 800789a:	041b      	lsls	r3, r3, #16
 800789c:	b9d3      	cbnz	r3, 80078d4 <__hi0bits+0x3c>
 800789e:	0400      	lsls	r0, r0, #16
 80078a0:	2310      	movs	r3, #16
 80078a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078a6:	bf04      	itt	eq
 80078a8:	0200      	lsleq	r0, r0, #8
 80078aa:	3308      	addeq	r3, #8
 80078ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078b0:	bf04      	itt	eq
 80078b2:	0100      	lsleq	r0, r0, #4
 80078b4:	3304      	addeq	r3, #4
 80078b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078ba:	bf04      	itt	eq
 80078bc:	0080      	lsleq	r0, r0, #2
 80078be:	3302      	addeq	r3, #2
 80078c0:	2800      	cmp	r0, #0
 80078c2:	db05      	blt.n	80078d0 <__hi0bits+0x38>
 80078c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078c8:	f103 0301 	add.w	r3, r3, #1
 80078cc:	bf08      	it	eq
 80078ce:	2320      	moveq	r3, #32
 80078d0:	4618      	mov	r0, r3
 80078d2:	4770      	bx	lr
 80078d4:	2300      	movs	r3, #0
 80078d6:	e7e4      	b.n	80078a2 <__hi0bits+0xa>

080078d8 <__lo0bits>:
 80078d8:	6803      	ldr	r3, [r0, #0]
 80078da:	f013 0207 	ands.w	r2, r3, #7
 80078de:	d00c      	beq.n	80078fa <__lo0bits+0x22>
 80078e0:	07d9      	lsls	r1, r3, #31
 80078e2:	d422      	bmi.n	800792a <__lo0bits+0x52>
 80078e4:	079a      	lsls	r2, r3, #30
 80078e6:	bf49      	itett	mi
 80078e8:	085b      	lsrmi	r3, r3, #1
 80078ea:	089b      	lsrpl	r3, r3, #2
 80078ec:	6003      	strmi	r3, [r0, #0]
 80078ee:	2201      	movmi	r2, #1
 80078f0:	bf5c      	itt	pl
 80078f2:	6003      	strpl	r3, [r0, #0]
 80078f4:	2202      	movpl	r2, #2
 80078f6:	4610      	mov	r0, r2
 80078f8:	4770      	bx	lr
 80078fa:	b299      	uxth	r1, r3
 80078fc:	b909      	cbnz	r1, 8007902 <__lo0bits+0x2a>
 80078fe:	0c1b      	lsrs	r3, r3, #16
 8007900:	2210      	movs	r2, #16
 8007902:	b2d9      	uxtb	r1, r3
 8007904:	b909      	cbnz	r1, 800790a <__lo0bits+0x32>
 8007906:	3208      	adds	r2, #8
 8007908:	0a1b      	lsrs	r3, r3, #8
 800790a:	0719      	lsls	r1, r3, #28
 800790c:	bf04      	itt	eq
 800790e:	091b      	lsreq	r3, r3, #4
 8007910:	3204      	addeq	r2, #4
 8007912:	0799      	lsls	r1, r3, #30
 8007914:	bf04      	itt	eq
 8007916:	089b      	lsreq	r3, r3, #2
 8007918:	3202      	addeq	r2, #2
 800791a:	07d9      	lsls	r1, r3, #31
 800791c:	d403      	bmi.n	8007926 <__lo0bits+0x4e>
 800791e:	085b      	lsrs	r3, r3, #1
 8007920:	f102 0201 	add.w	r2, r2, #1
 8007924:	d003      	beq.n	800792e <__lo0bits+0x56>
 8007926:	6003      	str	r3, [r0, #0]
 8007928:	e7e5      	b.n	80078f6 <__lo0bits+0x1e>
 800792a:	2200      	movs	r2, #0
 800792c:	e7e3      	b.n	80078f6 <__lo0bits+0x1e>
 800792e:	2220      	movs	r2, #32
 8007930:	e7e1      	b.n	80078f6 <__lo0bits+0x1e>
	...

08007934 <__i2b>:
 8007934:	b510      	push	{r4, lr}
 8007936:	460c      	mov	r4, r1
 8007938:	2101      	movs	r1, #1
 800793a:	f7ff ff05 	bl	8007748 <_Balloc>
 800793e:	4602      	mov	r2, r0
 8007940:	b928      	cbnz	r0, 800794e <__i2b+0x1a>
 8007942:	4b05      	ldr	r3, [pc, #20]	; (8007958 <__i2b+0x24>)
 8007944:	4805      	ldr	r0, [pc, #20]	; (800795c <__i2b+0x28>)
 8007946:	f240 1145 	movw	r1, #325	; 0x145
 800794a:	f000 fc39 	bl	80081c0 <__assert_func>
 800794e:	2301      	movs	r3, #1
 8007950:	6144      	str	r4, [r0, #20]
 8007952:	6103      	str	r3, [r0, #16]
 8007954:	bd10      	pop	{r4, pc}
 8007956:	bf00      	nop
 8007958:	080093e4 	.word	0x080093e4
 800795c:	08009406 	.word	0x08009406

08007960 <__multiply>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	4691      	mov	r9, r2
 8007966:	690a      	ldr	r2, [r1, #16]
 8007968:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800796c:	429a      	cmp	r2, r3
 800796e:	bfb8      	it	lt
 8007970:	460b      	movlt	r3, r1
 8007972:	460c      	mov	r4, r1
 8007974:	bfbc      	itt	lt
 8007976:	464c      	movlt	r4, r9
 8007978:	4699      	movlt	r9, r3
 800797a:	6927      	ldr	r7, [r4, #16]
 800797c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007980:	68a3      	ldr	r3, [r4, #8]
 8007982:	6861      	ldr	r1, [r4, #4]
 8007984:	eb07 060a 	add.w	r6, r7, sl
 8007988:	42b3      	cmp	r3, r6
 800798a:	b085      	sub	sp, #20
 800798c:	bfb8      	it	lt
 800798e:	3101      	addlt	r1, #1
 8007990:	f7ff feda 	bl	8007748 <_Balloc>
 8007994:	b930      	cbnz	r0, 80079a4 <__multiply+0x44>
 8007996:	4602      	mov	r2, r0
 8007998:	4b44      	ldr	r3, [pc, #272]	; (8007aac <__multiply+0x14c>)
 800799a:	4845      	ldr	r0, [pc, #276]	; (8007ab0 <__multiply+0x150>)
 800799c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80079a0:	f000 fc0e 	bl	80081c0 <__assert_func>
 80079a4:	f100 0514 	add.w	r5, r0, #20
 80079a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079ac:	462b      	mov	r3, r5
 80079ae:	2200      	movs	r2, #0
 80079b0:	4543      	cmp	r3, r8
 80079b2:	d321      	bcc.n	80079f8 <__multiply+0x98>
 80079b4:	f104 0314 	add.w	r3, r4, #20
 80079b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079bc:	f109 0314 	add.w	r3, r9, #20
 80079c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079c4:	9202      	str	r2, [sp, #8]
 80079c6:	1b3a      	subs	r2, r7, r4
 80079c8:	3a15      	subs	r2, #21
 80079ca:	f022 0203 	bic.w	r2, r2, #3
 80079ce:	3204      	adds	r2, #4
 80079d0:	f104 0115 	add.w	r1, r4, #21
 80079d4:	428f      	cmp	r7, r1
 80079d6:	bf38      	it	cc
 80079d8:	2204      	movcc	r2, #4
 80079da:	9201      	str	r2, [sp, #4]
 80079dc:	9a02      	ldr	r2, [sp, #8]
 80079de:	9303      	str	r3, [sp, #12]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d80c      	bhi.n	80079fe <__multiply+0x9e>
 80079e4:	2e00      	cmp	r6, #0
 80079e6:	dd03      	ble.n	80079f0 <__multiply+0x90>
 80079e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d05b      	beq.n	8007aa8 <__multiply+0x148>
 80079f0:	6106      	str	r6, [r0, #16]
 80079f2:	b005      	add	sp, #20
 80079f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f8:	f843 2b04 	str.w	r2, [r3], #4
 80079fc:	e7d8      	b.n	80079b0 <__multiply+0x50>
 80079fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a02:	f1ba 0f00 	cmp.w	sl, #0
 8007a06:	d024      	beq.n	8007a52 <__multiply+0xf2>
 8007a08:	f104 0e14 	add.w	lr, r4, #20
 8007a0c:	46a9      	mov	r9, r5
 8007a0e:	f04f 0c00 	mov.w	ip, #0
 8007a12:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a16:	f8d9 1000 	ldr.w	r1, [r9]
 8007a1a:	fa1f fb82 	uxth.w	fp, r2
 8007a1e:	b289      	uxth	r1, r1
 8007a20:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a28:	f8d9 2000 	ldr.w	r2, [r9]
 8007a2c:	4461      	add	r1, ip
 8007a2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a32:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a3a:	b289      	uxth	r1, r1
 8007a3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a40:	4577      	cmp	r7, lr
 8007a42:	f849 1b04 	str.w	r1, [r9], #4
 8007a46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a4a:	d8e2      	bhi.n	8007a12 <__multiply+0xb2>
 8007a4c:	9a01      	ldr	r2, [sp, #4]
 8007a4e:	f845 c002 	str.w	ip, [r5, r2]
 8007a52:	9a03      	ldr	r2, [sp, #12]
 8007a54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	f1b9 0f00 	cmp.w	r9, #0
 8007a5e:	d021      	beq.n	8007aa4 <__multiply+0x144>
 8007a60:	6829      	ldr	r1, [r5, #0]
 8007a62:	f104 0c14 	add.w	ip, r4, #20
 8007a66:	46ae      	mov	lr, r5
 8007a68:	f04f 0a00 	mov.w	sl, #0
 8007a6c:	f8bc b000 	ldrh.w	fp, [ip]
 8007a70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a74:	fb09 220b 	mla	r2, r9, fp, r2
 8007a78:	4452      	add	r2, sl
 8007a7a:	b289      	uxth	r1, r1
 8007a7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a80:	f84e 1b04 	str.w	r1, [lr], #4
 8007a84:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a8c:	f8be 1000 	ldrh.w	r1, [lr]
 8007a90:	fb09 110a 	mla	r1, r9, sl, r1
 8007a94:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007a98:	4567      	cmp	r7, ip
 8007a9a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a9e:	d8e5      	bhi.n	8007a6c <__multiply+0x10c>
 8007aa0:	9a01      	ldr	r2, [sp, #4]
 8007aa2:	50a9      	str	r1, [r5, r2]
 8007aa4:	3504      	adds	r5, #4
 8007aa6:	e799      	b.n	80079dc <__multiply+0x7c>
 8007aa8:	3e01      	subs	r6, #1
 8007aaa:	e79b      	b.n	80079e4 <__multiply+0x84>
 8007aac:	080093e4 	.word	0x080093e4
 8007ab0:	08009406 	.word	0x08009406

08007ab4 <__pow5mult>:
 8007ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab8:	4615      	mov	r5, r2
 8007aba:	f012 0203 	ands.w	r2, r2, #3
 8007abe:	4606      	mov	r6, r0
 8007ac0:	460f      	mov	r7, r1
 8007ac2:	d007      	beq.n	8007ad4 <__pow5mult+0x20>
 8007ac4:	4c25      	ldr	r4, [pc, #148]	; (8007b5c <__pow5mult+0xa8>)
 8007ac6:	3a01      	subs	r2, #1
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ace:	f7ff fe9d 	bl	800780c <__multadd>
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	10ad      	asrs	r5, r5, #2
 8007ad6:	d03d      	beq.n	8007b54 <__pow5mult+0xa0>
 8007ad8:	69f4      	ldr	r4, [r6, #28]
 8007ada:	b97c      	cbnz	r4, 8007afc <__pow5mult+0x48>
 8007adc:	2010      	movs	r0, #16
 8007ade:	f7ff fcd1 	bl	8007484 <malloc>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	61f0      	str	r0, [r6, #28]
 8007ae6:	b928      	cbnz	r0, 8007af4 <__pow5mult+0x40>
 8007ae8:	4b1d      	ldr	r3, [pc, #116]	; (8007b60 <__pow5mult+0xac>)
 8007aea:	481e      	ldr	r0, [pc, #120]	; (8007b64 <__pow5mult+0xb0>)
 8007aec:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007af0:	f000 fb66 	bl	80081c0 <__assert_func>
 8007af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007af8:	6004      	str	r4, [r0, #0]
 8007afa:	60c4      	str	r4, [r0, #12]
 8007afc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b04:	b94c      	cbnz	r4, 8007b1a <__pow5mult+0x66>
 8007b06:	f240 2171 	movw	r1, #625	; 0x271
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7ff ff12 	bl	8007934 <__i2b>
 8007b10:	2300      	movs	r3, #0
 8007b12:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b16:	4604      	mov	r4, r0
 8007b18:	6003      	str	r3, [r0, #0]
 8007b1a:	f04f 0900 	mov.w	r9, #0
 8007b1e:	07eb      	lsls	r3, r5, #31
 8007b20:	d50a      	bpl.n	8007b38 <__pow5mult+0x84>
 8007b22:	4639      	mov	r1, r7
 8007b24:	4622      	mov	r2, r4
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff ff1a 	bl	8007960 <__multiply>
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	4680      	mov	r8, r0
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff fe49 	bl	80077c8 <_Bfree>
 8007b36:	4647      	mov	r7, r8
 8007b38:	106d      	asrs	r5, r5, #1
 8007b3a:	d00b      	beq.n	8007b54 <__pow5mult+0xa0>
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	b938      	cbnz	r0, 8007b50 <__pow5mult+0x9c>
 8007b40:	4622      	mov	r2, r4
 8007b42:	4621      	mov	r1, r4
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff ff0b 	bl	8007960 <__multiply>
 8007b4a:	6020      	str	r0, [r4, #0]
 8007b4c:	f8c0 9000 	str.w	r9, [r0]
 8007b50:	4604      	mov	r4, r0
 8007b52:	e7e4      	b.n	8007b1e <__pow5mult+0x6a>
 8007b54:	4638      	mov	r0, r7
 8007b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5a:	bf00      	nop
 8007b5c:	08009550 	.word	0x08009550
 8007b60:	08009375 	.word	0x08009375
 8007b64:	08009406 	.word	0x08009406

08007b68 <__lshift>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	6849      	ldr	r1, [r1, #4]
 8007b70:	6923      	ldr	r3, [r4, #16]
 8007b72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b76:	68a3      	ldr	r3, [r4, #8]
 8007b78:	4607      	mov	r7, r0
 8007b7a:	4691      	mov	r9, r2
 8007b7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b80:	f108 0601 	add.w	r6, r8, #1
 8007b84:	42b3      	cmp	r3, r6
 8007b86:	db0b      	blt.n	8007ba0 <__lshift+0x38>
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7ff fddd 	bl	8007748 <_Balloc>
 8007b8e:	4605      	mov	r5, r0
 8007b90:	b948      	cbnz	r0, 8007ba6 <__lshift+0x3e>
 8007b92:	4602      	mov	r2, r0
 8007b94:	4b28      	ldr	r3, [pc, #160]	; (8007c38 <__lshift+0xd0>)
 8007b96:	4829      	ldr	r0, [pc, #164]	; (8007c3c <__lshift+0xd4>)
 8007b98:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007b9c:	f000 fb10 	bl	80081c0 <__assert_func>
 8007ba0:	3101      	adds	r1, #1
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	e7ee      	b.n	8007b84 <__lshift+0x1c>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f100 0114 	add.w	r1, r0, #20
 8007bac:	f100 0210 	add.w	r2, r0, #16
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	4553      	cmp	r3, sl
 8007bb4:	db33      	blt.n	8007c1e <__lshift+0xb6>
 8007bb6:	6920      	ldr	r0, [r4, #16]
 8007bb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bbc:	f104 0314 	add.w	r3, r4, #20
 8007bc0:	f019 091f 	ands.w	r9, r9, #31
 8007bc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bcc:	d02b      	beq.n	8007c26 <__lshift+0xbe>
 8007bce:	f1c9 0e20 	rsb	lr, r9, #32
 8007bd2:	468a      	mov	sl, r1
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	6818      	ldr	r0, [r3, #0]
 8007bd8:	fa00 f009 	lsl.w	r0, r0, r9
 8007bdc:	4310      	orrs	r0, r2
 8007bde:	f84a 0b04 	str.w	r0, [sl], #4
 8007be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be6:	459c      	cmp	ip, r3
 8007be8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bec:	d8f3      	bhi.n	8007bd6 <__lshift+0x6e>
 8007bee:	ebac 0304 	sub.w	r3, ip, r4
 8007bf2:	3b15      	subs	r3, #21
 8007bf4:	f023 0303 	bic.w	r3, r3, #3
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	f104 0015 	add.w	r0, r4, #21
 8007bfe:	4584      	cmp	ip, r0
 8007c00:	bf38      	it	cc
 8007c02:	2304      	movcc	r3, #4
 8007c04:	50ca      	str	r2, [r1, r3]
 8007c06:	b10a      	cbz	r2, 8007c0c <__lshift+0xa4>
 8007c08:	f108 0602 	add.w	r6, r8, #2
 8007c0c:	3e01      	subs	r6, #1
 8007c0e:	4638      	mov	r0, r7
 8007c10:	612e      	str	r6, [r5, #16]
 8007c12:	4621      	mov	r1, r4
 8007c14:	f7ff fdd8 	bl	80077c8 <_Bfree>
 8007c18:	4628      	mov	r0, r5
 8007c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c22:	3301      	adds	r3, #1
 8007c24:	e7c5      	b.n	8007bb2 <__lshift+0x4a>
 8007c26:	3904      	subs	r1, #4
 8007c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c30:	459c      	cmp	ip, r3
 8007c32:	d8f9      	bhi.n	8007c28 <__lshift+0xc0>
 8007c34:	e7ea      	b.n	8007c0c <__lshift+0xa4>
 8007c36:	bf00      	nop
 8007c38:	080093e4 	.word	0x080093e4
 8007c3c:	08009406 	.word	0x08009406

08007c40 <__mcmp>:
 8007c40:	b530      	push	{r4, r5, lr}
 8007c42:	6902      	ldr	r2, [r0, #16]
 8007c44:	690c      	ldr	r4, [r1, #16]
 8007c46:	1b12      	subs	r2, r2, r4
 8007c48:	d10e      	bne.n	8007c68 <__mcmp+0x28>
 8007c4a:	f100 0314 	add.w	r3, r0, #20
 8007c4e:	3114      	adds	r1, #20
 8007c50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c60:	42a5      	cmp	r5, r4
 8007c62:	d003      	beq.n	8007c6c <__mcmp+0x2c>
 8007c64:	d305      	bcc.n	8007c72 <__mcmp+0x32>
 8007c66:	2201      	movs	r2, #1
 8007c68:	4610      	mov	r0, r2
 8007c6a:	bd30      	pop	{r4, r5, pc}
 8007c6c:	4283      	cmp	r3, r0
 8007c6e:	d3f3      	bcc.n	8007c58 <__mcmp+0x18>
 8007c70:	e7fa      	b.n	8007c68 <__mcmp+0x28>
 8007c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c76:	e7f7      	b.n	8007c68 <__mcmp+0x28>

08007c78 <__mdiff>:
 8007c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	4606      	mov	r6, r0
 8007c80:	4611      	mov	r1, r2
 8007c82:	4620      	mov	r0, r4
 8007c84:	4690      	mov	r8, r2
 8007c86:	f7ff ffdb 	bl	8007c40 <__mcmp>
 8007c8a:	1e05      	subs	r5, r0, #0
 8007c8c:	d110      	bne.n	8007cb0 <__mdiff+0x38>
 8007c8e:	4629      	mov	r1, r5
 8007c90:	4630      	mov	r0, r6
 8007c92:	f7ff fd59 	bl	8007748 <_Balloc>
 8007c96:	b930      	cbnz	r0, 8007ca6 <__mdiff+0x2e>
 8007c98:	4b3a      	ldr	r3, [pc, #232]	; (8007d84 <__mdiff+0x10c>)
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	f240 2137 	movw	r1, #567	; 0x237
 8007ca0:	4839      	ldr	r0, [pc, #228]	; (8007d88 <__mdiff+0x110>)
 8007ca2:	f000 fa8d 	bl	80081c0 <__assert_func>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb0:	bfa4      	itt	ge
 8007cb2:	4643      	movge	r3, r8
 8007cb4:	46a0      	movge	r8, r4
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007cbc:	bfa6      	itte	ge
 8007cbe:	461c      	movge	r4, r3
 8007cc0:	2500      	movge	r5, #0
 8007cc2:	2501      	movlt	r5, #1
 8007cc4:	f7ff fd40 	bl	8007748 <_Balloc>
 8007cc8:	b920      	cbnz	r0, 8007cd4 <__mdiff+0x5c>
 8007cca:	4b2e      	ldr	r3, [pc, #184]	; (8007d84 <__mdiff+0x10c>)
 8007ccc:	4602      	mov	r2, r0
 8007cce:	f240 2145 	movw	r1, #581	; 0x245
 8007cd2:	e7e5      	b.n	8007ca0 <__mdiff+0x28>
 8007cd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007cd8:	6926      	ldr	r6, [r4, #16]
 8007cda:	60c5      	str	r5, [r0, #12]
 8007cdc:	f104 0914 	add.w	r9, r4, #20
 8007ce0:	f108 0514 	add.w	r5, r8, #20
 8007ce4:	f100 0e14 	add.w	lr, r0, #20
 8007ce8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007cec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007cf0:	f108 0210 	add.w	r2, r8, #16
 8007cf4:	46f2      	mov	sl, lr
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007cfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d00:	fa11 f88b 	uxtah	r8, r1, fp
 8007d04:	b299      	uxth	r1, r3
 8007d06:	0c1b      	lsrs	r3, r3, #16
 8007d08:	eba8 0801 	sub.w	r8, r8, r1
 8007d0c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d10:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d14:	fa1f f888 	uxth.w	r8, r8
 8007d18:	1419      	asrs	r1, r3, #16
 8007d1a:	454e      	cmp	r6, r9
 8007d1c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d20:	f84a 3b04 	str.w	r3, [sl], #4
 8007d24:	d8e8      	bhi.n	8007cf8 <__mdiff+0x80>
 8007d26:	1b33      	subs	r3, r6, r4
 8007d28:	3b15      	subs	r3, #21
 8007d2a:	f023 0303 	bic.w	r3, r3, #3
 8007d2e:	3304      	adds	r3, #4
 8007d30:	3415      	adds	r4, #21
 8007d32:	42a6      	cmp	r6, r4
 8007d34:	bf38      	it	cc
 8007d36:	2304      	movcc	r3, #4
 8007d38:	441d      	add	r5, r3
 8007d3a:	4473      	add	r3, lr
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	462e      	mov	r6, r5
 8007d40:	4566      	cmp	r6, ip
 8007d42:	d30e      	bcc.n	8007d62 <__mdiff+0xea>
 8007d44:	f10c 0203 	add.w	r2, ip, #3
 8007d48:	1b52      	subs	r2, r2, r5
 8007d4a:	f022 0203 	bic.w	r2, r2, #3
 8007d4e:	3d03      	subs	r5, #3
 8007d50:	45ac      	cmp	ip, r5
 8007d52:	bf38      	it	cc
 8007d54:	2200      	movcc	r2, #0
 8007d56:	4413      	add	r3, r2
 8007d58:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d5c:	b17a      	cbz	r2, 8007d7e <__mdiff+0x106>
 8007d5e:	6107      	str	r7, [r0, #16]
 8007d60:	e7a4      	b.n	8007cac <__mdiff+0x34>
 8007d62:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d66:	fa11 f288 	uxtah	r2, r1, r8
 8007d6a:	1414      	asrs	r4, r2, #16
 8007d6c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d70:	b292      	uxth	r2, r2
 8007d72:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d76:	f84e 2b04 	str.w	r2, [lr], #4
 8007d7a:	1421      	asrs	r1, r4, #16
 8007d7c:	e7e0      	b.n	8007d40 <__mdiff+0xc8>
 8007d7e:	3f01      	subs	r7, #1
 8007d80:	e7ea      	b.n	8007d58 <__mdiff+0xe0>
 8007d82:	bf00      	nop
 8007d84:	080093e4 	.word	0x080093e4
 8007d88:	08009406 	.word	0x08009406

08007d8c <__d2b>:
 8007d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d90:	460f      	mov	r7, r1
 8007d92:	2101      	movs	r1, #1
 8007d94:	ec59 8b10 	vmov	r8, r9, d0
 8007d98:	4616      	mov	r6, r2
 8007d9a:	f7ff fcd5 	bl	8007748 <_Balloc>
 8007d9e:	4604      	mov	r4, r0
 8007da0:	b930      	cbnz	r0, 8007db0 <__d2b+0x24>
 8007da2:	4602      	mov	r2, r0
 8007da4:	4b24      	ldr	r3, [pc, #144]	; (8007e38 <__d2b+0xac>)
 8007da6:	4825      	ldr	r0, [pc, #148]	; (8007e3c <__d2b+0xb0>)
 8007da8:	f240 310f 	movw	r1, #783	; 0x30f
 8007dac:	f000 fa08 	bl	80081c0 <__assert_func>
 8007db0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007db4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007db8:	bb2d      	cbnz	r5, 8007e06 <__d2b+0x7a>
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	f1b8 0300 	subs.w	r3, r8, #0
 8007dc0:	d026      	beq.n	8007e10 <__d2b+0x84>
 8007dc2:	4668      	mov	r0, sp
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	f7ff fd87 	bl	80078d8 <__lo0bits>
 8007dca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007dce:	b1e8      	cbz	r0, 8007e0c <__d2b+0x80>
 8007dd0:	f1c0 0320 	rsb	r3, r0, #32
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	40c2      	lsrs	r2, r0
 8007ddc:	6163      	str	r3, [r4, #20]
 8007dde:	9201      	str	r2, [sp, #4]
 8007de0:	9b01      	ldr	r3, [sp, #4]
 8007de2:	61a3      	str	r3, [r4, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bf14      	ite	ne
 8007de8:	2202      	movne	r2, #2
 8007dea:	2201      	moveq	r2, #1
 8007dec:	6122      	str	r2, [r4, #16]
 8007dee:	b1bd      	cbz	r5, 8007e20 <__d2b+0x94>
 8007df0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007df4:	4405      	add	r5, r0
 8007df6:	603d      	str	r5, [r7, #0]
 8007df8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007dfc:	6030      	str	r0, [r6, #0]
 8007dfe:	4620      	mov	r0, r4
 8007e00:	b003      	add	sp, #12
 8007e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e0a:	e7d6      	b.n	8007dba <__d2b+0x2e>
 8007e0c:	6161      	str	r1, [r4, #20]
 8007e0e:	e7e7      	b.n	8007de0 <__d2b+0x54>
 8007e10:	a801      	add	r0, sp, #4
 8007e12:	f7ff fd61 	bl	80078d8 <__lo0bits>
 8007e16:	9b01      	ldr	r3, [sp, #4]
 8007e18:	6163      	str	r3, [r4, #20]
 8007e1a:	3020      	adds	r0, #32
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	e7e5      	b.n	8007dec <__d2b+0x60>
 8007e20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e28:	6038      	str	r0, [r7, #0]
 8007e2a:	6918      	ldr	r0, [r3, #16]
 8007e2c:	f7ff fd34 	bl	8007898 <__hi0bits>
 8007e30:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e34:	e7e2      	b.n	8007dfc <__d2b+0x70>
 8007e36:	bf00      	nop
 8007e38:	080093e4 	.word	0x080093e4
 8007e3c:	08009406 	.word	0x08009406

08007e40 <__sread>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	460c      	mov	r4, r1
 8007e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e48:	f000 f978 	bl	800813c <_read_r>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	bfab      	itete	ge
 8007e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e52:	89a3      	ldrhlt	r3, [r4, #12]
 8007e54:	181b      	addge	r3, r3, r0
 8007e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e5a:	bfac      	ite	ge
 8007e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e5e:	81a3      	strhlt	r3, [r4, #12]
 8007e60:	bd10      	pop	{r4, pc}

08007e62 <__swrite>:
 8007e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e66:	461f      	mov	r7, r3
 8007e68:	898b      	ldrh	r3, [r1, #12]
 8007e6a:	05db      	lsls	r3, r3, #23
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	4616      	mov	r6, r2
 8007e72:	d505      	bpl.n	8007e80 <__swrite+0x1e>
 8007e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e78:	2302      	movs	r3, #2
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f000 f94c 	bl	8008118 <_lseek_r>
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e8a:	81a3      	strh	r3, [r4, #12]
 8007e8c:	4632      	mov	r2, r6
 8007e8e:	463b      	mov	r3, r7
 8007e90:	4628      	mov	r0, r5
 8007e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e96:	f000 b973 	b.w	8008180 <_write_r>

08007e9a <__sseek>:
 8007e9a:	b510      	push	{r4, lr}
 8007e9c:	460c      	mov	r4, r1
 8007e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea2:	f000 f939 	bl	8008118 <_lseek_r>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	bf15      	itete	ne
 8007eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eb6:	81a3      	strheq	r3, [r4, #12]
 8007eb8:	bf18      	it	ne
 8007eba:	81a3      	strhne	r3, [r4, #12]
 8007ebc:	bd10      	pop	{r4, pc}

08007ebe <__sclose>:
 8007ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec2:	f000 b8f7 	b.w	80080b4 <_close_r>

08007ec6 <__swbuf_r>:
 8007ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec8:	460e      	mov	r6, r1
 8007eca:	4614      	mov	r4, r2
 8007ecc:	4605      	mov	r5, r0
 8007ece:	b118      	cbz	r0, 8007ed8 <__swbuf_r+0x12>
 8007ed0:	6a03      	ldr	r3, [r0, #32]
 8007ed2:	b90b      	cbnz	r3, 8007ed8 <__swbuf_r+0x12>
 8007ed4:	f7fe fa38 	bl	8006348 <__sinit>
 8007ed8:	69a3      	ldr	r3, [r4, #24]
 8007eda:	60a3      	str	r3, [r4, #8]
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	071a      	lsls	r2, r3, #28
 8007ee0:	d525      	bpl.n	8007f2e <__swbuf_r+0x68>
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	b31b      	cbz	r3, 8007f2e <__swbuf_r+0x68>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	6922      	ldr	r2, [r4, #16]
 8007eea:	1a98      	subs	r0, r3, r2
 8007eec:	6963      	ldr	r3, [r4, #20]
 8007eee:	b2f6      	uxtb	r6, r6
 8007ef0:	4283      	cmp	r3, r0
 8007ef2:	4637      	mov	r7, r6
 8007ef4:	dc04      	bgt.n	8007f00 <__swbuf_r+0x3a>
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f7ff fbf1 	bl	80076e0 <_fflush_r>
 8007efe:	b9e0      	cbnz	r0, 8007f3a <__swbuf_r+0x74>
 8007f00:	68a3      	ldr	r3, [r4, #8]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	60a3      	str	r3, [r4, #8]
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	6022      	str	r2, [r4, #0]
 8007f0c:	701e      	strb	r6, [r3, #0]
 8007f0e:	6962      	ldr	r2, [r4, #20]
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d004      	beq.n	8007f20 <__swbuf_r+0x5a>
 8007f16:	89a3      	ldrh	r3, [r4, #12]
 8007f18:	07db      	lsls	r3, r3, #31
 8007f1a:	d506      	bpl.n	8007f2a <__swbuf_r+0x64>
 8007f1c:	2e0a      	cmp	r6, #10
 8007f1e:	d104      	bne.n	8007f2a <__swbuf_r+0x64>
 8007f20:	4621      	mov	r1, r4
 8007f22:	4628      	mov	r0, r5
 8007f24:	f7ff fbdc 	bl	80076e0 <_fflush_r>
 8007f28:	b938      	cbnz	r0, 8007f3a <__swbuf_r+0x74>
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4628      	mov	r0, r5
 8007f32:	f000 f805 	bl	8007f40 <__swsetup_r>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d0d5      	beq.n	8007ee6 <__swbuf_r+0x20>
 8007f3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f3e:	e7f4      	b.n	8007f2a <__swbuf_r+0x64>

08007f40 <__swsetup_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4b2a      	ldr	r3, [pc, #168]	; (8007fec <__swsetup_r+0xac>)
 8007f44:	4605      	mov	r5, r0
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	460c      	mov	r4, r1
 8007f4a:	b118      	cbz	r0, 8007f54 <__swsetup_r+0x14>
 8007f4c:	6a03      	ldr	r3, [r0, #32]
 8007f4e:	b90b      	cbnz	r3, 8007f54 <__swsetup_r+0x14>
 8007f50:	f7fe f9fa 	bl	8006348 <__sinit>
 8007f54:	89a3      	ldrh	r3, [r4, #12]
 8007f56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f5a:	0718      	lsls	r0, r3, #28
 8007f5c:	d422      	bmi.n	8007fa4 <__swsetup_r+0x64>
 8007f5e:	06d9      	lsls	r1, r3, #27
 8007f60:	d407      	bmi.n	8007f72 <__swsetup_r+0x32>
 8007f62:	2309      	movs	r3, #9
 8007f64:	602b      	str	r3, [r5, #0]
 8007f66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f6a:	81a3      	strh	r3, [r4, #12]
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f70:	e034      	b.n	8007fdc <__swsetup_r+0x9c>
 8007f72:	0758      	lsls	r0, r3, #29
 8007f74:	d512      	bpl.n	8007f9c <__swsetup_r+0x5c>
 8007f76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f78:	b141      	cbz	r1, 8007f8c <__swsetup_r+0x4c>
 8007f7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f7e:	4299      	cmp	r1, r3
 8007f80:	d002      	beq.n	8007f88 <__swsetup_r+0x48>
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f950 	bl	8008228 <_free_r>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	6363      	str	r3, [r4, #52]	; 0x34
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	2300      	movs	r3, #0
 8007f96:	6063      	str	r3, [r4, #4]
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	6023      	str	r3, [r4, #0]
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	f043 0308 	orr.w	r3, r3, #8
 8007fa2:	81a3      	strh	r3, [r4, #12]
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	b94b      	cbnz	r3, 8007fbc <__swsetup_r+0x7c>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fb2:	d003      	beq.n	8007fbc <__swsetup_r+0x7c>
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f000 f840 	bl	800803c <__smakebuf_r>
 8007fbc:	89a0      	ldrh	r0, [r4, #12]
 8007fbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fc2:	f010 0301 	ands.w	r3, r0, #1
 8007fc6:	d00a      	beq.n	8007fde <__swsetup_r+0x9e>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60a3      	str	r3, [r4, #8]
 8007fcc:	6963      	ldr	r3, [r4, #20]
 8007fce:	425b      	negs	r3, r3
 8007fd0:	61a3      	str	r3, [r4, #24]
 8007fd2:	6923      	ldr	r3, [r4, #16]
 8007fd4:	b943      	cbnz	r3, 8007fe8 <__swsetup_r+0xa8>
 8007fd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fda:	d1c4      	bne.n	8007f66 <__swsetup_r+0x26>
 8007fdc:	bd38      	pop	{r3, r4, r5, pc}
 8007fde:	0781      	lsls	r1, r0, #30
 8007fe0:	bf58      	it	pl
 8007fe2:	6963      	ldrpl	r3, [r4, #20]
 8007fe4:	60a3      	str	r3, [r4, #8]
 8007fe6:	e7f4      	b.n	8007fd2 <__swsetup_r+0x92>
 8007fe8:	2000      	movs	r0, #0
 8007fea:	e7f7      	b.n	8007fdc <__swsetup_r+0x9c>
 8007fec:	2000006c 	.word	0x2000006c

08007ff0 <__swhatbuf_r>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff8:	2900      	cmp	r1, #0
 8007ffa:	b096      	sub	sp, #88	; 0x58
 8007ffc:	4615      	mov	r5, r2
 8007ffe:	461e      	mov	r6, r3
 8008000:	da0d      	bge.n	800801e <__swhatbuf_r+0x2e>
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008008:	f04f 0100 	mov.w	r1, #0
 800800c:	bf0c      	ite	eq
 800800e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008012:	2340      	movne	r3, #64	; 0x40
 8008014:	2000      	movs	r0, #0
 8008016:	6031      	str	r1, [r6, #0]
 8008018:	602b      	str	r3, [r5, #0]
 800801a:	b016      	add	sp, #88	; 0x58
 800801c:	bd70      	pop	{r4, r5, r6, pc}
 800801e:	466a      	mov	r2, sp
 8008020:	f000 f858 	bl	80080d4 <_fstat_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	dbec      	blt.n	8008002 <__swhatbuf_r+0x12>
 8008028:	9901      	ldr	r1, [sp, #4]
 800802a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800802e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008032:	4259      	negs	r1, r3
 8008034:	4159      	adcs	r1, r3
 8008036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800803a:	e7eb      	b.n	8008014 <__swhatbuf_r+0x24>

0800803c <__smakebuf_r>:
 800803c:	898b      	ldrh	r3, [r1, #12]
 800803e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008040:	079d      	lsls	r5, r3, #30
 8008042:	4606      	mov	r6, r0
 8008044:	460c      	mov	r4, r1
 8008046:	d507      	bpl.n	8008058 <__smakebuf_r+0x1c>
 8008048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	6123      	str	r3, [r4, #16]
 8008050:	2301      	movs	r3, #1
 8008052:	6163      	str	r3, [r4, #20]
 8008054:	b002      	add	sp, #8
 8008056:	bd70      	pop	{r4, r5, r6, pc}
 8008058:	ab01      	add	r3, sp, #4
 800805a:	466a      	mov	r2, sp
 800805c:	f7ff ffc8 	bl	8007ff0 <__swhatbuf_r>
 8008060:	9900      	ldr	r1, [sp, #0]
 8008062:	4605      	mov	r5, r0
 8008064:	4630      	mov	r0, r6
 8008066:	f7ff fa35 	bl	80074d4 <_malloc_r>
 800806a:	b948      	cbnz	r0, 8008080 <__smakebuf_r+0x44>
 800806c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008070:	059a      	lsls	r2, r3, #22
 8008072:	d4ef      	bmi.n	8008054 <__smakebuf_r+0x18>
 8008074:	f023 0303 	bic.w	r3, r3, #3
 8008078:	f043 0302 	orr.w	r3, r3, #2
 800807c:	81a3      	strh	r3, [r4, #12]
 800807e:	e7e3      	b.n	8008048 <__smakebuf_r+0xc>
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	6020      	str	r0, [r4, #0]
 8008084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008088:	81a3      	strh	r3, [r4, #12]
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	6163      	str	r3, [r4, #20]
 800808e:	9b01      	ldr	r3, [sp, #4]
 8008090:	6120      	str	r0, [r4, #16]
 8008092:	b15b      	cbz	r3, 80080ac <__smakebuf_r+0x70>
 8008094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008098:	4630      	mov	r0, r6
 800809a:	f000 f82d 	bl	80080f8 <_isatty_r>
 800809e:	b128      	cbz	r0, 80080ac <__smakebuf_r+0x70>
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	f023 0303 	bic.w	r3, r3, #3
 80080a6:	f043 0301 	orr.w	r3, r3, #1
 80080aa:	81a3      	strh	r3, [r4, #12]
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	431d      	orrs	r5, r3
 80080b0:	81a5      	strh	r5, [r4, #12]
 80080b2:	e7cf      	b.n	8008054 <__smakebuf_r+0x18>

080080b4 <_close_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4d06      	ldr	r5, [pc, #24]	; (80080d0 <_close_r+0x1c>)
 80080b8:	2300      	movs	r3, #0
 80080ba:	4604      	mov	r4, r0
 80080bc:	4608      	mov	r0, r1
 80080be:	602b      	str	r3, [r5, #0]
 80080c0:	f7f9 ff7d 	bl	8001fbe <_close>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_close_r+0x1a>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_close_r+0x1a>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	2000057c 	.word	0x2000057c

080080d4 <_fstat_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d07      	ldr	r5, [pc, #28]	; (80080f4 <_fstat_r+0x20>)
 80080d8:	2300      	movs	r3, #0
 80080da:	4604      	mov	r4, r0
 80080dc:	4608      	mov	r0, r1
 80080de:	4611      	mov	r1, r2
 80080e0:	602b      	str	r3, [r5, #0]
 80080e2:	f7f9 ff78 	bl	8001fd6 <_fstat>
 80080e6:	1c43      	adds	r3, r0, #1
 80080e8:	d102      	bne.n	80080f0 <_fstat_r+0x1c>
 80080ea:	682b      	ldr	r3, [r5, #0]
 80080ec:	b103      	cbz	r3, 80080f0 <_fstat_r+0x1c>
 80080ee:	6023      	str	r3, [r4, #0]
 80080f0:	bd38      	pop	{r3, r4, r5, pc}
 80080f2:	bf00      	nop
 80080f4:	2000057c 	.word	0x2000057c

080080f8 <_isatty_r>:
 80080f8:	b538      	push	{r3, r4, r5, lr}
 80080fa:	4d06      	ldr	r5, [pc, #24]	; (8008114 <_isatty_r+0x1c>)
 80080fc:	2300      	movs	r3, #0
 80080fe:	4604      	mov	r4, r0
 8008100:	4608      	mov	r0, r1
 8008102:	602b      	str	r3, [r5, #0]
 8008104:	f7f9 ff77 	bl	8001ff6 <_isatty>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	d102      	bne.n	8008112 <_isatty_r+0x1a>
 800810c:	682b      	ldr	r3, [r5, #0]
 800810e:	b103      	cbz	r3, 8008112 <_isatty_r+0x1a>
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	bd38      	pop	{r3, r4, r5, pc}
 8008114:	2000057c 	.word	0x2000057c

08008118 <_lseek_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d07      	ldr	r5, [pc, #28]	; (8008138 <_lseek_r+0x20>)
 800811c:	4604      	mov	r4, r0
 800811e:	4608      	mov	r0, r1
 8008120:	4611      	mov	r1, r2
 8008122:	2200      	movs	r2, #0
 8008124:	602a      	str	r2, [r5, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f7f9 ff70 	bl	800200c <_lseek>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d102      	bne.n	8008136 <_lseek_r+0x1e>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	b103      	cbz	r3, 8008136 <_lseek_r+0x1e>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	2000057c 	.word	0x2000057c

0800813c <_read_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4d07      	ldr	r5, [pc, #28]	; (800815c <_read_r+0x20>)
 8008140:	4604      	mov	r4, r0
 8008142:	4608      	mov	r0, r1
 8008144:	4611      	mov	r1, r2
 8008146:	2200      	movs	r2, #0
 8008148:	602a      	str	r2, [r5, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	f7f9 ff1a 	bl	8001f84 <_read>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d102      	bne.n	800815a <_read_r+0x1e>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b103      	cbz	r3, 800815a <_read_r+0x1e>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	2000057c 	.word	0x2000057c

08008160 <_sbrk_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4d06      	ldr	r5, [pc, #24]	; (800817c <_sbrk_r+0x1c>)
 8008164:	2300      	movs	r3, #0
 8008166:	4604      	mov	r4, r0
 8008168:	4608      	mov	r0, r1
 800816a:	602b      	str	r3, [r5, #0]
 800816c:	f7f9 ff5c 	bl	8002028 <_sbrk>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d102      	bne.n	800817a <_sbrk_r+0x1a>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	b103      	cbz	r3, 800817a <_sbrk_r+0x1a>
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	2000057c 	.word	0x2000057c

08008180 <_write_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4d07      	ldr	r5, [pc, #28]	; (80081a0 <_write_r+0x20>)
 8008184:	4604      	mov	r4, r0
 8008186:	4608      	mov	r0, r1
 8008188:	4611      	mov	r1, r2
 800818a:	2200      	movs	r2, #0
 800818c:	602a      	str	r2, [r5, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	f7f9 fb34 	bl	80017fc <_write>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_write_r+0x1e>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	b103      	cbz	r3, 800819e <_write_r+0x1e>
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	2000057c 	.word	0x2000057c

080081a4 <memcpy>:
 80081a4:	440a      	add	r2, r1
 80081a6:	4291      	cmp	r1, r2
 80081a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80081ac:	d100      	bne.n	80081b0 <memcpy+0xc>
 80081ae:	4770      	bx	lr
 80081b0:	b510      	push	{r4, lr}
 80081b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ba:	4291      	cmp	r1, r2
 80081bc:	d1f9      	bne.n	80081b2 <memcpy+0xe>
 80081be:	bd10      	pop	{r4, pc}

080081c0 <__assert_func>:
 80081c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081c2:	4614      	mov	r4, r2
 80081c4:	461a      	mov	r2, r3
 80081c6:	4b09      	ldr	r3, [pc, #36]	; (80081ec <__assert_func+0x2c>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4605      	mov	r5, r0
 80081cc:	68d8      	ldr	r0, [r3, #12]
 80081ce:	b14c      	cbz	r4, 80081e4 <__assert_func+0x24>
 80081d0:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <__assert_func+0x30>)
 80081d2:	9100      	str	r1, [sp, #0]
 80081d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081d8:	4906      	ldr	r1, [pc, #24]	; (80081f4 <__assert_func+0x34>)
 80081da:	462b      	mov	r3, r5
 80081dc:	f000 f882 	bl	80082e4 <fiprintf>
 80081e0:	f000 f89f 	bl	8008322 <abort>
 80081e4:	4b04      	ldr	r3, [pc, #16]	; (80081f8 <__assert_func+0x38>)
 80081e6:	461c      	mov	r4, r3
 80081e8:	e7f3      	b.n	80081d2 <__assert_func+0x12>
 80081ea:	bf00      	nop
 80081ec:	2000006c 	.word	0x2000006c
 80081f0:	08009667 	.word	0x08009667
 80081f4:	08009674 	.word	0x08009674
 80081f8:	080096a2 	.word	0x080096a2

080081fc <_calloc_r>:
 80081fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081fe:	fba1 2402 	umull	r2, r4, r1, r2
 8008202:	b94c      	cbnz	r4, 8008218 <_calloc_r+0x1c>
 8008204:	4611      	mov	r1, r2
 8008206:	9201      	str	r2, [sp, #4]
 8008208:	f7ff f964 	bl	80074d4 <_malloc_r>
 800820c:	9a01      	ldr	r2, [sp, #4]
 800820e:	4605      	mov	r5, r0
 8008210:	b930      	cbnz	r0, 8008220 <_calloc_r+0x24>
 8008212:	4628      	mov	r0, r5
 8008214:	b003      	add	sp, #12
 8008216:	bd30      	pop	{r4, r5, pc}
 8008218:	220c      	movs	r2, #12
 800821a:	6002      	str	r2, [r0, #0]
 800821c:	2500      	movs	r5, #0
 800821e:	e7f8      	b.n	8008212 <_calloc_r+0x16>
 8008220:	4621      	mov	r1, r4
 8008222:	f7fe f935 	bl	8006490 <memset>
 8008226:	e7f4      	b.n	8008212 <_calloc_r+0x16>

08008228 <_free_r>:
 8008228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800822a:	2900      	cmp	r1, #0
 800822c:	d044      	beq.n	80082b8 <_free_r+0x90>
 800822e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008232:	9001      	str	r0, [sp, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f1a1 0404 	sub.w	r4, r1, #4
 800823a:	bfb8      	it	lt
 800823c:	18e4      	addlt	r4, r4, r3
 800823e:	f7ff fa77 	bl	8007730 <__malloc_lock>
 8008242:	4a1e      	ldr	r2, [pc, #120]	; (80082bc <_free_r+0x94>)
 8008244:	9801      	ldr	r0, [sp, #4]
 8008246:	6813      	ldr	r3, [r2, #0]
 8008248:	b933      	cbnz	r3, 8008258 <_free_r+0x30>
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	6014      	str	r4, [r2, #0]
 800824e:	b003      	add	sp, #12
 8008250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008254:	f7ff ba72 	b.w	800773c <__malloc_unlock>
 8008258:	42a3      	cmp	r3, r4
 800825a:	d908      	bls.n	800826e <_free_r+0x46>
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	1961      	adds	r1, r4, r5
 8008260:	428b      	cmp	r3, r1
 8008262:	bf01      	itttt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	1949      	addeq	r1, r1, r5
 800826a:	6021      	streq	r1, [r4, #0]
 800826c:	e7ed      	b.n	800824a <_free_r+0x22>
 800826e:	461a      	mov	r2, r3
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	b10b      	cbz	r3, 8008278 <_free_r+0x50>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d9fa      	bls.n	800826e <_free_r+0x46>
 8008278:	6811      	ldr	r1, [r2, #0]
 800827a:	1855      	adds	r5, r2, r1
 800827c:	42a5      	cmp	r5, r4
 800827e:	d10b      	bne.n	8008298 <_free_r+0x70>
 8008280:	6824      	ldr	r4, [r4, #0]
 8008282:	4421      	add	r1, r4
 8008284:	1854      	adds	r4, r2, r1
 8008286:	42a3      	cmp	r3, r4
 8008288:	6011      	str	r1, [r2, #0]
 800828a:	d1e0      	bne.n	800824e <_free_r+0x26>
 800828c:	681c      	ldr	r4, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	6053      	str	r3, [r2, #4]
 8008292:	440c      	add	r4, r1
 8008294:	6014      	str	r4, [r2, #0]
 8008296:	e7da      	b.n	800824e <_free_r+0x26>
 8008298:	d902      	bls.n	80082a0 <_free_r+0x78>
 800829a:	230c      	movs	r3, #12
 800829c:	6003      	str	r3, [r0, #0]
 800829e:	e7d6      	b.n	800824e <_free_r+0x26>
 80082a0:	6825      	ldr	r5, [r4, #0]
 80082a2:	1961      	adds	r1, r4, r5
 80082a4:	428b      	cmp	r3, r1
 80082a6:	bf04      	itt	eq
 80082a8:	6819      	ldreq	r1, [r3, #0]
 80082aa:	685b      	ldreq	r3, [r3, #4]
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	bf04      	itt	eq
 80082b0:	1949      	addeq	r1, r1, r5
 80082b2:	6021      	streq	r1, [r4, #0]
 80082b4:	6054      	str	r4, [r2, #4]
 80082b6:	e7ca      	b.n	800824e <_free_r+0x26>
 80082b8:	b003      	add	sp, #12
 80082ba:	bd30      	pop	{r4, r5, pc}
 80082bc:	20000574 	.word	0x20000574

080082c0 <__ascii_mbtowc>:
 80082c0:	b082      	sub	sp, #8
 80082c2:	b901      	cbnz	r1, 80082c6 <__ascii_mbtowc+0x6>
 80082c4:	a901      	add	r1, sp, #4
 80082c6:	b142      	cbz	r2, 80082da <__ascii_mbtowc+0x1a>
 80082c8:	b14b      	cbz	r3, 80082de <__ascii_mbtowc+0x1e>
 80082ca:	7813      	ldrb	r3, [r2, #0]
 80082cc:	600b      	str	r3, [r1, #0]
 80082ce:	7812      	ldrb	r2, [r2, #0]
 80082d0:	1e10      	subs	r0, r2, #0
 80082d2:	bf18      	it	ne
 80082d4:	2001      	movne	r0, #1
 80082d6:	b002      	add	sp, #8
 80082d8:	4770      	bx	lr
 80082da:	4610      	mov	r0, r2
 80082dc:	e7fb      	b.n	80082d6 <__ascii_mbtowc+0x16>
 80082de:	f06f 0001 	mvn.w	r0, #1
 80082e2:	e7f8      	b.n	80082d6 <__ascii_mbtowc+0x16>

080082e4 <fiprintf>:
 80082e4:	b40e      	push	{r1, r2, r3}
 80082e6:	b503      	push	{r0, r1, lr}
 80082e8:	4601      	mov	r1, r0
 80082ea:	ab03      	add	r3, sp, #12
 80082ec:	4805      	ldr	r0, [pc, #20]	; (8008304 <fiprintf+0x20>)
 80082ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f2:	6800      	ldr	r0, [r0, #0]
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	f7fe ffab 	bl	8007250 <_vfiprintf_r>
 80082fa:	b002      	add	sp, #8
 80082fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008300:	b003      	add	sp, #12
 8008302:	4770      	bx	lr
 8008304:	2000006c 	.word	0x2000006c

08008308 <__ascii_wctomb>:
 8008308:	b149      	cbz	r1, 800831e <__ascii_wctomb+0x16>
 800830a:	2aff      	cmp	r2, #255	; 0xff
 800830c:	bf85      	ittet	hi
 800830e:	238a      	movhi	r3, #138	; 0x8a
 8008310:	6003      	strhi	r3, [r0, #0]
 8008312:	700a      	strbls	r2, [r1, #0]
 8008314:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008318:	bf98      	it	ls
 800831a:	2001      	movls	r0, #1
 800831c:	4770      	bx	lr
 800831e:	4608      	mov	r0, r1
 8008320:	4770      	bx	lr

08008322 <abort>:
 8008322:	b508      	push	{r3, lr}
 8008324:	2006      	movs	r0, #6
 8008326:	f000 f82b 	bl	8008380 <raise>
 800832a:	2001      	movs	r0, #1
 800832c:	f7f9 fe20 	bl	8001f70 <_exit>

08008330 <_raise_r>:
 8008330:	291f      	cmp	r1, #31
 8008332:	b538      	push	{r3, r4, r5, lr}
 8008334:	4604      	mov	r4, r0
 8008336:	460d      	mov	r5, r1
 8008338:	d904      	bls.n	8008344 <_raise_r+0x14>
 800833a:	2316      	movs	r3, #22
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008346:	b112      	cbz	r2, 800834e <_raise_r+0x1e>
 8008348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800834c:	b94b      	cbnz	r3, 8008362 <_raise_r+0x32>
 800834e:	4620      	mov	r0, r4
 8008350:	f000 f830 	bl	80083b4 <_getpid_r>
 8008354:	462a      	mov	r2, r5
 8008356:	4601      	mov	r1, r0
 8008358:	4620      	mov	r0, r4
 800835a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800835e:	f000 b817 	b.w	8008390 <_kill_r>
 8008362:	2b01      	cmp	r3, #1
 8008364:	d00a      	beq.n	800837c <_raise_r+0x4c>
 8008366:	1c59      	adds	r1, r3, #1
 8008368:	d103      	bne.n	8008372 <_raise_r+0x42>
 800836a:	2316      	movs	r3, #22
 800836c:	6003      	str	r3, [r0, #0]
 800836e:	2001      	movs	r0, #1
 8008370:	e7e7      	b.n	8008342 <_raise_r+0x12>
 8008372:	2400      	movs	r4, #0
 8008374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008378:	4628      	mov	r0, r5
 800837a:	4798      	blx	r3
 800837c:	2000      	movs	r0, #0
 800837e:	e7e0      	b.n	8008342 <_raise_r+0x12>

08008380 <raise>:
 8008380:	4b02      	ldr	r3, [pc, #8]	; (800838c <raise+0xc>)
 8008382:	4601      	mov	r1, r0
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	f7ff bfd3 	b.w	8008330 <_raise_r>
 800838a:	bf00      	nop
 800838c:	2000006c 	.word	0x2000006c

08008390 <_kill_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d07      	ldr	r5, [pc, #28]	; (80083b0 <_kill_r+0x20>)
 8008394:	2300      	movs	r3, #0
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	4611      	mov	r1, r2
 800839c:	602b      	str	r3, [r5, #0]
 800839e:	f7f9 fdd7 	bl	8001f50 <_kill>
 80083a2:	1c43      	adds	r3, r0, #1
 80083a4:	d102      	bne.n	80083ac <_kill_r+0x1c>
 80083a6:	682b      	ldr	r3, [r5, #0]
 80083a8:	b103      	cbz	r3, 80083ac <_kill_r+0x1c>
 80083aa:	6023      	str	r3, [r4, #0]
 80083ac:	bd38      	pop	{r3, r4, r5, pc}
 80083ae:	bf00      	nop
 80083b0:	2000057c 	.word	0x2000057c

080083b4 <_getpid_r>:
 80083b4:	f7f9 bdc4 	b.w	8001f40 <_getpid>

080083b8 <pow>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	ed2d 8b02 	vpush	{d8}
 80083be:	eeb0 8a40 	vmov.f32	s16, s0
 80083c2:	eef0 8a60 	vmov.f32	s17, s1
 80083c6:	ec55 4b11 	vmov	r4, r5, d1
 80083ca:	f000 f871 	bl	80084b0 <__ieee754_pow>
 80083ce:	4622      	mov	r2, r4
 80083d0:	462b      	mov	r3, r5
 80083d2:	4620      	mov	r0, r4
 80083d4:	4629      	mov	r1, r5
 80083d6:	ec57 6b10 	vmov	r6, r7, d0
 80083da:	f7f8 fba7 	bl	8000b2c <__aeabi_dcmpun>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d13b      	bne.n	800845a <pow+0xa2>
 80083e2:	ec51 0b18 	vmov	r0, r1, d8
 80083e6:	2200      	movs	r2, #0
 80083e8:	2300      	movs	r3, #0
 80083ea:	f7f8 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80083ee:	b1b8      	cbz	r0, 8008420 <pow+0x68>
 80083f0:	2200      	movs	r2, #0
 80083f2:	2300      	movs	r3, #0
 80083f4:	4620      	mov	r0, r4
 80083f6:	4629      	mov	r1, r5
 80083f8:	f7f8 fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d146      	bne.n	800848e <pow+0xd6>
 8008400:	ec45 4b10 	vmov	d0, r4, r5
 8008404:	f000 f848 	bl	8008498 <finite>
 8008408:	b338      	cbz	r0, 800845a <pow+0xa2>
 800840a:	2200      	movs	r2, #0
 800840c:	2300      	movs	r3, #0
 800840e:	4620      	mov	r0, r4
 8008410:	4629      	mov	r1, r5
 8008412:	f7f8 fb63 	bl	8000adc <__aeabi_dcmplt>
 8008416:	b300      	cbz	r0, 800845a <pow+0xa2>
 8008418:	f7fe f846 	bl	80064a8 <__errno>
 800841c:	2322      	movs	r3, #34	; 0x22
 800841e:	e01b      	b.n	8008458 <pow+0xa0>
 8008420:	ec47 6b10 	vmov	d0, r6, r7
 8008424:	f000 f838 	bl	8008498 <finite>
 8008428:	b9e0      	cbnz	r0, 8008464 <pow+0xac>
 800842a:	eeb0 0a48 	vmov.f32	s0, s16
 800842e:	eef0 0a68 	vmov.f32	s1, s17
 8008432:	f000 f831 	bl	8008498 <finite>
 8008436:	b1a8      	cbz	r0, 8008464 <pow+0xac>
 8008438:	ec45 4b10 	vmov	d0, r4, r5
 800843c:	f000 f82c 	bl	8008498 <finite>
 8008440:	b180      	cbz	r0, 8008464 <pow+0xac>
 8008442:	4632      	mov	r2, r6
 8008444:	463b      	mov	r3, r7
 8008446:	4630      	mov	r0, r6
 8008448:	4639      	mov	r1, r7
 800844a:	f7f8 fb6f 	bl	8000b2c <__aeabi_dcmpun>
 800844e:	2800      	cmp	r0, #0
 8008450:	d0e2      	beq.n	8008418 <pow+0x60>
 8008452:	f7fe f829 	bl	80064a8 <__errno>
 8008456:	2321      	movs	r3, #33	; 0x21
 8008458:	6003      	str	r3, [r0, #0]
 800845a:	ecbd 8b02 	vpop	{d8}
 800845e:	ec47 6b10 	vmov	d0, r6, r7
 8008462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008464:	2200      	movs	r2, #0
 8008466:	2300      	movs	r3, #0
 8008468:	4630      	mov	r0, r6
 800846a:	4639      	mov	r1, r7
 800846c:	f7f8 fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008470:	2800      	cmp	r0, #0
 8008472:	d0f2      	beq.n	800845a <pow+0xa2>
 8008474:	eeb0 0a48 	vmov.f32	s0, s16
 8008478:	eef0 0a68 	vmov.f32	s1, s17
 800847c:	f000 f80c 	bl	8008498 <finite>
 8008480:	2800      	cmp	r0, #0
 8008482:	d0ea      	beq.n	800845a <pow+0xa2>
 8008484:	ec45 4b10 	vmov	d0, r4, r5
 8008488:	f000 f806 	bl	8008498 <finite>
 800848c:	e7c3      	b.n	8008416 <pow+0x5e>
 800848e:	4f01      	ldr	r7, [pc, #4]	; (8008494 <pow+0xdc>)
 8008490:	2600      	movs	r6, #0
 8008492:	e7e2      	b.n	800845a <pow+0xa2>
 8008494:	3ff00000 	.word	0x3ff00000

08008498 <finite>:
 8008498:	b082      	sub	sp, #8
 800849a:	ed8d 0b00 	vstr	d0, [sp]
 800849e:	9801      	ldr	r0, [sp, #4]
 80084a0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80084a4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80084a8:	0fc0      	lsrs	r0, r0, #31
 80084aa:	b002      	add	sp, #8
 80084ac:	4770      	bx	lr
	...

080084b0 <__ieee754_pow>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	ed2d 8b06 	vpush	{d8-d10}
 80084b8:	b089      	sub	sp, #36	; 0x24
 80084ba:	ed8d 1b00 	vstr	d1, [sp]
 80084be:	e9dd 2900 	ldrd	r2, r9, [sp]
 80084c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80084c6:	ea58 0102 	orrs.w	r1, r8, r2
 80084ca:	ec57 6b10 	vmov	r6, r7, d0
 80084ce:	d115      	bne.n	80084fc <__ieee754_pow+0x4c>
 80084d0:	19b3      	adds	r3, r6, r6
 80084d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80084d6:	4152      	adcs	r2, r2
 80084d8:	4299      	cmp	r1, r3
 80084da:	4b89      	ldr	r3, [pc, #548]	; (8008700 <__ieee754_pow+0x250>)
 80084dc:	4193      	sbcs	r3, r2
 80084de:	f080 84d1 	bcs.w	8008e84 <__ieee754_pow+0x9d4>
 80084e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084e6:	4630      	mov	r0, r6
 80084e8:	4639      	mov	r1, r7
 80084ea:	f7f7 fecf 	bl	800028c <__adddf3>
 80084ee:	ec41 0b10 	vmov	d0, r0, r1
 80084f2:	b009      	add	sp, #36	; 0x24
 80084f4:	ecbd 8b06 	vpop	{d8-d10}
 80084f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fc:	4b81      	ldr	r3, [pc, #516]	; (8008704 <__ieee754_pow+0x254>)
 80084fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008502:	429c      	cmp	r4, r3
 8008504:	ee10 aa10 	vmov	sl, s0
 8008508:	463d      	mov	r5, r7
 800850a:	dc06      	bgt.n	800851a <__ieee754_pow+0x6a>
 800850c:	d101      	bne.n	8008512 <__ieee754_pow+0x62>
 800850e:	2e00      	cmp	r6, #0
 8008510:	d1e7      	bne.n	80084e2 <__ieee754_pow+0x32>
 8008512:	4598      	cmp	r8, r3
 8008514:	dc01      	bgt.n	800851a <__ieee754_pow+0x6a>
 8008516:	d10f      	bne.n	8008538 <__ieee754_pow+0x88>
 8008518:	b172      	cbz	r2, 8008538 <__ieee754_pow+0x88>
 800851a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800851e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008522:	ea55 050a 	orrs.w	r5, r5, sl
 8008526:	d1dc      	bne.n	80084e2 <__ieee754_pow+0x32>
 8008528:	e9dd 3200 	ldrd	r3, r2, [sp]
 800852c:	18db      	adds	r3, r3, r3
 800852e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008532:	4152      	adcs	r2, r2
 8008534:	429d      	cmp	r5, r3
 8008536:	e7d0      	b.n	80084da <__ieee754_pow+0x2a>
 8008538:	2d00      	cmp	r5, #0
 800853a:	da3b      	bge.n	80085b4 <__ieee754_pow+0x104>
 800853c:	4b72      	ldr	r3, [pc, #456]	; (8008708 <__ieee754_pow+0x258>)
 800853e:	4598      	cmp	r8, r3
 8008540:	dc51      	bgt.n	80085e6 <__ieee754_pow+0x136>
 8008542:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008546:	4598      	cmp	r8, r3
 8008548:	f340 84ab 	ble.w	8008ea2 <__ieee754_pow+0x9f2>
 800854c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008550:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008554:	2b14      	cmp	r3, #20
 8008556:	dd0f      	ble.n	8008578 <__ieee754_pow+0xc8>
 8008558:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800855c:	fa22 f103 	lsr.w	r1, r2, r3
 8008560:	fa01 f303 	lsl.w	r3, r1, r3
 8008564:	4293      	cmp	r3, r2
 8008566:	f040 849c 	bne.w	8008ea2 <__ieee754_pow+0x9f2>
 800856a:	f001 0101 	and.w	r1, r1, #1
 800856e:	f1c1 0302 	rsb	r3, r1, #2
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	b182      	cbz	r2, 8008598 <__ieee754_pow+0xe8>
 8008576:	e05f      	b.n	8008638 <__ieee754_pow+0x188>
 8008578:	2a00      	cmp	r2, #0
 800857a:	d15b      	bne.n	8008634 <__ieee754_pow+0x184>
 800857c:	f1c3 0314 	rsb	r3, r3, #20
 8008580:	fa48 f103 	asr.w	r1, r8, r3
 8008584:	fa01 f303 	lsl.w	r3, r1, r3
 8008588:	4543      	cmp	r3, r8
 800858a:	f040 8487 	bne.w	8008e9c <__ieee754_pow+0x9ec>
 800858e:	f001 0101 	and.w	r1, r1, #1
 8008592:	f1c1 0302 	rsb	r3, r1, #2
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	4b5c      	ldr	r3, [pc, #368]	; (800870c <__ieee754_pow+0x25c>)
 800859a:	4598      	cmp	r8, r3
 800859c:	d132      	bne.n	8008604 <__ieee754_pow+0x154>
 800859e:	f1b9 0f00 	cmp.w	r9, #0
 80085a2:	f280 8477 	bge.w	8008e94 <__ieee754_pow+0x9e4>
 80085a6:	4959      	ldr	r1, [pc, #356]	; (800870c <__ieee754_pow+0x25c>)
 80085a8:	4632      	mov	r2, r6
 80085aa:	463b      	mov	r3, r7
 80085ac:	2000      	movs	r0, #0
 80085ae:	f7f8 f94d 	bl	800084c <__aeabi_ddiv>
 80085b2:	e79c      	b.n	80084ee <__ieee754_pow+0x3e>
 80085b4:	2300      	movs	r3, #0
 80085b6:	9304      	str	r3, [sp, #16]
 80085b8:	2a00      	cmp	r2, #0
 80085ba:	d13d      	bne.n	8008638 <__ieee754_pow+0x188>
 80085bc:	4b51      	ldr	r3, [pc, #324]	; (8008704 <__ieee754_pow+0x254>)
 80085be:	4598      	cmp	r8, r3
 80085c0:	d1ea      	bne.n	8008598 <__ieee754_pow+0xe8>
 80085c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80085c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80085ca:	ea53 030a 	orrs.w	r3, r3, sl
 80085ce:	f000 8459 	beq.w	8008e84 <__ieee754_pow+0x9d4>
 80085d2:	4b4f      	ldr	r3, [pc, #316]	; (8008710 <__ieee754_pow+0x260>)
 80085d4:	429c      	cmp	r4, r3
 80085d6:	dd08      	ble.n	80085ea <__ieee754_pow+0x13a>
 80085d8:	f1b9 0f00 	cmp.w	r9, #0
 80085dc:	f2c0 8456 	blt.w	8008e8c <__ieee754_pow+0x9dc>
 80085e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085e4:	e783      	b.n	80084ee <__ieee754_pow+0x3e>
 80085e6:	2302      	movs	r3, #2
 80085e8:	e7e5      	b.n	80085b6 <__ieee754_pow+0x106>
 80085ea:	f1b9 0f00 	cmp.w	r9, #0
 80085ee:	f04f 0000 	mov.w	r0, #0
 80085f2:	f04f 0100 	mov.w	r1, #0
 80085f6:	f6bf af7a 	bge.w	80084ee <__ieee754_pow+0x3e>
 80085fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80085fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008602:	e774      	b.n	80084ee <__ieee754_pow+0x3e>
 8008604:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008608:	d106      	bne.n	8008618 <__ieee754_pow+0x168>
 800860a:	4632      	mov	r2, r6
 800860c:	463b      	mov	r3, r7
 800860e:	4630      	mov	r0, r6
 8008610:	4639      	mov	r1, r7
 8008612:	f7f7 fff1 	bl	80005f8 <__aeabi_dmul>
 8008616:	e76a      	b.n	80084ee <__ieee754_pow+0x3e>
 8008618:	4b3e      	ldr	r3, [pc, #248]	; (8008714 <__ieee754_pow+0x264>)
 800861a:	4599      	cmp	r9, r3
 800861c:	d10c      	bne.n	8008638 <__ieee754_pow+0x188>
 800861e:	2d00      	cmp	r5, #0
 8008620:	db0a      	blt.n	8008638 <__ieee754_pow+0x188>
 8008622:	ec47 6b10 	vmov	d0, r6, r7
 8008626:	b009      	add	sp, #36	; 0x24
 8008628:	ecbd 8b06 	vpop	{d8-d10}
 800862c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008630:	f000 bd20 	b.w	8009074 <__ieee754_sqrt>
 8008634:	2300      	movs	r3, #0
 8008636:	9304      	str	r3, [sp, #16]
 8008638:	ec47 6b10 	vmov	d0, r6, r7
 800863c:	f000 fc92 	bl	8008f64 <fabs>
 8008640:	ec51 0b10 	vmov	r0, r1, d0
 8008644:	f1ba 0f00 	cmp.w	sl, #0
 8008648:	d129      	bne.n	800869e <__ieee754_pow+0x1ee>
 800864a:	b124      	cbz	r4, 8008656 <__ieee754_pow+0x1a6>
 800864c:	4b2f      	ldr	r3, [pc, #188]	; (800870c <__ieee754_pow+0x25c>)
 800864e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008652:	429a      	cmp	r2, r3
 8008654:	d123      	bne.n	800869e <__ieee754_pow+0x1ee>
 8008656:	f1b9 0f00 	cmp.w	r9, #0
 800865a:	da05      	bge.n	8008668 <__ieee754_pow+0x1b8>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	2000      	movs	r0, #0
 8008662:	492a      	ldr	r1, [pc, #168]	; (800870c <__ieee754_pow+0x25c>)
 8008664:	f7f8 f8f2 	bl	800084c <__aeabi_ddiv>
 8008668:	2d00      	cmp	r5, #0
 800866a:	f6bf af40 	bge.w	80084ee <__ieee754_pow+0x3e>
 800866e:	9b04      	ldr	r3, [sp, #16]
 8008670:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008674:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008678:	431c      	orrs	r4, r3
 800867a:	d108      	bne.n	800868e <__ieee754_pow+0x1de>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4610      	mov	r0, r2
 8008682:	4619      	mov	r1, r3
 8008684:	f7f7 fe00 	bl	8000288 <__aeabi_dsub>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	e78f      	b.n	80085ae <__ieee754_pow+0xfe>
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	2b01      	cmp	r3, #1
 8008692:	f47f af2c 	bne.w	80084ee <__ieee754_pow+0x3e>
 8008696:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800869a:	4619      	mov	r1, r3
 800869c:	e727      	b.n	80084ee <__ieee754_pow+0x3e>
 800869e:	0feb      	lsrs	r3, r5, #31
 80086a0:	3b01      	subs	r3, #1
 80086a2:	9306      	str	r3, [sp, #24]
 80086a4:	9a06      	ldr	r2, [sp, #24]
 80086a6:	9b04      	ldr	r3, [sp, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	d102      	bne.n	80086b2 <__ieee754_pow+0x202>
 80086ac:	4632      	mov	r2, r6
 80086ae:	463b      	mov	r3, r7
 80086b0:	e7e6      	b.n	8008680 <__ieee754_pow+0x1d0>
 80086b2:	4b19      	ldr	r3, [pc, #100]	; (8008718 <__ieee754_pow+0x268>)
 80086b4:	4598      	cmp	r8, r3
 80086b6:	f340 80fb 	ble.w	80088b0 <__ieee754_pow+0x400>
 80086ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80086be:	4598      	cmp	r8, r3
 80086c0:	4b13      	ldr	r3, [pc, #76]	; (8008710 <__ieee754_pow+0x260>)
 80086c2:	dd0c      	ble.n	80086de <__ieee754_pow+0x22e>
 80086c4:	429c      	cmp	r4, r3
 80086c6:	dc0f      	bgt.n	80086e8 <__ieee754_pow+0x238>
 80086c8:	f1b9 0f00 	cmp.w	r9, #0
 80086cc:	da0f      	bge.n	80086ee <__ieee754_pow+0x23e>
 80086ce:	2000      	movs	r0, #0
 80086d0:	b009      	add	sp, #36	; 0x24
 80086d2:	ecbd 8b06 	vpop	{d8-d10}
 80086d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086da:	f000 bc3a 	b.w	8008f52 <__math_oflow>
 80086de:	429c      	cmp	r4, r3
 80086e0:	dbf2      	blt.n	80086c8 <__ieee754_pow+0x218>
 80086e2:	4b0a      	ldr	r3, [pc, #40]	; (800870c <__ieee754_pow+0x25c>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	dd19      	ble.n	800871c <__ieee754_pow+0x26c>
 80086e8:	f1b9 0f00 	cmp.w	r9, #0
 80086ec:	dcef      	bgt.n	80086ce <__ieee754_pow+0x21e>
 80086ee:	2000      	movs	r0, #0
 80086f0:	b009      	add	sp, #36	; 0x24
 80086f2:	ecbd 8b06 	vpop	{d8-d10}
 80086f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fa:	f000 bc21 	b.w	8008f40 <__math_uflow>
 80086fe:	bf00      	nop
 8008700:	fff00000 	.word	0xfff00000
 8008704:	7ff00000 	.word	0x7ff00000
 8008708:	433fffff 	.word	0x433fffff
 800870c:	3ff00000 	.word	0x3ff00000
 8008710:	3fefffff 	.word	0x3fefffff
 8008714:	3fe00000 	.word	0x3fe00000
 8008718:	41e00000 	.word	0x41e00000
 800871c:	4b60      	ldr	r3, [pc, #384]	; (80088a0 <__ieee754_pow+0x3f0>)
 800871e:	2200      	movs	r2, #0
 8008720:	f7f7 fdb2 	bl	8000288 <__aeabi_dsub>
 8008724:	a354      	add	r3, pc, #336	; (adr r3, 8008878 <__ieee754_pow+0x3c8>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	4604      	mov	r4, r0
 800872c:	460d      	mov	r5, r1
 800872e:	f7f7 ff63 	bl	80005f8 <__aeabi_dmul>
 8008732:	a353      	add	r3, pc, #332	; (adr r3, 8008880 <__ieee754_pow+0x3d0>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	4606      	mov	r6, r0
 800873a:	460f      	mov	r7, r1
 800873c:	4620      	mov	r0, r4
 800873e:	4629      	mov	r1, r5
 8008740:	f7f7 ff5a 	bl	80005f8 <__aeabi_dmul>
 8008744:	4b57      	ldr	r3, [pc, #348]	; (80088a4 <__ieee754_pow+0x3f4>)
 8008746:	4682      	mov	sl, r0
 8008748:	468b      	mov	fp, r1
 800874a:	2200      	movs	r2, #0
 800874c:	4620      	mov	r0, r4
 800874e:	4629      	mov	r1, r5
 8008750:	f7f7 ff52 	bl	80005f8 <__aeabi_dmul>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	a14b      	add	r1, pc, #300	; (adr r1, 8008888 <__ieee754_pow+0x3d8>)
 800875a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800875e:	f7f7 fd93 	bl	8000288 <__aeabi_dsub>
 8008762:	4622      	mov	r2, r4
 8008764:	462b      	mov	r3, r5
 8008766:	f7f7 ff47 	bl	80005f8 <__aeabi_dmul>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	2000      	movs	r0, #0
 8008770:	494d      	ldr	r1, [pc, #308]	; (80088a8 <__ieee754_pow+0x3f8>)
 8008772:	f7f7 fd89 	bl	8000288 <__aeabi_dsub>
 8008776:	4622      	mov	r2, r4
 8008778:	4680      	mov	r8, r0
 800877a:	4689      	mov	r9, r1
 800877c:	462b      	mov	r3, r5
 800877e:	4620      	mov	r0, r4
 8008780:	4629      	mov	r1, r5
 8008782:	f7f7 ff39 	bl	80005f8 <__aeabi_dmul>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	f7f7 ff33 	bl	80005f8 <__aeabi_dmul>
 8008792:	a33f      	add	r3, pc, #252	; (adr r3, 8008890 <__ieee754_pow+0x3e0>)
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f7f7 ff2e 	bl	80005f8 <__aeabi_dmul>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	4650      	mov	r0, sl
 80087a2:	4659      	mov	r1, fp
 80087a4:	f7f7 fd70 	bl	8000288 <__aeabi_dsub>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4680      	mov	r8, r0
 80087ae:	4689      	mov	r9, r1
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f7 fd6a 	bl	800028c <__adddf3>
 80087b8:	2000      	movs	r0, #0
 80087ba:	4632      	mov	r2, r6
 80087bc:	463b      	mov	r3, r7
 80087be:	4604      	mov	r4, r0
 80087c0:	460d      	mov	r5, r1
 80087c2:	f7f7 fd61 	bl	8000288 <__aeabi_dsub>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4640      	mov	r0, r8
 80087cc:	4649      	mov	r1, r9
 80087ce:	f7f7 fd5b 	bl	8000288 <__aeabi_dsub>
 80087d2:	9b04      	ldr	r3, [sp, #16]
 80087d4:	9a06      	ldr	r2, [sp, #24]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	4313      	orrs	r3, r2
 80087da:	4682      	mov	sl, r0
 80087dc:	468b      	mov	fp, r1
 80087de:	f040 81e7 	bne.w	8008bb0 <__ieee754_pow+0x700>
 80087e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008898 <__ieee754_pow+0x3e8>
 80087e6:	eeb0 8a47 	vmov.f32	s16, s14
 80087ea:	eef0 8a67 	vmov.f32	s17, s15
 80087ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80087f2:	2600      	movs	r6, #0
 80087f4:	4632      	mov	r2, r6
 80087f6:	463b      	mov	r3, r7
 80087f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087fc:	f7f7 fd44 	bl	8000288 <__aeabi_dsub>
 8008800:	4622      	mov	r2, r4
 8008802:	462b      	mov	r3, r5
 8008804:	f7f7 fef8 	bl	80005f8 <__aeabi_dmul>
 8008808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800880c:	4680      	mov	r8, r0
 800880e:	4689      	mov	r9, r1
 8008810:	4650      	mov	r0, sl
 8008812:	4659      	mov	r1, fp
 8008814:	f7f7 fef0 	bl	80005f8 <__aeabi_dmul>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4640      	mov	r0, r8
 800881e:	4649      	mov	r1, r9
 8008820:	f7f7 fd34 	bl	800028c <__adddf3>
 8008824:	4632      	mov	r2, r6
 8008826:	463b      	mov	r3, r7
 8008828:	4680      	mov	r8, r0
 800882a:	4689      	mov	r9, r1
 800882c:	4620      	mov	r0, r4
 800882e:	4629      	mov	r1, r5
 8008830:	f7f7 fee2 	bl	80005f8 <__aeabi_dmul>
 8008834:	460b      	mov	r3, r1
 8008836:	4604      	mov	r4, r0
 8008838:	460d      	mov	r5, r1
 800883a:	4602      	mov	r2, r0
 800883c:	4649      	mov	r1, r9
 800883e:	4640      	mov	r0, r8
 8008840:	f7f7 fd24 	bl	800028c <__adddf3>
 8008844:	4b19      	ldr	r3, [pc, #100]	; (80088ac <__ieee754_pow+0x3fc>)
 8008846:	4299      	cmp	r1, r3
 8008848:	ec45 4b19 	vmov	d9, r4, r5
 800884c:	4606      	mov	r6, r0
 800884e:	460f      	mov	r7, r1
 8008850:	468b      	mov	fp, r1
 8008852:	f340 82f0 	ble.w	8008e36 <__ieee754_pow+0x986>
 8008856:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800885a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800885e:	4303      	orrs	r3, r0
 8008860:	f000 81e4 	beq.w	8008c2c <__ieee754_pow+0x77c>
 8008864:	ec51 0b18 	vmov	r0, r1, d8
 8008868:	2200      	movs	r2, #0
 800886a:	2300      	movs	r3, #0
 800886c:	f7f8 f936 	bl	8000adc <__aeabi_dcmplt>
 8008870:	3800      	subs	r0, #0
 8008872:	bf18      	it	ne
 8008874:	2001      	movne	r0, #1
 8008876:	e72b      	b.n	80086d0 <__ieee754_pow+0x220>
 8008878:	60000000 	.word	0x60000000
 800887c:	3ff71547 	.word	0x3ff71547
 8008880:	f85ddf44 	.word	0xf85ddf44
 8008884:	3e54ae0b 	.word	0x3e54ae0b
 8008888:	55555555 	.word	0x55555555
 800888c:	3fd55555 	.word	0x3fd55555
 8008890:	652b82fe 	.word	0x652b82fe
 8008894:	3ff71547 	.word	0x3ff71547
 8008898:	00000000 	.word	0x00000000
 800889c:	bff00000 	.word	0xbff00000
 80088a0:	3ff00000 	.word	0x3ff00000
 80088a4:	3fd00000 	.word	0x3fd00000
 80088a8:	3fe00000 	.word	0x3fe00000
 80088ac:	408fffff 	.word	0x408fffff
 80088b0:	4bd5      	ldr	r3, [pc, #852]	; (8008c08 <__ieee754_pow+0x758>)
 80088b2:	402b      	ands	r3, r5
 80088b4:	2200      	movs	r2, #0
 80088b6:	b92b      	cbnz	r3, 80088c4 <__ieee754_pow+0x414>
 80088b8:	4bd4      	ldr	r3, [pc, #848]	; (8008c0c <__ieee754_pow+0x75c>)
 80088ba:	f7f7 fe9d 	bl	80005f8 <__aeabi_dmul>
 80088be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80088c2:	460c      	mov	r4, r1
 80088c4:	1523      	asrs	r3, r4, #20
 80088c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088ca:	4413      	add	r3, r2
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	4bd0      	ldr	r3, [pc, #832]	; (8008c10 <__ieee754_pow+0x760>)
 80088d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80088d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80088d8:	429c      	cmp	r4, r3
 80088da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80088de:	dd08      	ble.n	80088f2 <__ieee754_pow+0x442>
 80088e0:	4bcc      	ldr	r3, [pc, #816]	; (8008c14 <__ieee754_pow+0x764>)
 80088e2:	429c      	cmp	r4, r3
 80088e4:	f340 8162 	ble.w	8008bac <__ieee754_pow+0x6fc>
 80088e8:	9b05      	ldr	r3, [sp, #20]
 80088ea:	3301      	adds	r3, #1
 80088ec:	9305      	str	r3, [sp, #20]
 80088ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80088f2:	2400      	movs	r4, #0
 80088f4:	00e3      	lsls	r3, r4, #3
 80088f6:	9307      	str	r3, [sp, #28]
 80088f8:	4bc7      	ldr	r3, [pc, #796]	; (8008c18 <__ieee754_pow+0x768>)
 80088fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088fe:	ed93 7b00 	vldr	d7, [r3]
 8008902:	4629      	mov	r1, r5
 8008904:	ec53 2b17 	vmov	r2, r3, d7
 8008908:	eeb0 9a47 	vmov.f32	s18, s14
 800890c:	eef0 9a67 	vmov.f32	s19, s15
 8008910:	4682      	mov	sl, r0
 8008912:	f7f7 fcb9 	bl	8000288 <__aeabi_dsub>
 8008916:	4652      	mov	r2, sl
 8008918:	4606      	mov	r6, r0
 800891a:	460f      	mov	r7, r1
 800891c:	462b      	mov	r3, r5
 800891e:	ec51 0b19 	vmov	r0, r1, d9
 8008922:	f7f7 fcb3 	bl	800028c <__adddf3>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	2000      	movs	r0, #0
 800892c:	49bb      	ldr	r1, [pc, #748]	; (8008c1c <__ieee754_pow+0x76c>)
 800892e:	f7f7 ff8d 	bl	800084c <__aeabi_ddiv>
 8008932:	ec41 0b1a 	vmov	d10, r0, r1
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	4630      	mov	r0, r6
 800893c:	4639      	mov	r1, r7
 800893e:	f7f7 fe5b 	bl	80005f8 <__aeabi_dmul>
 8008942:	2300      	movs	r3, #0
 8008944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008948:	9302      	str	r3, [sp, #8]
 800894a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800894e:	46ab      	mov	fp, r5
 8008950:	106d      	asrs	r5, r5, #1
 8008952:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008956:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800895a:	ec41 0b18 	vmov	d8, r0, r1
 800895e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008962:	2200      	movs	r2, #0
 8008964:	4640      	mov	r0, r8
 8008966:	4649      	mov	r1, r9
 8008968:	4614      	mov	r4, r2
 800896a:	461d      	mov	r5, r3
 800896c:	f7f7 fe44 	bl	80005f8 <__aeabi_dmul>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7f7 fc86 	bl	8000288 <__aeabi_dsub>
 800897c:	ec53 2b19 	vmov	r2, r3, d9
 8008980:	4606      	mov	r6, r0
 8008982:	460f      	mov	r7, r1
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f7 fc7e 	bl	8000288 <__aeabi_dsub>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4650      	mov	r0, sl
 8008992:	4659      	mov	r1, fp
 8008994:	f7f7 fc78 	bl	8000288 <__aeabi_dsub>
 8008998:	4642      	mov	r2, r8
 800899a:	464b      	mov	r3, r9
 800899c:	f7f7 fe2c 	bl	80005f8 <__aeabi_dmul>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4630      	mov	r0, r6
 80089a6:	4639      	mov	r1, r7
 80089a8:	f7f7 fc6e 	bl	8000288 <__aeabi_dsub>
 80089ac:	ec53 2b1a 	vmov	r2, r3, d10
 80089b0:	f7f7 fe22 	bl	80005f8 <__aeabi_dmul>
 80089b4:	ec53 2b18 	vmov	r2, r3, d8
 80089b8:	ec41 0b19 	vmov	d9, r0, r1
 80089bc:	ec51 0b18 	vmov	r0, r1, d8
 80089c0:	f7f7 fe1a 	bl	80005f8 <__aeabi_dmul>
 80089c4:	a37c      	add	r3, pc, #496	; (adr r3, 8008bb8 <__ieee754_pow+0x708>)
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	4604      	mov	r4, r0
 80089cc:	460d      	mov	r5, r1
 80089ce:	f7f7 fe13 	bl	80005f8 <__aeabi_dmul>
 80089d2:	a37b      	add	r3, pc, #492	; (adr r3, 8008bc0 <__ieee754_pow+0x710>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f7f7 fc58 	bl	800028c <__adddf3>
 80089dc:	4622      	mov	r2, r4
 80089de:	462b      	mov	r3, r5
 80089e0:	f7f7 fe0a 	bl	80005f8 <__aeabi_dmul>
 80089e4:	a378      	add	r3, pc, #480	; (adr r3, 8008bc8 <__ieee754_pow+0x718>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f7f7 fc4f 	bl	800028c <__adddf3>
 80089ee:	4622      	mov	r2, r4
 80089f0:	462b      	mov	r3, r5
 80089f2:	f7f7 fe01 	bl	80005f8 <__aeabi_dmul>
 80089f6:	a376      	add	r3, pc, #472	; (adr r3, 8008bd0 <__ieee754_pow+0x720>)
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	f7f7 fc46 	bl	800028c <__adddf3>
 8008a00:	4622      	mov	r2, r4
 8008a02:	462b      	mov	r3, r5
 8008a04:	f7f7 fdf8 	bl	80005f8 <__aeabi_dmul>
 8008a08:	a373      	add	r3, pc, #460	; (adr r3, 8008bd8 <__ieee754_pow+0x728>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	f7f7 fc3d 	bl	800028c <__adddf3>
 8008a12:	4622      	mov	r2, r4
 8008a14:	462b      	mov	r3, r5
 8008a16:	f7f7 fdef 	bl	80005f8 <__aeabi_dmul>
 8008a1a:	a371      	add	r3, pc, #452	; (adr r3, 8008be0 <__ieee754_pow+0x730>)
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	f7f7 fc34 	bl	800028c <__adddf3>
 8008a24:	4622      	mov	r2, r4
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	462b      	mov	r3, r5
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fde2 	bl	80005f8 <__aeabi_dmul>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f7 fddc 	bl	80005f8 <__aeabi_dmul>
 8008a40:	4642      	mov	r2, r8
 8008a42:	4604      	mov	r4, r0
 8008a44:	460d      	mov	r5, r1
 8008a46:	464b      	mov	r3, r9
 8008a48:	ec51 0b18 	vmov	r0, r1, d8
 8008a4c:	f7f7 fc1e 	bl	800028c <__adddf3>
 8008a50:	ec53 2b19 	vmov	r2, r3, d9
 8008a54:	f7f7 fdd0 	bl	80005f8 <__aeabi_dmul>
 8008a58:	4622      	mov	r2, r4
 8008a5a:	462b      	mov	r3, r5
 8008a5c:	f7f7 fc16 	bl	800028c <__adddf3>
 8008a60:	4642      	mov	r2, r8
 8008a62:	4682      	mov	sl, r0
 8008a64:	468b      	mov	fp, r1
 8008a66:	464b      	mov	r3, r9
 8008a68:	4640      	mov	r0, r8
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	f7f7 fdc4 	bl	80005f8 <__aeabi_dmul>
 8008a70:	4b6b      	ldr	r3, [pc, #428]	; (8008c20 <__ieee754_pow+0x770>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1
 8008a78:	f7f7 fc08 	bl	800028c <__adddf3>
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	465b      	mov	r3, fp
 8008a80:	f7f7 fc04 	bl	800028c <__adddf3>
 8008a84:	2000      	movs	r0, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	460d      	mov	r5, r1
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4640      	mov	r0, r8
 8008a90:	4649      	mov	r1, r9
 8008a92:	f7f7 fdb1 	bl	80005f8 <__aeabi_dmul>
 8008a96:	4b62      	ldr	r3, [pc, #392]	; (8008c20 <__ieee754_pow+0x770>)
 8008a98:	4680      	mov	r8, r0
 8008a9a:	4689      	mov	r9, r1
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	f7f7 fbf1 	bl	8000288 <__aeabi_dsub>
 8008aa6:	4632      	mov	r2, r6
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	f7f7 fbed 	bl	8000288 <__aeabi_dsub>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4650      	mov	r0, sl
 8008ab4:	4659      	mov	r1, fp
 8008ab6:	f7f7 fbe7 	bl	8000288 <__aeabi_dsub>
 8008aba:	ec53 2b18 	vmov	r2, r3, d8
 8008abe:	f7f7 fd9b 	bl	80005f8 <__aeabi_dmul>
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	460f      	mov	r7, r1
 8008ac8:	462b      	mov	r3, r5
 8008aca:	ec51 0b19 	vmov	r0, r1, d9
 8008ace:	f7f7 fd93 	bl	80005f8 <__aeabi_dmul>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	4639      	mov	r1, r7
 8008ada:	f7f7 fbd7 	bl	800028c <__adddf3>
 8008ade:	4606      	mov	r6, r0
 8008ae0:	460f      	mov	r7, r1
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	4649      	mov	r1, r9
 8008aea:	f7f7 fbcf 	bl	800028c <__adddf3>
 8008aee:	a33e      	add	r3, pc, #248	; (adr r3, 8008be8 <__ieee754_pow+0x738>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	2000      	movs	r0, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	460d      	mov	r5, r1
 8008afa:	f7f7 fd7d 	bl	80005f8 <__aeabi_dmul>
 8008afe:	4642      	mov	r2, r8
 8008b00:	ec41 0b18 	vmov	d8, r0, r1
 8008b04:	464b      	mov	r3, r9
 8008b06:	4620      	mov	r0, r4
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7f7 fbbd 	bl	8000288 <__aeabi_dsub>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4630      	mov	r0, r6
 8008b14:	4639      	mov	r1, r7
 8008b16:	f7f7 fbb7 	bl	8000288 <__aeabi_dsub>
 8008b1a:	a335      	add	r3, pc, #212	; (adr r3, 8008bf0 <__ieee754_pow+0x740>)
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	f7f7 fd6a 	bl	80005f8 <__aeabi_dmul>
 8008b24:	a334      	add	r3, pc, #208	; (adr r3, 8008bf8 <__ieee754_pow+0x748>)
 8008b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	f7f7 fd61 	bl	80005f8 <__aeabi_dmul>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	f7f7 fba5 	bl	800028c <__adddf3>
 8008b42:	9a07      	ldr	r2, [sp, #28]
 8008b44:	4b37      	ldr	r3, [pc, #220]	; (8008c24 <__ieee754_pow+0x774>)
 8008b46:	4413      	add	r3, r2
 8008b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4c:	f7f7 fb9e 	bl	800028c <__adddf3>
 8008b50:	4682      	mov	sl, r0
 8008b52:	9805      	ldr	r0, [sp, #20]
 8008b54:	468b      	mov	fp, r1
 8008b56:	f7f7 fce5 	bl	8000524 <__aeabi_i2d>
 8008b5a:	9a07      	ldr	r2, [sp, #28]
 8008b5c:	4b32      	ldr	r3, [pc, #200]	; (8008c28 <__ieee754_pow+0x778>)
 8008b5e:	4413      	add	r3, r2
 8008b60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b64:	4606      	mov	r6, r0
 8008b66:	460f      	mov	r7, r1
 8008b68:	4652      	mov	r2, sl
 8008b6a:	465b      	mov	r3, fp
 8008b6c:	ec51 0b18 	vmov	r0, r1, d8
 8008b70:	f7f7 fb8c 	bl	800028c <__adddf3>
 8008b74:	4642      	mov	r2, r8
 8008b76:	464b      	mov	r3, r9
 8008b78:	f7f7 fb88 	bl	800028c <__adddf3>
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	463b      	mov	r3, r7
 8008b80:	f7f7 fb84 	bl	800028c <__adddf3>
 8008b84:	2000      	movs	r0, #0
 8008b86:	4632      	mov	r2, r6
 8008b88:	463b      	mov	r3, r7
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	460d      	mov	r5, r1
 8008b8e:	f7f7 fb7b 	bl	8000288 <__aeabi_dsub>
 8008b92:	4642      	mov	r2, r8
 8008b94:	464b      	mov	r3, r9
 8008b96:	f7f7 fb77 	bl	8000288 <__aeabi_dsub>
 8008b9a:	ec53 2b18 	vmov	r2, r3, d8
 8008b9e:	f7f7 fb73 	bl	8000288 <__aeabi_dsub>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4650      	mov	r0, sl
 8008ba8:	4659      	mov	r1, fp
 8008baa:	e610      	b.n	80087ce <__ieee754_pow+0x31e>
 8008bac:	2401      	movs	r4, #1
 8008bae:	e6a1      	b.n	80088f4 <__ieee754_pow+0x444>
 8008bb0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008c00 <__ieee754_pow+0x750>
 8008bb4:	e617      	b.n	80087e6 <__ieee754_pow+0x336>
 8008bb6:	bf00      	nop
 8008bb8:	4a454eef 	.word	0x4a454eef
 8008bbc:	3fca7e28 	.word	0x3fca7e28
 8008bc0:	93c9db65 	.word	0x93c9db65
 8008bc4:	3fcd864a 	.word	0x3fcd864a
 8008bc8:	a91d4101 	.word	0xa91d4101
 8008bcc:	3fd17460 	.word	0x3fd17460
 8008bd0:	518f264d 	.word	0x518f264d
 8008bd4:	3fd55555 	.word	0x3fd55555
 8008bd8:	db6fabff 	.word	0xdb6fabff
 8008bdc:	3fdb6db6 	.word	0x3fdb6db6
 8008be0:	33333303 	.word	0x33333303
 8008be4:	3fe33333 	.word	0x3fe33333
 8008be8:	e0000000 	.word	0xe0000000
 8008bec:	3feec709 	.word	0x3feec709
 8008bf0:	dc3a03fd 	.word	0xdc3a03fd
 8008bf4:	3feec709 	.word	0x3feec709
 8008bf8:	145b01f5 	.word	0x145b01f5
 8008bfc:	be3e2fe0 	.word	0xbe3e2fe0
 8008c00:	00000000 	.word	0x00000000
 8008c04:	3ff00000 	.word	0x3ff00000
 8008c08:	7ff00000 	.word	0x7ff00000
 8008c0c:	43400000 	.word	0x43400000
 8008c10:	0003988e 	.word	0x0003988e
 8008c14:	000bb679 	.word	0x000bb679
 8008c18:	080096a8 	.word	0x080096a8
 8008c1c:	3ff00000 	.word	0x3ff00000
 8008c20:	40080000 	.word	0x40080000
 8008c24:	080096c8 	.word	0x080096c8
 8008c28:	080096b8 	.word	0x080096b8
 8008c2c:	a3b3      	add	r3, pc, #716	; (adr r3, 8008efc <__ieee754_pow+0xa4c>)
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	4640      	mov	r0, r8
 8008c34:	4649      	mov	r1, r9
 8008c36:	f7f7 fb29 	bl	800028c <__adddf3>
 8008c3a:	4622      	mov	r2, r4
 8008c3c:	ec41 0b1a 	vmov	d10, r0, r1
 8008c40:	462b      	mov	r3, r5
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 fb1f 	bl	8000288 <__aeabi_dsub>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	ec51 0b1a 	vmov	r0, r1, d10
 8008c52:	f7f7 ff61 	bl	8000b18 <__aeabi_dcmpgt>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f47f ae04 	bne.w	8008864 <__ieee754_pow+0x3b4>
 8008c5c:	4aa2      	ldr	r2, [pc, #648]	; (8008ee8 <__ieee754_pow+0xa38>)
 8008c5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c62:	4293      	cmp	r3, r2
 8008c64:	f340 8107 	ble.w	8008e76 <__ieee754_pow+0x9c6>
 8008c68:	151b      	asrs	r3, r3, #20
 8008c6a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008c6e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008c72:	fa4a fa03 	asr.w	sl, sl, r3
 8008c76:	44da      	add	sl, fp
 8008c78:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008c7c:	489b      	ldr	r0, [pc, #620]	; (8008eec <__ieee754_pow+0xa3c>)
 8008c7e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008c82:	4108      	asrs	r0, r1
 8008c84:	ea00 030a 	and.w	r3, r0, sl
 8008c88:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008c8c:	f1c1 0114 	rsb	r1, r1, #20
 8008c90:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008c94:	fa4a fa01 	asr.w	sl, sl, r1
 8008c98:	f1bb 0f00 	cmp.w	fp, #0
 8008c9c:	f04f 0200 	mov.w	r2, #0
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	bfb8      	it	lt
 8008ca6:	f1ca 0a00 	rsblt	sl, sl, #0
 8008caa:	f7f7 faed 	bl	8000288 <__aeabi_dsub>
 8008cae:	ec41 0b19 	vmov	d9, r0, r1
 8008cb2:	4642      	mov	r2, r8
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	ec51 0b19 	vmov	r0, r1, d9
 8008cba:	f7f7 fae7 	bl	800028c <__adddf3>
 8008cbe:	a37a      	add	r3, pc, #488	; (adr r3, 8008ea8 <__ieee754_pow+0x9f8>)
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	460d      	mov	r5, r1
 8008cca:	f7f7 fc95 	bl	80005f8 <__aeabi_dmul>
 8008cce:	ec53 2b19 	vmov	r2, r3, d9
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460f      	mov	r7, r1
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	4629      	mov	r1, r5
 8008cda:	f7f7 fad5 	bl	8000288 <__aeabi_dsub>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	f7f7 facf 	bl	8000288 <__aeabi_dsub>
 8008cea:	a371      	add	r3, pc, #452	; (adr r3, 8008eb0 <__ieee754_pow+0xa00>)
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f7f7 fc82 	bl	80005f8 <__aeabi_dmul>
 8008cf4:	a370      	add	r3, pc, #448	; (adr r3, 8008eb8 <__ieee754_pow+0xa08>)
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	4680      	mov	r8, r0
 8008cfc:	4689      	mov	r9, r1
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7f7 fc79 	bl	80005f8 <__aeabi_dmul>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	f7f7 fabd 	bl	800028c <__adddf3>
 8008d12:	4604      	mov	r4, r0
 8008d14:	460d      	mov	r5, r1
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	f7f7 fab5 	bl	800028c <__adddf3>
 8008d22:	4632      	mov	r2, r6
 8008d24:	463b      	mov	r3, r7
 8008d26:	4680      	mov	r8, r0
 8008d28:	4689      	mov	r9, r1
 8008d2a:	f7f7 faad 	bl	8000288 <__aeabi_dsub>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4620      	mov	r0, r4
 8008d34:	4629      	mov	r1, r5
 8008d36:	f7f7 faa7 	bl	8000288 <__aeabi_dsub>
 8008d3a:	4642      	mov	r2, r8
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	460f      	mov	r7, r1
 8008d40:	464b      	mov	r3, r9
 8008d42:	4640      	mov	r0, r8
 8008d44:	4649      	mov	r1, r9
 8008d46:	f7f7 fc57 	bl	80005f8 <__aeabi_dmul>
 8008d4a:	a35d      	add	r3, pc, #372	; (adr r3, 8008ec0 <__ieee754_pow+0xa10>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	4604      	mov	r4, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	f7f7 fc50 	bl	80005f8 <__aeabi_dmul>
 8008d58:	a35b      	add	r3, pc, #364	; (adr r3, 8008ec8 <__ieee754_pow+0xa18>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 fa93 	bl	8000288 <__aeabi_dsub>
 8008d62:	4622      	mov	r2, r4
 8008d64:	462b      	mov	r3, r5
 8008d66:	f7f7 fc47 	bl	80005f8 <__aeabi_dmul>
 8008d6a:	a359      	add	r3, pc, #356	; (adr r3, 8008ed0 <__ieee754_pow+0xa20>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f7f7 fa8c 	bl	800028c <__adddf3>
 8008d74:	4622      	mov	r2, r4
 8008d76:	462b      	mov	r3, r5
 8008d78:	f7f7 fc3e 	bl	80005f8 <__aeabi_dmul>
 8008d7c:	a356      	add	r3, pc, #344	; (adr r3, 8008ed8 <__ieee754_pow+0xa28>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	f7f7 fa81 	bl	8000288 <__aeabi_dsub>
 8008d86:	4622      	mov	r2, r4
 8008d88:	462b      	mov	r3, r5
 8008d8a:	f7f7 fc35 	bl	80005f8 <__aeabi_dmul>
 8008d8e:	a354      	add	r3, pc, #336	; (adr r3, 8008ee0 <__ieee754_pow+0xa30>)
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f7f7 fa7a 	bl	800028c <__adddf3>
 8008d98:	4622      	mov	r2, r4
 8008d9a:	462b      	mov	r3, r5
 8008d9c:	f7f7 fc2c 	bl	80005f8 <__aeabi_dmul>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4640      	mov	r0, r8
 8008da6:	4649      	mov	r1, r9
 8008da8:	f7f7 fa6e 	bl	8000288 <__aeabi_dsub>
 8008dac:	4604      	mov	r4, r0
 8008dae:	460d      	mov	r5, r1
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4640      	mov	r0, r8
 8008db6:	4649      	mov	r1, r9
 8008db8:	f7f7 fc1e 	bl	80005f8 <__aeabi_dmul>
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	ec41 0b19 	vmov	d9, r0, r1
 8008dc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f7f7 fa5d 	bl	8000288 <__aeabi_dsub>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	ec51 0b19 	vmov	r0, r1, d9
 8008dd6:	f7f7 fd39 	bl	800084c <__aeabi_ddiv>
 8008dda:	4632      	mov	r2, r6
 8008ddc:	4604      	mov	r4, r0
 8008dde:	460d      	mov	r5, r1
 8008de0:	463b      	mov	r3, r7
 8008de2:	4640      	mov	r0, r8
 8008de4:	4649      	mov	r1, r9
 8008de6:	f7f7 fc07 	bl	80005f8 <__aeabi_dmul>
 8008dea:	4632      	mov	r2, r6
 8008dec:	463b      	mov	r3, r7
 8008dee:	f7f7 fa4d 	bl	800028c <__adddf3>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4620      	mov	r0, r4
 8008df8:	4629      	mov	r1, r5
 8008dfa:	f7f7 fa45 	bl	8000288 <__aeabi_dsub>
 8008dfe:	4642      	mov	r2, r8
 8008e00:	464b      	mov	r3, r9
 8008e02:	f7f7 fa41 	bl	8000288 <__aeabi_dsub>
 8008e06:	460b      	mov	r3, r1
 8008e08:	4602      	mov	r2, r0
 8008e0a:	4939      	ldr	r1, [pc, #228]	; (8008ef0 <__ieee754_pow+0xa40>)
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	f7f7 fa3b 	bl	8000288 <__aeabi_dsub>
 8008e12:	ec41 0b10 	vmov	d0, r0, r1
 8008e16:	ee10 3a90 	vmov	r3, s1
 8008e1a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e22:	da2b      	bge.n	8008e7c <__ieee754_pow+0x9cc>
 8008e24:	4650      	mov	r0, sl
 8008e26:	f000 f8a7 	bl	8008f78 <scalbn>
 8008e2a:	ec51 0b10 	vmov	r0, r1, d0
 8008e2e:	ec53 2b18 	vmov	r2, r3, d8
 8008e32:	f7ff bbee 	b.w	8008612 <__ieee754_pow+0x162>
 8008e36:	4b2f      	ldr	r3, [pc, #188]	; (8008ef4 <__ieee754_pow+0xa44>)
 8008e38:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008e3c:	429e      	cmp	r6, r3
 8008e3e:	f77f af0d 	ble.w	8008c5c <__ieee754_pow+0x7ac>
 8008e42:	4b2d      	ldr	r3, [pc, #180]	; (8008ef8 <__ieee754_pow+0xa48>)
 8008e44:	440b      	add	r3, r1
 8008e46:	4303      	orrs	r3, r0
 8008e48:	d009      	beq.n	8008e5e <__ieee754_pow+0x9ae>
 8008e4a:	ec51 0b18 	vmov	r0, r1, d8
 8008e4e:	2200      	movs	r2, #0
 8008e50:	2300      	movs	r3, #0
 8008e52:	f7f7 fe43 	bl	8000adc <__aeabi_dcmplt>
 8008e56:	3800      	subs	r0, #0
 8008e58:	bf18      	it	ne
 8008e5a:	2001      	movne	r0, #1
 8008e5c:	e448      	b.n	80086f0 <__ieee754_pow+0x240>
 8008e5e:	4622      	mov	r2, r4
 8008e60:	462b      	mov	r3, r5
 8008e62:	f7f7 fa11 	bl	8000288 <__aeabi_dsub>
 8008e66:	4642      	mov	r2, r8
 8008e68:	464b      	mov	r3, r9
 8008e6a:	f7f7 fe4b 	bl	8000b04 <__aeabi_dcmpge>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	f43f aef4 	beq.w	8008c5c <__ieee754_pow+0x7ac>
 8008e74:	e7e9      	b.n	8008e4a <__ieee754_pow+0x99a>
 8008e76:	f04f 0a00 	mov.w	sl, #0
 8008e7a:	e71a      	b.n	8008cb2 <__ieee754_pow+0x802>
 8008e7c:	ec51 0b10 	vmov	r0, r1, d0
 8008e80:	4619      	mov	r1, r3
 8008e82:	e7d4      	b.n	8008e2e <__ieee754_pow+0x97e>
 8008e84:	491a      	ldr	r1, [pc, #104]	; (8008ef0 <__ieee754_pow+0xa40>)
 8008e86:	2000      	movs	r0, #0
 8008e88:	f7ff bb31 	b.w	80084ee <__ieee754_pow+0x3e>
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	f7ff bb2d 	b.w	80084ee <__ieee754_pow+0x3e>
 8008e94:	4630      	mov	r0, r6
 8008e96:	4639      	mov	r1, r7
 8008e98:	f7ff bb29 	b.w	80084ee <__ieee754_pow+0x3e>
 8008e9c:	9204      	str	r2, [sp, #16]
 8008e9e:	f7ff bb7b 	b.w	8008598 <__ieee754_pow+0xe8>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f7ff bb65 	b.w	8008572 <__ieee754_pow+0xc2>
 8008ea8:	00000000 	.word	0x00000000
 8008eac:	3fe62e43 	.word	0x3fe62e43
 8008eb0:	fefa39ef 	.word	0xfefa39ef
 8008eb4:	3fe62e42 	.word	0x3fe62e42
 8008eb8:	0ca86c39 	.word	0x0ca86c39
 8008ebc:	be205c61 	.word	0xbe205c61
 8008ec0:	72bea4d0 	.word	0x72bea4d0
 8008ec4:	3e663769 	.word	0x3e663769
 8008ec8:	c5d26bf1 	.word	0xc5d26bf1
 8008ecc:	3ebbbd41 	.word	0x3ebbbd41
 8008ed0:	af25de2c 	.word	0xaf25de2c
 8008ed4:	3f11566a 	.word	0x3f11566a
 8008ed8:	16bebd93 	.word	0x16bebd93
 8008edc:	3f66c16c 	.word	0x3f66c16c
 8008ee0:	5555553e 	.word	0x5555553e
 8008ee4:	3fc55555 	.word	0x3fc55555
 8008ee8:	3fe00000 	.word	0x3fe00000
 8008eec:	fff00000 	.word	0xfff00000
 8008ef0:	3ff00000 	.word	0x3ff00000
 8008ef4:	4090cbff 	.word	0x4090cbff
 8008ef8:	3f6f3400 	.word	0x3f6f3400
 8008efc:	652b82fe 	.word	0x652b82fe
 8008f00:	3c971547 	.word	0x3c971547

08008f04 <with_errno>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	4604      	mov	r4, r0
 8008f08:	460d      	mov	r5, r1
 8008f0a:	4616      	mov	r6, r2
 8008f0c:	f7fd facc 	bl	80064a8 <__errno>
 8008f10:	4629      	mov	r1, r5
 8008f12:	6006      	str	r6, [r0, #0]
 8008f14:	4620      	mov	r0, r4
 8008f16:	bd70      	pop	{r4, r5, r6, pc}

08008f18 <xflow>:
 8008f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f1a:	4614      	mov	r4, r2
 8008f1c:	461d      	mov	r5, r3
 8008f1e:	b108      	cbz	r0, 8008f24 <xflow+0xc>
 8008f20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008f24:	e9cd 2300 	strd	r2, r3, [sp]
 8008f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	4629      	mov	r1, r5
 8008f30:	f7f7 fb62 	bl	80005f8 <__aeabi_dmul>
 8008f34:	2222      	movs	r2, #34	; 0x22
 8008f36:	b003      	add	sp, #12
 8008f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f3c:	f7ff bfe2 	b.w	8008f04 <with_errno>

08008f40 <__math_uflow>:
 8008f40:	b508      	push	{r3, lr}
 8008f42:	2200      	movs	r2, #0
 8008f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f48:	f7ff ffe6 	bl	8008f18 <xflow>
 8008f4c:	ec41 0b10 	vmov	d0, r0, r1
 8008f50:	bd08      	pop	{r3, pc}

08008f52 <__math_oflow>:
 8008f52:	b508      	push	{r3, lr}
 8008f54:	2200      	movs	r2, #0
 8008f56:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008f5a:	f7ff ffdd 	bl	8008f18 <xflow>
 8008f5e:	ec41 0b10 	vmov	d0, r0, r1
 8008f62:	bd08      	pop	{r3, pc}

08008f64 <fabs>:
 8008f64:	ec51 0b10 	vmov	r0, r1, d0
 8008f68:	ee10 2a10 	vmov	r2, s0
 8008f6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f70:	ec43 2b10 	vmov	d0, r2, r3
 8008f74:	4770      	bx	lr
	...

08008f78 <scalbn>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	ec55 4b10 	vmov	r4, r5, d0
 8008f7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008f82:	4606      	mov	r6, r0
 8008f84:	462b      	mov	r3, r5
 8008f86:	b999      	cbnz	r1, 8008fb0 <scalbn+0x38>
 8008f88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f8c:	4323      	orrs	r3, r4
 8008f8e:	d03f      	beq.n	8009010 <scalbn+0x98>
 8008f90:	4b35      	ldr	r3, [pc, #212]	; (8009068 <scalbn+0xf0>)
 8008f92:	4629      	mov	r1, r5
 8008f94:	ee10 0a10 	vmov	r0, s0
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f7f7 fb2d 	bl	80005f8 <__aeabi_dmul>
 8008f9e:	4b33      	ldr	r3, [pc, #204]	; (800906c <scalbn+0xf4>)
 8008fa0:	429e      	cmp	r6, r3
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	da10      	bge.n	8008fca <scalbn+0x52>
 8008fa8:	a327      	add	r3, pc, #156	; (adr r3, 8009048 <scalbn+0xd0>)
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	e01f      	b.n	8008ff0 <scalbn+0x78>
 8008fb0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008fb4:	4291      	cmp	r1, r2
 8008fb6:	d10c      	bne.n	8008fd2 <scalbn+0x5a>
 8008fb8:	ee10 2a10 	vmov	r2, s0
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 f964 	bl	800028c <__adddf3>
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	460d      	mov	r5, r1
 8008fc8:	e022      	b.n	8009010 <scalbn+0x98>
 8008fca:	460b      	mov	r3, r1
 8008fcc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008fd0:	3936      	subs	r1, #54	; 0x36
 8008fd2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008fd6:	4296      	cmp	r6, r2
 8008fd8:	dd0d      	ble.n	8008ff6 <scalbn+0x7e>
 8008fda:	2d00      	cmp	r5, #0
 8008fdc:	a11c      	add	r1, pc, #112	; (adr r1, 8009050 <scalbn+0xd8>)
 8008fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe2:	da02      	bge.n	8008fea <scalbn+0x72>
 8008fe4:	a11c      	add	r1, pc, #112	; (adr r1, 8009058 <scalbn+0xe0>)
 8008fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fea:	a319      	add	r3, pc, #100	; (adr r3, 8009050 <scalbn+0xd8>)
 8008fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff0:	f7f7 fb02 	bl	80005f8 <__aeabi_dmul>
 8008ff4:	e7e6      	b.n	8008fc4 <scalbn+0x4c>
 8008ff6:	1872      	adds	r2, r6, r1
 8008ff8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008ffc:	428a      	cmp	r2, r1
 8008ffe:	dcec      	bgt.n	8008fda <scalbn+0x62>
 8009000:	2a00      	cmp	r2, #0
 8009002:	dd08      	ble.n	8009016 <scalbn+0x9e>
 8009004:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009008:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800900c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009010:	ec45 4b10 	vmov	d0, r4, r5
 8009014:	bd70      	pop	{r4, r5, r6, pc}
 8009016:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800901a:	da08      	bge.n	800902e <scalbn+0xb6>
 800901c:	2d00      	cmp	r5, #0
 800901e:	a10a      	add	r1, pc, #40	; (adr r1, 8009048 <scalbn+0xd0>)
 8009020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009024:	dac0      	bge.n	8008fa8 <scalbn+0x30>
 8009026:	a10e      	add	r1, pc, #56	; (adr r1, 8009060 <scalbn+0xe8>)
 8009028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800902c:	e7bc      	b.n	8008fa8 <scalbn+0x30>
 800902e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009032:	3236      	adds	r2, #54	; 0x36
 8009034:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009038:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800903c:	4620      	mov	r0, r4
 800903e:	4b0c      	ldr	r3, [pc, #48]	; (8009070 <scalbn+0xf8>)
 8009040:	2200      	movs	r2, #0
 8009042:	e7d5      	b.n	8008ff0 <scalbn+0x78>
 8009044:	f3af 8000 	nop.w
 8009048:	c2f8f359 	.word	0xc2f8f359
 800904c:	01a56e1f 	.word	0x01a56e1f
 8009050:	8800759c 	.word	0x8800759c
 8009054:	7e37e43c 	.word	0x7e37e43c
 8009058:	8800759c 	.word	0x8800759c
 800905c:	fe37e43c 	.word	0xfe37e43c
 8009060:	c2f8f359 	.word	0xc2f8f359
 8009064:	81a56e1f 	.word	0x81a56e1f
 8009068:	43500000 	.word	0x43500000
 800906c:	ffff3cb0 	.word	0xffff3cb0
 8009070:	3c900000 	.word	0x3c900000

08009074 <__ieee754_sqrt>:
 8009074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	ec55 4b10 	vmov	r4, r5, d0
 800907c:	4e67      	ldr	r6, [pc, #412]	; (800921c <__ieee754_sqrt+0x1a8>)
 800907e:	43ae      	bics	r6, r5
 8009080:	ee10 0a10 	vmov	r0, s0
 8009084:	ee10 2a10 	vmov	r2, s0
 8009088:	4629      	mov	r1, r5
 800908a:	462b      	mov	r3, r5
 800908c:	d10d      	bne.n	80090aa <__ieee754_sqrt+0x36>
 800908e:	f7f7 fab3 	bl	80005f8 <__aeabi_dmul>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4620      	mov	r0, r4
 8009098:	4629      	mov	r1, r5
 800909a:	f7f7 f8f7 	bl	800028c <__adddf3>
 800909e:	4604      	mov	r4, r0
 80090a0:	460d      	mov	r5, r1
 80090a2:	ec45 4b10 	vmov	d0, r4, r5
 80090a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090aa:	2d00      	cmp	r5, #0
 80090ac:	dc0b      	bgt.n	80090c6 <__ieee754_sqrt+0x52>
 80090ae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090b2:	4326      	orrs	r6, r4
 80090b4:	d0f5      	beq.n	80090a2 <__ieee754_sqrt+0x2e>
 80090b6:	b135      	cbz	r5, 80090c6 <__ieee754_sqrt+0x52>
 80090b8:	f7f7 f8e6 	bl	8000288 <__aeabi_dsub>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	f7f7 fbc4 	bl	800084c <__aeabi_ddiv>
 80090c4:	e7eb      	b.n	800909e <__ieee754_sqrt+0x2a>
 80090c6:	1509      	asrs	r1, r1, #20
 80090c8:	f000 808d 	beq.w	80091e6 <__ieee754_sqrt+0x172>
 80090cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090d0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80090d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090d8:	07c9      	lsls	r1, r1, #31
 80090da:	bf5c      	itt	pl
 80090dc:	005b      	lslpl	r3, r3, #1
 80090de:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80090e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80090e6:	bf58      	it	pl
 80090e8:	0052      	lslpl	r2, r2, #1
 80090ea:	2500      	movs	r5, #0
 80090ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80090f0:	1076      	asrs	r6, r6, #1
 80090f2:	0052      	lsls	r2, r2, #1
 80090f4:	f04f 0e16 	mov.w	lr, #22
 80090f8:	46ac      	mov	ip, r5
 80090fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090fe:	eb0c 0001 	add.w	r0, ip, r1
 8009102:	4298      	cmp	r0, r3
 8009104:	bfde      	ittt	le
 8009106:	1a1b      	suble	r3, r3, r0
 8009108:	eb00 0c01 	addle.w	ip, r0, r1
 800910c:	186d      	addle	r5, r5, r1
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	f1be 0e01 	subs.w	lr, lr, #1
 8009114:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009118:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800911c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009120:	d1ed      	bne.n	80090fe <__ieee754_sqrt+0x8a>
 8009122:	4674      	mov	r4, lr
 8009124:	2720      	movs	r7, #32
 8009126:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800912a:	4563      	cmp	r3, ip
 800912c:	eb01 000e 	add.w	r0, r1, lr
 8009130:	dc02      	bgt.n	8009138 <__ieee754_sqrt+0xc4>
 8009132:	d113      	bne.n	800915c <__ieee754_sqrt+0xe8>
 8009134:	4290      	cmp	r0, r2
 8009136:	d811      	bhi.n	800915c <__ieee754_sqrt+0xe8>
 8009138:	2800      	cmp	r0, #0
 800913a:	eb00 0e01 	add.w	lr, r0, r1
 800913e:	da57      	bge.n	80091f0 <__ieee754_sqrt+0x17c>
 8009140:	f1be 0f00 	cmp.w	lr, #0
 8009144:	db54      	blt.n	80091f0 <__ieee754_sqrt+0x17c>
 8009146:	f10c 0801 	add.w	r8, ip, #1
 800914a:	eba3 030c 	sub.w	r3, r3, ip
 800914e:	4290      	cmp	r0, r2
 8009150:	bf88      	it	hi
 8009152:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8009156:	1a12      	subs	r2, r2, r0
 8009158:	440c      	add	r4, r1
 800915a:	46c4      	mov	ip, r8
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	3f01      	subs	r7, #1
 8009160:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009164:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009168:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800916c:	d1dd      	bne.n	800912a <__ieee754_sqrt+0xb6>
 800916e:	4313      	orrs	r3, r2
 8009170:	d01b      	beq.n	80091aa <__ieee754_sqrt+0x136>
 8009172:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009220 <__ieee754_sqrt+0x1ac>
 8009176:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009224 <__ieee754_sqrt+0x1b0>
 800917a:	e9da 0100 	ldrd	r0, r1, [sl]
 800917e:	e9db 2300 	ldrd	r2, r3, [fp]
 8009182:	f7f7 f881 	bl	8000288 <__aeabi_dsub>
 8009186:	e9da 8900 	ldrd	r8, r9, [sl]
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4640      	mov	r0, r8
 8009190:	4649      	mov	r1, r9
 8009192:	f7f7 fcad 	bl	8000af0 <__aeabi_dcmple>
 8009196:	b140      	cbz	r0, 80091aa <__ieee754_sqrt+0x136>
 8009198:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800919c:	e9da 0100 	ldrd	r0, r1, [sl]
 80091a0:	e9db 2300 	ldrd	r2, r3, [fp]
 80091a4:	d126      	bne.n	80091f4 <__ieee754_sqrt+0x180>
 80091a6:	3501      	adds	r5, #1
 80091a8:	463c      	mov	r4, r7
 80091aa:	106a      	asrs	r2, r5, #1
 80091ac:	0863      	lsrs	r3, r4, #1
 80091ae:	07e9      	lsls	r1, r5, #31
 80091b0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80091b4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80091b8:	bf48      	it	mi
 80091ba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80091be:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80091c2:	461c      	mov	r4, r3
 80091c4:	e76d      	b.n	80090a2 <__ieee754_sqrt+0x2e>
 80091c6:	0ad3      	lsrs	r3, r2, #11
 80091c8:	3815      	subs	r0, #21
 80091ca:	0552      	lsls	r2, r2, #21
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0fa      	beq.n	80091c6 <__ieee754_sqrt+0x152>
 80091d0:	02dc      	lsls	r4, r3, #11
 80091d2:	d50a      	bpl.n	80091ea <__ieee754_sqrt+0x176>
 80091d4:	f1c1 0420 	rsb	r4, r1, #32
 80091d8:	fa22 f404 	lsr.w	r4, r2, r4
 80091dc:	1e4d      	subs	r5, r1, #1
 80091de:	408a      	lsls	r2, r1
 80091e0:	4323      	orrs	r3, r4
 80091e2:	1b41      	subs	r1, r0, r5
 80091e4:	e772      	b.n	80090cc <__ieee754_sqrt+0x58>
 80091e6:	4608      	mov	r0, r1
 80091e8:	e7f0      	b.n	80091cc <__ieee754_sqrt+0x158>
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	3101      	adds	r1, #1
 80091ee:	e7ef      	b.n	80091d0 <__ieee754_sqrt+0x15c>
 80091f0:	46e0      	mov	r8, ip
 80091f2:	e7aa      	b.n	800914a <__ieee754_sqrt+0xd6>
 80091f4:	f7f7 f84a 	bl	800028c <__adddf3>
 80091f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4640      	mov	r0, r8
 8009202:	4649      	mov	r1, r9
 8009204:	f7f7 fc6a 	bl	8000adc <__aeabi_dcmplt>
 8009208:	b120      	cbz	r0, 8009214 <__ieee754_sqrt+0x1a0>
 800920a:	1ca0      	adds	r0, r4, #2
 800920c:	bf08      	it	eq
 800920e:	3501      	addeq	r5, #1
 8009210:	3402      	adds	r4, #2
 8009212:	e7ca      	b.n	80091aa <__ieee754_sqrt+0x136>
 8009214:	3401      	adds	r4, #1
 8009216:	f024 0401 	bic.w	r4, r4, #1
 800921a:	e7c6      	b.n	80091aa <__ieee754_sqrt+0x136>
 800921c:	7ff00000 	.word	0x7ff00000
 8009220:	200001e0 	.word	0x200001e0
 8009224:	200001e8 	.word	0x200001e8

08009228 <_init>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	bf00      	nop
 800922c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922e:	bc08      	pop	{r3}
 8009230:	469e      	mov	lr, r3
 8009232:	4770      	bx	lr

08009234 <_fini>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	bf00      	nop
 8009238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923a:	bc08      	pop	{r3}
 800923c:	469e      	mov	lr, r3
 800923e:	4770      	bx	lr
