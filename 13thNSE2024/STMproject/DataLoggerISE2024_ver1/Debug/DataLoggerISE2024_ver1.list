
DataLoggerISE2024_ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f230  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  0800f3c0  0800f3c0  0001f3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdf8  0800fdf8  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800fdf8  0800fdf8  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fdf8  0800fdf8  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdf8  0800fdf8  0001fdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdfc  0800fdfc  0001fdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800fe00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
 10 .bss          00000e50  20000200  20000200  00020200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001050  20001050  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016649  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003753  00000000  00000000  000368bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015c0  00000000  00000000  0003a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010e9  00000000  00000000  0003b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f40b  00000000  00000000  0003c6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d7f5  00000000  00000000  0005bac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000afecf  00000000  00000000  000792b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006ff8  00000000  00000000  00129188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00130180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f3a8 	.word	0x0800f3a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800f3a8 	.word	0x0800f3a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <bmpRead8>:
// 標準気圧に対する温度の勾配
#define TEMPERATURE_GRADIENT 0.0065
// 標準気圧に対する重力加速度
#define GRAVITY 9.80665

uint8_t bmpRead8(uint8_t a) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	uint8_t r;
	HAL_I2C_Master_Transmit(bmpPort, BMP180_ADDR, &a, 1, HAL_MAX_DELAY);
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <bmpRead8+0x44>)
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	23ee      	movs	r3, #238	; 0xee
 8000c58:	b299      	uxth	r1, r3
 8000c5a:	1dfa      	adds	r2, r7, #7
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	f003 fd56 	bl	8004714 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(bmpPort, BMP180_ADDR, &r, 1, HAL_MAX_DELAY);
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <bmpRead8+0x44>)
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	23ee      	movs	r3, #238	; 0xee
 8000c6e:	b299      	uxth	r1, r3
 8000c70:	f107 020f 	add.w	r2, r7, #15
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f003 fe3e 	bl	80048fc <HAL_I2C_Master_Receive>
	return r;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000021c 	.word	0x2000021c

08000c90 <bmpRead16>:
uint16_t bmpRead16(uint8_t a) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	uint8_t retbuf[2];
	uint16_t r;
	HAL_I2C_Master_Transmit(bmpPort, BMP180_ADDR, &a, 1, HAL_MAX_DELAY);
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <bmpRead16+0x54>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	23ee      	movs	r3, #238	; 0xee
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	1dfa      	adds	r2, r7, #7
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	f003 fd32 	bl	8004714 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(bmpPort, BMP180_ADDR, retbuf, 2, HAL_MAX_DELAY);
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <bmpRead16+0x54>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	23ee      	movs	r3, #238	; 0xee
 8000cb6:	b299      	uxth	r1, r3
 8000cb8:	f107 020c 	add.w	r2, r7, #12
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f003 fe1a 	bl	80048fc <HAL_I2C_Master_Receive>
	r = retbuf[1] | (retbuf[0] << 8);
 8000cc8:	7b7b      	ldrb	r3, [r7, #13]
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	7b3b      	ldrb	r3, [r7, #12]
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81fb      	strh	r3, [r7, #14]
	return r;
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000021c 	.word	0x2000021c

08000ce8 <bmpWrite8>:
void bmpWrite8(uint8_t a, uint8_t d) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	71bb      	strb	r3, [r7, #6]
	uint8_t tBuf[2];
	tBuf[0] = a;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	733b      	strb	r3, [r7, #12]
	tBuf[1] = d;
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(bmpPort, BMP180_ADDR, tBuf, 2, HAL_MAX_DELAY);
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <bmpWrite8+0x38>)
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	23ee      	movs	r3, #238	; 0xee
 8000d06:	b299      	uxth	r1, r3
 8000d08:	f107 020c 	add.w	r2, r7, #12
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2302      	movs	r3, #2
 8000d14:	f003 fcfe 	bl	8004714 <HAL_I2C_Master_Transmit>
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000021c 	.word	0x2000021c

08000d24 <bmpBegin>:
uint8_t bmpBegin(uint8_t mode, I2C_HandleTypeDef *i2cdev) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
	bmpPort = i2cdev;
 8000d30:	4a32      	ldr	r2, [pc, #200]	; (8000dfc <bmpBegin+0xd8>)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	6013      	str	r3, [r2, #0]
	if (mode > BMP180_ULTRAHIGHRES)
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d901      	bls.n	8000d40 <bmpBegin+0x1c>
		mode = BMP180_ULTRAHIGHRES;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	71fb      	strb	r3, [r7, #7]
	oversampling = mode;
 8000d40:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <bmpBegin+0xdc>)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	7013      	strb	r3, [r2, #0]
	if (bmpRead8(0xD0) != 0x55)
 8000d46:	20d0      	movs	r0, #208	; 0xd0
 8000d48:	f7ff ff7e 	bl	8000c48 <bmpRead8>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b55      	cmp	r3, #85	; 0x55
 8000d50:	d001      	beq.n	8000d56 <bmpBegin+0x32>
		return 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e04d      	b.n	8000df2 <bmpBegin+0xce>
	/* read calibration data */
	ac1 = bmpRead16(BMP180_CAL_AC1);
 8000d56:	20aa      	movs	r0, #170	; 0xaa
 8000d58:	f7ff ff9a 	bl	8000c90 <bmpRead16>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <bmpBegin+0xe0>)
 8000d62:	801a      	strh	r2, [r3, #0]
	ac2 = bmpRead16(BMP180_CAL_AC2);
 8000d64:	20ac      	movs	r0, #172	; 0xac
 8000d66:	f7ff ff93 	bl	8000c90 <bmpRead16>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <bmpBegin+0xe4>)
 8000d70:	801a      	strh	r2, [r3, #0]
	ac3 = bmpRead16(BMP180_CAL_AC3);
 8000d72:	20ae      	movs	r0, #174	; 0xae
 8000d74:	f7ff ff8c 	bl	8000c90 <bmpRead16>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <bmpBegin+0xe8>)
 8000d7e:	801a      	strh	r2, [r3, #0]
	ac4 = bmpRead16(BMP180_CAL_AC4);
 8000d80:	20b0      	movs	r0, #176	; 0xb0
 8000d82:	f7ff ff85 	bl	8000c90 <bmpRead16>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <bmpBegin+0xec>)
 8000d8c:	801a      	strh	r2, [r3, #0]
	ac5 = bmpRead16(BMP180_CAL_AC5);
 8000d8e:	20b2      	movs	r0, #178	; 0xb2
 8000d90:	f7ff ff7e 	bl	8000c90 <bmpRead16>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <bmpBegin+0xf0>)
 8000d9a:	801a      	strh	r2, [r3, #0]
	ac6 = bmpRead16(BMP180_CAL_AC6);
 8000d9c:	20b4      	movs	r0, #180	; 0xb4
 8000d9e:	f7ff ff77 	bl	8000c90 <bmpRead16>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <bmpBegin+0xf4>)
 8000da8:	801a      	strh	r2, [r3, #0]
	b1 = bmpRead16(BMP180_CAL_B1);
 8000daa:	20b6      	movs	r0, #182	; 0xb6
 8000dac:	f7ff ff70 	bl	8000c90 <bmpRead16>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <bmpBegin+0xf8>)
 8000db6:	801a      	strh	r2, [r3, #0]
	b2 = bmpRead16(BMP180_CAL_B2);
 8000db8:	20b8      	movs	r0, #184	; 0xb8
 8000dba:	f7ff ff69 	bl	8000c90 <bmpRead16>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <bmpBegin+0xfc>)
 8000dc4:	801a      	strh	r2, [r3, #0]
	mb = bmpRead16(BMP180_CAL_MB);
 8000dc6:	20ba      	movs	r0, #186	; 0xba
 8000dc8:	f7ff ff62 	bl	8000c90 <bmpRead16>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <bmpBegin+0x100>)
 8000dd2:	801a      	strh	r2, [r3, #0]
	mc = bmpRead16(BMP180_CAL_MC);
 8000dd4:	20bc      	movs	r0, #188	; 0xbc
 8000dd6:	f7ff ff5b 	bl	8000c90 <bmpRead16>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <bmpBegin+0x104>)
 8000de0:	801a      	strh	r2, [r3, #0]
	md = bmpRead16(BMP180_CAL_MD);
 8000de2:	20be      	movs	r0, #190	; 0xbe
 8000de4:	f7ff ff54 	bl	8000c90 <bmpRead16>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <bmpBegin+0x108>)
 8000dee:	801a      	strh	r2, [r3, #0]
	return 1;
 8000df0:	2301      	movs	r3, #1
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000021c 	.word	0x2000021c
 8000e00:	20000220 	.word	0x20000220
 8000e04:	20000222 	.word	0x20000222
 8000e08:	20000224 	.word	0x20000224
 8000e0c:	20000226 	.word	0x20000226
 8000e10:	20000232 	.word	0x20000232
 8000e14:	20000234 	.word	0x20000234
 8000e18:	20000236 	.word	0x20000236
 8000e1c:	20000228 	.word	0x20000228
 8000e20:	2000022a 	.word	0x2000022a
 8000e24:	2000022c 	.word	0x2000022c
 8000e28:	2000022e 	.word	0x2000022e
 8000e2c:	20000230 	.word	0x20000230

08000e30 <computeB5>:
// Sensor read functions
int32_t computeB5(int32_t UT) {
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	int32_t X1 = (UT - (int32_t) ac6) * ((int32_t) ac5) >> 15;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <computeB5+0x4c>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <computeB5+0x50>)
 8000e44:	8812      	ldrh	r2, [r2, #0]
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	13db      	asrs	r3, r3, #15
 8000e4c:	60fb      	str	r3, [r7, #12]
	int32_t X2 = ((int32_t) mc << 11) / (X1 + (int32_t) md);
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <computeB5+0x54>)
 8000e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e54:	02da      	lsls	r2, r3, #11
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <computeB5+0x58>)
 8000e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	440b      	add	r3, r1
 8000e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e66:	60bb      	str	r3, [r7, #8]
	return X1 + X2;
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	4413      	add	r3, r2
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000236 	.word	0x20000236
 8000e80:	20000234 	.word	0x20000234
 8000e84:	2000022e 	.word	0x2000022e
 8000e88:	20000230 	.word	0x20000230

08000e8c <readBMPRawTemperature>:
uint16_t readBMPRawTemperature(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	bmpWrite8(BMP180_CONTROL, BMP180_READTEMPCMD);
 8000e90:	212e      	movs	r1, #46	; 0x2e
 8000e92:	20f4      	movs	r0, #244	; 0xf4
 8000e94:	f7ff ff28 	bl	8000ce8 <bmpWrite8>
	HAL_Delay(5);
 8000e98:	2005      	movs	r0, #5
 8000e9a:	f002 f98d 	bl	80031b8 <HAL_Delay>
	return bmpRead16(BMP180_TEMPDATA);
 8000e9e:	20f6      	movs	r0, #246	; 0xf6
 8000ea0:	f7ff fef6 	bl	8000c90 <bmpRead16>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <readBMPRawPressure>:
uint32_t readBMPRawPressure(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	uint32_t raw;
	bmpWrite8(BMP180_CONTROL, BMP180_READPRESSURECMD + (oversampling << 6));
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	019b      	lsls	r3, r3, #6
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3334      	adds	r3, #52	; 0x34
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	20f4      	movs	r0, #244	; 0xf4
 8000ec2:	f7ff ff11 	bl	8000ce8 <bmpWrite8>
	if (oversampling == BMP180_ULTRALOWPOWER)
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <readBMPRawPressure+0x2a>
		HAL_Delay(5);
 8000ece:	2005      	movs	r0, #5
 8000ed0:	f002 f972 	bl	80031b8 <HAL_Delay>
 8000ed4:	e012      	b.n	8000efc <readBMPRawPressure+0x50>
	else if (oversampling == BMP180_STANDARD)
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d103      	bne.n	8000ee6 <readBMPRawPressure+0x3a>
		HAL_Delay(8);
 8000ede:	2008      	movs	r0, #8
 8000ee0:	f002 f96a 	bl	80031b8 <HAL_Delay>
 8000ee4:	e00a      	b.n	8000efc <readBMPRawPressure+0x50>
	else if (oversampling == BMP180_HIGHRES)
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d103      	bne.n	8000ef6 <readBMPRawPressure+0x4a>
		HAL_Delay(14);
 8000eee:	200e      	movs	r0, #14
 8000ef0:	f002 f962 	bl	80031b8 <HAL_Delay>
 8000ef4:	e002      	b.n	8000efc <readBMPRawPressure+0x50>
	else
		HAL_Delay(26);
 8000ef6:	201a      	movs	r0, #26
 8000ef8:	f002 f95e 	bl	80031b8 <HAL_Delay>
	raw = bmpRead16(BMP180_PRESSUREDATA);
 8000efc:	20f6      	movs	r0, #246	; 0xf6
 8000efe:	f7ff fec7 	bl	8000c90 <bmpRead16>
 8000f02:	4603      	mov	r3, r0
 8000f04:	607b      	str	r3, [r7, #4]
	raw <<= 8;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	607b      	str	r3, [r7, #4]
	raw |= bmpRead8(BMP180_PRESSUREDATA + 2);
 8000f0c:	20f8      	movs	r0, #248	; 0xf8
 8000f0e:	f7ff fe9b 	bl	8000c48 <bmpRead8>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	607b      	str	r3, [r7, #4]
	raw >>= (8 - oversampling);
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	f1c3 0308 	rsb	r3, r3, #8
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2a:	607b      	str	r3, [r7, #4]
	return raw;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000220 	.word	0x20000220

08000f3c <readBMPTemperature>:
float readBMPTemperature(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
	int32_t UT, B5; // following ds convention
	float temp;
	UT = readBMPRawTemperature();
 8000f42:	f7ff ffa3 	bl	8000e8c <readBMPRawTemperature>
 8000f46:	4603      	mov	r3, r0
 8000f48:	60fb      	str	r3, [r7, #12]
	B5 = computeB5(UT);
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff ff70 	bl	8000e30 <computeB5>
 8000f50:	60b8      	str	r0, [r7, #8]
	temp = (B5 + 8) >> 4;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	3308      	adds	r3, #8
 8000f56:	111b      	asrs	r3, r3, #4
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f60:	edc7 7a01 	vstr	s15, [r7, #4]
	temp /= 10;
 8000f64:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f68:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f70:	edc7 7a01 	vstr	s15, [r7, #4]
	return temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	ee07 3a90 	vmov	s15, r3
}
 8000f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <readBMPPressure>:
int32_t readBMPPressure(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
	int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
	uint32_t B4, B7;
	UT = readBMPRawTemperature();
 8000f8a:	f7ff ff7f 	bl	8000e8c <readBMPRawTemperature>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
	UP = readBMPRawPressure();
 8000f92:	f7ff ff8b 	bl	8000eac <readBMPRawPressure>
 8000f96:	4603      	mov	r3, r0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
	B5 = computeB5(UT);
 8000f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f9c:	f7ff ff48 	bl	8000e30 <computeB5>
 8000fa0:	6238      	str	r0, [r7, #32]
	// do pressure calcs
	B6 = B5 - 4000;
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000fa8:	61fb      	str	r3, [r7, #28]
	X1 = ((int32_t) b2 * ((B6 * B6) >> 12)) >> 11;
 8000faa:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <readBMPPressure+0x13c>)
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fb03 f303 	mul.w	r3, r3, r3
 8000fb8:	131b      	asrs	r3, r3, #12
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	12db      	asrs	r3, r3, #11
 8000fc0:	61bb      	str	r3, [r7, #24]
	X2 = ((int32_t) ac2 * B6) >> 11;
 8000fc2:	4b40      	ldr	r3, [pc, #256]	; (80010c4 <readBMPPressure+0x140>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fb02 f303 	mul.w	r3, r2, r3
 8000fd0:	12db      	asrs	r3, r3, #11
 8000fd2:	617b      	str	r3, [r7, #20]
	X3 = X1 + X2;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	4413      	add	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
	B3 = ((((int32_t) ac1 * 4 + X3) << oversampling) + 2) / 4;
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <readBMPPressure+0x144>)
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	009a      	lsls	r2, r3, #2
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a38      	ldr	r2, [pc, #224]	; (80010cc <readBMPPressure+0x148>)
 8000fea:	7812      	ldrb	r2, [r2, #0]
 8000fec:	4093      	lsls	r3, r2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da00      	bge.n	8000ff6 <readBMPPressure+0x72>
 8000ff4:	3303      	adds	r3, #3
 8000ff6:	109b      	asrs	r3, r3, #2
 8000ff8:	60fb      	str	r3, [r7, #12]
	X1 = ((int32_t) ac3 * B6) >> 13;
 8000ffa:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <readBMPPressure+0x14c>)
 8000ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001000:	461a      	mov	r2, r3
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	135b      	asrs	r3, r3, #13
 800100a:	61bb      	str	r3, [r7, #24]
	X2 = ((int32_t) b1 * ((B6 * B6) >> 12)) >> 16;
 800100c:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <readBMPPressure+0x150>)
 800100e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001012:	461a      	mov	r2, r3
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	fb03 f303 	mul.w	r3, r3, r3
 800101a:	131b      	asrs	r3, r3, #12
 800101c:	fb02 f303 	mul.w	r3, r2, r3
 8001020:	141b      	asrs	r3, r3, #16
 8001022:	617b      	str	r3, [r7, #20]
	X3 = ((X1 + X2) + 2) >> 2;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	4413      	add	r3, r2
 800102a:	3302      	adds	r3, #2
 800102c:	109b      	asrs	r3, r3, #2
 800102e:	613b      	str	r3, [r7, #16]
	B4 = ((uint32_t) ac4 * (uint32_t) (X3 + 32768)) >> 15;
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <readBMPPressure+0x154>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	0bdb      	lsrs	r3, r3, #15
 8001042:	60bb      	str	r3, [r7, #8]
	B7 = ((uint32_t) UP - B3) * (uint32_t) (50000UL >> oversampling);
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4a20      	ldr	r2, [pc, #128]	; (80010cc <readBMPPressure+0x148>)
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	4611      	mov	r1, r2
 8001050:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001054:	40ca      	lsrs	r2, r1
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	607b      	str	r3, [r7, #4]
	if (B7 < 0x80000000) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db06      	blt.n	8001070 <readBMPPressure+0xec>
		p = (B7 * 2) / B4;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	005a      	lsls	r2, r3, #1
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	fbb2 f3f3 	udiv	r3, r2, r3
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800106e:	e005      	b.n	800107c <readBMPPressure+0xf8>
	} else {
		p = (B7 / B4) * 2;
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	X1 = (p >> 8) * (p >> 8);
 800107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107e:	121b      	asrs	r3, r3, #8
 8001080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001082:	1212      	asrs	r2, r2, #8
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	61bb      	str	r3, [r7, #24]
	X1 = (X1 * 3038) >> 16;
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	f640 32de 	movw	r2, #3038	; 0xbde
 8001090:	fb02 f303 	mul.w	r3, r2, r3
 8001094:	141b      	asrs	r3, r3, #16
 8001096:	61bb      	str	r3, [r7, #24]
	X2 = (-7357 * p) >> 16;
 8001098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <readBMPPressure+0x158>)
 800109c:	fb02 f303 	mul.w	r3, r2, r3
 80010a0:	141b      	asrs	r3, r3, #16
 80010a2:	617b      	str	r3, [r7, #20]
	p = p + ((X1 + X2 + (int32_t) 3791) >> 4);
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	4413      	add	r3, r2
 80010aa:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80010ae:	111b      	asrs	r3, r3, #4
 80010b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010b2:	4413      	add	r3, r2
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 80010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3730      	adds	r7, #48	; 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000022a 	.word	0x2000022a
 80010c4:	20000224 	.word	0x20000224
 80010c8:	20000222 	.word	0x20000222
 80010cc:	20000220 	.word	0x20000220
 80010d0:	20000226 	.word	0x20000226
 80010d4:	20000228 	.word	0x20000228
 80010d8:	20000232 	.word	0x20000232
 80010dc:	ffffe343 	.word	0xffffe343

080010e0 <calculateAltitude>:

double calculateAltitude(int32_t pressure, float temp) {
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	ed87 0a00 	vstr	s0, [r7]
    double pressureRatio = SEA_LEVEL_PRESSURE / pressure;
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fa19 	bl	8000524 <__aeabi_i2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	a127      	add	r1, pc, #156	; (adr r1, 8001194 <calculateAltitude+0xb4>)
 80010f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010fc:	f7ff fba6 	bl	800084c <__aeabi_ddiv>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double altitude = (pow(pressureRatio, 1.0 / 5.257) - 1.0) * (temp + 273.15) / 0.0065;
 8001108:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8001178 <calculateAltitude+0x98>
 800110c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001110:	f00d fa10 	bl	800e534 <pow>
 8001114:	ec51 0b10 	vmov	r0, r1, d0
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <calculateAltitude+0xb0>)
 800111e:	f7ff f8b3 	bl	8000288 <__aeabi_dsub>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4614      	mov	r4, r2
 8001128:	461d      	mov	r5, r3
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_f2d>
 8001130:	a313      	add	r3, pc, #76	; (adr r3, 8001180 <calculateAltitude+0xa0>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff f8a9 	bl	800028c <__adddf3>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4620      	mov	r0, r4
 8001140:	4629      	mov	r1, r5
 8001142:	f7ff fa59 	bl	80005f8 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	a30e      	add	r3, pc, #56	; (adr r3, 8001188 <calculateAltitude+0xa8>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fb7a 	bl	800084c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return altitude;
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	ec43 2b17 	vmov	d7, r2, r3
}
 8001168:	eeb0 0a47 	vmov.f32	s0, s14
 800116c:	eef0 0a67 	vmov.f32	s1, s15
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bdb0      	pop	{r4, r5, r7, pc}
 8001176:	bf00      	nop
 8001178:	7dee2d4a 	.word	0x7dee2d4a
 800117c:	3fc85936 	.word	0x3fc85936
 8001180:	66666666 	.word	0x66666666
 8001184:	40711266 	.word	0x40711266
 8001188:	76c8b439 	.word	0x76c8b439
 800118c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001190:	3ff00000 	.word	0x3ff00000
 8001194:	00000000 	.word	0x00000000
 8001198:	40f8bcd0 	.word	0x40f8bcd0

0800119c <trimBMX055>:
//    i2c_readData(BMX055_MAG_ADDRESS, BMM050_DIG_XYZ1_LSB, rawData, 2);
//	dig_xyz1 = (uint16_t) (((uint16_t)rawData[1] << 8) | rawData[0]);
//}

void trimBMX055()  // get trim values for magnetometer sensitivity
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
	uint8_t rawData[2];  //placeholder for 2-byte trim data
	i2c_readRegister(BMX055_ACC_ADDRESS, BMM050_DIG_X1, (uint8_t *)&dig_x1);
 80011a2:	4a37      	ldr	r2, [pc, #220]	; (8001280 <trimBMX055+0xe4>)
 80011a4:	215d      	movs	r1, #93	; 0x5d
 80011a6:	2019      	movs	r0, #25
 80011a8:	f001 f92a 	bl	8002400 <i2c_readRegister>
	i2c_readRegister(BMX055_ACC_ADDRESS, BMM050_DIG_X2, (uint8_t *)&dig_x2);
 80011ac:	4a35      	ldr	r2, [pc, #212]	; (8001284 <trimBMX055+0xe8>)
 80011ae:	2164      	movs	r1, #100	; 0x64
 80011b0:	2019      	movs	r0, #25
 80011b2:	f001 f925 	bl	8002400 <i2c_readRegister>
	i2c_readRegister(BMX055_ACC_ADDRESS, BMM050_DIG_Y1, (uint8_t *)&dig_y1);
 80011b6:	4a34      	ldr	r2, [pc, #208]	; (8001288 <trimBMX055+0xec>)
 80011b8:	215e      	movs	r1, #94	; 0x5e
 80011ba:	2019      	movs	r0, #25
 80011bc:	f001 f920 	bl	8002400 <i2c_readRegister>
	i2c_readRegister(BMX055_ACC_ADDRESS, BMM050_DIG_Y2, (uint8_t *)&dig_y2);
 80011c0:	4a32      	ldr	r2, [pc, #200]	; (800128c <trimBMX055+0xf0>)
 80011c2:	2165      	movs	r1, #101	; 0x65
 80011c4:	2019      	movs	r0, #25
 80011c6:	f001 f91b 	bl	8002400 <i2c_readRegister>
	i2c_readRegister(BMX055_ACC_ADDRESS, BMM050_DIG_XY1, (uint8_t *)&dig_xy1);
 80011ca:	4a31      	ldr	r2, [pc, #196]	; (8001290 <trimBMX055+0xf4>)
 80011cc:	2171      	movs	r1, #113	; 0x71
 80011ce:	2019      	movs	r0, #25
 80011d0:	f001 f916 	bl	8002400 <i2c_readRegister>
	i2c_readRegister(BMX055_ACC_ADDRESS, BMM050_DIG_XY2, (uint8_t *)&dig_xy2);
 80011d4:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <trimBMX055+0xf8>)
 80011d6:	2170      	movs	r1, #112	; 0x70
 80011d8:	2019      	movs	r0, #25
 80011da:	f001 f911 	bl	8002400 <i2c_readRegister>

	i2c_readData(BMX055_MAG_ADDRESS, BMM050_DIG_Z1_LSB, rawData, 2);
 80011de:	1d3a      	adds	r2, r7, #4
 80011e0:	2302      	movs	r3, #2
 80011e2:	216a      	movs	r1, #106	; 0x6a
 80011e4:	2013      	movs	r0, #19
 80011e6:	f001 f91f 	bl	8002428 <i2c_readData>
	dig_z1 = (uint16_t) (((uint16_t)rawData[1] << 8) | rawData[0]);
 80011ea:	797b      	ldrb	r3, [r7, #5]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	793b      	ldrb	r3, [r7, #4]
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <trimBMX055+0xfc>)
 80011fc:	801a      	strh	r2, [r3, #0]
	i2c_readData(BMX055_MAG_ADDRESS, BMM050_DIG_Z2_LSB, rawData, 2);
 80011fe:	1d3a      	adds	r2, r7, #4
 8001200:	2302      	movs	r3, #2
 8001202:	2168      	movs	r1, #104	; 0x68
 8001204:	2013      	movs	r0, #19
 8001206:	f001 f90f 	bl	8002428 <i2c_readData>
	dig_z2 = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]);
 800120a:	797b      	ldrb	r3, [r7, #5]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	793b      	ldrb	r3, [r7, #4]
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b20      	ldr	r3, [pc, #128]	; (800129c <trimBMX055+0x100>)
 800121a:	801a      	strh	r2, [r3, #0]
	i2c_readData(BMX055_MAG_ADDRESS, BMM050_DIG_Z3_LSB, rawData, 2);
 800121c:	1d3a      	adds	r2, r7, #4
 800121e:	2302      	movs	r3, #2
 8001220:	216e      	movs	r1, #110	; 0x6e
 8001222:	2013      	movs	r0, #19
 8001224:	f001 f900 	bl	8002428 <i2c_readData>
	dig_z3 = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]);
 8001228:	797b      	ldrb	r3, [r7, #5]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b21a      	sxth	r2, r3
 800122e:	793b      	ldrb	r3, [r7, #4]
 8001230:	b21b      	sxth	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <trimBMX055+0x104>)
 8001238:	801a      	strh	r2, [r3, #0]
	i2c_readData(BMX055_MAG_ADDRESS, BMM050_DIG_Z4_LSB, rawData, 2);
 800123a:	1d3a      	adds	r2, r7, #4
 800123c:	2302      	movs	r3, #2
 800123e:	2162      	movs	r1, #98	; 0x62
 8001240:	2013      	movs	r0, #19
 8001242:	f001 f8f1 	bl	8002428 <i2c_readData>
	dig_z4 = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]);
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21a      	sxth	r2, r3
 800124c:	793b      	ldrb	r3, [r7, #4]
 800124e:	b21b      	sxth	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <trimBMX055+0x108>)
 8001256:	801a      	strh	r2, [r3, #0]
	i2c_readData(BMX055_MAG_ADDRESS, BMM050_DIG_XYZ1_LSB, rawData, 2);
 8001258:	1d3a      	adds	r2, r7, #4
 800125a:	2302      	movs	r3, #2
 800125c:	216c      	movs	r1, #108	; 0x6c
 800125e:	2013      	movs	r0, #19
 8001260:	f001 f8e2 	bl	8002428 <i2c_readData>
	dig_xyz1 = (uint16_t) (((uint16_t)rawData[1] << 8) | rawData[0]);
 8001264:	797b      	ldrb	r3, [r7, #5]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	793b      	ldrb	r3, [r7, #4]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <trimBMX055+0x10c>)
 8001276:	801a      	strh	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000242 	.word	0x20000242
 8001284:	20000244 	.word	0x20000244
 8001288:	20000243 	.word	0x20000243
 800128c:	20000245 	.word	0x20000245
 8001290:	2000024e 	.word	0x2000024e
 8001294:	2000024f 	.word	0x2000024f
 8001298:	20000246 	.word	0x20000246
 800129c:	20000248 	.word	0x20000248
 80012a0:	2000024a 	.word	0x2000024a
 80012a4:	2000024c 	.word	0x2000024c
 80012a8:	20000250 	.word	0x20000250

080012ac <selfTestBMX055>:

void selfTestBMX055()
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
	i2c_writeRegisterByte(BMX055_ACC_ADDRESS,  BMX055_ACC_BGW_SOFTRESET, 0xB6);  // reset accelerometer
 80012b2:	22b6      	movs	r2, #182	; 0xb6
 80012b4:	2114      	movs	r1, #20
 80012b6:	2019      	movs	r0, #25
 80012b8:	f001 f87c 	bl	80023b4 <i2c_writeRegisterByte>
	HAL_Delay(100); // Wait for all registers to reset
 80012bc:	2064      	movs	r0, #100	; 0x64
 80012be:	f001 ff7b 	bl	80031b8 <HAL_Delay>
	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_SETTING, 0x00);  // set offset targets to 0, 0, and +1 g for x, y, z axes
 80012c2:	2200      	movs	r2, #0
 80012c4:	2137      	movs	r1, #55	; 0x37
 80012c6:	2019      	movs	r0, #25
 80012c8:	f001 f874 	bl	80023b4 <i2c_writeRegisterByte>
	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_LPW, 0x00); //normal mode
 80012cc:	2200      	movs	r2, #0
 80012ce:	2111      	movs	r1, #17
 80012d0:	2019      	movs	r0, #25
 80012d2:	f001 f86f 	bl	80023b4 <i2c_writeRegisterByte>
	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_RANGE, AFS_16G); // Set accelerometer full range
 80012d6:	220c      	movs	r2, #12
 80012d8:	210f      	movs	r1, #15
 80012da:	2019      	movs	r0, #25
 80012dc:	f001 f86a 	bl	80023b4 <i2c_writeRegisterByte>

	int16_t data[3] = { 0 };
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	809a      	strh	r2, [r3, #4]
	int16_t posData[3] = { 0 };
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	809a      	strh	r2, [r3, #4]
	int16_t negData[3] = { 0 };
 80012f4:	463b      	mov	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	809a      	strh	r2, [r3, #4]

	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_SELF_TEST, 0x05); // x positive
 80012fc:	2205      	movs	r2, #5
 80012fe:	2132      	movs	r1, #50	; 0x32
 8001300:	2019      	movs	r0, #25
 8001302:	f001 f857 	bl	80023b4 <i2c_writeRegisterByte>
	HAL_Delay(100);
 8001306:	2064      	movs	r0, #100	; 0x64
 8001308:	f001 ff56 	bl	80031b8 <HAL_Delay>
	readBMX055DataAccel(data);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f901 	bl	8001518 <readBMX055DataAccel>
	posData[0] = data[0];
 8001316:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800131a:	813b      	strh	r3, [r7, #8]

	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_SELF_TEST, 0x06); // y positive
 800131c:	2206      	movs	r2, #6
 800131e:	2132      	movs	r1, #50	; 0x32
 8001320:	2019      	movs	r0, #25
 8001322:	f001 f847 	bl	80023b4 <i2c_writeRegisterByte>
	HAL_Delay(100);
 8001326:	2064      	movs	r0, #100	; 0x64
 8001328:	f001 ff46 	bl	80031b8 <HAL_Delay>
	readBMX055DataAccel(data);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f8f1 	bl	8001518 <readBMX055DataAccel>
	posData[1] = data[1];
 8001336:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800133a:	817b      	strh	r3, [r7, #10]

	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_SELF_TEST, 0x07); // z positive
 800133c:	2207      	movs	r2, #7
 800133e:	2132      	movs	r1, #50	; 0x32
 8001340:	2019      	movs	r0, #25
 8001342:	f001 f837 	bl	80023b4 <i2c_writeRegisterByte>
	HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	; 0x64
 8001348:	f001 ff36 	bl	80031b8 <HAL_Delay>
	readBMX055DataAccel(data);
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f8e1 	bl	8001518 <readBMX055DataAccel>
	posData[2] = data[2];
 8001356:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800135a:	81bb      	strh	r3, [r7, #12]

	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_SELF_TEST, 0x01); // x negative
 800135c:	2201      	movs	r2, #1
 800135e:	2132      	movs	r1, #50	; 0x32
 8001360:	2019      	movs	r0, #25
 8001362:	f001 f827 	bl	80023b4 <i2c_writeRegisterByte>
	HAL_Delay(100);
 8001366:	2064      	movs	r0, #100	; 0x64
 8001368:	f001 ff26 	bl	80031b8 <HAL_Delay>
	readBMX055DataAccel(data);
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f8d1 	bl	8001518 <readBMX055DataAccel>
	negData[0] = data[0];
 8001376:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800137a:	803b      	strh	r3, [r7, #0]

	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_SELF_TEST, 0x02); // y negative
 800137c:	2202      	movs	r2, #2
 800137e:	2132      	movs	r1, #50	; 0x32
 8001380:	2019      	movs	r0, #25
 8001382:	f001 f817 	bl	80023b4 <i2c_writeRegisterByte>
	HAL_Delay(100);
 8001386:	2064      	movs	r0, #100	; 0x64
 8001388:	f001 ff16 	bl	80031b8 <HAL_Delay>
	readBMX055DataAccel(data);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f8c1 	bl	8001518 <readBMX055DataAccel>
	negData[1] = data[1];
 8001396:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800139a:	807b      	strh	r3, [r7, #2]

	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_SELF_TEST, 0x03); // z negative
 800139c:	2203      	movs	r2, #3
 800139e:	2132      	movs	r1, #50	; 0x32
 80013a0:	2019      	movs	r0, #25
 80013a2:	f001 f807 	bl	80023b4 <i2c_writeRegisterByte>
	HAL_Delay(100);
 80013a6:	2064      	movs	r0, #100	; 0x64
 80013a8:	f001 ff06 	bl	80031b8 <HAL_Delay>
	readBMX055DataAccel(data);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f8b1 	bl	8001518 <readBMX055DataAccel>
	negData[2] = data[2];
 80013b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ba:	80bb      	strh	r3, [r7, #4]

	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_SELF_TEST, 0x00); // disable
 80013bc:	2200      	movs	r2, #0
 80013be:	2132      	movs	r1, #50	; 0x32
 80013c0:	2019      	movs	r0, #25
 80013c2:	f000 fff7 	bl	80023b4 <i2c_writeRegisterByte>

	AccelRange[0] = posData[0] - negData[0];
 80013c6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <selfTestBMX055+0x164>)
 80013da:	801a      	strh	r2, [r3, #0]
	AccelRange[1] = posData[1] - negData[1];
 80013dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <selfTestBMX055+0x164>)
 80013f0:	805a      	strh	r2, [r3, #2]
	AccelRange[2] = posData[2] - negData[2];
 80013f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	b29b      	uxth	r3, r3
 8001402:	b21a      	sxth	r2, r3
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <selfTestBMX055+0x164>)
 8001406:	809a      	strh	r2, [r3, #4]
}
 8001408:	bf00      	nop
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000023c 	.word	0x2000023c

08001414 <initBMX055>:

void initBMX055()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
   //selfTestBMX055();
   //HAL_Delay(10); // Wait for all registers to reset

   i2c_writeRegisterByte(BMX055_ACC_ADDRESS,  BMX055_ACC_BGW_SOFTRESET, 0xB6);  // reset accelerometer
 8001418:	22b6      	movs	r2, #182	; 0xb6
 800141a:	2114      	movs	r1, #20
 800141c:	2019      	movs	r0, #25
 800141e:	f000 ffc9 	bl	80023b4 <i2c_writeRegisterByte>
   HAL_Delay(100); // Wait for all registers to reset
 8001422:	2064      	movs	r0, #100	; 0x64
 8001424:	f001 fec8 	bl	80031b8 <HAL_Delay>
   i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_LPW, 0x00); //normal mode
 8001428:	2200      	movs	r2, #0
 800142a:	2111      	movs	r1, #17
 800142c:	2019      	movs	r0, #25
 800142e:	f000 ffc1 	bl	80023b4 <i2c_writeRegisterByte>

   // Configure accelerometer
   i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_RANGE, Ascale & 0x0F); // Set accelerometer full range
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <initBMX055+0xec>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	210f      	movs	r1, #15
 8001440:	2019      	movs	r0, #25
 8001442:	f000 ffb7 	bl	80023b4 <i2c_writeRegisterByte>
   i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_PMU_BW, ACCBW & 0x0F);     // Set accelerometer bandwidth
 8001446:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <initBMX055+0xf0>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	2110      	movs	r1, #16
 8001454:	2019      	movs	r0, #25
 8001456:	f000 ffad 	bl	80023b4 <i2c_writeRegisterByte>
   i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_D_HBW, 0x00);              // Use filtered data
 800145a:	2200      	movs	r2, #0
 800145c:	2113      	movs	r1, #19
 800145e:	2019      	movs	r0, #25
 8001460:	f000 ffa8 	bl	80023b4 <i2c_writeRegisterByte>

	HAL_Delay(10);
 8001464:	200a      	movs	r0, #10
 8001466:	f001 fea7 	bl	80031b8 <HAL_Delay>

	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_CTRL, 0x80); // set all accel offset compensation registers to zero
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	2136      	movs	r1, #54	; 0x36
 800146e:	2019      	movs	r0, #25
 8001470:	f000 ffa0 	bl	80023b4 <i2c_writeRegisterByte>
	i2c_writeRegisterByte(BMX055_ACC_ADDRESS, BMX055_ACC_OFC_SETTING, 0x20);  // set offset targets to 0, 0, and +1 g for x, y, z axes
 8001474:	2220      	movs	r2, #32
 8001476:	2137      	movs	r1, #55	; 0x37
 8001478:	2019      	movs	r0, #25
 800147a:	f000 ff9b 	bl	80023b4 <i2c_writeRegisterByte>

	HAL_Delay(10);
 800147e:	200a      	movs	r0, #10
 8001480:	f001 fe9a 	bl	80031b8 <HAL_Delay>

    i2c_writeRegisterByte(BMX055_GYRO_ADDRESS, BMX055_GYRO_RANGE, Gscale);  // set GYRO FS range
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <initBMX055+0xf4>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	210f      	movs	r1, #15
 800148c:	2069      	movs	r0, #105	; 0x69
 800148e:	f000 ff91 	bl	80023b4 <i2c_writeRegisterByte>
    i2c_writeRegisterByte(BMX055_GYRO_ADDRESS, BMX055_GYRO_BW, GODRBW);     // set GYRO ODR and Bandwidth
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <initBMX055+0xf8>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	2110      	movs	r1, #16
 800149a:	2069      	movs	r0, #105	; 0x69
 800149c:	f000 ff8a 	bl	80023b4 <i2c_writeRegisterByte>

	HAL_Delay(10);
 80014a0:	200a      	movs	r0, #10
 80014a2:	f001 fe89 	bl	80031b8 <HAL_Delay>

	i2c_writeRegisterByte(BMX055_MAG_ADDRESS, BMX055_MAG_PWR_CNTL1, 0x82);  // Softreset magnetometer, ends up in sleep mode
 80014a6:	2282      	movs	r2, #130	; 0x82
 80014a8:	214b      	movs	r1, #75	; 0x4b
 80014aa:	2013      	movs	r0, #19
 80014ac:	f000 ff82 	bl	80023b4 <i2c_writeRegisterByte>
	HAL_Delay(10);
 80014b0:	200a      	movs	r0, #10
 80014b2:	f001 fe81 	bl	80031b8 <HAL_Delay>

	i2c_writeRegisterByte(BMX055_MAG_ADDRESS, BMX055_MAG_PWR_CNTL1, 0x01); // Wake up magnetometer
 80014b6:	2201      	movs	r2, #1
 80014b8:	214b      	movs	r1, #75	; 0x4b
 80014ba:	2013      	movs	r0, #19
 80014bc:	f000 ff7a 	bl	80023b4 <i2c_writeRegisterByte>
	HAL_Delay(10);
 80014c0:	200a      	movs	r0, #10
 80014c2:	f001 fe79 	bl	80031b8 <HAL_Delay>

	i2c_writeRegisterByte(BMX055_MAG_ADDRESS, BMX055_MAG_PWR_CNTL2, MODR << 3); // Normal mode
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <initBMX055+0xfc>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	214c      	movs	r1, #76	; 0x4c
 80014d2:	2013      	movs	r0, #19
 80014d4:	f000 ff6e 	bl	80023b4 <i2c_writeRegisterByte>

	HAL_Delay(50); // Wait for all registers to reset
 80014d8:	2032      	movs	r0, #50	; 0x32
 80014da:	f001 fe6d 	bl	80031b8 <HAL_Delay>

	i2c_writeRegisterByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_XY, 23);  //  2x+1 = 47 sample avg for XY-axis
 80014de:	2217      	movs	r2, #23
 80014e0:	2151      	movs	r1, #81	; 0x51
 80014e2:	2013      	movs	r0, #19
 80014e4:	f000 ff66 	bl	80023b4 <i2c_writeRegisterByte>
	i2c_writeRegisterByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_Z, 41);  // 2x+1 = 83 sample avg for Z-axis
 80014e8:	2229      	movs	r2, #41	; 0x29
 80014ea:	2152      	movs	r1, #82	; 0x52
 80014ec:	2013      	movs	r0, #19
 80014ee:	f000 ff61 	bl	80023b4 <i2c_writeRegisterByte>
	//i2c_writeRegisterByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_XY, 1 /*23*/);  //  3 samples // 2x+1 = 47 sample avg for XY-axis
	//i2c_writeRegisterByte(BMX055_MAG_ADDRESS, BMX055_MAG_REP_Z, 2 /*41*/);  // 3 samples //2x+1 = 83 sample avg for Z-axis

	HAL_Delay(10); // Wait for all registers to reset
 80014f2:	200a      	movs	r0, #10
 80014f4:	f001 fe60 	bl	80031b8 <HAL_Delay>

	trimBMX055();
 80014f8:	f7ff fe50 	bl	800119c <trimBMX055>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000001 	.word	0x20000001
 8001504:	20000002 	.word	0x20000002
 8001508:	20000238 	.word	0x20000238
 800150c:	20000000 	.word	0x20000000
 8001510:	20000003 	.word	0x20000003
 8001514:	00000000 	.word	0x00000000

08001518 <readBMX055DataAccel>:
  // magnetometer resolution is 1 microTesla/16 counts or 1/1.6 milliGauss/count
   return 1./1.6;
}

int readBMX055DataAccel(int16_t *destination)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z accel register data stored here
	i2c_readData(BMX055_ACC_ADDRESS, BMX055_ACC_D_X_LSB, rawData, 6);  // Read the six raw data registers into data array
 8001520:	f107 0208 	add.w	r2, r7, #8
 8001524:	2306      	movs	r3, #6
 8001526:	2102      	movs	r1, #2
 8001528:	2019      	movs	r0, #25
 800152a:	f000 ff7d 	bl	8002428 <i2c_readData>
	destination[0] = ((int16_t)((rawData[1] << 8) | rawData[0]) / 16);  // Turn the MSB and LSB into a signed 12-bit value
 800152e:	7a7b      	ldrb	r3, [r7, #9]
 8001530:	021b      	lsls	r3, r3, #8
 8001532:	b21a      	sxth	r2, r3
 8001534:	7a3b      	ldrb	r3, [r7, #8]
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21b      	sxth	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	da00      	bge.n	8001542 <readBMX055DataAccel+0x2a>
 8001540:	330f      	adds	r3, #15
 8001542:	111b      	asrs	r3, r3, #4
 8001544:	b21a      	sxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	801a      	strh	r2, [r3, #0]
	destination[1] = ((int16_t)((rawData[3] << 8) | rawData[2]) / 16);
 800154a:	7afb      	ldrb	r3, [r7, #11]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	7abb      	ldrb	r3, [r7, #10]
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b219      	sxth	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	1c9a      	adds	r2, r3, #2
 800155c:	460b      	mov	r3, r1
 800155e:	2b00      	cmp	r3, #0
 8001560:	da00      	bge.n	8001564 <readBMX055DataAccel+0x4c>
 8001562:	330f      	adds	r3, #15
 8001564:	111b      	asrs	r3, r3, #4
 8001566:	b21b      	sxth	r3, r3
 8001568:	8013      	strh	r3, [r2, #0]
	destination[2] = ((int16_t)((rawData[5] << 8) | rawData[4]) / 16);
 800156a:	7b7b      	ldrb	r3, [r7, #13]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	7b3b      	ldrb	r3, [r7, #12]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b219      	sxth	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	1d1a      	adds	r2, r3, #4
 800157c:	460b      	mov	r3, r1
 800157e:	2b00      	cmp	r3, #0
 8001580:	da00      	bge.n	8001584 <readBMX055DataAccel+0x6c>
 8001582:	330f      	adds	r3, #15
 8001584:	111b      	asrs	r3, r3, #4
 8001586:	b21b      	sxth	r3, r3
 8001588:	8013      	strh	r3, [r2, #0]

	destination[0] *= 7.81;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffc7 	bl	8000524 <__aeabi_i2d>
 8001596:	a322      	add	r3, pc, #136	; (adr r3, 8001620 <readBMX055DataAccel+0x108>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff f82c 	bl	80005f8 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fad6 	bl	8000b58 <__aeabi_d2iz>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	801a      	strh	r2, [r3, #0]
	destination[1] *= 7.81;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3302      	adds	r3, #2
 80015b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffb1 	bl	8000524 <__aeabi_i2d>
 80015c2:	a317      	add	r3, pc, #92	; (adr r3, 8001620 <readBMX055DataAccel+0x108>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7ff f816 	bl	80005f8 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	1c9c      	adds	r4, r3, #2
 80015d8:	f7ff fabe 	bl	8000b58 <__aeabi_d2iz>
 80015dc:	4603      	mov	r3, r0
 80015de:	b21b      	sxth	r3, r3
 80015e0:	8023      	strh	r3, [r4, #0]
	destination[2] *= 7.81;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3304      	adds	r3, #4
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ff9a 	bl	8000524 <__aeabi_i2d>
 80015f0:	a30b      	add	r3, pc, #44	; (adr r3, 8001620 <readBMX055DataAccel+0x108>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7fe ffff 	bl	80005f8 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	1d1c      	adds	r4, r3, #4
 8001606:	f7ff faa7 	bl	8000b58 <__aeabi_d2iz>
 800160a:	4603      	mov	r3, r0
 800160c:	b21b      	sxth	r3, r3
 800160e:	8023      	strh	r3, [r4, #0]
	//destination[0] = destination[1] = 0;
	//destination[2] = (int16_t)(1024);
	return 1;
 8001610:	2301      	movs	r3, #1
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w
 8001620:	a3d70a3d 	.word	0xa3d70a3d
 8001624:	401f3d70 	.word	0x401f3d70

08001628 <readBMX055DataGyro>:

int readBMX055DataGyro(int16_t *destination)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	i2c_readData(BMX055_GYRO_ADDRESS, BMX055_GYRO_RATE_X_LSB, rawData, 6);  // Read the six raw data registers sequentially into data array
 8001630:	f107 0208 	add.w	r2, r7, #8
 8001634:	2306      	movs	r3, #6
 8001636:	2102      	movs	r1, #2
 8001638:	2069      	movs	r0, #105	; 0x69
 800163a:	f000 fef5 	bl	8002428 <i2c_readData>
	destination[0] = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]);   // Turn the MSB and LSB into a signed 16-bit value
 800163e:	7a7b      	ldrb	r3, [r7, #9]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21a      	sxth	r2, r3
 8001644:	7a3b      	ldrb	r3, [r7, #8]
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b21a      	sxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t) (((int16_t)rawData[3] << 8) | rawData[2]);
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b219      	sxth	r1, r3
 8001656:	7abb      	ldrb	r3, [r7, #10]
 8001658:	b21a      	sxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3302      	adds	r3, #2
 800165e:	430a      	orrs	r2, r1
 8001660:	b212      	sxth	r2, r2
 8001662:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t) (((int16_t)rawData[5] << 8) | rawData[4]);
 8001664:	7b7b      	ldrb	r3, [r7, #13]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b219      	sxth	r1, r3
 800166a:	7b3b      	ldrb	r3, [r7, #12]
 800166c:	b21a      	sxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3304      	adds	r3, #4
 8001672:	430a      	orrs	r2, r1
 8001674:	b212      	sxth	r2, r2
 8001676:	801a      	strh	r2, [r3, #0]
	//destination[0] = destination[1] = destination[2] = 0;


	return 1;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <readBMX055DataMag>:



int readBMX055DataMag(int16_t *destination)
{
 8001682:	b590      	push	{r4, r7, lr}
 8001684:	b087      	sub	sp, #28
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	int16_t mdata_x = 0, mdata_y = 0, mdata_z = 0; //, temp = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	82fb      	strh	r3, [r7, #22]
 800168e:	2300      	movs	r3, #0
 8001690:	82bb      	strh	r3, [r7, #20]
 8001692:	2300      	movs	r3, #0
 8001694:	827b      	strh	r3, [r7, #18]
	uint16_t data_r = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	823b      	strh	r3, [r7, #16]
	uint8_t rawData[8];  // x/y/z hall magnetic field data, and Hall resistance data
	i2c_readData(BMX055_MAG_ADDRESS, BMX055_MAG_XOUT_LSB, rawData, 8);  // Read the eight raw data registers sequentially into data array
 800169a:	f107 0208 	add.w	r2, r7, #8
 800169e:	2308      	movs	r3, #8
 80016a0:	2142      	movs	r1, #66	; 0x42
 80016a2:	2013      	movs	r0, #19
 80016a4:	f000 fec0 	bl	8002428 <i2c_readData>
	if(rawData[6] & 0x01) // Check if data ready status bit is set
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d04a      	beq.n	8001748 <readBMX055DataMag+0xc6>
	{
		mdata_x = (int16_t) (((int16_t)rawData[1] << 8) | rawData[0]) >> 3;  // 13-bit signed integer for x-axis field
 80016b2:	7a7b      	ldrb	r3, [r7, #9]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	7a3b      	ldrb	r3, [r7, #8]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b21b      	sxth	r3, r3
 80016c0:	10db      	asrs	r3, r3, #3
 80016c2:	82fb      	strh	r3, [r7, #22]
		mdata_y = (int16_t) (((int16_t)rawData[3] << 8) | rawData[2]) >> 3;  // 13-bit signed integer for y-axis field
 80016c4:	7afb      	ldrb	r3, [r7, #11]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	7abb      	ldrb	r3, [r7, #10]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	10db      	asrs	r3, r3, #3
 80016d4:	82bb      	strh	r3, [r7, #20]
		mdata_z = (int16_t) (((int16_t)rawData[5] << 8) | rawData[4]) >> 1;  // 15-bit signed integer for z-axis field
 80016d6:	7b7b      	ldrb	r3, [r7, #13]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	7b3b      	ldrb	r3, [r7, #12]
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	105b      	asrs	r3, r3, #1
 80016e6:	827b      	strh	r3, [r7, #18]

		data_r = (uint16_t) (((uint16_t)rawData[7] << 8) | rawData[6]) >> 2;  // 14-bit unsigned integer for Hall resistance
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	823b      	strh	r3, [r7, #16]

		destination[1] = compensate_BMX055_X(mdata_x, data_r);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1c9c      	adds	r4, r3, #2
 8001700:	8a3a      	ldrh	r2, [r7, #16]
 8001702:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f000 f823 	bl	8001754 <compensate_BMX055_X>
 800170e:	4603      	mov	r3, r0
 8001710:	8023      	strh	r3, [r4, #0]
		destination[0] = -compensate_BMX055_Y(mdata_y, data_r);
 8001712:	8a3a      	ldrh	r2, [r7, #16]
 8001714:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f88c 	bl	8001838 <compensate_BMX055_Y>
 8001720:	4603      	mov	r3, r0
 8001722:	b29b      	uxth	r3, r3
 8001724:	425b      	negs	r3, r3
 8001726:	b29b      	uxth	r3, r3
 8001728:	b21a      	sxth	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	801a      	strh	r2, [r3, #0]
		destination[2] = compensate_BMX055_Z(mdata_z, data_r);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	1d1c      	adds	r4, r3, #4
 8001732:	8a3a      	ldrh	r2, [r7, #16]
 8001734:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f8ee 	bl	800191c <compensate_BMX055_Z>
 8001740:	4603      	mov	r3, r0
 8001742:	8023      	strh	r3, [r4, #0]
//		//temp = ((int16_t)(((uint16_t)((((int32_t)dig_xyz1) << 14)/(data_r != 0 ? data_r : dig_xyz1))) - ((uint16_t)0x4000)));
//		destination[1] = ((int16_t)((((int32_t)mdata_y) * ((((((((int32_t)dig_xy2) * ((((int32_t)temp) * ((int32_t)temp)) >> 7)) + (((int32_t)temp) * ((int32_t)(((int16_t)dig_xy1) << 7)))) >> 9) +((int32_t)0x100000)) * ((int32_t)(((int16_t)dig_y2) + ((int16_t)0xA0)))) >> 12)) >> 13)) + (((int16_t)dig_y1) << 3);
//
//		destination[2] = (((((int32_t)(mdata_z - dig_z4)) << 15) - ((((int32_t)dig_z3) * ((int32_t)(((int16_t)data_r) - ((int16_t)dig_xyz1))))>>2))/(dig_z2 + ((int16_t)(((((int32_t)dig_z1) * ((((int16_t)data_r) << 1)))+(1<<15))>>16))));

		return 1;
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <readBMX055DataMag+0xc8>
	}
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
	...

08001754 <compensate_BMX055_X>:
#define BMM050_OVERFLOW_OUTPUT			(-32768)
#define BMM050_NEGATIVE_SATURATION_Z    (-32767)
#define BMM050_POSITIVE_SATURATION_Z    (32767)

int16_t compensate_BMX055_X(int16_t mag_data_x, uint16_t data_r)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	460a      	mov	r2, r1
 800175e:	80fb      	strh	r3, [r7, #6]
 8001760:	4613      	mov	r3, r2
 8001762:	80bb      	strh	r3, [r7, #4]
	int16_t inter_retval = BMM050_INIT_VALUE;
 8001764:	2300      	movs	r3, #0
 8001766:	81fb      	strh	r3, [r7, #14]
	/* no overflow */
	if (mag_data_x != BMM050_FLIP_OVERFLOW_ADCVAL) {
 8001768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176c:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001770:	d04c      	beq.n	800180c <compensate_BMX055_X+0xb8>
		if ((data_r != BMM050_INIT_VALUE)
 8001772:	88bb      	ldrh	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d043      	beq.n	8001800 <compensate_BMX055_X+0xac>
		&& (dig_xyz1 != BMM050_INIT_VALUE)) {
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <compensate_BMX055_X+0xd0>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d03f      	beq.n	8001800 <compensate_BMX055_X+0xac>
			inter_retval = ((int16_t)(((uint16_t)
			((((int32_t)dig_xyz1) << 14)/
 8001780:	4b28      	ldr	r3, [pc, #160]	; (8001824 <compensate_BMX055_X+0xd0>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	039a      	lsls	r2, r3, #14
			 (data_r != BMM050_INIT_VALUE ?
			 data_r : dig_xyz1))) -
 8001786:	88bb      	ldrh	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <compensate_BMX055_X+0x3c>
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	e001      	b.n	8001794 <compensate_BMX055_X+0x40>
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <compensate_BMX055_X+0xd0>)
 8001792:	881b      	ldrh	r3, [r3, #0]
			((((int32_t)dig_xyz1) << 14)/
 8001794:	fb92 f3f3 	sdiv	r3, r2, r3
			inter_retval = ((int16_t)(((uint16_t)
 8001798:	b29b      	uxth	r3, r3
			 data_r : dig_xyz1))) -
 800179a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800179e:	b29b      	uxth	r3, r3
			inter_retval = ((int16_t)(((uint16_t)
 80017a0:	81fb      	strh	r3, [r7, #14]
			((uint16_t)0x4000)));
		} else {
			inter_retval = BMM050_OVERFLOW_OUTPUT;
			return inter_retval;
		}
		inter_retval = ((int16_t)((((int32_t)mag_data_x) *
 80017a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
				((((((((int32_t)dig_xy2) *
 80017a6:	4a20      	ldr	r2, [pc, #128]	; (8001828 <compensate_BMX055_X+0xd4>)
 80017a8:	f992 2000 	ldrsb.w	r2, [r2]
 80017ac:	4610      	mov	r0, r2
				((((int32_t)inter_retval) *
 80017ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
				((int32_t)inter_retval)) >>
 80017b2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
				((((int32_t)inter_retval) *
 80017b6:	fb01 f202 	mul.w	r2, r1, r2
				((int32_t)inter_retval)) >>
 80017ba:	11d2      	asrs	r2, r2, #7
				((((((((int32_t)dig_xy2) *
 80017bc:	fb02 f100 	mul.w	r1, r2, r0
				7)) +
			     (((int32_t)inter_retval) *
 80017c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
			      ((int32_t)(((int16_t)dig_xy1)
 80017c4:	4819      	ldr	r0, [pc, #100]	; (800182c <compensate_BMX055_X+0xd8>)
 80017c6:	7800      	ldrb	r0, [r0, #0]
			      << 7))))
 80017c8:	01c0      	lsls	r0, r0, #7
			     (((int32_t)inter_retval) *
 80017ca:	fb00 f202 	mul.w	r2, r0, r2
				7)) +
 80017ce:	440a      	add	r2, r1
				  >> 9) +
 80017d0:	1252      	asrs	r2, r2, #9
 80017d2:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
			   ((int32_t)0x100000)) *
			  ((int32_t)(((int16_t)dig_x2) +
 80017d6:	4916      	ldr	r1, [pc, #88]	; (8001830 <compensate_BMX055_X+0xdc>)
 80017d8:	f991 1000 	ldrsb.w	r1, [r1]
 80017dc:	31a0      	adds	r1, #160	; 0xa0
			   ((int32_t)0x100000)) *
 80017de:	fb01 f202 	mul.w	r2, r1, r2
			  ((int16_t)0xA0)))) >>
 80017e2:	1312      	asrs	r2, r2, #12
		inter_retval = ((int16_t)((((int32_t)mag_data_x) *
 80017e4:	fb02 f303 	mul.w	r3, r2, r3
			  12))
			  >> 13)) +
 80017e8:	135b      	asrs	r3, r3, #13
		inter_retval = ((int16_t)((((int32_t)mag_data_x) *
 80017ea:	b29a      	uxth	r2, r3
			(((int16_t)dig_x1)
			<< 3);
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <compensate_BMX055_X+0xe0>)
 80017ee:	f993 3000 	ldrsb.w	r3, [r3]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	b29b      	uxth	r3, r3
			  >> 13)) +
 80017f8:	4413      	add	r3, r2
 80017fa:	b29b      	uxth	r3, r3
		inter_retval = ((int16_t)((((int32_t)mag_data_x) *
 80017fc:	81fb      	strh	r3, [r7, #14]
 80017fe:	e008      	b.n	8001812 <compensate_BMX055_X+0xbe>
			inter_retval = BMM050_OVERFLOW_OUTPUT;
 8001800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001804:	81fb      	strh	r3, [r7, #14]
			return inter_retval;
 8001806:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800180a:	e004      	b.n	8001816 <compensate_BMX055_X+0xc2>
	} else {
		/* overflow */
		inter_retval = BMM050_OVERFLOW_OUTPUT;
 800180c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001810:	81fb      	strh	r3, [r7, #14]
	}
	return inter_retval;
 8001812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000250 	.word	0x20000250
 8001828:	2000024f 	.word	0x2000024f
 800182c:	2000024e 	.word	0x2000024e
 8001830:	20000244 	.word	0x20000244
 8001834:	20000242 	.word	0x20000242

08001838 <compensate_BMX055_Y>:

int16_t compensate_BMX055_Y(int16_t mag_data_y, uint16_t data_r)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	460a      	mov	r2, r1
 8001842:	80fb      	strh	r3, [r7, #6]
 8001844:	4613      	mov	r3, r2
 8001846:	80bb      	strh	r3, [r7, #4]
	int16_t inter_retval = BMM050_INIT_VALUE;
 8001848:	2300      	movs	r3, #0
 800184a:	81fb      	strh	r3, [r7, #14]
	 /* no overflow */
	if (mag_data_y != BMM050_FLIP_OVERFLOW_ADCVAL) {
 800184c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001850:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001854:	d04c      	beq.n	80018f0 <compensate_BMX055_Y+0xb8>
		if ((data_r != BMM050_INIT_VALUE)
 8001856:	88bb      	ldrh	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d043      	beq.n	80018e4 <compensate_BMX055_Y+0xac>
		&& (dig_xyz1 != BMM050_INIT_VALUE)) {
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <compensate_BMX055_Y+0xd0>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d03f      	beq.n	80018e4 <compensate_BMX055_Y+0xac>
			inter_retval = ((int16_t)(((uint16_t)(((
			(int32_t)dig_xyz1)
 8001864:	4b28      	ldr	r3, [pc, #160]	; (8001908 <compensate_BMX055_Y+0xd0>)
 8001866:	881b      	ldrh	r3, [r3, #0]
			<< 14)/
 8001868:	039a      	lsls	r2, r3, #14
			(data_r != BMM050_INIT_VALUE ?
			 data_r : dig_xyz1))) -
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <compensate_BMX055_Y+0x3c>
 8001870:	88bb      	ldrh	r3, [r7, #4]
 8001872:	e001      	b.n	8001878 <compensate_BMX055_Y+0x40>
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <compensate_BMX055_Y+0xd0>)
 8001876:	881b      	ldrh	r3, [r3, #0]
			<< 14)/
 8001878:	fb92 f3f3 	sdiv	r3, r2, r3
			inter_retval = ((int16_t)(((uint16_t)(((
 800187c:	b29b      	uxth	r3, r3
			 data_r : dig_xyz1))) -
 800187e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001882:	b29b      	uxth	r3, r3
			inter_retval = ((int16_t)(((uint16_t)(((
 8001884:	81fb      	strh	r3, [r7, #14]
			((uint16_t)0x4000)));
		} else {
			inter_retval = BMM050_OVERFLOW_OUTPUT;
			return inter_retval;
		}
		inter_retval = ((int16_t)((((int32_t)mag_data_y) * ((((((((int32_t)
 8001886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188a:	4a20      	ldr	r2, [pc, #128]	; (800190c <compensate_BMX055_Y+0xd4>)
 800188c:	f992 2000 	ldrsb.w	r2, [r2]
 8001890:	4610      	mov	r0, r2
			dig_xy2) * ((((int32_t) inter_retval) *
 8001892:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
			((int32_t)inter_retval)) >>
 8001896:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
			dig_xy2) * ((((int32_t) inter_retval) *
 800189a:	fb01 f202 	mul.w	r2, r1, r2
			((int32_t)inter_retval)) >>
 800189e:	11d2      	asrs	r2, r2, #7
			dig_xy2) * ((((int32_t) inter_retval) *
 80018a0:	fb02 f100 	mul.w	r1, r2, r0
			7))
			+ (((int32_t)inter_retval) *
 80018a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
			((int32_t)(((int16_t)dig_xy1) <<
 80018a8:	4819      	ldr	r0, [pc, #100]	; (8001910 <compensate_BMX055_Y+0xd8>)
 80018aa:	7800      	ldrb	r0, [r0, #0]
 80018ac:	01c0      	lsls	r0, r0, #7
			+ (((int32_t)inter_retval) *
 80018ae:	fb00 f202 	mul.w	r2, r0, r2
 80018b2:	440a      	add	r2, r1
			7))))
			>> 9) +
 80018b4:	1252      	asrs	r2, r2, #9
 80018b6:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
			((int32_t)0x100000)) *
			((int32_t)(((int16_t)dig_y2)
 80018ba:	4916      	ldr	r1, [pc, #88]	; (8001914 <compensate_BMX055_Y+0xdc>)
 80018bc:	f991 1000 	ldrsb.w	r1, [r1]
			+ ((int16_t)0xA0))))
 80018c0:	31a0      	adds	r1, #160	; 0xa0
			((int32_t)0x100000)) *
 80018c2:	fb01 f202 	mul.w	r2, r1, r2
			>> 12))
 80018c6:	1312      	asrs	r2, r2, #12
		inter_retval = ((int16_t)((((int32_t)mag_data_y) * ((((((((int32_t)
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
			>> 13)) +
 80018cc:	135b      	asrs	r3, r3, #13
		inter_retval = ((int16_t)((((int32_t)mag_data_y) * ((((((((int32_t)
 80018ce:	b29a      	uxth	r2, r3
			(((int16_t)dig_y1)
			<< 3);
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <compensate_BMX055_Y+0xe0>)
 80018d2:	f993 3000 	ldrsb.w	r3, [r3]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	b29b      	uxth	r3, r3
			>> 13)) +
 80018dc:	4413      	add	r3, r2
 80018de:	b29b      	uxth	r3, r3
		inter_retval = ((int16_t)((((int32_t)mag_data_y) * ((((((((int32_t)
 80018e0:	81fb      	strh	r3, [r7, #14]
 80018e2:	e008      	b.n	80018f6 <compensate_BMX055_Y+0xbe>
			inter_retval = BMM050_OVERFLOW_OUTPUT;
 80018e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018e8:	81fb      	strh	r3, [r7, #14]
			return inter_retval;
 80018ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ee:	e004      	b.n	80018fa <compensate_BMX055_Y+0xc2>
	} else {
		/* overflow */
		inter_retval = BMM050_OVERFLOW_OUTPUT;
 80018f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018f4:	81fb      	strh	r3, [r7, #14]
	}
	return inter_retval;
 80018f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000250 	.word	0x20000250
 800190c:	2000024f 	.word	0x2000024f
 8001910:	2000024e 	.word	0x2000024e
 8001914:	20000245 	.word	0x20000245
 8001918:	20000243 	.word	0x20000243

0800191c <compensate_BMX055_Z>:

int16_t compensate_BMX055_Z(int16_t mag_data_z, uint16_t data_r)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	460a      	mov	r2, r1
 8001926:	80fb      	strh	r3, [r7, #6]
 8001928:	4613      	mov	r3, r2
 800192a:	80bb      	strh	r3, [r7, #4]
	int32_t retval = BMM050_INIT_VALUE;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]

	if ((mag_data_z != BMM050_HALL_OVERFLOW_ADCVAL)	/* no overflow */
 8001930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001934:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8001938:	d04e      	beq.n	80019d8 <compensate_BMX055_Z+0xbc>
	   ) {
		if ((dig_z2 != BMM050_INIT_VALUE)
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <compensate_BMX055_Z+0xd0>)
 800193c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d039      	beq.n	80019b8 <compensate_BMX055_Z+0x9c>
		&& (dig_z1 != BMM050_INIT_VALUE)
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <compensate_BMX055_Z+0xd4>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d035      	beq.n	80019b8 <compensate_BMX055_Z+0x9c>
		&& (data_r != BMM050_INIT_VALUE)
 800194c:	88bb      	ldrh	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d032      	beq.n	80019b8 <compensate_BMX055_Z+0x9c>
		&& (dig_xyz1 != BMM050_INIT_VALUE)) {
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <compensate_BMX055_Z+0xd8>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d02e      	beq.n	80019b8 <compensate_BMX055_Z+0x9c>
			retval = (((((int32_t)(mag_data_z - dig_z4))
 800195a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195e:	4a26      	ldr	r2, [pc, #152]	; (80019f8 <compensate_BMX055_Z+0xdc>)
 8001960:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001964:	1a9b      	subs	r3, r3, r2
			<< 15) -
 8001966:	03da      	lsls	r2, r3, #15
			((((int32_t)dig_z3) * ((int32_t)(((int16_t)data_r) -
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <compensate_BMX055_Z+0xe0>)
 800196a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196e:	4619      	mov	r1, r3
 8001970:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001974:	4618      	mov	r0, r3
			((int16_t) dig_xyz1))))
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <compensate_BMX055_Z+0xd8>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	b21b      	sxth	r3, r3
			((((int32_t)dig_z3) * ((int32_t)(((int16_t)data_r) -
 800197c:	1ac3      	subs	r3, r0, r3
 800197e:	fb01 f303 	mul.w	r3, r1, r3
			>> 2))/
 8001982:	109b      	asrs	r3, r3, #2
			<< 15) -
 8001984:	1ad2      	subs	r2, r2, r3
			(dig_z2 + ((int16_t)(((((int32_t)
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <compensate_BMX055_Z+0xd0>)
 8001988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198c:	4619      	mov	r1, r3
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <compensate_BMX055_Z+0xd4>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
			dig_z1) * ((((int16_t)data_r)
 8001994:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
			<< 1)))+
 8001998:	005b      	lsls	r3, r3, #1
			dig_z1) * ((((int16_t)data_r)
 800199a:	fb00 f303 	mul.w	r3, r0, r3
			<< 1)))+
 800199e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
			(1 << 15))
			>> 16))));
 80019a2:	141b      	asrs	r3, r3, #16
			(dig_z2 + ((int16_t)(((((int32_t)
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	440b      	add	r3, r1
			retval = (((((int32_t)(mag_data_z - dig_z4))
 80019a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80019ac:	60fb      	str	r3, [r7, #12]
		} else {
			retval = BMM050_OVERFLOW_OUTPUT;
			return retval;
		}
		/* saturate result to +/- 2 microTesla */
		if (retval > BMM050_POSITIVE_SATURATION_Z) {
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b4:	da05      	bge.n	80019c2 <compensate_BMX055_Z+0xa6>
 80019b6:	e008      	b.n	80019ca <compensate_BMX055_Z+0xae>
			retval = BMM050_OVERFLOW_OUTPUT;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <compensate_BMX055_Z+0xe4>)
 80019ba:	60fb      	str	r3, [r7, #12]
			return retval;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	e00e      	b.n	80019e0 <compensate_BMX055_Z+0xc4>
			retval =  BMM050_POSITIVE_SATURATION_Z;
 80019c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e008      	b.n	80019dc <compensate_BMX055_Z+0xc0>
		} else {
			if (retval < BMM050_NEGATIVE_SATURATION_Z)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80019d0:	dc04      	bgt.n	80019dc <compensate_BMX055_Z+0xc0>
				retval = BMM050_NEGATIVE_SATURATION_Z;
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <compensate_BMX055_Z+0xe8>)
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	e001      	b.n	80019dc <compensate_BMX055_Z+0xc0>
		}
	} else {
		/* overflow */
		retval = BMM050_OVERFLOW_OUTPUT;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <compensate_BMX055_Z+0xe4>)
 80019da:	60fb      	str	r3, [r7, #12]
	}
	return (int16_t)retval;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	b21b      	sxth	r3, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20000248 	.word	0x20000248
 80019f0:	20000246 	.word	0x20000246
 80019f4:	20000250 	.word	0x20000250
 80019f8:	2000024c 	.word	0x2000024c
 80019fc:	2000024a 	.word	0x2000024a
 8001a00:	ffff8000 	.word	0xffff8000
 8001a04:	ffff8001 	.word	0xffff8001

08001a08 <SELECT>:
#define SD_CS_GPIO_Port GPIOA
 #define SD_CS_Pin GPIO_PIN_4

/* SPI Chip Select */
static void SELECT(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2110      	movs	r1, #16
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a14:	f002 fdd6 	bl	80045c4 <HAL_GPIO_WritePin>
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2110      	movs	r1, #16
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a28:	f002 fdcc 	bl	80045c4 <HAL_GPIO_WritePin>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001a3a:	bf00      	nop
 8001a3c:	4808      	ldr	r0, [pc, #32]	; (8001a60 <SPI_TxByte+0x30>)
 8001a3e:	f005 fdd7 	bl	80075f0 <HAL_SPI_GetState>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d1f9      	bne.n	8001a3c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001a48:	1df9      	adds	r1, r7, #7
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <SPI_TxByte+0x30>)
 8001a52:	f005 fa36 	bl	8006ec2 <HAL_SPI_Transmit>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002f8 	.word	0x200002f8

08001a64 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001a6a:	23ff      	movs	r3, #255	; 0xff
 8001a6c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001a72:	bf00      	nop
 8001a74:	4809      	ldr	r0, [pc, #36]	; (8001a9c <SPI_RxByte+0x38>)
 8001a76:	f005 fdbb 	bl	80075f0 <HAL_SPI_GetState>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d1f9      	bne.n	8001a74 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001a80:	1dba      	adds	r2, r7, #6
 8001a82:	1df9      	adds	r1, r7, #7
 8001a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	4803      	ldr	r0, [pc, #12]	; (8001a9c <SPI_RxByte+0x38>)
 8001a8e:	f005 fb8d 	bl	80071ac <HAL_SPI_TransmitReceive>

  return data;
 8001a92:	79bb      	ldrb	r3, [r7, #6]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200002f8 	.word	0x200002f8

08001aa0 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001aa8:	f7ff ffdc 	bl	8001a64 <SPI_RxByte>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	701a      	strb	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <SD_ReadyWait+0x34>)
 8001ac4:	2232      	movs	r2, #50	; 0x32
 8001ac6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001ac8:	f7ff ffcc 	bl	8001a64 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001acc:	f7ff ffca 	bl	8001a64 <SPI_RxByte>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2bff      	cmp	r3, #255	; 0xff
 8001ad8:	d004      	beq.n	8001ae4 <SD_ReadyWait+0x28>
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SD_ReadyWait+0x34>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f3      	bne.n	8001acc <SD_ReadyWait+0x10>

  return res;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000cc6 	.word	0x20000cc6

08001af4 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001afa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001afe:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001b00:	f7ff ff8c 	bl	8001a1c <DESELECT>

  for(int i = 0; i < 10; i++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	e005      	b.n	8001b16 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001b0a:	20ff      	movs	r0, #255	; 0xff
 8001b0c:	f7ff ff90 	bl	8001a30 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	3301      	adds	r3, #1
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b09      	cmp	r3, #9
 8001b1a:	ddf6      	ble.n	8001b0a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001b1c:	f7ff ff74 	bl	8001a08 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001b20:	2340      	movs	r3, #64	; 0x40
 8001b22:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001b34:	2395      	movs	r3, #149	; 0x95
 8001b36:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	e009      	b.n	8001b52 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001b3e:	1d3a      	adds	r2, r7, #4
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff72 	bl	8001a30 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	ddf2      	ble.n	8001b3e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001b58:	e002      	b.n	8001b60 <SD_PowerOn+0x6c>
  {
    Count--;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001b60:	f7ff ff80 	bl	8001a64 <SPI_RxByte>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d002      	beq.n	8001b70 <SD_PowerOn+0x7c>
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f4      	bne.n	8001b5a <SD_PowerOn+0x66>
  }

  DESELECT();
 8001b70:	f7ff ff54 	bl	8001a1c <DESELECT>
  SPI_TxByte(0XFF);
 8001b74:	20ff      	movs	r0, #255	; 0xff
 8001b76:	f7ff ff5b 	bl	8001a30 <SPI_TxByte>

  PowerFlag = 1;
 8001b7a:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <SD_PowerOn+0x94>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000253 	.word	0x20000253

08001b8c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <SD_PowerOff+0x14>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	20000253 	.word	0x20000253

08001ba4 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <SD_CheckPower+0x14>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000253 	.word	0x20000253

08001bbc <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <SD_RxDataBlock+0x68>)
 8001bc8:	220a      	movs	r2, #10
 8001bca:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001bcc:	f7ff ff4a 	bl	8001a64 <SPI_RxByte>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	2bff      	cmp	r3, #255	; 0xff
 8001bd8:	d104      	bne.n	8001be4 <SD_RxDataBlock+0x28>
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <SD_RxDataBlock+0x68>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f3      	bne.n	8001bcc <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2bfe      	cmp	r3, #254	; 0xfe
 8001be8:	d001      	beq.n	8001bee <SD_RxDataBlock+0x32>
    return FALSE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e016      	b.n	8001c1c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff53 	bl	8001aa0 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff4d 	bl	8001aa0 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3b02      	subs	r3, #2
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ed      	bne.n	8001bee <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001c12:	f7ff ff27 	bl	8001a64 <SPI_RxByte>
  SPI_RxByte();
 8001c16:	f7ff ff25 	bl	8001a64 <SPI_RxByte>

  return TRUE;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000cc5 	.word	0x20000cc5

08001c28 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001c38:	f7ff ff40 	bl	8001abc <SD_ReadyWait>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2bff      	cmp	r3, #255	; 0xff
 8001c40:	d001      	beq.n	8001c46 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e040      	b.n	8001cc8 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fef1 	bl	8001a30 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	2bfd      	cmp	r3, #253	; 0xfd
 8001c52:	d031      	beq.n	8001cb8 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fee5 	bl	8001a30 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fede 	bl	8001a30 <SPI_TxByte>
    } while (--wc);
 8001c74:	7bbb      	ldrb	r3, [r7, #14]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	73bb      	strb	r3, [r7, #14]
 8001c7a:	7bbb      	ldrb	r3, [r7, #14]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1eb      	bne.n	8001c58 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001c80:	f7ff fef0 	bl	8001a64 <SPI_RxByte>
    SPI_RxByte();
 8001c84:	f7ff feee 	bl	8001a64 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001c88:	e00b      	b.n	8001ca2 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8001c8a:	f7ff feeb 	bl	8001a64 <SPI_RxByte>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d006      	beq.n	8001caa <SD_TxDataBlock+0x82>
        break;

      i++;
 8001c9c:	7b7b      	ldrb	r3, [r7, #13]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8001ca2:	7b7b      	ldrb	r3, [r7, #13]
 8001ca4:	2b40      	cmp	r3, #64	; 0x40
 8001ca6:	d9f0      	bls.n	8001c8a <SD_TxDataBlock+0x62>
 8001ca8:	e000      	b.n	8001cac <SD_TxDataBlock+0x84>
        break;
 8001caa:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001cac:	bf00      	nop
 8001cae:	f7ff fed9 	bl	8001a64 <SPI_RxByte>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0fa      	beq.n	8001cae <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d101      	bne.n	8001cc6 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001cdc:	f7ff feee 	bl	8001abc <SD_ReadyWait>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	d001      	beq.n	8001cea <SD_SendCmd+0x1a>
    return 0xFF;
 8001ce6:	23ff      	movs	r3, #255	; 0xff
 8001ce8:	e040      	b.n	8001d6c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fe9f 	bl	8001a30 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	0e1b      	lsrs	r3, r3, #24
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fe99 	bl	8001a30 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fe93 	bl	8001a30 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fe8d 	bl	8001a30 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fe88 	bl	8001a30 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b40      	cmp	r3, #64	; 0x40
 8001d28:	d101      	bne.n	8001d2e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001d2a:	2395      	movs	r3, #149	; 0x95
 8001d2c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b48      	cmp	r3, #72	; 0x48
 8001d32:	d101      	bne.n	8001d38 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001d34:	2387      	movs	r3, #135	; 0x87
 8001d36:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fe78 	bl	8001a30 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	2b4c      	cmp	r3, #76	; 0x4c
 8001d44:	d101      	bne.n	8001d4a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001d46:	f7ff fe8d 	bl	8001a64 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001d4e:	f7ff fe89 	bl	8001a64 <SPI_RxByte>
 8001d52:	4603      	mov	r3, r0
 8001d54:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001d56:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da05      	bge.n	8001d6a <SD_SendCmd+0x9a>
 8001d5e:	7bbb      	ldrb	r3, [r7, #14]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	73bb      	strb	r3, [r7, #14]
 8001d64:	7bbb      	ldrb	r3, [r7, #14]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f1      	bne.n	8001d4e <SD_SendCmd+0x7e>

  return res;
 8001d6a:	7b7b      	ldrb	r3, [r7, #13]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0d5      	b.n	8001f34 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001d88:	4b6c      	ldr	r3, [pc, #432]	; (8001f3c <SD_disk_initialize+0x1c8>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <SD_disk_initialize+0x2a>
    return Stat;
 8001d96:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <SD_disk_initialize+0x1c8>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	e0ca      	b.n	8001f34 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001d9e:	f7ff fea9 	bl	8001af4 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001da2:	f7ff fe31 	bl	8001a08 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001daa:	2100      	movs	r1, #0
 8001dac:	2040      	movs	r0, #64	; 0x40
 8001dae:	f7ff ff8f 	bl	8001cd0 <SD_SendCmd>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	f040 80a5 	bne.w	8001f04 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001dba:	4b61      	ldr	r3, [pc, #388]	; (8001f40 <SD_disk_initialize+0x1cc>)
 8001dbc:	2264      	movs	r2, #100	; 0x64
 8001dbe:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001dc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001dc4:	2048      	movs	r0, #72	; 0x48
 8001dc6:	f7ff ff83 	bl	8001cd0 <SD_SendCmd>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d158      	bne.n	8001e82 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e00c      	b.n	8001df0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001dd6:	7bfc      	ldrb	r4, [r7, #15]
 8001dd8:	f7ff fe44 	bl	8001a64 <SPI_RxByte>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	f104 0310 	add.w	r3, r4, #16
 8001de4:	443b      	add	r3, r7
 8001de6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	3301      	adds	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d9ef      	bls.n	8001dd6 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001df6:	7abb      	ldrb	r3, [r7, #10]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	f040 8083 	bne.w	8001f04 <SD_disk_initialize+0x190>
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	2baa      	cmp	r3, #170	; 0xaa
 8001e02:	d17f      	bne.n	8001f04 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001e04:	2100      	movs	r1, #0
 8001e06:	2077      	movs	r0, #119	; 0x77
 8001e08:	f7ff ff62 	bl	8001cd0 <SD_SendCmd>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d807      	bhi.n	8001e22 <SD_disk_initialize+0xae>
 8001e12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e16:	2069      	movs	r0, #105	; 0x69
 8001e18:	f7ff ff5a 	bl	8001cd0 <SD_SendCmd>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <SD_disk_initialize+0x1cc>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1eb      	bne.n	8001e04 <SD_disk_initialize+0x90>
 8001e2c:	e000      	b.n	8001e30 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001e2e:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001e30:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <SD_disk_initialize+0x1cc>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d064      	beq.n	8001f04 <SD_disk_initialize+0x190>
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	207a      	movs	r0, #122	; 0x7a
 8001e3e:	f7ff ff47 	bl	8001cd0 <SD_SendCmd>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d15d      	bne.n	8001f04 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e00c      	b.n	8001e68 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001e4e:	7bfc      	ldrb	r4, [r7, #15]
 8001e50:	f7ff fe08 	bl	8001a64 <SPI_RxByte>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	f104 0310 	add.w	r3, r4, #16
 8001e5c:	443b      	add	r3, r7
 8001e5e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	3301      	adds	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d9ef      	bls.n	8001e4e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001e6e:	7a3b      	ldrb	r3, [r7, #8]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <SD_disk_initialize+0x108>
 8001e78:	2306      	movs	r3, #6
 8001e7a:	e000      	b.n	8001e7e <SD_disk_initialize+0x10a>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	73bb      	strb	r3, [r7, #14]
 8001e80:	e040      	b.n	8001f04 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001e82:	2100      	movs	r1, #0
 8001e84:	2077      	movs	r0, #119	; 0x77
 8001e86:	f7ff ff23 	bl	8001cd0 <SD_SendCmd>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d808      	bhi.n	8001ea2 <SD_disk_initialize+0x12e>
 8001e90:	2100      	movs	r1, #0
 8001e92:	2069      	movs	r0, #105	; 0x69
 8001e94:	f7ff ff1c 	bl	8001cd0 <SD_SendCmd>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d801      	bhi.n	8001ea2 <SD_disk_initialize+0x12e>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e000      	b.n	8001ea4 <SD_disk_initialize+0x130>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001ea6:	7bbb      	ldrb	r3, [r7, #14]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d10e      	bne.n	8001eca <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001eac:	2100      	movs	r1, #0
 8001eae:	2077      	movs	r0, #119	; 0x77
 8001eb0:	f7ff ff0e 	bl	8001cd0 <SD_SendCmd>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d80e      	bhi.n	8001ed8 <SD_disk_initialize+0x164>
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2069      	movs	r0, #105	; 0x69
 8001ebe:	f7ff ff07 	bl	8001cd0 <SD_SendCmd>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d107      	bne.n	8001ed8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001ec8:	e00d      	b.n	8001ee6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2041      	movs	r0, #65	; 0x41
 8001ece:	f7ff feff 	bl	8001cd0 <SD_SendCmd>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <SD_disk_initialize+0x1cc>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1e1      	bne.n	8001ea6 <SD_disk_initialize+0x132>
 8001ee2:	e000      	b.n	8001ee6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001ee4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <SD_disk_initialize+0x1cc>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <SD_disk_initialize+0x18c>
 8001ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef4:	2050      	movs	r0, #80	; 0x50
 8001ef6:	f7ff feeb 	bl	8001cd0 <SD_SendCmd>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <SD_disk_initialize+0x1d0>)
 8001f06:	7bbb      	ldrb	r3, [r7, #14]
 8001f08:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001f0a:	f7ff fd87 	bl	8001a1c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001f0e:	f7ff fda9 	bl	8001a64 <SPI_RxByte>

  if (type)
 8001f12:	7bbb      	ldrb	r3, [r7, #14]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <SD_disk_initialize+0x1c8>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f023 0301 	bic.w	r3, r3, #1
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <SD_disk_initialize+0x1c8>)
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e001      	b.n	8001f2e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001f2a:	f7ff fe2f 	bl	8001b8c <SD_PowerOff>
  }

  return Stat;
 8001f2e:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <SD_disk_initialize+0x1c8>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b2db      	uxtb	r3, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd90      	pop	{r4, r7, pc}
 8001f3c:	20000004 	.word	0x20000004
 8001f40:	20000cc5 	.word	0x20000cc5
 8001f44:	20000252 	.word	0x20000252

08001f48 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SD_disk_status+0x14>
    return STA_NOINIT;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e002      	b.n	8001f62 <SD_disk_status+0x1a>

  return Stat;
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <SD_disk_status+0x28>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	b2db      	uxtb	r3, r3
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000004 	.word	0x20000004

08001f74 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	4603      	mov	r3, r0
 8001f82:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <SD_disk_read+0x1c>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <SD_disk_read+0x20>
    return RES_PARERR;
 8001f90:	2304      	movs	r3, #4
 8001f92:	e051      	b.n	8002038 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <SD_disk_read+0xcc>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e048      	b.n	8002038 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001fa6:	4b27      	ldr	r3, [pc, #156]	; (8002044 <SD_disk_read+0xd0>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	025b      	lsls	r3, r3, #9
 8001fb6:	607b      	str	r3, [r7, #4]

  SELECT();
 8001fb8:	f7ff fd26 	bl	8001a08 <SELECT>

  if (count == 1)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d111      	bne.n	8001fe6 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	2051      	movs	r0, #81	; 0x51
 8001fc6:	f7ff fe83 	bl	8001cd0 <SD_SendCmd>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d129      	bne.n	8002024 <SD_disk_read+0xb0>
 8001fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd4:	68b8      	ldr	r0, [r7, #8]
 8001fd6:	f7ff fdf1 	bl	8001bbc <SD_RxDataBlock>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d021      	beq.n	8002024 <SD_disk_read+0xb0>
      count = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	e01e      	b.n	8002024 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	2052      	movs	r0, #82	; 0x52
 8001fea:	f7ff fe71 	bl	8001cd0 <SD_SendCmd>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d117      	bne.n	8002024 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001ff4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff8:	68b8      	ldr	r0, [r7, #8]
 8001ffa:	f7ff fddf 	bl	8001bbc <SD_RxDataBlock>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800200a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	3b01      	subs	r3, #1
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ed      	bne.n	8001ff4 <SD_disk_read+0x80>
 8002018:	e000      	b.n	800201c <SD_disk_read+0xa8>
          break;
 800201a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800201c:	2100      	movs	r1, #0
 800201e:	204c      	movs	r0, #76	; 0x4c
 8002020:	f7ff fe56 	bl	8001cd0 <SD_SendCmd>
    }
  }

  DESELECT();
 8002024:	f7ff fcfa 	bl	8001a1c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002028:	f7ff fd1c 	bl	8001a64 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf14      	ite	ne
 8002032:	2301      	movne	r3, #1
 8002034:	2300      	moveq	r3, #0
 8002036:	b2db      	uxtb	r3, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000004 	.word	0x20000004
 8002044:	20000252 	.word	0x20000252

08002048 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4603      	mov	r3, r0
 8002056:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <SD_disk_write+0x1c>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <SD_disk_write+0x20>
    return RES_PARERR;
 8002064:	2304      	movs	r3, #4
 8002066:	e06b      	b.n	8002140 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8002068:	4b37      	ldr	r3, [pc, #220]	; (8002148 <SD_disk_write+0x100>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002076:	2303      	movs	r3, #3
 8002078:	e062      	b.n	8002140 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800207a:	4b33      	ldr	r3, [pc, #204]	; (8002148 <SD_disk_write+0x100>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <SD_disk_write+0x44>
    return RES_WRPRT;
 8002088:	2302      	movs	r3, #2
 800208a:	e059      	b.n	8002140 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800208c:	4b2f      	ldr	r3, [pc, #188]	; (800214c <SD_disk_write+0x104>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	025b      	lsls	r3, r3, #9
 800209c:	607b      	str	r3, [r7, #4]

  SELECT();
 800209e:	f7ff fcb3 	bl	8001a08 <SELECT>

  if (count == 1)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d110      	bne.n	80020ca <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	2058      	movs	r0, #88	; 0x58
 80020ac:	f7ff fe10 	bl	8001cd0 <SD_SendCmd>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d13a      	bne.n	800212c <SD_disk_write+0xe4>
 80020b6:	21fe      	movs	r1, #254	; 0xfe
 80020b8:	68b8      	ldr	r0, [r7, #8]
 80020ba:	f7ff fdb5 	bl	8001c28 <SD_TxDataBlock>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d033      	beq.n	800212c <SD_disk_write+0xe4>
      count = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	e030      	b.n	800212c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <SD_disk_write+0x104>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80020d6:	2100      	movs	r1, #0
 80020d8:	2077      	movs	r0, #119	; 0x77
 80020da:	f7ff fdf9 	bl	8001cd0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	2057      	movs	r0, #87	; 0x57
 80020e2:	f7ff fdf5 	bl	8001cd0 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	2059      	movs	r0, #89	; 0x59
 80020ea:	f7ff fdf1 	bl	8001cd0 <SD_SendCmd>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d11b      	bne.n	800212c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80020f4:	21fc      	movs	r1, #252	; 0xfc
 80020f6:	68b8      	ldr	r0, [r7, #8]
 80020f8:	f7ff fd96 	bl	8001c28 <SD_TxDataBlock>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002108:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	3b01      	subs	r3, #1
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1ee      	bne.n	80020f4 <SD_disk_write+0xac>
 8002116:	e000      	b.n	800211a <SD_disk_write+0xd2>
          break;
 8002118:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800211a:	21fd      	movs	r1, #253	; 0xfd
 800211c:	2000      	movs	r0, #0
 800211e:	f7ff fd83 	bl	8001c28 <SD_TxDataBlock>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <SD_disk_write+0xe4>
      {
        count = 1;
 8002128:	2301      	movs	r3, #1
 800212a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 800212c:	f7ff fc76 	bl	8001a1c <DESELECT>
  SPI_RxByte();
 8002130:	f7ff fc98 	bl	8001a64 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000004 	.word	0x20000004
 800214c:	20000252 	.word	0x20000252

08002150 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b08b      	sub	sp, #44	; 0x2c
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	603a      	str	r2, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
 800215c:	460b      	mov	r3, r1
 800215e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800216a:	2304      	movs	r3, #4
 800216c:	e11b      	b.n	80023a6 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8002174:	79bb      	ldrb	r3, [r7, #6]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d129      	bne.n	80021ce <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d017      	beq.n	80021b2 <SD_disk_ioctl+0x62>
 8002182:	2b02      	cmp	r3, #2
 8002184:	dc1f      	bgt.n	80021c6 <SD_disk_ioctl+0x76>
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <SD_disk_ioctl+0x40>
 800218a:	2b01      	cmp	r3, #1
 800218c:	d00b      	beq.n	80021a6 <SD_disk_ioctl+0x56>
 800218e:	e01a      	b.n	80021c6 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002190:	f7ff fd08 	bl	8001ba4 <SD_CheckPower>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800219a:	f7ff fcf7 	bl	8001b8c <SD_PowerOff>
      res = RES_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021a4:	e0fd      	b.n	80023a2 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80021a6:	f7ff fca5 	bl	8001af4 <SD_PowerOn>
      res = RES_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021b0:	e0f7      	b.n	80023a2 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	1c5c      	adds	r4, r3, #1
 80021b6:	f7ff fcf5 	bl	8001ba4 <SD_CheckPower>
 80021ba:	4603      	mov	r3, r0
 80021bc:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021c4:	e0ed      	b.n	80023a2 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80021c6:	2304      	movs	r3, #4
 80021c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80021cc:	e0e9      	b.n	80023a2 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80021ce:	4b78      	ldr	r3, [pc, #480]	; (80023b0 <SD_disk_ioctl+0x260>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0e2      	b.n	80023a6 <SD_disk_ioctl+0x256>

    SELECT();
 80021e0:	f7ff fc12 	bl	8001a08 <SELECT>

    switch (ctrl)
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	2b0d      	cmp	r3, #13
 80021e8:	f200 80cc 	bhi.w	8002384 <SD_disk_ioctl+0x234>
 80021ec:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <SD_disk_ioctl+0xa4>)
 80021ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f2:	bf00      	nop
 80021f4:	080022ef 	.word	0x080022ef
 80021f8:	0800222d 	.word	0x0800222d
 80021fc:	080022df 	.word	0x080022df
 8002200:	08002385 	.word	0x08002385
 8002204:	08002385 	.word	0x08002385
 8002208:	08002385 	.word	0x08002385
 800220c:	08002385 	.word	0x08002385
 8002210:	08002385 	.word	0x08002385
 8002214:	08002385 	.word	0x08002385
 8002218:	08002385 	.word	0x08002385
 800221c:	08002385 	.word	0x08002385
 8002220:	08002301 	.word	0x08002301
 8002224:	08002325 	.word	0x08002325
 8002228:	08002349 	.word	0x08002349
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800222c:	2100      	movs	r1, #0
 800222e:	2049      	movs	r0, #73	; 0x49
 8002230:	f7ff fd4e 	bl	8001cd0 <SD_SendCmd>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 80a8 	bne.w	800238c <SD_disk_ioctl+0x23c>
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	2110      	movs	r1, #16
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fcba 	bl	8001bbc <SD_RxDataBlock>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 809e 	beq.w	800238c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8002250:	7b3b      	ldrb	r3, [r7, #12]
 8002252:	099b      	lsrs	r3, r3, #6
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d10e      	bne.n	8002278 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800225a:	7d7b      	ldrb	r3, [r7, #21]
 800225c:	b29a      	uxth	r2, r3
 800225e:	7d3b      	ldrb	r3, [r7, #20]
 8002260:	b29b      	uxth	r3, r3
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	b29b      	uxth	r3, r3
 8002266:	4413      	add	r3, r2
 8002268:	b29b      	uxth	r3, r3
 800226a:	3301      	adds	r3, #1
 800226c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800226e:	8bfb      	ldrh	r3, [r7, #30]
 8002270:	029a      	lsls	r2, r3, #10
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e02e      	b.n	80022d6 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002278:	7c7b      	ldrb	r3, [r7, #17]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	b2da      	uxtb	r2, r3
 8002280:	7dbb      	ldrb	r3, [r7, #22]
 8002282:	09db      	lsrs	r3, r3, #7
 8002284:	b2db      	uxtb	r3, r3
 8002286:	4413      	add	r3, r2
 8002288:	b2da      	uxtb	r2, r3
 800228a:	7d7b      	ldrb	r3, [r7, #21]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f003 0306 	and.w	r3, r3, #6
 8002294:	b2db      	uxtb	r3, r3
 8002296:	4413      	add	r3, r2
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3302      	adds	r3, #2
 800229c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80022a0:	7d3b      	ldrb	r3, [r7, #20]
 80022a2:	099b      	lsrs	r3, r3, #6
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	7cbb      	ldrb	r3, [r7, #18]
 80022b6:	029b      	lsls	r3, r3, #10
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022be:	b29b      	uxth	r3, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80022c8:	8bfa      	ldrh	r2, [r7, #30]
 80022ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022ce:	3b09      	subs	r3, #9
 80022d0:	409a      	lsls	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80022dc:	e056      	b.n	800238c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022e4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80022ec:	e055      	b.n	800239a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80022ee:	f7ff fbe5 	bl	8001abc <SD_ReadyWait>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2bff      	cmp	r3, #255	; 0xff
 80022f6:	d14b      	bne.n	8002390 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80022fe:	e047      	b.n	8002390 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002300:	2100      	movs	r1, #0
 8002302:	2049      	movs	r0, #73	; 0x49
 8002304:	f7ff fce4 	bl	8001cd0 <SD_SendCmd>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d142      	bne.n	8002394 <SD_disk_ioctl+0x244>
 800230e:	2110      	movs	r1, #16
 8002310:	6a38      	ldr	r0, [r7, #32]
 8002312:	f7ff fc53 	bl	8001bbc <SD_RxDataBlock>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d03b      	beq.n	8002394 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002322:	e037      	b.n	8002394 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002324:	2100      	movs	r1, #0
 8002326:	204a      	movs	r0, #74	; 0x4a
 8002328:	f7ff fcd2 	bl	8001cd0 <SD_SendCmd>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d132      	bne.n	8002398 <SD_disk_ioctl+0x248>
 8002332:	2110      	movs	r1, #16
 8002334:	6a38      	ldr	r0, [r7, #32]
 8002336:	f7ff fc41 	bl	8001bbc <SD_RxDataBlock>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d02b      	beq.n	8002398 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002346:	e027      	b.n	8002398 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002348:	2100      	movs	r1, #0
 800234a:	207a      	movs	r0, #122	; 0x7a
 800234c:	f7ff fcc0 	bl	8001cd0 <SD_SendCmd>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8002356:	2300      	movs	r3, #0
 8002358:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800235c:	e00b      	b.n	8002376 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800235e:	6a3c      	ldr	r4, [r7, #32]
 8002360:	1c63      	adds	r3, r4, #1
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	f7ff fb7e 	bl	8001a64 <SPI_RxByte>
 8002368:	4603      	mov	r3, r0
 800236a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800236c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002370:	3301      	adds	r3, #1
 8002372:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002376:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800237a:	2b03      	cmp	r3, #3
 800237c:	d9ef      	bls.n	800235e <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8002384:	2304      	movs	r3, #4
 8002386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800238a:	e006      	b.n	800239a <SD_disk_ioctl+0x24a>
      break;
 800238c:	bf00      	nop
 800238e:	e004      	b.n	800239a <SD_disk_ioctl+0x24a>
      break;
 8002390:	bf00      	nop
 8002392:	e002      	b.n	800239a <SD_disk_ioctl+0x24a>
      break;
 8002394:	bf00      	nop
 8002396:	e000      	b.n	800239a <SD_disk_ioctl+0x24a>
      break;
 8002398:	bf00      	nop
    }

    DESELECT();
 800239a:	f7ff fb3f 	bl	8001a1c <DESELECT>
    SPI_RxByte();
 800239e:	f7ff fb61 	bl	8001a64 <SPI_RxByte>
  }

  return res;
 80023a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	372c      	adds	r7, #44	; 0x2c
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd90      	pop	{r4, r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000004 	.word	0x20000004

080023b4 <i2c_writeRegisterByte>:
		return 0;
	return 1;
}

int i2c_writeRegisterByte(uint8_t addr, uint8_t reg, uint8_t data)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af04      	add	r7, sp, #16
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
 80023be:	460b      	mov	r3, r1
 80023c0:	71bb      	strb	r3, [r7, #6]
 80023c2:	4613      	mov	r3, r2
 80023c4:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Mem_Write(&hi2c1, (uint16_t)addr << 1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1, (uint8_t) 100) != HAL_OK)
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	b299      	uxth	r1, r3
 80023ce:	79bb      	ldrb	r3, [r7, #6]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	2364      	movs	r3, #100	; 0x64
 80023d4:	9302      	str	r3, [sp, #8]
 80023d6:	2301      	movs	r3, #1
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	1d7b      	adds	r3, r7, #5
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2301      	movs	r3, #1
 80023e0:	4806      	ldr	r0, [pc, #24]	; (80023fc <i2c_writeRegisterByte+0x48>)
 80023e2:	f002 fb81 	bl	8004ae8 <HAL_I2C_Mem_Write>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <i2c_writeRegisterByte+0x3c>
		return 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e000      	b.n	80023f2 <i2c_writeRegisterByte+0x3e>
	return 1;
 80023f0:	2301      	movs	r3, #1
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200002a4 	.word	0x200002a4

08002400 <i2c_readRegister>:

int i2c_readRegister(uint8_t addr, uint8_t reg, uint8_t* pResult)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	603a      	str	r2, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
 800240c:	460b      	mov	r3, r1
 800240e:	71bb      	strb	r3, [r7, #6]
	return i2c_readData(addr, reg, pResult, 1);
 8002410:	79b9      	ldrb	r1, [r7, #6]
 8002412:	79f8      	ldrb	r0, [r7, #7]
 8002414:	2301      	movs	r3, #1
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	f000 f806 	bl	8002428 <i2c_readData>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <i2c_readData>:

int i2c_readData(uint8_t addr, uint8_t reg, uint8_t *buffer, uint16_t size){
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af04      	add	r7, sp, #16
 800242e:	603a      	str	r2, [r7, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
 8002436:	460b      	mov	r3, r1
 8002438:	71bb      	strb	r3, [r7, #6]
 800243a:	4613      	mov	r3, r2
 800243c:	80bb      	strh	r3, [r7, #4]

	if (HAL_I2C_Mem_Read(&hi2c1, (uint16_t)addr << 1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, buffer, size, (uint8_t) 100) != HAL_OK)
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	b29b      	uxth	r3, r3
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	b299      	uxth	r1, r3
 8002446:	79bb      	ldrb	r3, [r7, #6]
 8002448:	b29a      	uxth	r2, r3
 800244a:	2364      	movs	r3, #100	; 0x64
 800244c:	9302      	str	r3, [sp, #8]
 800244e:	88bb      	ldrh	r3, [r7, #4]
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2301      	movs	r3, #1
 8002458:	4806      	ldr	r0, [pc, #24]	; (8002474 <i2c_readData+0x4c>)
 800245a:	f002 fc59 	bl	8004d10 <HAL_I2C_Mem_Read>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <i2c_readData+0x40>
		return 0;
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <i2c_readData+0x42>
	return 1;
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200002a4 	.word	0x200002a4

08002478 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002480:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002484:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002490:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002494:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002498:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00b      	beq.n	80024b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80024a0:	e000      	b.n	80024a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80024a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80024a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f9      	beq.n	80024a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80024ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80024b8:	687b      	ldr	r3, [r7, #4]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024cc:	b09f      	sub	sp, #124	; 0x7c
 80024ce:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d0:	f000 fe0c 	bl	80030ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d4:	f000 f952 	bl	800277c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d8:	f000 fae6 	bl	8002aa8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80024dc:	f000 fa18 	bl	8002910 <MX_I2C1_Init>
  MX_SPI1_Init();
 80024e0:	f000 fa56 	bl	8002990 <MX_SPI1_Init>
  MX_FATFS_Init();
 80024e4:	f005 fc96 	bl	8007e14 <MX_FATFS_Init>
  MX_TIM3_Init();
 80024e8:	f000 fa90 	bl	8002a0c <MX_TIM3_Init>
  MX_ADC1_Init();
 80024ec:	f000 f9a0 	bl	8002830 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  fpState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80024f0:	2110      	movs	r1, #16
 80024f2:	488d      	ldr	r0, [pc, #564]	; (8002728 <main+0x260>)
 80024f4:	f002 f84e 	bl	8004594 <HAL_GPIO_ReadPin>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b8b      	ldr	r3, [pc, #556]	; (800272c <main+0x264>)
 80024fe:	601a      	str	r2, [r3, #0]

  HAL_ADC_Start(&hadc1);
 8002500:	488b      	ldr	r0, [pc, #556]	; (8002730 <main+0x268>)
 8002502:	f001 f80f 	bl	8003524 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 100);
 8002506:	2164      	movs	r1, #100	; 0x64
 8002508:	4889      	ldr	r0, [pc, #548]	; (8002730 <main+0x268>)
 800250a:	f001 f8c1 	bl	8003690 <HAL_ADC_PollForConversion>
  //Pit= HAL_ADC_GetValue(&hadc1);


  fresult = f_mount(&fs, "/", 1);
 800250e:	2201      	movs	r2, #1
 8002510:	4988      	ldr	r1, [pc, #544]	; (8002734 <main+0x26c>)
 8002512:	4889      	ldr	r0, [pc, #548]	; (8002738 <main+0x270>)
 8002514:	f008 f838 	bl	800a588 <f_mount>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	4b87      	ldr	r3, [pc, #540]	; (800273c <main+0x274>)
 800251e:	701a      	strb	r2, [r3, #0]
       	    if(fresult == FR_OK){
 8002520:	4b86      	ldr	r3, [pc, #536]	; (800273c <main+0x274>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d103      	bne.n	8002530 <main+0x68>
       	  	  printf("SD CARD mounted successfully.");
 8002528:	4885      	ldr	r0, [pc, #532]	; (8002740 <main+0x278>)
 800252a:	f009 fe59 	bl	800c1e0 <iprintf>
 800252e:	e002      	b.n	8002536 <main+0x6e>
       	    }else{
       	  	  printf("ERROR : SD CARD mounted");
 8002530:	4884      	ldr	r0, [pc, #528]	; (8002744 <main+0x27c>)
 8002532:	f009 fe55 	bl	800c1e0 <iprintf>
       	    }
       	   HAL_Delay(1000);
 8002536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800253a:	f000 fe3d 	bl	80031b8 <HAL_Delay>



    //bmp180
     int initBMP180 = bmpBegin(1, &hi2c1);
 800253e:	4982      	ldr	r1, [pc, #520]	; (8002748 <main+0x280>)
 8002540:	2001      	movs	r0, #1
 8002542:	f7fe fbef 	bl	8000d24 <bmpBegin>
 8002546:	4603      	mov	r3, r0
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c

     	if (initBMP180 == 1) {
 800254a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d106      	bne.n	800255e <main+0x96>
     		printf("successfully initialized BMP180\n");
 8002550:	487e      	ldr	r0, [pc, #504]	; (800274c <main+0x284>)
 8002552:	f009 feab 	bl	800c2ac <puts>
     		HAL_Delay(20);
 8002556:	2014      	movs	r0, #20
 8002558:	f000 fe2e 	bl	80031b8 <HAL_Delay>
 800255c:	e002      	b.n	8002564 <main+0x9c>
     	} else {
     		printf("initializing BMP180 failed\n");
 800255e:	487c      	ldr	r0, [pc, #496]	; (8002750 <main+0x288>)
 8002560:	f009 fea4 	bl	800c2ac <puts>
     	}

     	initBMX055();
 8002564:	f7fe ff56 	bl	8001414 <initBMX055>

     	selfTestBMX055();
 8002568:	f7fe fea0 	bl	80012ac <selfTestBMX055>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 800256c:	4870      	ldr	r0, [pc, #448]	; (8002730 <main+0x268>)
 800256e:	f000 ffd9 	bl	8003524 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8002572:	2164      	movs	r1, #100	; 0x64
 8002574:	486e      	ldr	r0, [pc, #440]	; (8002730 <main+0x268>)
 8002576:	f001 f88b 	bl	8003690 <HAL_ADC_PollForConversion>
	  //HAL_ADC_Stop(&hadc1);
	  Pit= HAL_ADC_GetValue(&hadc1);
 800257a:	486d      	ldr	r0, [pc, #436]	; (8002730 <main+0x268>)
 800257c:	f001 f956 	bl	800382c <HAL_ADC_GetValue>
 8002580:	4603      	mov	r3, r0
 8002582:	461a      	mov	r2, r3
 8002584:	4b73      	ldr	r3, [pc, #460]	; (8002754 <main+0x28c>)
 8002586:	601a      	str	r2, [r3, #0]
//	  pressure = Pit-offset;
//	  pressure = pressure/v;
	  //update Altitude

	  	  if (initBMP180) {
 8002588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <main+0xd8>
				altitude = getRawAltitude();
 800258e:	f000 faf3 	bl	8002b78 <getRawAltitude>
 8002592:	eeb0 7a40 	vmov.f32	s14, s0
 8002596:	eef0 7a60 	vmov.f32	s15, s1
 800259a:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <main+0x290>)
 800259c:	ed83 7b00 	vstr	d7, [r3]
				//printf("rawAltiude= %f\n",altitude);
	  	  }


	  	if (f_open(&fil, "log0623.csv", FA_OPEN_ALWAYS | FA_WRITE) == FR_OK) {
 80025a0:	2212      	movs	r2, #18
 80025a2:	496e      	ldr	r1, [pc, #440]	; (800275c <main+0x294>)
 80025a4:	486e      	ldr	r0, [pc, #440]	; (8002760 <main+0x298>)
 80025a6:	f008 f837 	bl	800a618 <f_open>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f040 80b0 	bne.w	8002712 <main+0x24a>
	  		int16_t accelData[3];
	  			  	float acc[3] = { 0, 0, 0 };
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
	  			  	int16_t gyroData[3];
	  			  	int16_t magData[3];
	  			  	if (readBMX055DataAccel(accelData)) {
 80025c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe ffa5 	bl	8001518 <readBMX055DataAccel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d035      	beq.n	8002640 <main+0x178>
	  			  			  acc[0] = accelData[0]*0.001;
 80025d4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ffa3 	bl	8000524 <__aeabi_i2d>
 80025de:	a350      	add	r3, pc, #320	; (adr r3, 8002720 <main+0x258>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fe f808 	bl	80005f8 <__aeabi_dmul>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fe fada 	bl	8000ba8 <__aeabi_d2f>
 80025f4:	4603      	mov	r3, r0
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
	  			  			  acc[1] = accelData[1]*0.001;
 80025f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ff91 	bl	8000524 <__aeabi_i2d>
 8002602:	a347      	add	r3, pc, #284	; (adr r3, 8002720 <main+0x258>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f7fd fff6 	bl	80005f8 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f7fe fac8 	bl	8000ba8 <__aeabi_d2f>
 8002618:	4603      	mov	r3, r0
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  			  			  acc[2] = accelData[2]*0.001;
 800261c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ff7f 	bl	8000524 <__aeabi_i2d>
 8002626:	a33e      	add	r3, pc, #248	; (adr r3, 8002720 <main+0x258>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fd ffe4 	bl	80005f8 <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f7fe fab6 	bl	8000ba8 <__aeabi_d2f>
 800263c:	4603      	mov	r3, r0
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
	  			  			 // printf("Accelerometer: X=%.2f, Y=%.2f, Z=%.2f\n", acc[0], acc[1], acc[2]);
	  				  }

	  				  // Read gyroscope data
	  				  if (readBMX055DataGyro(gyroData)) {
 8002640:	f107 0320 	add.w	r3, r7, #32
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe ffef 	bl	8001628 <readBMX055DataGyro>
	  					 // printf("Gyroscope: X=%d, Y=%d, Z=%d\n", gyroData[0], gyroData[1], gyroData[2]);
	  				  }

	  				  // Read magnetometer data
	  				  if (readBMX055DataMag(magData)) {
 800264a:	f107 0318 	add.w	r3, r7, #24
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f817 	bl	8001682 <readBMX055DataMag>
	  					 // printf("Magnetometer: X=%d, Y=%d, Z=%d\n", magData[0], magData[1], magData[2]);
	  				  }

	  				time = HAL_GetTick();
 8002654:	f000 fda4 	bl	80031a0 <HAL_GetTick>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	4b41      	ldr	r3, [pc, #260]	; (8002764 <main+0x29c>)
 800265e:	601a      	str	r2, [r3, #0]

	  				sprintf(buffer,
 8002660:	4b40      	ldr	r3, [pc, #256]	; (8002764 <main+0x29c>)
 8002662:	681e      	ldr	r6, [r3, #0]
 8002664:	4b3b      	ldr	r3, [pc, #236]	; (8002754 <main+0x28c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <main+0x290>)
 800266c:	e9d3 4500 	ldrd	r4, r5, [r3]
	  						"%d,%d,%.2f, %.2f, %.2f, %.2f, %d, %d, %d, %d, %d, %d\n",
	  						time,Pit, altitude, acc[0], acc[1], acc[2], gyroData[0], gyroData[1],
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  				sprintf(buffer,
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff68 	bl	8000548 <__aeabi_f2d>
 8002678:	4680      	mov	r8, r0
 800267a:	4689      	mov	r9, r1
	  						time,Pit, altitude, acc[0], acc[1], acc[2], gyroData[0], gyroData[1],
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  				sprintf(buffer,
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd ff62 	bl	8000548 <__aeabi_f2d>
 8002684:	4682      	mov	sl, r0
 8002686:	468b      	mov	fp, r1
	  						time,Pit, altitude, acc[0], acc[1], acc[2], gyroData[0], gyroData[1],
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  				sprintf(buffer,
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff5c 	bl	8000548 <__aeabi_f2d>
	  						time,Pit, altitude, acc[0], acc[1], acc[2], gyroData[0], gyroData[1],
 8002690:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
	  				sprintf(buffer,
 8002694:	613b      	str	r3, [r7, #16]
	  						time,Pit, altitude, acc[0], acc[1], acc[2], gyroData[0], gyroData[1],
 8002696:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
	  				sprintf(buffer,
 800269a:	60fb      	str	r3, [r7, #12]
							gyroData[2], magData[0], magData[1], magData[2]);\
 800269c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	  				sprintf(buffer,
 80026a0:	60bb      	str	r3, [r7, #8]
							gyroData[2], magData[0], magData[1], magData[2]);\
 80026a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
	  				sprintf(buffer,
 80026a6:	607b      	str	r3, [r7, #4]
							gyroData[2], magData[0], magData[1], magData[2]);\
 80026a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
	  				sprintf(buffer,
 80026ac:	461a      	mov	r2, r3
							gyroData[2], magData[0], magData[1], magData[2]);\
 80026ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
	  				sprintf(buffer,
 80026b2:	930d      	str	r3, [sp, #52]	; 0x34
 80026b4:	920c      	str	r2, [sp, #48]	; 0x30
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	920a      	str	r2, [sp, #40]	; 0x28
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	9209      	str	r2, [sp, #36]	; 0x24
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	9208      	str	r2, [sp, #32]
 80026c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80026ca:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80026ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80026d2:	e9cd 4500 	strd	r4, r5, [sp]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	4632      	mov	r2, r6
 80026da:	4923      	ldr	r1, [pc, #140]	; (8002768 <main+0x2a0>)
 80026dc:	4823      	ldr	r0, [pc, #140]	; (800276c <main+0x2a4>)
 80026de:	f009 fc9d 	bl	800c01c <siprintf>
	  				// for debug
	  				printf("%s", buffer);
 80026e2:	4922      	ldr	r1, [pc, #136]	; (800276c <main+0x2a4>)
 80026e4:	4822      	ldr	r0, [pc, #136]	; (8002770 <main+0x2a8>)
 80026e6:	f009 fd7b 	bl	800c1e0 <iprintf>
	  				f_lseek(&fil, f_size(&fil));
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <main+0x298>)
 80026ec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026f0:	4619      	mov	r1, r3
 80026f2:	481b      	ldr	r0, [pc, #108]	; (8002760 <main+0x298>)
 80026f4:	f008 fcdb 	bl	800b0ae <f_lseek>
	  				f_write(&fil, buffer, strlen(buffer), &bw);
 80026f8:	481c      	ldr	r0, [pc, #112]	; (800276c <main+0x2a4>)
 80026fa:	f7fd fdb9 	bl	8000270 <strlen>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <main+0x2ac>)
 8002702:	491a      	ldr	r1, [pc, #104]	; (800276c <main+0x2a4>)
 8002704:	4816      	ldr	r0, [pc, #88]	; (8002760 <main+0x298>)
 8002706:	f008 fa09 	bl	800ab1c <f_write>
	  				f_close(&fil);
 800270a:	4815      	ldr	r0, [pc, #84]	; (8002760 <main+0x298>)
 800270c:	f008 fca7 	bl	800b05e <f_close>
 8002710:	e002      	b.n	8002718 <main+0x250>

	  			} else {
	  				printf("open failed");
 8002712:	4819      	ldr	r0, [pc, #100]	; (8002778 <main+0x2b0>)
 8002714:	f009 fd64 	bl	800c1e0 <iprintf>
	  			}
	  	HAL_Delay(100);
 8002718:	2064      	movs	r0, #100	; 0x64
 800271a:	f000 fd4d 	bl	80031b8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800271e:	e725      	b.n	800256c <main+0xa4>
 8002720:	d2f1a9fc 	.word	0xd2f1a9fc
 8002724:	3f50624d 	.word	0x3f50624d
 8002728:	48000400 	.word	0x48000400
 800272c:	20000cb8 	.word	0x20000cb8
 8002730:	20000254 	.word	0x20000254
 8002734:	0800f3c0 	.word	0x0800f3c0
 8002738:	200003a8 	.word	0x200003a8
 800273c:	20000c04 	.word	0x20000c04
 8002740:	0800f3c4 	.word	0x0800f3c4
 8002744:	0800f3e4 	.word	0x0800f3e4
 8002748:	200002a4 	.word	0x200002a4
 800274c:	0800f3fc 	.word	0x0800f3fc
 8002750:	0800f41c 	.word	0x0800f41c
 8002754:	20000cc0 	.word	0x20000cc0
 8002758:	20000cb0 	.word	0x20000cb0
 800275c:	0800f438 	.word	0x0800f438
 8002760:	200007d8 	.word	0x200007d8
 8002764:	20000cbc 	.word	0x20000cbc
 8002768:	0800f444 	.word	0x0800f444
 800276c:	20000c08 	.word	0x20000c08
 8002770:	0800f47c 	.word	0x0800f47c
 8002774:	20000ca8 	.word	0x20000ca8
 8002778:	0800f480 	.word	0x0800f480

0800277c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b096      	sub	sp, #88	; 0x58
 8002780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002782:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002786:	2228      	movs	r2, #40	; 0x28
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f009 fd96 	bl	800c2bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002790:	f107 031c 	add.w	r3, r7, #28
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]
 80027aa:	60da      	str	r2, [r3, #12]
 80027ac:	611a      	str	r2, [r3, #16]
 80027ae:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027b0:	2302      	movs	r3, #2
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b4:	2301      	movs	r3, #1
 80027b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027b8:	2310      	movs	r3, #16
 80027ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027bc:	2302      	movs	r3, #2
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027c0:	2300      	movs	r3, #0
 80027c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80027c4:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80027c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 ff8a 	bl	80056e8 <HAL_RCC_OscConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <SystemClock_Config+0x62>
  {
    Error_Handler();
 80027da:	f000 fa01 	bl	8002be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027de:	230f      	movs	r3, #15
 80027e0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e2:	2302      	movs	r3, #2
 80027e4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	2101      	movs	r1, #1
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 ffb3 	bl	8006764 <HAL_RCC_ClockConfig>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002804:	f000 f9ec 	bl	8002be0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8002808:	23a0      	movs	r3, #160	; 0xa0
 800280a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800280c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002810:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4618      	mov	r0, r3
 800281a:	f004 f989 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002824:	f000 f9dc 	bl	8002be0 <Error_Handler>
  }
}
 8002828:	bf00      	nop
 800282a:	3758      	adds	r7, #88	; 0x58
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002836:	f107 031c 	add.w	r3, r7, #28
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
 8002850:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <MX_ADC1_Init+0xdc>)
 8002854:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002858:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800285a:	4b2c      	ldr	r3, [pc, #176]	; (800290c <MX_ADC1_Init+0xdc>)
 800285c:	2200      	movs	r2, #0
 800285e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <MX_ADC1_Init+0xdc>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002866:	4b29      	ldr	r3, [pc, #164]	; (800290c <MX_ADC1_Init+0xdc>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <MX_ADC1_Init+0xdc>)
 800286e:	2200      	movs	r2, #0
 8002870:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002872:	4b26      	ldr	r3, [pc, #152]	; (800290c <MX_ADC1_Init+0xdc>)
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <MX_ADC1_Init+0xdc>)
 800287c:	2200      	movs	r2, #0
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002880:	4b22      	ldr	r3, [pc, #136]	; (800290c <MX_ADC1_Init+0xdc>)
 8002882:	2201      	movs	r2, #1
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002886:	4b21      	ldr	r3, [pc, #132]	; (800290c <MX_ADC1_Init+0xdc>)
 8002888:	2200      	movs	r2, #0
 800288a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800288c:	4b1f      	ldr	r3, [pc, #124]	; (800290c <MX_ADC1_Init+0xdc>)
 800288e:	2201      	movs	r2, #1
 8002890:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <MX_ADC1_Init+0xdc>)
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <MX_ADC1_Init+0xdc>)
 800289c:	2204      	movs	r2, #4
 800289e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <MX_ADC1_Init+0xdc>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <MX_ADC1_Init+0xdc>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028ac:	4817      	ldr	r0, [pc, #92]	; (800290c <MX_ADC1_Init+0xdc>)
 80028ae:	f000 fca7 	bl	8003200 <HAL_ADC_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80028b8:	f000 f992 	bl	8002be0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	4811      	ldr	r0, [pc, #68]	; (800290c <MX_ADC1_Init+0xdc>)
 80028c8:	f001 fa7c 	bl	8003dc4 <HAL_ADCEx_MultiModeConfigChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80028d2:	f000 f985 	bl	8002be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80028d6:	230b      	movs	r3, #11
 80028d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028da:	2301      	movs	r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4806      	ldr	r0, [pc, #24]	; (800290c <MX_ADC1_Init+0xdc>)
 80028f4:	f000 ffa8 	bl	8003848 <HAL_ADC_ConfigChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80028fe:	f000 f96f 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002902:	bf00      	nop
 8002904:	3728      	adds	r7, #40	; 0x28
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000254 	.word	0x20000254

08002910 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <MX_I2C1_Init+0x74>)
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <MX_I2C1_Init+0x78>)
 8002918:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <MX_I2C1_Init+0x74>)
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <MX_I2C1_Init+0x7c>)
 800291e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <MX_I2C1_Init+0x74>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <MX_I2C1_Init+0x74>)
 8002928:	2201      	movs	r2, #1
 800292a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800292c:	4b15      	ldr	r3, [pc, #84]	; (8002984 <MX_I2C1_Init+0x74>)
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002932:	4b14      	ldr	r3, [pc, #80]	; (8002984 <MX_I2C1_Init+0x74>)
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <MX_I2C1_Init+0x74>)
 800293a:	2200      	movs	r2, #0
 800293c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MX_I2C1_Init+0x74>)
 8002940:	2200      	movs	r2, #0
 8002942:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <MX_I2C1_Init+0x74>)
 8002946:	2200      	movs	r2, #0
 8002948:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800294a:	480e      	ldr	r0, [pc, #56]	; (8002984 <MX_I2C1_Init+0x74>)
 800294c:	f001 fe52 	bl	80045f4 <HAL_I2C_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002956:	f000 f943 	bl	8002be0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800295a:	2100      	movs	r1, #0
 800295c:	4809      	ldr	r0, [pc, #36]	; (8002984 <MX_I2C1_Init+0x74>)
 800295e:	f002 fe2b 	bl	80055b8 <HAL_I2CEx_ConfigAnalogFilter>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002968:	f000 f93a 	bl	8002be0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800296c:	2100      	movs	r1, #0
 800296e:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_I2C1_Init+0x74>)
 8002970:	f002 fe6d 	bl	800564e <HAL_I2CEx_ConfigDigitalFilter>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800297a:	f000 f931 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200002a4 	.word	0x200002a4
 8002988:	40005400 	.word	0x40005400
 800298c:	2000090e 	.word	0x2000090e

08002990 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <MX_SPI1_Init+0x74>)
 8002996:	4a1c      	ldr	r2, [pc, #112]	; (8002a08 <MX_SPI1_Init+0x78>)
 8002998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <MX_SPI1_Init+0x74>)
 800299c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029a2:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029a8:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029b6:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029c6:	2220      	movs	r2, #32
 80029c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029d8:	2200      	movs	r2, #0
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029de:	2207      	movs	r2, #7
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029ea:	2208      	movs	r2, #8
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_SPI1_Init+0x74>)
 80029f0:	f004 f9c4 	bl	8006d7c <HAL_SPI_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80029fa:	f000 f8f1 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200002f8 	.word	0x200002f8
 8002a08:	40013000 	.word	0x40013000

08002a0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a12:	f107 0310 	add.w	r3, r7, #16
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <MX_TIM3_Init+0x94>)
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <MX_TIM3_Init+0x98>)
 8002a2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <MX_TIM3_Init+0x94>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <MX_TIM3_Init+0x94>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <MX_TIM3_Init+0x94>)
 8002a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <MX_TIM3_Init+0x94>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <MX_TIM3_Init+0x94>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a50:	4813      	ldr	r0, [pc, #76]	; (8002aa0 <MX_TIM3_Init+0x94>)
 8002a52:	f004 ff3f 	bl	80078d4 <HAL_TIM_Base_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002a5c:	f000 f8c0 	bl	8002be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	480c      	ldr	r0, [pc, #48]	; (8002aa0 <MX_TIM3_Init+0x94>)
 8002a6e:	f004 ff88 	bl	8007982 <HAL_TIM_ConfigClockSource>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002a78:	f000 f8b2 	bl	8002be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	4619      	mov	r1, r3
 8002a88:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <MX_TIM3_Init+0x94>)
 8002a8a:	f005 f955 	bl	8007d38 <HAL_TIMEx_MasterConfigSynchronization>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002a94:	f000 f8a4 	bl	8002be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a98:	bf00      	nop
 8002a9a:	3720      	adds	r7, #32
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	2000035c 	.word	0x2000035c
 8002aa4:	40000400 	.word	0x40000400

08002aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aae:	f107 030c 	add.w	r3, r7, #12
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
 8002aba:	60da      	str	r2, [r3, #12]
 8002abc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <MX_GPIO_Init+0x90>)
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <MX_GPIO_Init+0x90>)
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac8:	6153      	str	r3, [r2, #20]
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <MX_GPIO_Init+0x90>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <MX_GPIO_Init+0x90>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <MX_GPIO_Init+0x90>)
 8002adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae0:	6153      	str	r3, [r2, #20]
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <MX_GPIO_Init+0x90>)
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2110      	movs	r1, #16
 8002af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002af6:	f001 fd65 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002afa:	2310      	movs	r3, #16
 8002afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b14:	f001 fbcc 	bl	80042b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b18:	2310      	movs	r3, #16
 8002b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4804      	ldr	r0, [pc, #16]	; (8002b3c <MX_GPIO_Init+0x94>)
 8002b2c:	f001 fbc0 	bl	80042b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b30:	bf00      	nop
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	48000400 	.word	0x48000400

08002b40 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e009      	b.n	8002b66 <_write+0x26>
		ITM_SendChar(*ptr++);
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	60ba      	str	r2, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fc8c 	bl	8002478 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3301      	adds	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	dbf1      	blt.n	8002b52 <_write+0x12>
	}
	return len;
 8002b6e:	687b      	ldr	r3, [r7, #4]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <getRawAltitude>:

double getRawAltitude() {
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
	double pressure = readBMPPressure();
 8002b7e:	f7fe fa01 	bl	8000f84 <readBMPPressure>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fccd 	bl	8000524 <__aeabi_i2d>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double temperature = readBMPTemperature();
 8002b92:	f7fe f9d3 	bl	8000f3c <readBMPTemperature>
 8002b96:	ee10 3a10 	vmov	r3, s0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fcd4 	bl	8000548 <__aeabi_f2d>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double _altitude = calculateAltitude(pressure, temperature);
 8002ba8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bac:	f7fd ffd4 	bl	8000b58 <__aeabi_d2iz>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bb6:	f7fd fff7 	bl	8000ba8 <__aeabi_d2f>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	ee00 3a10 	vmov	s0, r3
 8002bc0:	4620      	mov	r0, r4
 8002bc2:	f7fe fa8d 	bl	80010e0 <calculateAltitude>
 8002bc6:	ed87 0b00 	vstr	d0, [r7]

	return _altitude;
 8002bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bce:	ec43 2b17 	vmov	d7, r2, r3
}
 8002bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8002bd6:	eef0 0a67 	vmov.f32	s1, s15
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002be4:	b672      	cpsid	i
}
 8002be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <Error_Handler+0x8>
	...

08002bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <HAL_MspInit+0x44>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <HAL_MspInit+0x44>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6193      	str	r3, [r2, #24]
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_MspInit+0x44>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_MspInit+0x44>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <HAL_MspInit+0x44>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	61d3      	str	r3, [r2, #28]
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_MspInit+0x44>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000

08002c34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c54:	d123      	bne.n	8002c9e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002c56:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <HAL_ADC_MspInit+0x74>)
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <HAL_ADC_MspInit+0x74>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c60:	6153      	str	r3, [r2, #20]
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_ADC_MspInit+0x74>)
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_ADC_MspInit+0x74>)
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <HAL_ADC_MspInit+0x74>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c78:	6153      	str	r3, [r2, #20]
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_ADC_MspInit+0x74>)
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c86:	2301      	movs	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	4619      	mov	r1, r3
 8002c98:	4804      	ldr	r0, [pc, #16]	; (8002cac <HAL_ADC_MspInit+0x78>)
 8002c9a:	f001 fb09 	bl	80042b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c9e:	bf00      	nop
 8002ca0:	3728      	adds	r7, #40	; 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	48000400 	.word	0x48000400

08002cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	; (8002d68 <HAL_I2C_MspInit+0xb8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d145      	bne.n	8002d5e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	4b26      	ldr	r3, [pc, #152]	; (8002d6c <HAL_I2C_MspInit+0xbc>)
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <HAL_I2C_MspInit+0xbc>)
 8002cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cdc:	6153      	str	r3, [r2, #20]
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <HAL_I2C_MspInit+0xbc>)
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_I2C_MspInit+0xbc>)
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <HAL_I2C_MspInit+0xbc>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	6153      	str	r3, [r2, #20]
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_I2C_MspInit+0xbc>)
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d08:	2312      	movs	r3, #18
 8002d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d14:	2304      	movs	r3, #4
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d22:	f001 fac5 	bl	80042b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d2a:	2312      	movs	r3, #18
 8002d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d32:	2303      	movs	r3, #3
 8002d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d36:	2304      	movs	r3, #4
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	480b      	ldr	r0, [pc, #44]	; (8002d70 <HAL_I2C_MspInit+0xc0>)
 8002d42:	f001 fab5 	bl	80042b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_I2C_MspInit+0xbc>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4a08      	ldr	r2, [pc, #32]	; (8002d6c <HAL_I2C_MspInit+0xbc>)
 8002d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d50:	61d3      	str	r3, [r2, #28]
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_I2C_MspInit+0xbc>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d5e:	bf00      	nop
 8002d60:	3728      	adds	r7, #40	; 0x28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40005400 	.word	0x40005400
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	48000400 	.word	0x48000400

08002d74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a20      	ldr	r2, [pc, #128]	; (8002e14 <HAL_SPI_MspInit+0xa0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d139      	bne.n	8002e0a <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_SPI_MspInit+0xa4>)
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <HAL_SPI_MspInit+0xa4>)
 8002d9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da0:	6193      	str	r3, [r2, #24]
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_SPI_MspInit+0xa4>)
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <HAL_SPI_MspInit+0xa4>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <HAL_SPI_MspInit+0xa4>)
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db8:	6153      	str	r3, [r2, #20]
 8002dba:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <HAL_SPI_MspInit+0xa4>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dd6:	2305      	movs	r3, #5
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dda:	f107 0314 	add.w	r3, r7, #20
 8002dde:	4619      	mov	r1, r3
 8002de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de4:	f001 fa64 	bl	80042b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002de8:	23c0      	movs	r3, #192	; 0xc0
 8002dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002df0:	2301      	movs	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df4:	2303      	movs	r3, #3
 8002df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002df8:	2305      	movs	r3, #5
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	4619      	mov	r1, r3
 8002e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e06:	f001 fa53 	bl	80042b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40013000 	.word	0x40013000
 8002e18:	40021000 	.word	0x40021000

08002e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <HAL_TIM_Base_MspInit+0x38>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10b      	bne.n	8002e46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_TIM_Base_MspInit+0x3c>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4a09      	ldr	r2, [pc, #36]	; (8002e58 <HAL_TIM_Base_MspInit+0x3c>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	61d3      	str	r3, [r2, #28]
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_TIM_Base_MspInit+0x3c>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40021000 	.word	0x40021000

08002e5c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
 volatile uint8_t Timer1, Timer2;

 void SDTimer_Handler(void)
 {
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
 	if(Timer1 > 0)
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <SDTimer_Handler+0x40>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d006      	beq.n	8002e78 <SDTimer_Handler+0x1c>
 		Timer1--;
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <SDTimer_Handler+0x40>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <SDTimer_Handler+0x40>)
 8002e76:	701a      	strb	r2, [r3, #0]
 	if(Timer2 > 0)
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <SDTimer_Handler+0x44>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <SDTimer_Handler+0x34>
 		Timer2--;
 8002e82:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <SDTimer_Handler+0x44>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SDTimer_Handler+0x44>)
 8002e8e:	701a      	strb	r2, [r3, #0]
 }
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000cc5 	.word	0x20000cc5
 8002ea0:	20000cc6 	.word	0x20000cc6

08002ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <NMI_Handler+0x4>

08002eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eae:	e7fe      	b.n	8002eae <HardFault_Handler+0x4>

08002eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb4:	e7fe      	b.n	8002eb4 <MemManage_Handler+0x4>

08002eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eba:	e7fe      	b.n	8002eba <BusFault_Handler+0x4>

08002ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <UsageFault_Handler+0x4>

08002ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 FatFsCnt++;
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <SysTick_Handler+0x30>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <SysTick_Handler+0x30>)
 8002efc:	701a      	strb	r2, [r3, #0]
	   if(FatFsCnt >= 10)
 8002efe:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <SysTick_Handler+0x30>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d904      	bls.n	8002f12 <SysTick_Handler+0x26>
	   {
	 	  FatFsCnt = 0;
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <SysTick_Handler+0x30>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
	 	  SDTimer_Handler();
 8002f0e:	f7ff ffa5 	bl	8002e5c <SDTimer_Handler>
	   }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f12:	f000 f931 	bl	8003178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000cc4 	.word	0x20000cc4

08002f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return 1;
 8002f24:	2301      	movs	r3, #1
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_kill>:

int _kill(int pid, int sig)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f3a:	f009 f9cb 	bl	800c2d4 <__errno>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2216      	movs	r2, #22
 8002f42:	601a      	str	r2, [r3, #0]
  return -1;
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <_exit>:

void _exit (int status)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff ffe7 	bl	8002f30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f62:	e7fe      	b.n	8002f62 <_exit+0x12>

08002f64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e00a      	b.n	8002f8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f76:	f3af 8000 	nop.w
 8002f7a:	4601      	mov	r1, r0
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	60ba      	str	r2, [r7, #8]
 8002f82:	b2ca      	uxtb	r2, r1
 8002f84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	dbf0      	blt.n	8002f76 <_read+0x12>
  }

  return len;
 8002f94:	687b      	ldr	r3, [r7, #4]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fc6:	605a      	str	r2, [r3, #4]
  return 0;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <_isatty>:

int _isatty(int file)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fde:	2301      	movs	r3, #1
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <_sbrk+0x5c>)
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <_sbrk+0x60>)
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <_sbrk+0x64>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <_sbrk+0x64>)
 8003026:	4a12      	ldr	r2, [pc, #72]	; (8003070 <_sbrk+0x68>)
 8003028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <_sbrk+0x64>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	429a      	cmp	r2, r3
 8003036:	d207      	bcs.n	8003048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003038:	f009 f94c 	bl	800c2d4 <__errno>
 800303c:	4603      	mov	r3, r0
 800303e:	220c      	movs	r2, #12
 8003040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003046:	e009      	b.n	800305c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <_sbrk+0x64>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800304e:	4b07      	ldr	r3, [pc, #28]	; (800306c <_sbrk+0x64>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	4a05      	ldr	r2, [pc, #20]	; (800306c <_sbrk+0x64>)
 8003058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800305a:	68fb      	ldr	r3, [r7, #12]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20003000 	.word	0x20003000
 8003068:	00000400 	.word	0x00000400
 800306c:	20000cc8 	.word	0x20000cc8
 8003070:	20001050 	.word	0x20001050

08003074 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <SystemInit+0x20>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <SystemInit+0x20>)
 8003080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800309c:	f7ff ffea 	bl	8003074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030a0:	480c      	ldr	r0, [pc, #48]	; (80030d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80030a2:	490d      	ldr	r1, [pc, #52]	; (80030d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030a4:	4a0d      	ldr	r2, [pc, #52]	; (80030dc <LoopForever+0xe>)
  movs r3, #0
 80030a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a8:	e002      	b.n	80030b0 <LoopCopyDataInit>

080030aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ae:	3304      	adds	r3, #4

080030b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b4:	d3f9      	bcc.n	80030aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030b8:	4c0a      	ldr	r4, [pc, #40]	; (80030e4 <LoopForever+0x16>)
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030bc:	e001      	b.n	80030c2 <LoopFillZerobss>

080030be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c0:	3204      	adds	r2, #4

080030c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c4:	d3fb      	bcc.n	80030be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030c6:	f009 f90b 	bl	800c2e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030ca:	f7ff f9fd 	bl	80024c8 <main>

080030ce <LoopForever>:

LoopForever:
    b LoopForever
 80030ce:	e7fe      	b.n	80030ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030d0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80030d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80030dc:	0800fe00 	.word	0x0800fe00
  ldr r2, =_sbss
 80030e0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80030e4:	20001050 	.word	0x20001050

080030e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030e8:	e7fe      	b.n	80030e8 <ADC1_2_IRQHandler>
	...

080030ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <HAL_Init+0x28>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a07      	ldr	r2, [pc, #28]	; (8003114 <HAL_Init+0x28>)
 80030f6:	f043 0310 	orr.w	r3, r3, #16
 80030fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030fc:	2003      	movs	r0, #3
 80030fe:	f001 f8a3 	bl	8004248 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003102:	200f      	movs	r0, #15
 8003104:	f000 f808 	bl	8003118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003108:	f7ff fd70 	bl	8002bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40022000 	.word	0x40022000

08003118 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_InitTick+0x54>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_InitTick+0x58>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	4619      	mov	r1, r3
 800312a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800312e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	4618      	mov	r0, r3
 8003138:	f001 f8ad 	bl	8004296 <HAL_SYSTICK_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e00e      	b.n	8003164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b0f      	cmp	r3, #15
 800314a:	d80a      	bhi.n	8003162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800314c:	2200      	movs	r2, #0
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003154:	f001 f883 	bl	800425e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003158:	4a06      	ldr	r2, [pc, #24]	; (8003174 <HAL_InitTick+0x5c>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000008 	.word	0x20000008
 8003170:	20000010 	.word	0x20000010
 8003174:	2000000c 	.word	0x2000000c

08003178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_IncTick+0x20>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_IncTick+0x24>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4413      	add	r3, r2
 8003188:	4a04      	ldr	r2, [pc, #16]	; (800319c <HAL_IncTick+0x24>)
 800318a:	6013      	str	r3, [r2, #0]
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000010 	.word	0x20000010
 800319c:	20000ccc 	.word	0x20000ccc

080031a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80031a4:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <HAL_GetTick+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000ccc 	.word	0x20000ccc

080031b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c0:	f7ff ffee 	bl	80031a0 <HAL_GetTick>
 80031c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031d0:	d005      	beq.n	80031de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031d2:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <HAL_Delay+0x44>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80031de:	bf00      	nop
 80031e0:	f7ff ffde 	bl	80031a0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d8f7      	bhi.n	80031e0 <HAL_Delay+0x28>
  {
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000010 	.word	0x20000010

08003200 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b09a      	sub	sp, #104	; 0x68
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e172      	b.n	8003506 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d176      	bne.n	8003320 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d152      	bne.n	80032e0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fced 	bl	8002c34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d13b      	bne.n	80032e0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fed5 	bl	8004018 <ADC_Disable>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	d12f      	bne.n	80032e0 <HAL_ADC_Init+0xe0>
 8003280:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003284:	2b00      	cmp	r3, #0
 8003286:	d12b      	bne.n	80032e0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003290:	f023 0302 	bic.w	r3, r3, #2
 8003294:	f043 0202 	orr.w	r2, r3, #2
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032aa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032bc:	4b94      	ldr	r3, [pc, #592]	; (8003510 <HAL_ADC_Init+0x310>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a94      	ldr	r2, [pc, #592]	; (8003514 <HAL_ADC_Init+0x314>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	0c9a      	lsrs	r2, r3, #18
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032d2:	e002      	b.n	80032da <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f9      	bne.n	80032d4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80032f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032fc:	d110      	bne.n	8003320 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f023 0312 	bic.w	r3, r3, #18
 8003306:	f043 0210 	orr.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f043 0201 	orr.w	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b00      	cmp	r3, #0
 800332a:	f040 80df 	bne.w	80034ec <HAL_ADC_Init+0x2ec>
 800332e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 80da 	bne.w	80034ec <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 80d2 	bne.w	80034ec <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003350:	f043 0202 	orr.w	r2, r3, #2
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003358:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <HAL_ADC_Init+0x318>)
 800335a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003364:	d102      	bne.n	800336c <HAL_ADC_Init+0x16c>
 8003366:	4b6d      	ldr	r3, [pc, #436]	; (800351c <HAL_ADC_Init+0x31c>)
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	e002      	b.n	8003372 <HAL_ADC_Init+0x172>
 800336c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003370:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d108      	bne.n	8003392 <HAL_ADC_Init+0x192>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_ADC_Init+0x192>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_ADC_Init+0x194>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d11c      	bne.n	80033d2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003398:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_ADC_Init+0x1ba>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_Init+0x1ba>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_ADC_Init+0x1bc>
 80033ba:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d108      	bne.n	80033d2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80033c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7e5b      	ldrb	r3, [r3, #25]
 80033d6:	035b      	lsls	r3, r3, #13
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033dc:	2a01      	cmp	r2, #1
 80033de:	d002      	beq.n	80033e6 <HAL_ADC_Init+0x1e6>
 80033e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033e4:	e000      	b.n	80033e8 <HAL_ADC_Init+0x1e8>
 80033e6:	2200      	movs	r2, #0
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033f8:	4313      	orrs	r3, r2
 80033fa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d11b      	bne.n	800343e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	7e5b      	ldrb	r3, [r3, #25]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	3b01      	subs	r3, #1
 8003414:	045a      	lsls	r2, r3, #17
 8003416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003418:	4313      	orrs	r3, r2
 800341a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341e:	663b      	str	r3, [r7, #96]	; 0x60
 8003420:	e00d      	b.n	800343e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	2b01      	cmp	r3, #1
 8003444:	d007      	beq.n	8003456 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	4313      	orrs	r3, r2
 8003450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003452:	4313      	orrs	r3, r2
 8003454:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b00      	cmp	r3, #0
 8003462:	d114      	bne.n	800348e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003472:	f023 0302 	bic.w	r3, r3, #2
 8003476:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7e1b      	ldrb	r3, [r3, #24]
 800347c:	039a      	lsls	r2, r3, #14
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4313      	orrs	r3, r2
 8003488:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800348a:	4313      	orrs	r3, r2
 800348c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	4b22      	ldr	r3, [pc, #136]	; (8003520 <HAL_ADC_Init+0x320>)
 8003496:	4013      	ands	r3, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800349e:	430b      	orrs	r3, r1
 80034a0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d10c      	bne.n	80034c4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	f023 010f 	bic.w	r1, r3, #15
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	1e5a      	subs	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
 80034c2:	e007      	b.n	80034d4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020f 	bic.w	r2, r2, #15
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	f043 0201 	orr.w	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
 80034ea:	e00a      	b.n	8003502 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f023 0312 	bic.w	r3, r3, #18
 80034f4:	f043 0210 	orr.w	r2, r3, #16
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003502:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003506:	4618      	mov	r0, r3
 8003508:	3768      	adds	r7, #104	; 0x68
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000008 	.word	0x20000008
 8003514:	431bde83 	.word	0x431bde83
 8003518:	50000300 	.word	0x50000300
 800351c:	50000100 	.word	0x50000100
 8003520:	fff0c007 	.word	0xfff0c007

08003524 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 809c 	bne.w	8003678 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_ADC_Start+0x2a>
 800354a:	2302      	movs	r3, #2
 800354c:	e097      	b.n	800367e <HAL_ADC_Start+0x15a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fcfa 	bl	8003f50 <ADC_Enable>
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 8083 	bne.w	800366e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800357c:	4b42      	ldr	r3, [pc, #264]	; (8003688 <HAL_ADC_Start+0x164>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	2b00      	cmp	r3, #0
 8003586:	d004      	beq.n	8003592 <HAL_ADC_Start+0x6e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003590:	d115      	bne.n	80035be <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d027      	beq.n	80035fc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80035bc:	e01e      	b.n	80035fc <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d2:	d004      	beq.n	80035de <HAL_ADC_Start+0xba>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2c      	ldr	r2, [pc, #176]	; (800368c <HAL_ADC_Start+0x168>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10e      	bne.n	80035fc <HAL_ADC_Start+0xd8>
 80035de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	d106      	bne.n	8003618 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f023 0206 	bic.w	r2, r3, #6
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
 8003616:	e002      	b.n	800361e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	221c      	movs	r2, #28
 800362c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800362e:	4b16      	ldr	r3, [pc, #88]	; (8003688 <HAL_ADC_Start+0x164>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	2b00      	cmp	r3, #0
 8003638:	d010      	beq.n	800365c <HAL_ADC_Start+0x138>
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_ADC_Start+0x164>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2b05      	cmp	r3, #5
 8003644:	d00a      	beq.n	800365c <HAL_ADC_Start+0x138>
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_ADC_Start+0x164>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2b09      	cmp	r3, #9
 8003650:	d004      	beq.n	800365c <HAL_ADC_Start+0x138>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800365a:	d10f      	bne.n	800367c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0204 	orr.w	r2, r2, #4
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	e006      	b.n	800367c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003676:	e001      	b.n	800367c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003678:	2302      	movs	r3, #2
 800367a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	50000300 	.word	0x50000300
 800368c:	50000100 	.word	0x50000100

08003690 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800369a:	2300      	movs	r3, #0
 800369c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d102      	bne.n	80036ac <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80036a6:	2308      	movs	r3, #8
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e02e      	b.n	800370a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036ac:	4b5e      	ldr	r3, [pc, #376]	; (8003828 <HAL_ADC_PollForConversion+0x198>)
 80036ae:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d112      	bne.n	80036e2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d11d      	bne.n	8003706 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e09d      	b.n	800381e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e08b      	b.n	800381e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003706:	230c      	movs	r3, #12
 8003708:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800370a:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_ADC_PollForConversion+0x198>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2b00      	cmp	r3, #0
 8003714:	d004      	beq.n	8003720 <HAL_ADC_PollForConversion+0x90>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800371e:	d104      	bne.n	800372a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	e003      	b.n	8003732 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800372a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003732:	f7ff fd35 	bl	80031a0 <HAL_GetTick>
 8003736:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003738:	e021      	b.n	800377e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003740:	d01d      	beq.n	800377e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <HAL_ADC_PollForConversion+0xc8>
 8003748:	f7ff fd2a 	bl	80031a0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d212      	bcs.n	800377e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4013      	ands	r3, r2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10b      	bne.n	800377e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f043 0204 	orr.w	r2, r3, #4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e04f      	b.n	800381e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0d6      	beq.n	800373a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d131      	bne.n	800380a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d12c      	bne.n	800380a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d125      	bne.n	800380a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d112      	bne.n	80037f2 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d112      	bne.n	800380a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
 80037f0:	e00b      	b.n	800380a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f043 0201 	orr.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d103      	bne.n	800381c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	50000300 	.word	0x50000300

0800382c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003848:	b480      	push	{r7}
 800384a:	b09b      	sub	sp, #108	; 0x6c
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_ADC_ConfigChannel+0x22>
 8003866:	2302      	movs	r3, #2
 8003868:	e2a1      	b.n	8003dae <HAL_ADC_ConfigChannel+0x566>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	f040 8285 	bne.w	8003d8c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b04      	cmp	r3, #4
 8003888:	d81c      	bhi.n	80038c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4413      	add	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	461a      	mov	r2, r3
 800389e:	231f      	movs	r3, #31
 80038a0:	4093      	lsls	r3, r2
 80038a2:	43db      	mvns	r3, r3
 80038a4:	4019      	ands	r1, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4413      	add	r3, r2
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	fa00 f203 	lsl.w	r2, r0, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
 80038c2:	e063      	b.n	800398c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b09      	cmp	r3, #9
 80038ca:	d81e      	bhi.n	800390a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	3b1e      	subs	r3, #30
 80038e0:	221f      	movs	r2, #31
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43db      	mvns	r3, r3
 80038e8:	4019      	ands	r1, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	3b1e      	subs	r3, #30
 80038fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	635a      	str	r2, [r3, #52]	; 0x34
 8003908:	e040      	b.n	800398c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b0e      	cmp	r3, #14
 8003910:	d81e      	bhi.n	8003950 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	3b3c      	subs	r3, #60	; 0x3c
 8003926:	221f      	movs	r2, #31
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	4019      	ands	r1, r3
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	3b3c      	subs	r3, #60	; 0x3c
 8003942:	fa00 f203 	lsl.w	r2, r0, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
 800394e:	e01d      	b.n	800398c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	3b5a      	subs	r3, #90	; 0x5a
 8003964:	221f      	movs	r2, #31
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	4019      	ands	r1, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	3b5a      	subs	r3, #90	; 0x5a
 8003980:	fa00 f203 	lsl.w	r2, r0, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 80e5 	bne.w	8003b66 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b09      	cmp	r3, #9
 80039a2:	d91c      	bls.n	80039de <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6999      	ldr	r1, [r3, #24]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	3b1e      	subs	r3, #30
 80039b6:	2207      	movs	r2, #7
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	4019      	ands	r1, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6898      	ldr	r0, [r3, #8]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4413      	add	r3, r2
 80039ce:	3b1e      	subs	r3, #30
 80039d0:	fa00 f203 	lsl.w	r2, r0, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	619a      	str	r2, [r3, #24]
 80039dc:	e019      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6959      	ldr	r1, [r3, #20]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4413      	add	r3, r2
 80039ee:	2207      	movs	r2, #7
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	4019      	ands	r1, r3
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6898      	ldr	r0, [r3, #8]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	4413      	add	r3, r2
 8003a06:	fa00 f203 	lsl.w	r2, r0, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	08db      	lsrs	r3, r3, #3
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d84f      	bhi.n	8003ad4 <HAL_ADC_ConfigChannel+0x28c>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_ADC_ConfigChannel+0x1f4>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a6f 	.word	0x08003a6f
 8003a44:	08003a91 	.word	0x08003a91
 8003a48:	08003ab3 	.word	0x08003ab3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a52:	4b9c      	ldr	r3, [pc, #624]	; (8003cc4 <HAL_ADC_ConfigChannel+0x47c>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	0691      	lsls	r1, r2, #26
 8003a5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a6a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a6c:	e07b      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a74:	4b93      	ldr	r3, [pc, #588]	; (8003cc4 <HAL_ADC_ConfigChannel+0x47c>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	0691      	lsls	r1, r2, #26
 8003a7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a80:	430a      	orrs	r2, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a8c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a8e:	e06a      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a96:	4b8b      	ldr	r3, [pc, #556]	; (8003cc4 <HAL_ADC_ConfigChannel+0x47c>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	0691      	lsls	r1, r2, #26
 8003aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003aae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003ab0:	e059      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ab8:	4b82      	ldr	r3, [pc, #520]	; (8003cc4 <HAL_ADC_ConfigChannel+0x47c>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	0691      	lsls	r1, r2, #26
 8003ac2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ad0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003ad2:	e048      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	069b      	lsls	r3, r3, #26
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003af6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	069b      	lsls	r3, r3, #26
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d107      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b1a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	069b      	lsls	r3, r3, #26
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d107      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b3e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	069b      	lsls	r3, r3, #26
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d107      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b62:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003b64:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d108      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x33e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x33e>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x340>
 8003b86:	2300      	movs	r3, #0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 810a 	bne.w	8003da2 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d00f      	beq.n	8003bb6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	400a      	ands	r2, r1
 8003bb0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003bb4:	e049      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b09      	cmp	r3, #9
 8003bd6:	d91c      	bls.n	8003c12 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6999      	ldr	r1, [r3, #24]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	4413      	add	r3, r2
 8003be8:	3b1b      	subs	r3, #27
 8003bea:	2207      	movs	r2, #7
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	4019      	ands	r1, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6898      	ldr	r0, [r3, #8]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	3b1b      	subs	r3, #27
 8003c04:	fa00 f203 	lsl.w	r2, r0, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	619a      	str	r2, [r3, #24]
 8003c10:	e01b      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6959      	ldr	r1, [r3, #20]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	4613      	mov	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4413      	add	r3, r2
 8003c24:	2207      	movs	r2, #7
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	4019      	ands	r1, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6898      	ldr	r0, [r3, #8]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	4613      	mov	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <HAL_ADC_ConfigChannel+0x480>)
 8003c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d105      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d015      	beq.n	8003c8e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c66:	2b11      	cmp	r3, #17
 8003c68:	d105      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c7a:	2b12      	cmp	r3, #18
 8003c7c:	f040 8091 	bne.w	8003da2 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f040 808a 	bne.w	8003da2 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c96:	d102      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x456>
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <HAL_ADC_ConfigChannel+0x484>)
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	e002      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x45c>
 8003c9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ca2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x488>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d107      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x488>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e006      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x48a>
 8003cc4:	83fff000 	.word	0x83fff000
 8003cc8:	50000300 	.word	0x50000300
 8003ccc:	50000100 	.word	0x50000100
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d150      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003cd6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d010      	beq.n	8003cfe <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d107      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x4b0>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x4b0>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_ADC_ConfigChannel+0x4b2>
 8003cf8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d13c      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d11d      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x4fa>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d0e:	d118      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d1a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d1c:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <HAL_ADC_ConfigChannel+0x574>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a27      	ldr	r2, [pc, #156]	; (8003dc0 <HAL_ADC_ConfigChannel+0x578>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	0c9a      	lsrs	r2, r3, #18
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d32:	e002      	b.n	8003d3a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f9      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d40:	e02e      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b11      	cmp	r3, #17
 8003d48:	d10b      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x51a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d52:	d106      	bne.n	8003d62 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d60:	e01e      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b12      	cmp	r3, #18
 8003d68:	d11a      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d74:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d76:	e013      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003d8a:	e00a      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003d9e:	e000      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003da0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003daa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	376c      	adds	r7, #108	; 0x6c
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000008 	.word	0x20000008
 8003dc0:	431bde83 	.word	0x431bde83

08003dc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b099      	sub	sp, #100	; 0x64
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ddc:	d102      	bne.n	8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003dde:	4b5a      	ldr	r3, [pc, #360]	; (8003f48 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	e002      	b.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8003de4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003de8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0a2      	b.n	8003f3a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e09b      	b.n	8003f3a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d17f      	bne.n	8003f18 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d179      	bne.n	8003f18 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e24:	4b49      	ldr	r3, [pc, #292]	; (8003f4c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8003e26:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d040      	beq.n	8003eb2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e42:	035b      	lsls	r3, r3, #13
 8003e44:	430b      	orrs	r3, r1
 8003e46:	431a      	orrs	r2, r3
 8003e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e4a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d108      	bne.n	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d15c      	bne.n	8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8003e8e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d14b      	bne.n	8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e9c:	f023 030f 	bic.w	r3, r3, #15
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	6811      	ldr	r1, [r2, #0]
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	6892      	ldr	r2, [r2, #8]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eae:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eb0:	e03c      	b.n	8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ebc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d108      	bne.n	8003ede <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d123      	bne.n	8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d107      	bne.n	8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003f00:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d112      	bne.n	8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f0e:	f023 030f 	bic.w	r3, r3, #15
 8003f12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f14:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f16:	e009      	b.n	8003f2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f043 0220 	orr.w	r2, r3, #32
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003f2a:	e000      	b.n	8003f2e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f2c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003f36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3764      	adds	r7, #100	; 0x64
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	50000100 	.word	0x50000100
 8003f4c:	50000300 	.word	0x50000300

08003f50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d108      	bne.n	8003f7c <ADC_Enable+0x2c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <ADC_Enable+0x2c>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <ADC_Enable+0x2e>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d143      	bne.n	800400a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	4b22      	ldr	r3, [pc, #136]	; (8004014 <ADC_Enable+0xc4>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	f043 0210 	orr.w	r2, r3, #16
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	f043 0201 	orr.w	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e02f      	b.n	800400c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003fbc:	f7ff f8f0 	bl	80031a0 <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003fc2:	e01b      	b.n	8003ffc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fc4:	f7ff f8ec 	bl	80031a0 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d914      	bls.n	8003ffc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d00d      	beq.n	8003ffc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	f043 0210 	orr.w	r2, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e007      	b.n	800400c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d1dc      	bne.n	8003fc4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	8000003f 	.word	0x8000003f

08004018 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d108      	bne.n	8004044 <ADC_Disable+0x2c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <ADC_Disable+0x2c>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <ADC_Disable+0x2e>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d047      	beq.n	80040da <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 030d 	and.w	r3, r3, #13
 8004054:	2b01      	cmp	r3, #1
 8004056:	d10f      	bne.n	8004078 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0202 	orr.w	r2, r2, #2
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2203      	movs	r2, #3
 800406e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004070:	f7ff f896 	bl	80031a0 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004076:	e029      	b.n	80040cc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	f043 0210 	orr.w	r2, r3, #16
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004088:	f043 0201 	orr.w	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e023      	b.n	80040dc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004094:	f7ff f884 	bl	80031a0 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d914      	bls.n	80040cc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d10d      	bne.n	80040cc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	f043 0210 	orr.w	r2, r3, #16
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c0:	f043 0201 	orr.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e007      	b.n	80040dc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d0dc      	beq.n	8004094 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <__NVIC_SetPriorityGrouping>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <__NVIC_SetPriorityGrouping+0x44>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004100:	4013      	ands	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800410c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004116:	4a04      	ldr	r2, [pc, #16]	; (8004128 <__NVIC_SetPriorityGrouping+0x44>)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	60d3      	str	r3, [r2, #12]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <__NVIC_GetPriorityGrouping>:
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <__NVIC_GetPriorityGrouping+0x18>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	f003 0307 	and.w	r3, r3, #7
}
 800413a:	4618      	mov	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <__NVIC_SetPriority>:
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	6039      	str	r1, [r7, #0]
 8004152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004158:	2b00      	cmp	r3, #0
 800415a:	db0a      	blt.n	8004172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	490c      	ldr	r1, [pc, #48]	; (8004194 <__NVIC_SetPriority+0x4c>)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	0112      	lsls	r2, r2, #4
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	440b      	add	r3, r1
 800416c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004170:	e00a      	b.n	8004188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4908      	ldr	r1, [pc, #32]	; (8004198 <__NVIC_SetPriority+0x50>)
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	3b04      	subs	r3, #4
 8004180:	0112      	lsls	r2, r2, #4
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	440b      	add	r3, r1
 8004186:	761a      	strb	r2, [r3, #24]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000e100 	.word	0xe000e100
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <NVIC_EncodePriority>:
{
 800419c:	b480      	push	{r7}
 800419e:	b089      	sub	sp, #36	; 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f1c3 0307 	rsb	r3, r3, #7
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	bf28      	it	cs
 80041ba:	2304      	movcs	r3, #4
 80041bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2b06      	cmp	r3, #6
 80041c4:	d902      	bls.n	80041cc <NVIC_EncodePriority+0x30>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3b03      	subs	r3, #3
 80041ca:	e000      	b.n	80041ce <NVIC_EncodePriority+0x32>
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	401a      	ands	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	43d9      	mvns	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f4:	4313      	orrs	r3, r2
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3724      	adds	r7, #36	; 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <SysTick_Config>:
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3b01      	subs	r3, #1
 8004210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004214:	d301      	bcc.n	800421a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004216:	2301      	movs	r3, #1
 8004218:	e00f      	b.n	800423a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800421a:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <SysTick_Config+0x40>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004222:	210f      	movs	r1, #15
 8004224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004228:	f7ff ff8e 	bl	8004148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <SysTick_Config+0x40>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004232:	4b04      	ldr	r3, [pc, #16]	; (8004244 <SysTick_Config+0x40>)
 8004234:	2207      	movs	r2, #7
 8004236:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	e000e010 	.word	0xe000e010

08004248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ff47 	bl	80040e4 <__NVIC_SetPriorityGrouping>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	4603      	mov	r3, r0
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004270:	f7ff ff5c 	bl	800412c <__NVIC_GetPriorityGrouping>
 8004274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	f7ff ff8e 	bl	800419c <NVIC_EncodePriority>
 8004280:	4602      	mov	r2, r0
 8004282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff5d 	bl	8004148 <__NVIC_SetPriority>
}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff ffb0 	bl	8004204 <SysTick_Config>
 80042a4:	4603      	mov	r3, r0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042be:	e14e      	b.n	800455e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2101      	movs	r1, #1
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	4013      	ands	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8140 	beq.w	8004558 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d005      	beq.n	80042f0 <HAL_GPIO_Init+0x40>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d130      	bne.n	8004352 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	2203      	movs	r2, #3
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004326:	2201      	movs	r2, #1
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4013      	ands	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	f003 0201 	and.w	r2, r3, #1
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b03      	cmp	r3, #3
 800435c:	d017      	beq.n	800438e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	2203      	movs	r2, #3
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43db      	mvns	r3, r3
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4013      	ands	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d123      	bne.n	80043e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	08da      	lsrs	r2, r3, #3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3208      	adds	r2, #8
 80043a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	220f      	movs	r2, #15
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43db      	mvns	r3, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4013      	ands	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	08da      	lsrs	r2, r3, #3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3208      	adds	r2, #8
 80043dc:	6939      	ldr	r1, [r7, #16]
 80043de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	2203      	movs	r2, #3
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 0203 	and.w	r2, r3, #3
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 809a 	beq.w	8004558 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004424:	4b55      	ldr	r3, [pc, #340]	; (800457c <HAL_GPIO_Init+0x2cc>)
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	4a54      	ldr	r2, [pc, #336]	; (800457c <HAL_GPIO_Init+0x2cc>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6193      	str	r3, [r2, #24]
 8004430:	4b52      	ldr	r3, [pc, #328]	; (800457c <HAL_GPIO_Init+0x2cc>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800443c:	4a50      	ldr	r2, [pc, #320]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	089b      	lsrs	r3, r3, #2
 8004442:	3302      	adds	r3, #2
 8004444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004448:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	220f      	movs	r2, #15
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4013      	ands	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004466:	d013      	beq.n	8004490 <HAL_GPIO_Init+0x1e0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a46      	ldr	r2, [pc, #280]	; (8004584 <HAL_GPIO_Init+0x2d4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00d      	beq.n	800448c <HAL_GPIO_Init+0x1dc>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a45      	ldr	r2, [pc, #276]	; (8004588 <HAL_GPIO_Init+0x2d8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <HAL_GPIO_Init+0x1d8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a44      	ldr	r2, [pc, #272]	; (800458c <HAL_GPIO_Init+0x2dc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <HAL_GPIO_Init+0x1d4>
 8004480:	2303      	movs	r3, #3
 8004482:	e006      	b.n	8004492 <HAL_GPIO_Init+0x1e2>
 8004484:	2305      	movs	r3, #5
 8004486:	e004      	b.n	8004492 <HAL_GPIO_Init+0x1e2>
 8004488:	2302      	movs	r3, #2
 800448a:	e002      	b.n	8004492 <HAL_GPIO_Init+0x1e2>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_GPIO_Init+0x1e2>
 8004490:	2300      	movs	r3, #0
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	f002 0203 	and.w	r2, r2, #3
 8004498:	0092      	lsls	r2, r2, #2
 800449a:	4093      	lsls	r3, r2
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044a2:	4937      	ldr	r1, [pc, #220]	; (8004580 <HAL_GPIO_Init+0x2d0>)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	3302      	adds	r3, #2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044b0:	4b37      	ldr	r3, [pc, #220]	; (8004590 <HAL_GPIO_Init+0x2e0>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80044d4:	4a2e      	ldr	r2, [pc, #184]	; (8004590 <HAL_GPIO_Init+0x2e0>)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044da:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <HAL_GPIO_Init+0x2e0>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	43db      	mvns	r3, r3
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4013      	ands	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044fe:	4a24      	ldr	r2, [pc, #144]	; (8004590 <HAL_GPIO_Init+0x2e0>)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004504:	4b22      	ldr	r3, [pc, #136]	; (8004590 <HAL_GPIO_Init+0x2e0>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	43db      	mvns	r3, r3
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4013      	ands	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004528:	4a19      	ldr	r2, [pc, #100]	; (8004590 <HAL_GPIO_Init+0x2e0>)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800452e:	4b18      	ldr	r3, [pc, #96]	; (8004590 <HAL_GPIO_Init+0x2e0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	43db      	mvns	r3, r3
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4013      	ands	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004552:	4a0f      	ldr	r2, [pc, #60]	; (8004590 <HAL_GPIO_Init+0x2e0>)
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	3301      	adds	r3, #1
 800455c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	f47f aea9 	bne.w	80042c0 <HAL_GPIO_Init+0x10>
  }
}
 800456e:	bf00      	nop
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40021000 	.word	0x40021000
 8004580:	40010000 	.word	0x40010000
 8004584:	48000400 	.word	0x48000400
 8004588:	48000800 	.word	0x48000800
 800458c:	48000c00 	.word	0x48000c00
 8004590:	40010400 	.word	0x40010400

08004594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	887b      	ldrh	r3, [r7, #2]
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	e001      	b.n	80045b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045b2:	2300      	movs	r3, #0
 80045b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	807b      	strh	r3, [r7, #2]
 80045d0:	4613      	mov	r3, r2
 80045d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045d4:	787b      	ldrb	r3, [r7, #1]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045da:	887a      	ldrh	r2, [r7, #2]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045e0:	e002      	b.n	80045e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e081      	b.n	800470a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fe fb48 	bl	8002cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2224      	movs	r2, #36	; 0x24
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004644:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004654:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	e006      	b.n	800467c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800467a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d104      	bne.n	800468e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800468c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800469c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69d9      	ldr	r1, [r3, #28]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	461a      	mov	r2, r3
 8004720:	460b      	mov	r3, r1
 8004722:	817b      	strh	r3, [r7, #10]
 8004724:	4613      	mov	r3, r2
 8004726:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b20      	cmp	r3, #32
 8004732:	f040 80da 	bne.w	80048ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_I2C_Master_Transmit+0x30>
 8004740:	2302      	movs	r3, #2
 8004742:	e0d3      	b.n	80048ec <HAL_I2C_Master_Transmit+0x1d8>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800474c:	f7fe fd28 	bl	80031a0 <HAL_GetTick>
 8004750:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	2319      	movs	r3, #25
 8004758:	2201      	movs	r2, #1
 800475a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fcbc 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e0be      	b.n	80048ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2221      	movs	r2, #33	; 0x21
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2210      	movs	r2, #16
 800477a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	893a      	ldrh	r2, [r7, #8]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	2bff      	cmp	r3, #255	; 0xff
 800479e:	d90e      	bls.n	80047be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	22ff      	movs	r2, #255	; 0xff
 80047a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	8979      	ldrh	r1, [r7, #10]
 80047ae:	4b51      	ldr	r3, [pc, #324]	; (80048f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fecc 	bl	8005554 <I2C_TransferConfig>
 80047bc:	e06c      	b.n	8004898 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	8979      	ldrh	r1, [r7, #10]
 80047d0:	4b48      	ldr	r3, [pc, #288]	; (80048f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 febb 	bl	8005554 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80047de:	e05b      	b.n	8004898 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	6a39      	ldr	r1, [r7, #32]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fcc8 	bl	800517a <I2C_WaitOnTXISFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e07b      	b.n	80048ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	781a      	ldrb	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d034      	beq.n	8004898 <HAL_I2C_Master_Transmit+0x184>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d130      	bne.n	8004898 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	2200      	movs	r2, #0
 800483e:	2180      	movs	r1, #128	; 0x80
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 fc4b 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e04d      	b.n	80048ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004854:	b29b      	uxth	r3, r3
 8004856:	2bff      	cmp	r3, #255	; 0xff
 8004858:	d90e      	bls.n	8004878 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	22ff      	movs	r2, #255	; 0xff
 800485e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	b2da      	uxtb	r2, r3
 8004866:	8979      	ldrh	r1, [r7, #10]
 8004868:	2300      	movs	r3, #0
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 fe6f 	bl	8005554 <I2C_TransferConfig>
 8004876:	e00f      	b.n	8004898 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004886:	b2da      	uxtb	r2, r3
 8004888:	8979      	ldrh	r1, [r7, #10]
 800488a:	2300      	movs	r3, #0
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fe5e 	bl	8005554 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d19e      	bne.n	80047e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	6a39      	ldr	r1, [r7, #32]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 fcae 	bl	8005208 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e01a      	b.n	80048ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2220      	movs	r2, #32
 80048bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6859      	ldr	r1, [r3, #4]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80048ca:	400b      	ands	r3, r1
 80048cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048e6:	2300      	movs	r3, #0
 80048e8:	e000      	b.n	80048ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80048ea:	2302      	movs	r3, #2
  }
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	80002000 	.word	0x80002000
 80048f8:	fe00e800 	.word	0xfe00e800

080048fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	461a      	mov	r2, r3
 8004908:	460b      	mov	r3, r1
 800490a:	817b      	strh	r3, [r7, #10]
 800490c:	4613      	mov	r3, r2
 800490e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b20      	cmp	r3, #32
 800491a:	f040 80db 	bne.w	8004ad4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_I2C_Master_Receive+0x30>
 8004928:	2302      	movs	r3, #2
 800492a:	e0d4      	b.n	8004ad6 <HAL_I2C_Master_Receive+0x1da>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004934:	f7fe fc34 	bl	80031a0 <HAL_GetTick>
 8004938:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	2319      	movs	r3, #25
 8004940:	2201      	movs	r2, #1
 8004942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fbc8 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e0bf      	b.n	8004ad6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2222      	movs	r2, #34	; 0x22
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2210      	movs	r2, #16
 8004962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	893a      	ldrh	r2, [r7, #8]
 8004976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	2bff      	cmp	r3, #255	; 0xff
 8004986:	d90e      	bls.n	80049a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	22ff      	movs	r2, #255	; 0xff
 800498c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	b2da      	uxtb	r2, r3
 8004994:	8979      	ldrh	r1, [r7, #10]
 8004996:	4b52      	ldr	r3, [pc, #328]	; (8004ae0 <HAL_I2C_Master_Receive+0x1e4>)
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fdd8 	bl	8005554 <I2C_TransferConfig>
 80049a4:	e06d      	b.n	8004a82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	8979      	ldrh	r1, [r7, #10]
 80049b8:	4b49      	ldr	r3, [pc, #292]	; (8004ae0 <HAL_I2C_Master_Receive+0x1e4>)
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fdc7 	bl	8005554 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80049c6:	e05c      	b.n	8004a82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	6a39      	ldr	r1, [r7, #32]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 fc5f 	bl	8005290 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e07c      	b.n	8004ad6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d034      	beq.n	8004a82 <HAL_I2C_Master_Receive+0x186>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d130      	bne.n	8004a82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	2200      	movs	r2, #0
 8004a28:	2180      	movs	r1, #128	; 0x80
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fb56 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e04d      	b.n	8004ad6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2bff      	cmp	r3, #255	; 0xff
 8004a42:	d90e      	bls.n	8004a62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	22ff      	movs	r2, #255	; 0xff
 8004a48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	8979      	ldrh	r1, [r7, #10]
 8004a52:	2300      	movs	r3, #0
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fd7a 	bl	8005554 <I2C_TransferConfig>
 8004a60:	e00f      	b.n	8004a82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	8979      	ldrh	r1, [r7, #10]
 8004a74:	2300      	movs	r3, #0
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 fd69 	bl	8005554 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d19d      	bne.n	80049c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	6a39      	ldr	r1, [r7, #32]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fbb9 	bl	8005208 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e01a      	b.n	8004ad6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6859      	ldr	r1, [r3, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <HAL_I2C_Master_Receive+0x1e8>)
 8004ab4:	400b      	ands	r3, r1
 8004ab6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e000      	b.n	8004ad6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
  }
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	80002400 	.word	0x80002400
 8004ae4:	fe00e800 	.word	0xfe00e800

08004ae8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	4608      	mov	r0, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	4603      	mov	r3, r0
 8004af8:	817b      	strh	r3, [r7, #10]
 8004afa:	460b      	mov	r3, r1
 8004afc:	813b      	strh	r3, [r7, #8]
 8004afe:	4613      	mov	r3, r2
 8004b00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	f040 80f9 	bne.w	8004d02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_I2C_Mem_Write+0x34>
 8004b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0ed      	b.n	8004d04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_I2C_Mem_Write+0x4e>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e0e6      	b.n	8004d04 <HAL_I2C_Mem_Write+0x21c>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b3e:	f7fe fb2f 	bl	80031a0 <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	2319      	movs	r3, #25
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fac3 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0d1      	b.n	8004d04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2221      	movs	r2, #33	; 0x21
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2240      	movs	r2, #64	; 0x40
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a3a      	ldr	r2, [r7, #32]
 8004b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b88:	88f8      	ldrh	r0, [r7, #6]
 8004b8a:	893a      	ldrh	r2, [r7, #8]
 8004b8c:	8979      	ldrh	r1, [r7, #10]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	4603      	mov	r3, r0
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f9d3 	bl	8004f44 <I2C_RequestMemoryWrite>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e0a9      	b.n	8004d04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2bff      	cmp	r3, #255	; 0xff
 8004bb8:	d90e      	bls.n	8004bd8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	22ff      	movs	r2, #255	; 0xff
 8004bbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	8979      	ldrh	r1, [r7, #10]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fcbf 	bl	8005554 <I2C_TransferConfig>
 8004bd6:	e00f      	b.n	8004bf8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	8979      	ldrh	r1, [r7, #10]
 8004bea:	2300      	movs	r3, #0
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fcae 	bl	8005554 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fabc 	bl	800517a <I2C_WaitOnTXISFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e07b      	b.n	8004d04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	781a      	ldrb	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d034      	beq.n	8004cb0 <HAL_I2C_Mem_Write+0x1c8>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d130      	bne.n	8004cb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	2200      	movs	r2, #0
 8004c56:	2180      	movs	r1, #128	; 0x80
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa3f 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e04d      	b.n	8004d04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2bff      	cmp	r3, #255	; 0xff
 8004c70:	d90e      	bls.n	8004c90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	22ff      	movs	r2, #255	; 0xff
 8004c76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	8979      	ldrh	r1, [r7, #10]
 8004c80:	2300      	movs	r3, #0
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fc63 	bl	8005554 <I2C_TransferConfig>
 8004c8e:	e00f      	b.n	8004cb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	8979      	ldrh	r1, [r7, #10]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fc52 	bl	8005554 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d19e      	bne.n	8004bf8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 faa2 	bl	8005208 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e01a      	b.n	8004d04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6859      	ldr	r1, [r3, #4]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_I2C_Mem_Write+0x224>)
 8004ce2:	400b      	ands	r3, r1
 8004ce4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e000      	b.n	8004d04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d02:	2302      	movs	r3, #2
  }
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	fe00e800 	.word	0xfe00e800

08004d10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	4608      	mov	r0, r1
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	817b      	strh	r3, [r7, #10]
 8004d22:	460b      	mov	r3, r1
 8004d24:	813b      	strh	r3, [r7, #8]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	f040 80fd 	bne.w	8004f32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_I2C_Mem_Read+0x34>
 8004d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d105      	bne.n	8004d50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0f1      	b.n	8004f34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_I2C_Mem_Read+0x4e>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e0ea      	b.n	8004f34 <HAL_I2C_Mem_Read+0x224>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d66:	f7fe fa1b 	bl	80031a0 <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2319      	movs	r3, #25
 8004d72:	2201      	movs	r2, #1
 8004d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f9af 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0d5      	b.n	8004f34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2222      	movs	r2, #34	; 0x22
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2240      	movs	r2, #64	; 0x40
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a3a      	ldr	r2, [r7, #32]
 8004da2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004da8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004db0:	88f8      	ldrh	r0, [r7, #6]
 8004db2:	893a      	ldrh	r2, [r7, #8]
 8004db4:	8979      	ldrh	r1, [r7, #10]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	9301      	str	r3, [sp, #4]
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f913 	bl	8004fec <I2C_RequestMemoryRead>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0ad      	b.n	8004f34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2bff      	cmp	r3, #255	; 0xff
 8004de0:	d90e      	bls.n	8004e00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	22ff      	movs	r2, #255	; 0xff
 8004de6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	8979      	ldrh	r1, [r7, #10]
 8004df0:	4b52      	ldr	r3, [pc, #328]	; (8004f3c <HAL_I2C_Mem_Read+0x22c>)
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 fbab 	bl	8005554 <I2C_TransferConfig>
 8004dfe:	e00f      	b.n	8004e20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	8979      	ldrh	r1, [r7, #10]
 8004e12:	4b4a      	ldr	r3, [pc, #296]	; (8004f3c <HAL_I2C_Mem_Read+0x22c>)
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fb9a 	bl	8005554 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	2200      	movs	r2, #0
 8004e28:	2104      	movs	r1, #4
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f956 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e07c      	b.n	8004f34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d034      	beq.n	8004ee0 <HAL_I2C_Mem_Read+0x1d0>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d130      	bne.n	8004ee0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	2200      	movs	r2, #0
 8004e86:	2180      	movs	r1, #128	; 0x80
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f927 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e04d      	b.n	8004f34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2bff      	cmp	r3, #255	; 0xff
 8004ea0:	d90e      	bls.n	8004ec0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	22ff      	movs	r2, #255	; 0xff
 8004ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	8979      	ldrh	r1, [r7, #10]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fb4b 	bl	8005554 <I2C_TransferConfig>
 8004ebe:	e00f      	b.n	8004ee0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	8979      	ldrh	r1, [r7, #10]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fb3a 	bl	8005554 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d19a      	bne.n	8004e20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f98a 	bl	8005208 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e01a      	b.n	8004f34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2220      	movs	r2, #32
 8004f04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6859      	ldr	r1, [r3, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <HAL_I2C_Mem_Read+0x230>)
 8004f12:	400b      	ands	r3, r1
 8004f14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e000      	b.n	8004f34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f32:	2302      	movs	r3, #2
  }
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	80002400 	.word	0x80002400
 8004f40:	fe00e800 	.word	0xfe00e800

08004f44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	4611      	mov	r1, r2
 8004f50:	461a      	mov	r2, r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	817b      	strh	r3, [r7, #10]
 8004f56:	460b      	mov	r3, r1
 8004f58:	813b      	strh	r3, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	8979      	ldrh	r1, [r7, #10]
 8004f64:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <I2C_RequestMemoryWrite+0xa4>)
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 faf1 	bl	8005554 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	69b9      	ldr	r1, [r7, #24]
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 f8ff 	bl	800517a <I2C_WaitOnTXISFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e02c      	b.n	8004fe0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d105      	bne.n	8004f98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f8c:	893b      	ldrh	r3, [r7, #8]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	629a      	str	r2, [r3, #40]	; 0x28
 8004f96:	e015      	b.n	8004fc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f98:	893b      	ldrh	r3, [r7, #8]
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	69b9      	ldr	r1, [r7, #24]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f8e5 	bl	800517a <I2C_WaitOnTXISFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e012      	b.n	8004fe0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fba:	893b      	ldrh	r3, [r7, #8]
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f884 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	80002000 	.word	0x80002000

08004fec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	817b      	strh	r3, [r7, #10]
 8004ffe:	460b      	mov	r3, r1
 8005000:	813b      	strh	r3, [r7, #8]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	8979      	ldrh	r1, [r7, #10]
 800500c:	4b20      	ldr	r3, [pc, #128]	; (8005090 <I2C_RequestMemoryRead+0xa4>)
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	2300      	movs	r3, #0
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fa9e 	bl	8005554 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	69b9      	ldr	r1, [r7, #24]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f8ac 	bl	800517a <I2C_WaitOnTXISFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e02c      	b.n	8005086 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800502c:	88fb      	ldrh	r3, [r7, #6]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d105      	bne.n	800503e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005032:	893b      	ldrh	r3, [r7, #8]
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28
 800503c:	e015      	b.n	800506a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800503e:	893b      	ldrh	r3, [r7, #8]
 8005040:	0a1b      	lsrs	r3, r3, #8
 8005042:	b29b      	uxth	r3, r3
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	69b9      	ldr	r1, [r7, #24]
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f892 	bl	800517a <I2C_WaitOnTXISFlagUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e012      	b.n	8005086 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005060:	893b      	ldrh	r3, [r7, #8]
 8005062:	b2da      	uxtb	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2200      	movs	r2, #0
 8005072:	2140      	movs	r1, #64	; 0x40
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f831 	bl	80050dc <I2C_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	80002000 	.word	0x80002000

08005094 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d103      	bne.n	80050b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d007      	beq.n	80050d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	619a      	str	r2, [r3, #24]
  }
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ec:	e031      	b.n	8005152 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050f4:	d02d      	beq.n	8005152 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fe f853 	bl	80031a0 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d122      	bne.n	8005152 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4013      	ands	r3, r2
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	429a      	cmp	r2, r3
 800511a:	bf0c      	ite	eq
 800511c:	2301      	moveq	r3, #1
 800511e:	2300      	movne	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	429a      	cmp	r2, r3
 8005128:	d113      	bne.n	8005152 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512e:	f043 0220 	orr.w	r2, r3, #32
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e00f      	b.n	8005172 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4013      	ands	r3, r2
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	bf0c      	ite	eq
 8005162:	2301      	moveq	r3, #1
 8005164:	2300      	movne	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	429a      	cmp	r2, r3
 800516e:	d0be      	beq.n	80050ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005186:	e033      	b.n	80051f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f901 	bl	8005394 <I2C_IsErrorOccurred>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e031      	b.n	8005200 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051a2:	d025      	beq.n	80051f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a4:	f7fd fffc 	bl	80031a0 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d302      	bcc.n	80051ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d11a      	bne.n	80051f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d013      	beq.n	80051f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051cc:	f043 0220 	orr.w	r2, r3, #32
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e007      	b.n	8005200 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d1c4      	bne.n	8005188 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005214:	e02f      	b.n	8005276 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f8ba 	bl	8005394 <I2C_IsErrorOccurred>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e02d      	b.n	8005286 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522a:	f7fd ffb9 	bl	80031a0 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	429a      	cmp	r2, r3
 8005238:	d302      	bcc.n	8005240 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d11a      	bne.n	8005276 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b20      	cmp	r3, #32
 800524c:	d013      	beq.n	8005276 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e007      	b.n	8005286 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b20      	cmp	r3, #32
 8005282:	d1c8      	bne.n	8005216 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800529c:	e06b      	b.n	8005376 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f876 	bl	8005394 <I2C_IsErrorOccurred>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e069      	b.n	8005386 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d138      	bne.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d105      	bne.n	80052da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e055      	b.n	8005386 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d107      	bne.n	80052f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2210      	movs	r2, #16
 80052ee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2204      	movs	r2, #4
 80052f4:	645a      	str	r2, [r3, #68]	; 0x44
 80052f6:	e002      	b.n	80052fe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2220      	movs	r2, #32
 8005304:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6859      	ldr	r1, [r3, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4b1f      	ldr	r3, [pc, #124]	; (8005390 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005312:	400b      	ands	r3, r1
 8005314:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e029      	b.n	8005386 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005332:	f7fd ff35 	bl	80031a0 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	429a      	cmp	r2, r3
 8005340:	d302      	bcc.n	8005348 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d116      	bne.n	8005376 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d00f      	beq.n	8005376 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e007      	b.n	8005386 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b04      	cmp	r3, #4
 8005382:	d18c      	bne.n	800529e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	fe00e800 	.word	0xfe00e800

08005394 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d068      	beq.n	8005492 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2210      	movs	r2, #16
 80053c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053c8:	e049      	b.n	800545e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d0:	d045      	beq.n	800545e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053d2:	f7fd fee5 	bl	80031a0 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d302      	bcc.n	80053e8 <I2C_IsErrorOccurred+0x54>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d13a      	bne.n	800545e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540a:	d121      	bne.n	8005450 <I2C_IsErrorOccurred+0xbc>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005412:	d01d      	beq.n	8005450 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005414:	7cfb      	ldrb	r3, [r7, #19]
 8005416:	2b20      	cmp	r3, #32
 8005418:	d01a      	beq.n	8005450 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005428:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800542a:	f7fd feb9 	bl	80031a0 <HAL_GetTick>
 800542e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005430:	e00e      	b.n	8005450 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005432:	f7fd feb5 	bl	80031a0 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b19      	cmp	r3, #25
 800543e:	d907      	bls.n	8005450 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	f043 0320 	orr.w	r3, r3, #32
 8005446:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800544e:	e006      	b.n	800545e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b20      	cmp	r3, #32
 800545c:	d1e9      	bne.n	8005432 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b20      	cmp	r3, #32
 800546a:	d003      	beq.n	8005474 <I2C_IsErrorOccurred+0xe0>
 800546c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0aa      	beq.n	80053ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005478:	2b00      	cmp	r3, #0
 800547a:	d103      	bne.n	8005484 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2220      	movs	r2, #32
 8005482:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	f043 0304 	orr.w	r3, r3, #4
 800548a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00b      	beq.n	80054bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	f043 0301 	orr.w	r3, r3, #1
 80054aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00b      	beq.n	80054de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	f043 0308 	orr.w	r3, r3, #8
 80054cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00b      	beq.n	8005500 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f043 0302 	orr.w	r3, r3, #2
 80054ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01c      	beq.n	8005542 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7ff fdc3 	bl	8005094 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6859      	ldr	r1, [r3, #4]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <I2C_IsErrorOccurred+0x1bc>)
 800551a:	400b      	ands	r3, r1
 800551c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2220      	movs	r2, #32
 800552e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005546:	4618      	mov	r0, r3
 8005548:	3728      	adds	r7, #40	; 0x28
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	fe00e800 	.word	0xfe00e800

08005554 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	817b      	strh	r3, [r7, #10]
 8005562:	4613      	mov	r3, r2
 8005564:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005566:	897b      	ldrh	r3, [r7, #10]
 8005568:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800556c:	7a7b      	ldrb	r3, [r7, #9]
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005574:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	4313      	orrs	r3, r2
 800557e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005582:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	0d5b      	lsrs	r3, r3, #21
 800558e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005592:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <I2C_TransferConfig+0x60>)
 8005594:	430b      	orrs	r3, r1
 8005596:	43db      	mvns	r3, r3
 8005598:	ea02 0103 	and.w	r1, r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	03ff63ff 	.word	0x03ff63ff

080055b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d138      	bne.n	8005640 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055d8:	2302      	movs	r3, #2
 80055da:	e032      	b.n	8005642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2224      	movs	r2, #36	; 0x24
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800560a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b20      	cmp	r3, #32
 8005662:	d139      	bne.n	80056d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800566e:	2302      	movs	r3, #2
 8005670:	e033      	b.n	80056da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2224      	movs	r2, #36	; 0x24
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e000      	b.n	80056da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056f8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f001 b823 	b.w	8006754 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800570e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005712:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 817d 	beq.w	8005a1e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005724:	4bbc      	ldr	r3, [pc, #752]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 030c 	and.w	r3, r3, #12
 800572c:	2b04      	cmp	r3, #4
 800572e:	d00c      	beq.n	800574a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005730:	4bb9      	ldr	r3, [pc, #740]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b08      	cmp	r3, #8
 800573a:	d15c      	bne.n	80057f6 <HAL_RCC_OscConfig+0x10e>
 800573c:	4bb6      	ldr	r3, [pc, #728]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005748:	d155      	bne.n	80057f6 <HAL_RCC_OscConfig+0x10e>
 800574a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800574e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005752:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005756:	fa93 f3a3 	rbit	r3, r3
 800575a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800575e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005762:	fab3 f383 	clz	r3, r3
 8005766:	b2db      	uxtb	r3, r3
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b01      	cmp	r3, #1
 8005774:	d102      	bne.n	800577c <HAL_RCC_OscConfig+0x94>
 8005776:	4ba8      	ldr	r3, [pc, #672]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	e015      	b.n	80057a8 <HAL_RCC_OscConfig+0xc0>
 800577c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005780:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005788:	fa93 f3a3 	rbit	r3, r3
 800578c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005794:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005798:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800579c:	fa93 f3a3 	rbit	r3, r3
 80057a0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80057a4:	4b9c      	ldr	r3, [pc, #624]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057ac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80057b0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80057b4:	fa92 f2a2 	rbit	r2, r2
 80057b8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80057bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80057c0:	fab2 f282 	clz	r2, r2
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	f042 0220 	orr.w	r2, r2, #32
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	f002 021f 	and.w	r2, r2, #31
 80057d0:	2101      	movs	r1, #1
 80057d2:	fa01 f202 	lsl.w	r2, r1, r2
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 811f 	beq.w	8005a1c <HAL_RCC_OscConfig+0x334>
 80057de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f040 8116 	bne.w	8005a1c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	f000 bfaf 	b.w	8006754 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005806:	d106      	bne.n	8005816 <HAL_RCC_OscConfig+0x12e>
 8005808:	4b83      	ldr	r3, [pc, #524]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a82      	ldr	r2, [pc, #520]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 800580e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	e036      	b.n	8005884 <HAL_RCC_OscConfig+0x19c>
 8005816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10c      	bne.n	8005840 <HAL_RCC_OscConfig+0x158>
 8005826:	4b7c      	ldr	r3, [pc, #496]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a7b      	ldr	r2, [pc, #492]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 800582c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	4b79      	ldr	r3, [pc, #484]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a78      	ldr	r2, [pc, #480]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e021      	b.n	8005884 <HAL_RCC_OscConfig+0x19c>
 8005840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005850:	d10c      	bne.n	800586c <HAL_RCC_OscConfig+0x184>
 8005852:	4b71      	ldr	r3, [pc, #452]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a70      	ldr	r2, [pc, #448]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4b6e      	ldr	r3, [pc, #440]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a6d      	ldr	r2, [pc, #436]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	e00b      	b.n	8005884 <HAL_RCC_OscConfig+0x19c>
 800586c:	4b6a      	ldr	r3, [pc, #424]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a69      	ldr	r2, [pc, #420]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	4b67      	ldr	r3, [pc, #412]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a66      	ldr	r2, [pc, #408]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 800587e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005882:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005884:	4b64      	ldr	r3, [pc, #400]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	f023 020f 	bic.w	r2, r3, #15
 800588c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005890:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	495f      	ldr	r1, [pc, #380]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 800589a:	4313      	orrs	r3, r2
 800589c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800589e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d059      	beq.n	8005962 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ae:	f7fd fc77 	bl	80031a0 <HAL_GetTick>
 80058b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b6:	e00a      	b.n	80058ce <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058b8:	f7fd fc72 	bl	80031a0 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b64      	cmp	r3, #100	; 0x64
 80058c6:	d902      	bls.n	80058ce <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	f000 bf43 	b.w	8006754 <HAL_RCC_OscConfig+0x106c>
 80058ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058d2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80058da:	fa93 f3a3 	rbit	r3, r3
 80058de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80058e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e6:	fab3 f383 	clz	r3, r3
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d102      	bne.n	8005900 <HAL_RCC_OscConfig+0x218>
 80058fa:	4b47      	ldr	r3, [pc, #284]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	e015      	b.n	800592c <HAL_RCC_OscConfig+0x244>
 8005900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005904:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005908:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800590c:	fa93 f3a3 	rbit	r3, r3
 8005910:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005918:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800591c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005920:	fa93 f3a3 	rbit	r3, r3
 8005924:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005928:	4b3b      	ldr	r3, [pc, #236]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005930:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005934:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005938:	fa92 f2a2 	rbit	r2, r2
 800593c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005940:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005944:	fab2 f282 	clz	r2, r2
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	f042 0220 	orr.w	r2, r2, #32
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	f002 021f 	and.w	r2, r2, #31
 8005954:	2101      	movs	r1, #1
 8005956:	fa01 f202 	lsl.w	r2, r1, r2
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ab      	beq.n	80058b8 <HAL_RCC_OscConfig+0x1d0>
 8005960:	e05d      	b.n	8005a1e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005962:	f7fd fc1d 	bl	80031a0 <HAL_GetTick>
 8005966:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800596a:	e00a      	b.n	8005982 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800596c:	f7fd fc18 	bl	80031a0 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b64      	cmp	r3, #100	; 0x64
 800597a:	d902      	bls.n	8005982 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	f000 bee9 	b.w	8006754 <HAL_RCC_OscConfig+0x106c>
 8005982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005986:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005996:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800599a:	fab3 f383 	clz	r3, r3
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d102      	bne.n	80059b4 <HAL_RCC_OscConfig+0x2cc>
 80059ae:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	e015      	b.n	80059e0 <HAL_RCC_OscConfig+0x2f8>
 80059b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059b8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80059c0:	fa93 f3a3 	rbit	r3, r3
 80059c4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80059c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059cc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80059d0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80059d4:	fa93 f3a3 	rbit	r3, r3
 80059d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80059dc:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <HAL_RCC_OscConfig+0x330>)
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059e4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80059e8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80059ec:	fa92 f2a2 	rbit	r2, r2
 80059f0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80059f4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80059f8:	fab2 f282 	clz	r2, r2
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	f042 0220 	orr.w	r2, r2, #32
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	f002 021f 	and.w	r2, r2, #31
 8005a08:	2101      	movs	r1, #1
 8005a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1ab      	bne.n	800596c <HAL_RCC_OscConfig+0x284>
 8005a14:	e003      	b.n	8005a1e <HAL_RCC_OscConfig+0x336>
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 817d 	beq.w	8005d2e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005a34:	4ba6      	ldr	r3, [pc, #664]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 030c 	and.w	r3, r3, #12
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005a40:	4ba3      	ldr	r3, [pc, #652]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f003 030c 	and.w	r3, r3, #12
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d172      	bne.n	8005b32 <HAL_RCC_OscConfig+0x44a>
 8005a4c:	4ba0      	ldr	r3, [pc, #640]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d16c      	bne.n	8005b32 <HAL_RCC_OscConfig+0x44a>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005a62:	fa93 f3a3 	rbit	r3, r3
 8005a66:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005a6a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6e:	fab3 f383 	clz	r3, r3
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d102      	bne.n	8005a88 <HAL_RCC_OscConfig+0x3a0>
 8005a82:	4b93      	ldr	r3, [pc, #588]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	e013      	b.n	8005ab0 <HAL_RCC_OscConfig+0x3c8>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005a92:	fa93 f3a3 	rbit	r3, r3
 8005a96:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005aa0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005aa4:	fa93 f3a3 	rbit	r3, r3
 8005aa8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005aac:	4b88      	ldr	r3, [pc, #544]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005ab6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005aba:	fa92 f2a2 	rbit	r2, r2
 8005abe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005ac2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005ac6:	fab2 f282 	clz	r2, r2
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	f042 0220 	orr.w	r2, r2, #32
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	f002 021f 	and.w	r2, r2, #31
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <HAL_RCC_OscConfig+0x410>
 8005ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d002      	beq.n	8005af8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f000 be2e 	b.w	8006754 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af8:	4b75      	ldr	r3, [pc, #468]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	21f8      	movs	r1, #248	; 0xf8
 8005b0e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b12:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005b16:	fa91 f1a1 	rbit	r1, r1
 8005b1a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005b1e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005b22:	fab1 f181 	clz	r1, r1
 8005b26:	b2c9      	uxtb	r1, r1
 8005b28:	408b      	lsls	r3, r1
 8005b2a:	4969      	ldr	r1, [pc, #420]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b30:	e0fd      	b.n	8005d2e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 8088 	beq.w	8005c54 <HAL_RCC_OscConfig+0x56c>
 8005b44:	2301      	movs	r3, #1
 8005b46:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005b4e:	fa93 f3a3 	rbit	r3, r3
 8005b52:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005b56:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b5a:	fab3 f383 	clz	r3, r3
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b70:	f7fd fb16 	bl	80031a0 <HAL_GetTick>
 8005b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b78:	e00a      	b.n	8005b90 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b7a:	f7fd fb11 	bl	80031a0 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d902      	bls.n	8005b90 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	f000 bde2 	b.w	8006754 <HAL_RCC_OscConfig+0x106c>
 8005b90:	2302      	movs	r3, #2
 8005b92:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b96:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005b9a:	fa93 f3a3 	rbit	r3, r3
 8005b9e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005ba2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba6:	fab3 f383 	clz	r3, r3
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d102      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x4d8>
 8005bba:	4b45      	ldr	r3, [pc, #276]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	e013      	b.n	8005be8 <HAL_RCC_OscConfig+0x500>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005bca:	fa93 f3a3 	rbit	r3, r3
 8005bce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005bd8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005bdc:	fa93 f3a3 	rbit	r3, r3
 8005be0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005be4:	4b3a      	ldr	r3, [pc, #232]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	2202      	movs	r2, #2
 8005bea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005bee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005bf2:	fa92 f2a2 	rbit	r2, r2
 8005bf6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005bfa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005bfe:	fab2 f282 	clz	r2, r2
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	f042 0220 	orr.w	r2, r2, #32
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	f002 021f 	and.w	r2, r2, #31
 8005c0e:	2101      	movs	r1, #1
 8005c10:	fa01 f202 	lsl.w	r2, r1, r2
 8005c14:	4013      	ands	r3, r2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0af      	beq.n	8005b7a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c1a:	4b2d      	ldr	r3, [pc, #180]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	21f8      	movs	r1, #248	; 0xf8
 8005c30:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c34:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005c38:	fa91 f1a1 	rbit	r1, r1
 8005c3c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005c40:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005c44:	fab1 f181 	clz	r1, r1
 8005c48:	b2c9      	uxtb	r1, r1
 8005c4a:	408b      	lsls	r3, r1
 8005c4c:	4920      	ldr	r1, [pc, #128]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	600b      	str	r3, [r1, #0]
 8005c52:	e06c      	b.n	8005d2e <HAL_RCC_OscConfig+0x646>
 8005c54:	2301      	movs	r3, #1
 8005c56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005c5e:	fa93 f3a3 	rbit	r3, r3
 8005c62:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005c66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c6a:	fab3 f383 	clz	r3, r3
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c80:	f7fd fa8e 	bl	80031a0 <HAL_GetTick>
 8005c84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c88:	e00a      	b.n	8005ca0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c8a:	f7fd fa89 	bl	80031a0 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d902      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	f000 bd5a 	b.w	8006754 <HAL_RCC_OscConfig+0x106c>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005caa:	fa93 f3a3 	rbit	r3, r3
 8005cae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cb6:	fab3 f383 	clz	r3, r3
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d104      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x5ec>
 8005cca:	4b01      	ldr	r3, [pc, #4]	; (8005cd0 <HAL_RCC_OscConfig+0x5e8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	e015      	b.n	8005cfc <HAL_RCC_OscConfig+0x614>
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cde:	fa93 f3a3 	rbit	r3, r3
 8005ce2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005cec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cf0:	fa93 f3a3 	rbit	r3, r3
 8005cf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cf8:	4bc8      	ldr	r3, [pc, #800]	; (800601c <HAL_RCC_OscConfig+0x934>)
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005d02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005d06:	fa92 f2a2 	rbit	r2, r2
 8005d0a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005d0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005d12:	fab2 f282 	clz	r2, r2
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	f042 0220 	orr.w	r2, r2, #32
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	f002 021f 	and.w	r2, r2, #31
 8005d22:	2101      	movs	r1, #1
 8005d24:	fa01 f202 	lsl.w	r2, r1, r2
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1ad      	bne.n	8005c8a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8110 	beq.w	8005f64 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d079      	beq.n	8005e48 <HAL_RCC_OscConfig+0x760>
 8005d54:	2301      	movs	r3, #1
 8005d56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d5e:	fa93 f3a3 	rbit	r3, r3
 8005d62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d6a:	fab3 f383 	clz	r3, r3
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	4bab      	ldr	r3, [pc, #684]	; (8006020 <HAL_RCC_OscConfig+0x938>)
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7e:	f7fd fa0f 	bl	80031a0 <HAL_GetTick>
 8005d82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d88:	f7fd fa0a 	bl	80031a0 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d902      	bls.n	8005d9e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	f000 bcdb 	b.w	8006754 <HAL_RCC_OscConfig+0x106c>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005da8:	fa93 f3a3 	rbit	r3, r3
 8005dac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005db8:	2202      	movs	r2, #2
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dc0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	fa93 f2a3 	rbit	r2, r3
 8005dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ddc:	2202      	movs	r2, #2
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	fa93 f2a3 	rbit	r2, r3
 8005dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005df6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005df8:	4b88      	ldr	r3, [pc, #544]	; (800601c <HAL_RCC_OscConfig+0x934>)
 8005dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e04:	2102      	movs	r1, #2
 8005e06:	6019      	str	r1, [r3, #0]
 8005e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	fa93 f1a3 	rbit	r1, r3
 8005e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005e1e:	6019      	str	r1, [r3, #0]
  return result;
 8005e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e24:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	fab3 f383 	clz	r3, r3
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0a0      	beq.n	8005d88 <HAL_RCC_OscConfig+0x6a0>
 8005e46:	e08d      	b.n	8005f64 <HAL_RCC_OscConfig+0x87c>
 8005e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e50:	2201      	movs	r2, #1
 8005e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	fa93 f2a3 	rbit	r2, r3
 8005e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e6a:	601a      	str	r2, [r3, #0]
  return result;
 8005e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e76:	fab3 f383 	clz	r3, r3
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4b68      	ldr	r3, [pc, #416]	; (8006020 <HAL_RCC_OscConfig+0x938>)
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	461a      	mov	r2, r3
 8005e86:	2300      	movs	r3, #0
 8005e88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e8a:	f7fd f989 	bl	80031a0 <HAL_GetTick>
 8005e8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e92:	e00a      	b.n	8005eaa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e94:	f7fd f984 	bl	80031a0 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d902      	bls.n	8005eaa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	f000 bc55 	b.w	8006754 <HAL_RCC_OscConfig+0x106c>
 8005eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	fa93 f2a3 	rbit	r2, r3
 8005ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ec8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ede:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	fa93 f2a3 	rbit	r2, r3
 8005ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efa:	2202      	movs	r2, #2
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	fa93 f2a3 	rbit	r2, r3
 8005f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005f14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f16:	4b41      	ldr	r3, [pc, #260]	; (800601c <HAL_RCC_OscConfig+0x934>)
 8005f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f1e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f22:	2102      	movs	r1, #2
 8005f24:	6019      	str	r1, [r3, #0]
 8005f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	fa93 f1a3 	rbit	r1, r3
 8005f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005f3c:	6019      	str	r1, [r3, #0]
  return result;
 8005f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f42:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	fab3 f383 	clz	r3, r3
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2101      	movs	r1, #1
 8005f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d197      	bne.n	8005e94 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 81a1 	beq.w	80062bc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f80:	4b26      	ldr	r3, [pc, #152]	; (800601c <HAL_RCC_OscConfig+0x934>)
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d116      	bne.n	8005fba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f8c:	4b23      	ldr	r3, [pc, #140]	; (800601c <HAL_RCC_OscConfig+0x934>)
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	4a22      	ldr	r2, [pc, #136]	; (800601c <HAL_RCC_OscConfig+0x934>)
 8005f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f96:	61d3      	str	r3, [r2, #28]
 8005f98:	4b20      	ldr	r3, [pc, #128]	; (800601c <HAL_RCC_OscConfig+0x934>)
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fa4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fae:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005fb2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fba:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <HAL_RCC_OscConfig+0x93c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d11a      	bne.n	8005ffc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc6:	4b17      	ldr	r3, [pc, #92]	; (8006024 <HAL_RCC_OscConfig+0x93c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a16      	ldr	r2, [pc, #88]	; (8006024 <HAL_RCC_OscConfig+0x93c>)
 8005fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fd2:	f7fd f8e5 	bl	80031a0 <HAL_GetTick>
 8005fd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fda:	e009      	b.n	8005ff0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fdc:	f7fd f8e0 	bl	80031a0 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b64      	cmp	r3, #100	; 0x64
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e3b1      	b.n	8006754 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <HAL_RCC_OscConfig+0x93c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0ef      	beq.n	8005fdc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006000:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10d      	bne.n	8006028 <HAL_RCC_OscConfig+0x940>
 800600c:	4b03      	ldr	r3, [pc, #12]	; (800601c <HAL_RCC_OscConfig+0x934>)
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	4a02      	ldr	r2, [pc, #8]	; (800601c <HAL_RCC_OscConfig+0x934>)
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	6213      	str	r3, [r2, #32]
 8006018:	e03c      	b.n	8006094 <HAL_RCC_OscConfig+0x9ac>
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000
 8006020:	10908120 	.word	0x10908120
 8006024:	40007000 	.word	0x40007000
 8006028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800602c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10c      	bne.n	8006052 <HAL_RCC_OscConfig+0x96a>
 8006038:	4bc1      	ldr	r3, [pc, #772]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	4ac0      	ldr	r2, [pc, #768]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	6213      	str	r3, [r2, #32]
 8006044:	4bbe      	ldr	r3, [pc, #760]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	4abd      	ldr	r2, [pc, #756]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 800604a:	f023 0304 	bic.w	r3, r3, #4
 800604e:	6213      	str	r3, [r2, #32]
 8006050:	e020      	b.n	8006094 <HAL_RCC_OscConfig+0x9ac>
 8006052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	2b05      	cmp	r3, #5
 8006060:	d10c      	bne.n	800607c <HAL_RCC_OscConfig+0x994>
 8006062:	4bb7      	ldr	r3, [pc, #732]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	4ab6      	ldr	r2, [pc, #728]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 8006068:	f043 0304 	orr.w	r3, r3, #4
 800606c:	6213      	str	r3, [r2, #32]
 800606e:	4bb4      	ldr	r3, [pc, #720]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	4ab3      	ldr	r2, [pc, #716]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 8006074:	f043 0301 	orr.w	r3, r3, #1
 8006078:	6213      	str	r3, [r2, #32]
 800607a:	e00b      	b.n	8006094 <HAL_RCC_OscConfig+0x9ac>
 800607c:	4bb0      	ldr	r3, [pc, #704]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	4aaf      	ldr	r2, [pc, #700]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	6213      	str	r3, [r2, #32]
 8006088:	4bad      	ldr	r3, [pc, #692]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	4aac      	ldr	r2, [pc, #688]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 800608e:	f023 0304 	bic.w	r3, r3, #4
 8006092:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006098:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8081 	beq.w	80061a8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a6:	f7fd f87b 	bl	80031a0 <HAL_GetTick>
 80060aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ae:	e00b      	b.n	80060c8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b0:	f7fd f876 	bl	80031a0 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e345      	b.n	8006754 <HAL_RCC_OscConfig+0x106c>
 80060c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80060d0:	2202      	movs	r2, #2
 80060d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	fa93 f2a3 	rbit	r2, r3
 80060e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060f0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80060f4:	2202      	movs	r2, #2
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	fa93 f2a3 	rbit	r2, r3
 8006106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800610a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800610e:	601a      	str	r2, [r3, #0]
  return result;
 8006110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006114:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006118:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611a:	fab3 f383 	clz	r3, r3
 800611e:	b2db      	uxtb	r3, r3
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	b2db      	uxtb	r3, r3
 8006124:	f043 0302 	orr.w	r3, r3, #2
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d102      	bne.n	8006134 <HAL_RCC_OscConfig+0xa4c>
 800612e:	4b84      	ldr	r3, [pc, #528]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	e013      	b.n	800615c <HAL_RCC_OscConfig+0xa74>
 8006134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006138:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800613c:	2202      	movs	r2, #2
 800613e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006144:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	fa93 f2a3 	rbit	r2, r3
 800614e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006152:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	4b79      	ldr	r3, [pc, #484]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006160:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006164:	2102      	movs	r1, #2
 8006166:	6011      	str	r1, [r2, #0]
 8006168:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800616c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	fa92 f1a2 	rbit	r1, r2
 8006176:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800617a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800617e:	6011      	str	r1, [r2, #0]
  return result;
 8006180:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006184:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	fab2 f282 	clz	r2, r2
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	f002 021f 	and.w	r2, r2, #31
 800619a:	2101      	movs	r1, #1
 800619c:	fa01 f202 	lsl.w	r2, r1, r2
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d084      	beq.n	80060b0 <HAL_RCC_OscConfig+0x9c8>
 80061a6:	e07f      	b.n	80062a8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a8:	f7fc fffa 	bl	80031a0 <HAL_GetTick>
 80061ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061b0:	e00b      	b.n	80061ca <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061b2:	f7fc fff5 	bl	80031a0 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e2c4      	b.n	8006754 <HAL_RCC_OscConfig+0x106c>
 80061ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061ce:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80061d2:	2202      	movs	r2, #2
 80061d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	fa93 f2a3 	rbit	r2, r3
 80061e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061e8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80061f6:	2202      	movs	r2, #2
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	fa93 f2a3 	rbit	r2, r3
 8006208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800620c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006210:	601a      	str	r2, [r3, #0]
  return result;
 8006212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006216:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800621a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800621c:	fab3 f383 	clz	r3, r3
 8006220:	b2db      	uxtb	r3, r3
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f043 0302 	orr.w	r3, r3, #2
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d102      	bne.n	8006236 <HAL_RCC_OscConfig+0xb4e>
 8006230:	4b43      	ldr	r3, [pc, #268]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	e013      	b.n	800625e <HAL_RCC_OscConfig+0xb76>
 8006236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800623a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800623e:	2202      	movs	r2, #2
 8006240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006246:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	fa93 f2a3 	rbit	r2, r3
 8006250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006254:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	4b39      	ldr	r3, [pc, #228]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006262:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006266:	2102      	movs	r1, #2
 8006268:	6011      	str	r1, [r2, #0]
 800626a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800626e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	fa92 f1a2 	rbit	r1, r2
 8006278:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800627c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006280:	6011      	str	r1, [r2, #0]
  return result;
 8006282:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006286:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	fab2 f282 	clz	r2, r2
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	f002 021f 	and.w	r2, r2, #31
 800629c:	2101      	movs	r1, #1
 800629e:	fa01 f202 	lsl.w	r2, r1, r2
 80062a2:	4013      	ands	r3, r2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d184      	bne.n	80061b2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d105      	bne.n	80062bc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b0:	4b23      	ldr	r3, [pc, #140]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	4a22      	ldr	r2, [pc, #136]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 80062b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8242 	beq.w	8006752 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ce:	4b1c      	ldr	r3, [pc, #112]	; (8006340 <HAL_RCC_OscConfig+0xc58>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f003 030c 	and.w	r3, r3, #12
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	f000 8213 	beq.w	8006702 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	f040 8162 	bne.w	80065b2 <HAL_RCC_OscConfig+0xeca>
 80062ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062f2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80062f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006300:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	fa93 f2a3 	rbit	r2, r3
 800630a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800630e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006312:	601a      	str	r2, [r3, #0]
  return result;
 8006314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006318:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800631c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631e:	fab3 f383 	clz	r3, r3
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006328:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	461a      	mov	r2, r3
 8006330:	2300      	movs	r3, #0
 8006332:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006334:	f7fc ff34 	bl	80031a0 <HAL_GetTick>
 8006338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800633c:	e00c      	b.n	8006358 <HAL_RCC_OscConfig+0xc70>
 800633e:	bf00      	nop
 8006340:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006344:	f7fc ff2c 	bl	80031a0 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e1fd      	b.n	8006754 <HAL_RCC_OscConfig+0x106c>
 8006358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800635c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006360:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800636a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	fa93 f2a3 	rbit	r2, r3
 8006374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006378:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800637c:	601a      	str	r2, [r3, #0]
  return result;
 800637e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006382:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006386:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006388:	fab3 f383 	clz	r3, r3
 800638c:	b2db      	uxtb	r3, r3
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f043 0301 	orr.w	r3, r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b01      	cmp	r3, #1
 800639a:	d102      	bne.n	80063a2 <HAL_RCC_OscConfig+0xcba>
 800639c:	4bb0      	ldr	r3, [pc, #704]	; (8006660 <HAL_RCC_OscConfig+0xf78>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	e027      	b.n	80063f2 <HAL_RCC_OscConfig+0xd0a>
 80063a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80063aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	fa93 f2a3 	rbit	r2, r3
 80063be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063c2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063cc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80063d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063da:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	fa93 f2a3 	rbit	r2, r3
 80063e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063e8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	4b9c      	ldr	r3, [pc, #624]	; (8006660 <HAL_RCC_OscConfig+0xf78>)
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063f6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80063fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80063fe:	6011      	str	r1, [r2, #0]
 8006400:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006404:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	fa92 f1a2 	rbit	r1, r2
 800640e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006412:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006416:	6011      	str	r1, [r2, #0]
  return result;
 8006418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800641c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	fab2 f282 	clz	r2, r2
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	f042 0220 	orr.w	r2, r2, #32
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	f002 021f 	and.w	r2, r2, #31
 8006432:	2101      	movs	r1, #1
 8006434:	fa01 f202 	lsl.w	r2, r1, r2
 8006438:	4013      	ands	r3, r2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d182      	bne.n	8006344 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800643e:	4b88      	ldr	r3, [pc, #544]	; (8006660 <HAL_RCC_OscConfig+0xf78>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800644a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006456:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	430b      	orrs	r3, r1
 8006460:	497f      	ldr	r1, [pc, #508]	; (8006660 <HAL_RCC_OscConfig+0xf78>)
 8006462:	4313      	orrs	r3, r2
 8006464:	604b      	str	r3, [r1, #4]
 8006466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800646a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800646e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006478:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	fa93 f2a3 	rbit	r2, r3
 8006482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006486:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800648a:	601a      	str	r2, [r3, #0]
  return result;
 800648c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006490:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006494:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006496:	fab3 f383 	clz	r3, r3
 800649a:	b2db      	uxtb	r3, r3
 800649c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80064a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	461a      	mov	r2, r3
 80064a8:	2301      	movs	r3, #1
 80064aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ac:	f7fc fe78 	bl	80031a0 <HAL_GetTick>
 80064b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064b4:	e009      	b.n	80064ca <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064b6:	f7fc fe73 	bl	80031a0 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e144      	b.n	8006754 <HAL_RCC_OscConfig+0x106c>
 80064ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ce:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80064d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064dc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	fa93 f2a3 	rbit	r2, r3
 80064e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ea:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80064ee:	601a      	str	r2, [r3, #0]
  return result;
 80064f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064f4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80064f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064fa:	fab3 f383 	clz	r3, r3
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	095b      	lsrs	r3, r3, #5
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b01      	cmp	r3, #1
 800650c:	d102      	bne.n	8006514 <HAL_RCC_OscConfig+0xe2c>
 800650e:	4b54      	ldr	r3, [pc, #336]	; (8006660 <HAL_RCC_OscConfig+0xf78>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	e027      	b.n	8006564 <HAL_RCC_OscConfig+0xe7c>
 8006514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006518:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800651c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006526:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	fa93 f2a3 	rbit	r2, r3
 8006530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006534:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800653e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800654c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	fa93 f2a3 	rbit	r2, r3
 8006556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800655a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	4b3f      	ldr	r3, [pc, #252]	; (8006660 <HAL_RCC_OscConfig+0xf78>)
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006568:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800656c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006570:	6011      	str	r1, [r2, #0]
 8006572:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006576:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	fa92 f1a2 	rbit	r1, r2
 8006580:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006584:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006588:	6011      	str	r1, [r2, #0]
  return result;
 800658a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800658e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	fab2 f282 	clz	r2, r2
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	f042 0220 	orr.w	r2, r2, #32
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	f002 021f 	and.w	r2, r2, #31
 80065a4:	2101      	movs	r1, #1
 80065a6:	fa01 f202 	lsl.w	r2, r1, r2
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d082      	beq.n	80064b6 <HAL_RCC_OscConfig+0xdce>
 80065b0:	e0cf      	b.n	8006752 <HAL_RCC_OscConfig+0x106a>
 80065b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065b6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80065ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065c4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	fa93 f2a3 	rbit	r2, r3
 80065ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80065d6:	601a      	str	r2, [r3, #0]
  return result;
 80065d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065dc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80065e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065e2:	fab3 f383 	clz	r3, r3
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80065ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	461a      	mov	r2, r3
 80065f4:	2300      	movs	r3, #0
 80065f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f8:	f7fc fdd2 	bl	80031a0 <HAL_GetTick>
 80065fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006600:	e009      	b.n	8006616 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006602:	f7fc fdcd 	bl	80031a0 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e09e      	b.n	8006754 <HAL_RCC_OscConfig+0x106c>
 8006616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800661a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800661e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006628:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	fa93 f2a3 	rbit	r2, r3
 8006632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006636:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800663a:	601a      	str	r2, [r3, #0]
  return result;
 800663c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006640:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006644:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006646:	fab3 f383 	clz	r3, r3
 800664a:	b2db      	uxtb	r3, r3
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f043 0301 	orr.w	r3, r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b01      	cmp	r3, #1
 8006658:	d104      	bne.n	8006664 <HAL_RCC_OscConfig+0xf7c>
 800665a:	4b01      	ldr	r3, [pc, #4]	; (8006660 <HAL_RCC_OscConfig+0xf78>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	e029      	b.n	80066b4 <HAL_RCC_OscConfig+0xfcc>
 8006660:	40021000 	.word	0x40021000
 8006664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006668:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800666c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006676:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	fa93 f2a3 	rbit	r2, r3
 8006680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006684:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800668e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800669c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	fa93 f2a3 	rbit	r2, r3
 80066a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	4b2b      	ldr	r3, [pc, #172]	; (8006760 <HAL_RCC_OscConfig+0x1078>)
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066b8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80066bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80066c0:	6011      	str	r1, [r2, #0]
 80066c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066c6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80066ca:	6812      	ldr	r2, [r2, #0]
 80066cc:	fa92 f1a2 	rbit	r1, r2
 80066d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066d4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80066d8:	6011      	str	r1, [r2, #0]
  return result;
 80066da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066de:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	fab2 f282 	clz	r2, r2
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	f042 0220 	orr.w	r2, r2, #32
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	f002 021f 	and.w	r2, r2, #31
 80066f4:	2101      	movs	r1, #1
 80066f6:	fa01 f202 	lsl.w	r2, r1, r2
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d180      	bne.n	8006602 <HAL_RCC_OscConfig+0xf1a>
 8006700:	e027      	b.n	8006752 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e01e      	b.n	8006754 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006716:	4b12      	ldr	r3, [pc, #72]	; (8006760 <HAL_RCC_OscConfig+0x1078>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800671e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006722:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800672a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	429a      	cmp	r2, r3
 8006734:	d10b      	bne.n	800674e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006736:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800673a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800673e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006742:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800674a:	429a      	cmp	r2, r3
 800674c:	d001      	beq.n	8006752 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	40021000 	.word	0x40021000

08006764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b09e      	sub	sp, #120	; 0x78
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e162      	b.n	8006a42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800677c:	4b90      	ldr	r3, [pc, #576]	; (80069c0 <HAL_RCC_ClockConfig+0x25c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d910      	bls.n	80067ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800678a:	4b8d      	ldr	r3, [pc, #564]	; (80069c0 <HAL_RCC_ClockConfig+0x25c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f023 0207 	bic.w	r2, r3, #7
 8006792:	498b      	ldr	r1, [pc, #556]	; (80069c0 <HAL_RCC_ClockConfig+0x25c>)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	4313      	orrs	r3, r2
 8006798:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800679a:	4b89      	ldr	r3, [pc, #548]	; (80069c0 <HAL_RCC_ClockConfig+0x25c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d001      	beq.n	80067ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e14a      	b.n	8006a42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b8:	4b82      	ldr	r3, [pc, #520]	; (80069c4 <HAL_RCC_ClockConfig+0x260>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	497f      	ldr	r1, [pc, #508]	; (80069c4 <HAL_RCC_ClockConfig+0x260>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 80dc 	beq.w	8006990 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d13c      	bne.n	800685a <HAL_RCC_ClockConfig+0xf6>
 80067e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067e8:	fa93 f3a3 	rbit	r3, r3
 80067ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80067ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f0:	fab3 f383 	clz	r3, r3
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	d102      	bne.n	800680a <HAL_RCC_ClockConfig+0xa6>
 8006804:	4b6f      	ldr	r3, [pc, #444]	; (80069c4 <HAL_RCC_ClockConfig+0x260>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	e00f      	b.n	800682a <HAL_RCC_ClockConfig+0xc6>
 800680a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800680e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006812:	fa93 f3a3 	rbit	r3, r3
 8006816:	667b      	str	r3, [r7, #100]	; 0x64
 8006818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800681c:	663b      	str	r3, [r7, #96]	; 0x60
 800681e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006820:	fa93 f3a3 	rbit	r3, r3
 8006824:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006826:	4b67      	ldr	r3, [pc, #412]	; (80069c4 <HAL_RCC_ClockConfig+0x260>)
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800682e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006830:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006832:	fa92 f2a2 	rbit	r2, r2
 8006836:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006838:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800683a:	fab2 f282 	clz	r2, r2
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	f042 0220 	orr.w	r2, r2, #32
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	f002 021f 	and.w	r2, r2, #31
 800684a:	2101      	movs	r1, #1
 800684c:	fa01 f202 	lsl.w	r2, r1, r2
 8006850:	4013      	ands	r3, r2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d17b      	bne.n	800694e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e0f3      	b.n	8006a42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b02      	cmp	r3, #2
 8006860:	d13c      	bne.n	80068dc <HAL_RCC_ClockConfig+0x178>
 8006862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006866:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686a:	fa93 f3a3 	rbit	r3, r3
 800686e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006872:	fab3 f383 	clz	r3, r3
 8006876:	b2db      	uxtb	r3, r3
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f043 0301 	orr.w	r3, r3, #1
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	d102      	bne.n	800688c <HAL_RCC_ClockConfig+0x128>
 8006886:	4b4f      	ldr	r3, [pc, #316]	; (80069c4 <HAL_RCC_ClockConfig+0x260>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	e00f      	b.n	80068ac <HAL_RCC_ClockConfig+0x148>
 800688c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006890:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006894:	fa93 f3a3 	rbit	r3, r3
 8006898:	647b      	str	r3, [r7, #68]	; 0x44
 800689a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800689e:	643b      	str	r3, [r7, #64]	; 0x40
 80068a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a2:	fa93 f3a3 	rbit	r3, r3
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a8:	4b46      	ldr	r3, [pc, #280]	; (80069c4 <HAL_RCC_ClockConfig+0x260>)
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80068b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068b4:	fa92 f2a2 	rbit	r2, r2
 80068b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80068ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068bc:	fab2 f282 	clz	r2, r2
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	f042 0220 	orr.w	r2, r2, #32
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	f002 021f 	and.w	r2, r2, #31
 80068cc:	2101      	movs	r1, #1
 80068ce:	fa01 f202 	lsl.w	r2, r1, r2
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d13a      	bne.n	800694e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e0b2      	b.n	8006a42 <HAL_RCC_ClockConfig+0x2de>
 80068dc:	2302      	movs	r3, #2
 80068de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e2:	fa93 f3a3 	rbit	r3, r3
 80068e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ea:	fab3 f383 	clz	r3, r3
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f043 0301 	orr.w	r3, r3, #1
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d102      	bne.n	8006904 <HAL_RCC_ClockConfig+0x1a0>
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <HAL_RCC_ClockConfig+0x260>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	e00d      	b.n	8006920 <HAL_RCC_ClockConfig+0x1bc>
 8006904:	2302      	movs	r3, #2
 8006906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	fa93 f3a3 	rbit	r3, r3
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
 8006910:	2302      	movs	r3, #2
 8006912:	623b      	str	r3, [r7, #32]
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	fa93 f3a3 	rbit	r3, r3
 800691a:	61fb      	str	r3, [r7, #28]
 800691c:	4b29      	ldr	r3, [pc, #164]	; (80069c4 <HAL_RCC_ClockConfig+0x260>)
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	2202      	movs	r2, #2
 8006922:	61ba      	str	r2, [r7, #24]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	fa92 f2a2 	rbit	r2, r2
 800692a:	617a      	str	r2, [r7, #20]
  return result;
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	fab2 f282 	clz	r2, r2
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	f042 0220 	orr.w	r2, r2, #32
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	f002 021f 	and.w	r2, r2, #31
 800693e:	2101      	movs	r1, #1
 8006940:	fa01 f202 	lsl.w	r2, r1, r2
 8006944:	4013      	ands	r3, r2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e079      	b.n	8006a42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800694e:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <HAL_RCC_ClockConfig+0x260>)
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f023 0203 	bic.w	r2, r3, #3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	491a      	ldr	r1, [pc, #104]	; (80069c4 <HAL_RCC_ClockConfig+0x260>)
 800695c:	4313      	orrs	r3, r2
 800695e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006960:	f7fc fc1e 	bl	80031a0 <HAL_GetTick>
 8006964:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006966:	e00a      	b.n	800697e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006968:	f7fc fc1a 	bl	80031a0 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	f241 3288 	movw	r2, #5000	; 0x1388
 8006976:	4293      	cmp	r3, r2
 8006978:	d901      	bls.n	800697e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e061      	b.n	8006a42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800697e:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <HAL_RCC_ClockConfig+0x260>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f003 020c 	and.w	r2, r3, #12
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	429a      	cmp	r2, r3
 800698e:	d1eb      	bne.n	8006968 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <HAL_RCC_ClockConfig+0x25c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d214      	bcs.n	80069c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800699e:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <HAL_RCC_ClockConfig+0x25c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f023 0207 	bic.w	r2, r3, #7
 80069a6:	4906      	ldr	r1, [pc, #24]	; (80069c0 <HAL_RCC_ClockConfig+0x25c>)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ae:	4b04      	ldr	r3, [pc, #16]	; (80069c0 <HAL_RCC_ClockConfig+0x25c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d005      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e040      	b.n	8006a42 <HAL_RCC_ClockConfig+0x2de>
 80069c0:	40022000 	.word	0x40022000
 80069c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069d4:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <HAL_RCC_ClockConfig+0x2e8>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	491a      	ldr	r1, [pc, #104]	; (8006a4c <HAL_RCC_ClockConfig+0x2e8>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d009      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069f2:	4b16      	ldr	r3, [pc, #88]	; (8006a4c <HAL_RCC_ClockConfig+0x2e8>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	4912      	ldr	r1, [pc, #72]	; (8006a4c <HAL_RCC_ClockConfig+0x2e8>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006a06:	f000 f829 	bl	8006a5c <HAL_RCC_GetSysClockFreq>
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <HAL_RCC_ClockConfig+0x2e8>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a14:	22f0      	movs	r2, #240	; 0xf0
 8006a16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	fa92 f2a2 	rbit	r2, r2
 8006a1e:	60fa      	str	r2, [r7, #12]
  return result;
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	fab2 f282 	clz	r2, r2
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	40d3      	lsrs	r3, r2
 8006a2a:	4a09      	ldr	r2, [pc, #36]	; (8006a50 <HAL_RCC_ClockConfig+0x2ec>)
 8006a2c:	5cd3      	ldrb	r3, [r2, r3]
 8006a2e:	fa21 f303 	lsr.w	r3, r1, r3
 8006a32:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <HAL_RCC_ClockConfig+0x2f0>)
 8006a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006a36:	4b08      	ldr	r3, [pc, #32]	; (8006a58 <HAL_RCC_ClockConfig+0x2f4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fc fb6c 	bl	8003118 <HAL_InitTick>
  
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3778      	adds	r7, #120	; 0x78
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	0800f4d4 	.word	0x0800f4d4
 8006a54:	20000008 	.word	0x20000008
 8006a58:	2000000c 	.word	0x2000000c

08006a5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b08b      	sub	sp, #44	; 0x2c
 8006a60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61fb      	str	r3, [r7, #28]
 8006a66:	2300      	movs	r3, #0
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006a76:	4b29      	ldr	r3, [pc, #164]	; (8006b1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d002      	beq.n	8006a8c <HAL_RCC_GetSysClockFreq+0x30>
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d003      	beq.n	8006a92 <HAL_RCC_GetSysClockFreq+0x36>
 8006a8a:	e03c      	b.n	8006b06 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a8c:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006a8e:	623b      	str	r3, [r7, #32]
      break;
 8006a90:	e03c      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006a98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006a9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	fa92 f2a2 	rbit	r2, r2
 8006aa4:	607a      	str	r2, [r7, #4]
  return result;
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	fab2 f282 	clz	r2, r2
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	40d3      	lsrs	r3, r2
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006ab2:	5cd3      	ldrb	r3, [r2, r3]
 8006ab4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006ab6:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	220f      	movs	r2, #15
 8006ac0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	fa92 f2a2 	rbit	r2, r2
 8006ac8:	60fa      	str	r2, [r7, #12]
  return result;
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	fab2 f282 	clz	r2, r2
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	40d3      	lsrs	r3, r2
 8006ad4:	4a14      	ldr	r2, [pc, #80]	; (8006b28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ad6:	5cd3      	ldrb	r3, [r2, r3]
 8006ad8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006ae4:	4a0e      	ldr	r2, [pc, #56]	; (8006b20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	fb02 f303 	mul.w	r3, r2, r3
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
 8006af4:	e004      	b.n	8006b00 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	4a0c      	ldr	r2, [pc, #48]	; (8006b2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006afa:	fb02 f303 	mul.w	r3, r2, r3
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	623b      	str	r3, [r7, #32]
      break;
 8006b04:	e002      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b06:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006b08:	623b      	str	r3, [r7, #32]
      break;
 8006b0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	372c      	adds	r7, #44	; 0x2c
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	007a1200 	.word	0x007a1200
 8006b24:	0800f4e4 	.word	0x0800f4e4
 8006b28:	0800f4f4 	.word	0x0800f4f4
 8006b2c:	003d0900 	.word	0x003d0900

08006b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b092      	sub	sp, #72	; 0x48
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80cd 	beq.w	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b54:	4b86      	ldr	r3, [pc, #536]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10e      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b60:	4b83      	ldr	r3, [pc, #524]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	4a82      	ldr	r2, [pc, #520]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6a:	61d3      	str	r3, [r2, #28]
 8006b6c:	4b80      	ldr	r3, [pc, #512]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b7e:	4b7d      	ldr	r3, [pc, #500]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d118      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b8a:	4b7a      	ldr	r3, [pc, #488]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a79      	ldr	r2, [pc, #484]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b96:	f7fc fb03 	bl	80031a0 <HAL_GetTick>
 8006b9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b9e:	f7fc faff 	bl	80031a0 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b64      	cmp	r3, #100	; 0x64
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e0db      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb0:	4b70      	ldr	r3, [pc, #448]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f0      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bbc:	4b6c      	ldr	r3, [pc, #432]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d07d      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d076      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bda:	4b65      	ldr	r3, [pc, #404]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006be8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	fa93 f3a3 	rbit	r3, r3
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bf4:	fab3 f383 	clz	r3, r3
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4b5e      	ldr	r3, [pc, #376]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	461a      	mov	r2, r3
 8006c04:	2301      	movs	r3, #1
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	fa93 f3a3 	rbit	r3, r3
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c18:	fab3 f383 	clz	r3, r3
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	4b55      	ldr	r3, [pc, #340]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c22:	4413      	add	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	461a      	mov	r2, r3
 8006c28:	2300      	movs	r3, #0
 8006c2a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c2c:	4a50      	ldr	r2, [pc, #320]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c30:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d045      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c3c:	f7fc fab0 	bl	80031a0 <HAL_GetTick>
 8006c40:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c42:	e00a      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c44:	f7fc faac 	bl	80031a0 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e086      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	fa93 f3a3 	rbit	r3, r3
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
 8006c66:	2302      	movs	r3, #2
 8006c68:	623b      	str	r3, [r7, #32]
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	fa93 f3a3 	rbit	r3, r3
 8006c70:	61fb      	str	r3, [r7, #28]
  return result;
 8006c72:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c74:	fab3 f383 	clz	r3, r3
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f043 0302 	orr.w	r3, r3, #2
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d102      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006c88:	4b39      	ldr	r3, [pc, #228]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	e007      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	fa93 f3a3 	rbit	r3, r3
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	4b35      	ldr	r3, [pc, #212]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	613a      	str	r2, [r7, #16]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	fa92 f2a2 	rbit	r2, r2
 8006ca8:	60fa      	str	r2, [r7, #12]
  return result;
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	fab2 f282 	clz	r2, r2
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	f002 021f 	and.w	r2, r2, #31
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0bd      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006cc8:	4b29      	ldr	r3, [pc, #164]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	4926      	ldr	r1, [pc, #152]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006cda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d105      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ce2:	4b23      	ldr	r3, [pc, #140]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	4a22      	ldr	r2, [pc, #136]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d008      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cfa:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	f023 0203 	bic.w	r2, r3, #3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	491a      	ldr	r1, [pc, #104]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d008      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d18:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	f023 0210 	bic.w	r2, r3, #16
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	4912      	ldr	r1, [pc, #72]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d008      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d36:	4b0e      	ldr	r3, [pc, #56]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	490b      	ldr	r1, [pc, #44]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006d54:	4b06      	ldr	r3, [pc, #24]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	4903      	ldr	r1, [pc, #12]	; (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3748      	adds	r7, #72	; 0x48
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40021000 	.word	0x40021000
 8006d74:	40007000 	.word	0x40007000
 8006d78:	10908100 	.word	0x10908100

08006d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e095      	b.n	8006eba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d108      	bne.n	8006da8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d9e:	d009      	beq.n	8006db4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	61da      	str	r2, [r3, #28]
 8006da6:	e005      	b.n	8006db4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d106      	bne.n	8006dd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fb ffd0 	bl	8002d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006df4:	d902      	bls.n	8006dfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	e002      	b.n	8006e02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006e0a:	d007      	beq.n	8006e1c <HAL_SPI_Init+0xa0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e14:	d002      	beq.n	8006e1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5e:	ea42 0103 	orr.w	r1, r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	0c1b      	lsrs	r3, r3, #16
 8006e78:	f003 0204 	and.w	r2, r3, #4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006e98:	ea42 0103 	orr.w	r1, r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b088      	sub	sp, #32
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	603b      	str	r3, [r7, #0]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_SPI_Transmit+0x22>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e15f      	b.n	80071a4 <HAL_SPI_Transmit+0x2e2>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eec:	f7fc f958 	bl	80031a0 <HAL_GetTick>
 8006ef0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ef2:	88fb      	ldrh	r3, [r7, #6]
 8006ef4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d002      	beq.n	8006f08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f02:	2302      	movs	r3, #2
 8006f04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f06:	e148      	b.n	800719a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <HAL_SPI_Transmit+0x52>
 8006f0e:	88fb      	ldrh	r3, [r7, #6]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f18:	e13f      	b.n	800719a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	88fa      	ldrh	r2, [r7, #6]
 8006f32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	88fa      	ldrh	r2, [r7, #6]
 8006f38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f64:	d10f      	bne.n	8006f86 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f90:	2b40      	cmp	r3, #64	; 0x40
 8006f92:	d007      	beq.n	8006fa4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fac:	d94f      	bls.n	800704e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_SPI_Transmit+0xfa>
 8006fb6:	8afb      	ldrh	r3, [r7, #22]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d142      	bne.n	8007042 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	881a      	ldrh	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	1c9a      	adds	r2, r3, #2
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fe0:	e02f      	b.n	8007042 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d112      	bne.n	8007016 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff4:	881a      	ldrh	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007000:	1c9a      	adds	r2, r3, #2
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007014:	e015      	b.n	8007042 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007016:	f7fc f8c3 	bl	80031a0 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d803      	bhi.n	800702e <HAL_SPI_Transmit+0x16c>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800702c:	d102      	bne.n	8007034 <HAL_SPI_Transmit+0x172>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007040:	e0ab      	b.n	800719a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1ca      	bne.n	8006fe2 <HAL_SPI_Transmit+0x120>
 800704c:	e080      	b.n	8007150 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_SPI_Transmit+0x19a>
 8007056:	8afb      	ldrh	r3, [r7, #22]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d174      	bne.n	8007146 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b01      	cmp	r3, #1
 8007064:	d912      	bls.n	800708c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	881a      	ldrh	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	1c9a      	adds	r2, r3, #2
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007080:	b29b      	uxth	r3, r3
 8007082:	3b02      	subs	r3, #2
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	87da      	strh	r2, [r3, #62]	; 0x3e
 800708a:	e05c      	b.n	8007146 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	330c      	adds	r3, #12
 8007096:	7812      	ldrb	r2, [r2, #0]
 8007098:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80070b2:	e048      	b.n	8007146 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d12b      	bne.n	800711a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d912      	bls.n	80070f2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d0:	881a      	ldrh	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	1c9a      	adds	r2, r3, #2
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	3b02      	subs	r3, #2
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070f0:	e029      	b.n	8007146 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	330c      	adds	r3, #12
 80070fc:	7812      	ldrb	r2, [r2, #0]
 80070fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007118:	e015      	b.n	8007146 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800711a:	f7fc f841 	bl	80031a0 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d803      	bhi.n	8007132 <HAL_SPI_Transmit+0x270>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007130:	d102      	bne.n	8007138 <HAL_SPI_Transmit+0x276>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d106      	bne.n	8007146 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007144:	e029      	b.n	800719a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1b1      	bne.n	80070b4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fb77 	bl	8007848 <SPI_EndRxTxTransaction>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800716e:	2300      	movs	r3, #0
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	613b      	str	r3, [r7, #16]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	613b      	str	r3, [r7, #16]
 8007182:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	77fb      	strb	r3, [r7, #31]
 8007190:	e003      	b.n	800719a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80071a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3720      	adds	r7, #32
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08a      	sub	sp, #40	; 0x28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071ba:	2301      	movs	r3, #1
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d101      	bne.n	80071d2 <HAL_SPI_TransmitReceive+0x26>
 80071ce:	2302      	movs	r3, #2
 80071d0:	e20a      	b.n	80075e8 <HAL_SPI_TransmitReceive+0x43c>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071da:	f7fb ffe1 	bl	80031a0 <HAL_GetTick>
 80071de:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071e6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80071ee:	887b      	ldrh	r3, [r7, #2]
 80071f0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80071f2:	887b      	ldrh	r3, [r7, #2]
 80071f4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071f6:	7efb      	ldrb	r3, [r7, #27]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d00e      	beq.n	800721a <HAL_SPI_TransmitReceive+0x6e>
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007202:	d106      	bne.n	8007212 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <HAL_SPI_TransmitReceive+0x66>
 800720c:	7efb      	ldrb	r3, [r7, #27]
 800720e:	2b04      	cmp	r3, #4
 8007210:	d003      	beq.n	800721a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007212:	2302      	movs	r3, #2
 8007214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007218:	e1e0      	b.n	80075dc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <HAL_SPI_TransmitReceive+0x80>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <HAL_SPI_TransmitReceive+0x80>
 8007226:	887b      	ldrh	r3, [r7, #2]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d103      	bne.n	8007234 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007232:	e1d3      	b.n	80075dc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b04      	cmp	r3, #4
 800723e:	d003      	beq.n	8007248 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2205      	movs	r2, #5
 8007244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	887a      	ldrh	r2, [r7, #2]
 8007258:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	887a      	ldrh	r2, [r7, #2]
 8007260:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	887a      	ldrh	r2, [r7, #2]
 800726e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	887a      	ldrh	r2, [r7, #2]
 8007274:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800728a:	d802      	bhi.n	8007292 <HAL_SPI_TransmitReceive+0xe6>
 800728c:	8a3b      	ldrh	r3, [r7, #16]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d908      	bls.n	80072a4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072a0:	605a      	str	r2, [r3, #4]
 80072a2:	e007      	b.n	80072b4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d007      	beq.n	80072d2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072da:	f240 8081 	bls.w	80073e0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <HAL_SPI_TransmitReceive+0x140>
 80072e6:	8a7b      	ldrh	r3, [r7, #18]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d16d      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	881a      	ldrh	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	1c9a      	adds	r2, r3, #2
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007310:	e05a      	b.n	80073c8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b02      	cmp	r3, #2
 800731e:	d11b      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x1ac>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d016      	beq.n	8007358 <HAL_SPI_TransmitReceive+0x1ac>
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	2b01      	cmp	r3, #1
 800732e:	d113      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	881a      	ldrh	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	1c9a      	adds	r2, r3, #2
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800734a:	b29b      	uxth	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b01      	cmp	r3, #1
 8007364:	d11c      	bne.n	80073a0 <HAL_SPI_TransmitReceive+0x1f4>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	b292      	uxth	r2, r2
 800737e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	1c9a      	adds	r2, r3, #2
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007390:	b29b      	uxth	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	b29a      	uxth	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800739c:	2301      	movs	r3, #1
 800739e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073a0:	f7fb fefe 	bl	80031a0 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d80b      	bhi.n	80073c8 <HAL_SPI_TransmitReceive+0x21c>
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b6:	d007      	beq.n	80073c8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80073c6:	e109      	b.n	80075dc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d19f      	bne.n	8007312 <HAL_SPI_TransmitReceive+0x166>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d199      	bne.n	8007312 <HAL_SPI_TransmitReceive+0x166>
 80073de:	e0e3      	b.n	80075a8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <HAL_SPI_TransmitReceive+0x244>
 80073e8:	8a7b      	ldrh	r3, [r7, #18]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	f040 80cf 	bne.w	800758e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d912      	bls.n	8007420 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	881a      	ldrh	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	1c9a      	adds	r2, r3, #2
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b02      	subs	r3, #2
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800741e:	e0b6      	b.n	800758e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	330c      	adds	r3, #12
 800742a:	7812      	ldrb	r2, [r2, #0]
 800742c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007446:	e0a2      	b.n	800758e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b02      	cmp	r3, #2
 8007454:	d134      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x314>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d02f      	beq.n	80074c0 <HAL_SPI_TransmitReceive+0x314>
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	2b01      	cmp	r3, #1
 8007464:	d12c      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b01      	cmp	r3, #1
 800746e:	d912      	bls.n	8007496 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	1c9a      	adds	r2, r3, #2
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b02      	subs	r3, #2
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007494:	e012      	b.n	80074bc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	330c      	adds	r3, #12
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d148      	bne.n	8007560 <HAL_SPI_TransmitReceive+0x3b4>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d042      	beq.n	8007560 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d923      	bls.n	800752e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	b292      	uxth	r2, r2
 80074f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	1c9a      	adds	r2, r3, #2
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b02      	subs	r3, #2
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007516:	b29b      	uxth	r3, r3
 8007518:	2b01      	cmp	r3, #1
 800751a:	d81f      	bhi.n	800755c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800752a:	605a      	str	r2, [r3, #4]
 800752c:	e016      	b.n	800755c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f103 020c 	add.w	r2, r3, #12
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	7812      	ldrb	r2, [r2, #0]
 800753c:	b2d2      	uxtb	r2, r2
 800753e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800755c:	2301      	movs	r3, #1
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007560:	f7fb fe1e 	bl	80031a0 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756c:	429a      	cmp	r2, r3
 800756e:	d803      	bhi.n	8007578 <HAL_SPI_TransmitReceive+0x3cc>
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007576:	d102      	bne.n	800757e <HAL_SPI_TransmitReceive+0x3d2>
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	2b00      	cmp	r3, #0
 800757c:	d107      	bne.n	800758e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800758c:	e026      	b.n	80075dc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007592:	b29b      	uxth	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	f47f af57 	bne.w	8007448 <HAL_SPI_TransmitReceive+0x29c>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f47f af50 	bne.w	8007448 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f94b 	bl	8007848 <SPI_EndRxTxTransaction>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2220      	movs	r2, #32
 80075c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d2:	e003      	b.n	80075dc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3728      	adds	r7, #40	; 0x28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075fe:	b2db      	uxtb	r3, r3
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b088      	sub	sp, #32
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800761c:	f7fb fdc0 	bl	80031a0 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	1a9b      	subs	r3, r3, r2
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	4413      	add	r3, r2
 800762a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800762c:	f7fb fdb8 	bl	80031a0 <HAL_GetTick>
 8007630:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007632:	4b39      	ldr	r3, [pc, #228]	; (8007718 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	015b      	lsls	r3, r3, #5
 8007638:	0d1b      	lsrs	r3, r3, #20
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	fb02 f303 	mul.w	r3, r2, r3
 8007640:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007642:	e054      	b.n	80076ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800764a:	d050      	beq.n	80076ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800764c:	f7fb fda8 	bl	80031a0 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	429a      	cmp	r2, r3
 800765a:	d902      	bls.n	8007662 <SPI_WaitFlagStateUntilTimeout+0x56>
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d13d      	bne.n	80076de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800767a:	d111      	bne.n	80076a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007684:	d004      	beq.n	8007690 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800768e:	d107      	bne.n	80076a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800769e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a8:	d10f      	bne.n	80076ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e017      	b.n	800770e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4013      	ands	r3, r2
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	bf0c      	ite	eq
 80076fe:	2301      	moveq	r3, #1
 8007700:	2300      	movne	r3, #0
 8007702:	b2db      	uxtb	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	429a      	cmp	r2, r3
 800770a:	d19b      	bne.n	8007644 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3720      	adds	r7, #32
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000008 	.word	0x20000008

0800771c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08a      	sub	sp, #40	; 0x28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800772a:	2300      	movs	r3, #0
 800772c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800772e:	f7fb fd37 	bl	80031a0 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	1a9b      	subs	r3, r3, r2
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	4413      	add	r3, r2
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800773e:	f7fb fd2f 	bl	80031a0 <HAL_GetTick>
 8007742:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800774c:	4b3d      	ldr	r3, [pc, #244]	; (8007844 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	00da      	lsls	r2, r3, #3
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	0d1b      	lsrs	r3, r3, #20
 800775c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775e:	fb02 f303 	mul.w	r3, r2, r3
 8007762:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007764:	e060      	b.n	8007828 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800776c:	d107      	bne.n	800777e <SPI_WaitFifoStateUntilTimeout+0x62>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d104      	bne.n	800777e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800777c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007784:	d050      	beq.n	8007828 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007786:	f7fb fd0b 	bl	80031a0 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007792:	429a      	cmp	r2, r3
 8007794:	d902      	bls.n	800779c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	2b00      	cmp	r3, #0
 800779a:	d13d      	bne.n	8007818 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077b4:	d111      	bne.n	80077da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077be:	d004      	beq.n	80077ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c8:	d107      	bne.n	80077da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e2:	d10f      	bne.n	8007804 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007802:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e010      	b.n	800783a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	3b01      	subs	r3, #1
 8007826:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	4013      	ands	r3, r2
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	429a      	cmp	r2, r3
 8007836:	d196      	bne.n	8007766 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3728      	adds	r7, #40	; 0x28
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20000008 	.word	0x20000008

08007848 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af02      	add	r7, sp, #8
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2200      	movs	r2, #0
 800785c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f7ff ff5b 	bl	800771c <SPI_WaitFifoStateUntilTimeout>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d007      	beq.n	800787c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007870:	f043 0220 	orr.w	r2, r3, #32
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e027      	b.n	80078cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2200      	movs	r2, #0
 8007884:	2180      	movs	r1, #128	; 0x80
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff fec0 	bl	800760c <SPI_WaitFlagStateUntilTimeout>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007896:	f043 0220 	orr.w	r2, r3, #32
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e014      	b.n	80078cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff ff34 	bl	800771c <SPI_WaitFifoStateUntilTimeout>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d007      	beq.n	80078ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078be:	f043 0220 	orr.w	r2, r3, #32
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e000      	b.n	80078cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e049      	b.n	800797a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fb fa8e 	bl	8002e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f000 f8fe 	bl	8007b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007996:	2b01      	cmp	r3, #1
 8007998:	d101      	bne.n	800799e <HAL_TIM_ConfigClockSource+0x1c>
 800799a:	2302      	movs	r3, #2
 800799c:	e0b6      	b.n	8007b0c <HAL_TIM_ConfigClockSource+0x18a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2202      	movs	r2, #2
 80079aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079da:	d03e      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0xd8>
 80079dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e0:	f200 8087 	bhi.w	8007af2 <HAL_TIM_ConfigClockSource+0x170>
 80079e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e8:	f000 8086 	beq.w	8007af8 <HAL_TIM_ConfigClockSource+0x176>
 80079ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f0:	d87f      	bhi.n	8007af2 <HAL_TIM_ConfigClockSource+0x170>
 80079f2:	2b70      	cmp	r3, #112	; 0x70
 80079f4:	d01a      	beq.n	8007a2c <HAL_TIM_ConfigClockSource+0xaa>
 80079f6:	2b70      	cmp	r3, #112	; 0x70
 80079f8:	d87b      	bhi.n	8007af2 <HAL_TIM_ConfigClockSource+0x170>
 80079fa:	2b60      	cmp	r3, #96	; 0x60
 80079fc:	d050      	beq.n	8007aa0 <HAL_TIM_ConfigClockSource+0x11e>
 80079fe:	2b60      	cmp	r3, #96	; 0x60
 8007a00:	d877      	bhi.n	8007af2 <HAL_TIM_ConfigClockSource+0x170>
 8007a02:	2b50      	cmp	r3, #80	; 0x50
 8007a04:	d03c      	beq.n	8007a80 <HAL_TIM_ConfigClockSource+0xfe>
 8007a06:	2b50      	cmp	r3, #80	; 0x50
 8007a08:	d873      	bhi.n	8007af2 <HAL_TIM_ConfigClockSource+0x170>
 8007a0a:	2b40      	cmp	r3, #64	; 0x40
 8007a0c:	d058      	beq.n	8007ac0 <HAL_TIM_ConfigClockSource+0x13e>
 8007a0e:	2b40      	cmp	r3, #64	; 0x40
 8007a10:	d86f      	bhi.n	8007af2 <HAL_TIM_ConfigClockSource+0x170>
 8007a12:	2b30      	cmp	r3, #48	; 0x30
 8007a14:	d064      	beq.n	8007ae0 <HAL_TIM_ConfigClockSource+0x15e>
 8007a16:	2b30      	cmp	r3, #48	; 0x30
 8007a18:	d86b      	bhi.n	8007af2 <HAL_TIM_ConfigClockSource+0x170>
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d060      	beq.n	8007ae0 <HAL_TIM_ConfigClockSource+0x15e>
 8007a1e:	2b20      	cmp	r3, #32
 8007a20:	d867      	bhi.n	8007af2 <HAL_TIM_ConfigClockSource+0x170>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d05c      	beq.n	8007ae0 <HAL_TIM_ConfigClockSource+0x15e>
 8007a26:	2b10      	cmp	r3, #16
 8007a28:	d05a      	beq.n	8007ae0 <HAL_TIM_ConfigClockSource+0x15e>
 8007a2a:	e062      	b.n	8007af2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a3c:	f000 f95c 	bl	8007cf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	609a      	str	r2, [r3, #8]
      break;
 8007a58:	e04f      	b.n	8007afa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a6a:	f000 f945 	bl	8007cf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a7c:	609a      	str	r2, [r3, #8]
      break;
 8007a7e:	e03c      	b.n	8007afa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	f000 f8b9 	bl	8007c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2150      	movs	r1, #80	; 0x50
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 f912 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 8007a9e:	e02c      	b.n	8007afa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aac:	461a      	mov	r2, r3
 8007aae:	f000 f8d8 	bl	8007c62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2160      	movs	r1, #96	; 0x60
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 f902 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 8007abe:	e01c      	b.n	8007afa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007acc:	461a      	mov	r2, r3
 8007ace:	f000 f899 	bl	8007c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2140      	movs	r1, #64	; 0x40
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f8f2 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 8007ade:	e00c      	b.n	8007afa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4610      	mov	r0, r2
 8007aec:	f000 f8e9 	bl	8007cc2 <TIM_ITRx_SetConfig>
      break;
 8007af0:	e003      	b.n	8007afa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	73fb      	strb	r3, [r7, #15]
      break;
 8007af6:	e000      	b.n	8007afa <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007af8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a32      	ldr	r2, [pc, #200]	; (8007bf0 <TIM_Base_SetConfig+0xdc>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d007      	beq.n	8007b3c <TIM_Base_SetConfig+0x28>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b32:	d003      	beq.n	8007b3c <TIM_Base_SetConfig+0x28>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a2f      	ldr	r2, [pc, #188]	; (8007bf4 <TIM_Base_SetConfig+0xe0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d108      	bne.n	8007b4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a27      	ldr	r2, [pc, #156]	; (8007bf0 <TIM_Base_SetConfig+0xdc>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d013      	beq.n	8007b7e <TIM_Base_SetConfig+0x6a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5c:	d00f      	beq.n	8007b7e <TIM_Base_SetConfig+0x6a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a24      	ldr	r2, [pc, #144]	; (8007bf4 <TIM_Base_SetConfig+0xe0>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00b      	beq.n	8007b7e <TIM_Base_SetConfig+0x6a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a23      	ldr	r2, [pc, #140]	; (8007bf8 <TIM_Base_SetConfig+0xe4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d007      	beq.n	8007b7e <TIM_Base_SetConfig+0x6a>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a22      	ldr	r2, [pc, #136]	; (8007bfc <TIM_Base_SetConfig+0xe8>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d003      	beq.n	8007b7e <TIM_Base_SetConfig+0x6a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a21      	ldr	r2, [pc, #132]	; (8007c00 <TIM_Base_SetConfig+0xec>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d108      	bne.n	8007b90 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a0e      	ldr	r2, [pc, #56]	; (8007bf0 <TIM_Base_SetConfig+0xdc>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d00b      	beq.n	8007bd4 <TIM_Base_SetConfig+0xc0>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a0e      	ldr	r2, [pc, #56]	; (8007bf8 <TIM_Base_SetConfig+0xe4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d007      	beq.n	8007bd4 <TIM_Base_SetConfig+0xc0>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a0d      	ldr	r2, [pc, #52]	; (8007bfc <TIM_Base_SetConfig+0xe8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d003      	beq.n	8007bd4 <TIM_Base_SetConfig+0xc0>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a0c      	ldr	r2, [pc, #48]	; (8007c00 <TIM_Base_SetConfig+0xec>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d103      	bne.n	8007bdc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	691a      	ldr	r2, [r3, #16]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	615a      	str	r2, [r3, #20]
}
 8007be2:	bf00      	nop
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	40012c00 	.word	0x40012c00
 8007bf4:	40000400 	.word	0x40000400
 8007bf8:	40014000 	.word	0x40014000
 8007bfc:	40014400 	.word	0x40014400
 8007c00:	40014800 	.word	0x40014800

08007c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f023 0201 	bic.w	r2, r3, #1
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f023 030a 	bic.w	r3, r3, #10
 8007c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	621a      	str	r2, [r3, #32]
}
 8007c56:	bf00      	nop
 8007c58:	371c      	adds	r7, #28
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b087      	sub	sp, #28
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f023 0210 	bic.w	r2, r3, #16
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	031b      	lsls	r3, r3, #12
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	011b      	lsls	r3, r3, #4
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	621a      	str	r2, [r3, #32]
}
 8007cb6:	bf00      	nop
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f043 0307 	orr.w	r3, r3, #7
 8007ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	609a      	str	r2, [r3, #8]
}
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	021a      	lsls	r2, r3, #8
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	609a      	str	r2, [r3, #8]
}
 8007d2c:	bf00      	nop
 8007d2e:	371c      	adds	r7, #28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e054      	b.n	8007dfa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a24      	ldr	r2, [pc, #144]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d108      	bne.n	8007d8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00e      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db8:	d009      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a13      	ldr	r2, [pc, #76]	; (8007e0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a11      	ldr	r2, [pc, #68]	; (8007e10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d10c      	bne.n	8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	40012c00 	.word	0x40012c00
 8007e0c:	40000400 	.word	0x40000400
 8007e10:	40014000 	.word	0x40014000

08007e14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007e18:	4904      	ldr	r1, [pc, #16]	; (8007e2c <MX_FATFS_Init+0x18>)
 8007e1a:	4805      	ldr	r0, [pc, #20]	; (8007e30 <MX_FATFS_Init+0x1c>)
 8007e1c:	f003 fc1e 	bl	800b65c <FATFS_LinkDriver>
 8007e20:	4603      	mov	r3, r0
 8007e22:	461a      	mov	r2, r3
 8007e24:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <MX_FATFS_Init+0x20>)
 8007e26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007e28:	bf00      	nop
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	20000cd4 	.word	0x20000cd4
 8007e30:	20000014 	.word	0x20000014
 8007e34:	20000cd0 	.word	0x20000cd0

08007e38 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007e3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	 return SD_disk_initialize(pdrv);
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7f9 ff8d 	bl	8001d74 <SD_disk_initialize>
 8007e5a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fa f869 	bl	8001f48 <SD_disk_status>
 8007e76:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007e90:	7bf8      	ldrb	r0, [r7, #15]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	f7fa f86c 	bl	8001f74 <SD_disk_read>
 8007e9c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	603b      	str	r3, [r7, #0]
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007eb6:	7bf8      	ldrb	r0, [r7, #15]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	f7fa f8c3 	bl	8002048 <SD_disk_write>
 8007ec2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	603a      	str	r2, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007edc:	79b9      	ldrb	r1, [r7, #6]
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fa f934 	bl	8002150 <SD_disk_ioctl>
 8007ee8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007efe:	79fb      	ldrb	r3, [r7, #7]
 8007f00:	4a08      	ldr	r2, [pc, #32]	; (8007f24 <disk_status+0x30>)
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	79fa      	ldrb	r2, [r7, #7]
 8007f0c:	4905      	ldr	r1, [pc, #20]	; (8007f24 <disk_status+0x30>)
 8007f0e:	440a      	add	r2, r1
 8007f10:	7a12      	ldrb	r2, [r2, #8]
 8007f12:	4610      	mov	r0, r2
 8007f14:	4798      	blx	r3
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20000ef8 	.word	0x20000ef8

08007f28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	4a0d      	ldr	r2, [pc, #52]	; (8007f70 <disk_initialize+0x48>)
 8007f3a:	5cd3      	ldrb	r3, [r2, r3]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d111      	bne.n	8007f64 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	4a0b      	ldr	r2, [pc, #44]	; (8007f70 <disk_initialize+0x48>)
 8007f44:	2101      	movs	r1, #1
 8007f46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	4a09      	ldr	r2, [pc, #36]	; (8007f70 <disk_initialize+0x48>)
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	79fa      	ldrb	r2, [r7, #7]
 8007f56:	4906      	ldr	r1, [pc, #24]	; (8007f70 <disk_initialize+0x48>)
 8007f58:	440a      	add	r2, r1
 8007f5a:	7a12      	ldrb	r2, [r2, #8]
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4798      	blx	r3
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000ef8 	.word	0x20000ef8

08007f74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007f74:	b590      	push	{r4, r7, lr}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	607a      	str	r2, [r7, #4]
 8007f7e:	603b      	str	r3, [r7, #0]
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	4a0a      	ldr	r2, [pc, #40]	; (8007fb0 <disk_read+0x3c>)
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	689c      	ldr	r4, [r3, #8]
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	4a07      	ldr	r2, [pc, #28]	; (8007fb0 <disk_read+0x3c>)
 8007f94:	4413      	add	r3, r2
 8007f96:	7a18      	ldrb	r0, [r3, #8]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	47a0      	blx	r4
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd90      	pop	{r4, r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000ef8 	.word	0x20000ef8

08007fb4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60b9      	str	r1, [r7, #8]
 8007fbc:	607a      	str	r2, [r7, #4]
 8007fbe:	603b      	str	r3, [r7, #0]
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	4a0a      	ldr	r2, [pc, #40]	; (8007ff0 <disk_write+0x3c>)
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	68dc      	ldr	r4, [r3, #12]
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	4a07      	ldr	r2, [pc, #28]	; (8007ff0 <disk_write+0x3c>)
 8007fd4:	4413      	add	r3, r2
 8007fd6:	7a18      	ldrb	r0, [r3, #8]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	68b9      	ldr	r1, [r7, #8]
 8007fde:	47a0      	blx	r4
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd90      	pop	{r4, r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000ef8 	.word	0x20000ef8

08007ff4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	603a      	str	r2, [r7, #0]
 8007ffe:	71fb      	strb	r3, [r7, #7]
 8008000:	460b      	mov	r3, r1
 8008002:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	4a09      	ldr	r2, [pc, #36]	; (800802c <disk_ioctl+0x38>)
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	79fa      	ldrb	r2, [r7, #7]
 8008012:	4906      	ldr	r1, [pc, #24]	; (800802c <disk_ioctl+0x38>)
 8008014:	440a      	add	r2, r1
 8008016:	7a10      	ldrb	r0, [r2, #8]
 8008018:	79b9      	ldrb	r1, [r7, #6]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	4798      	blx	r3
 800801e:	4603      	mov	r3, r0
 8008020:	73fb      	strb	r3, [r7, #15]
  return res;
 8008022:	7bfb      	ldrb	r3, [r7, #15]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20000ef8 	.word	0x20000ef8

08008030 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008044:	e007      	b.n	8008056 <mem_cpy+0x26>
		*d++ = *s++;
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	1c53      	adds	r3, r2, #1
 800804a:	613b      	str	r3, [r7, #16]
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	1c59      	adds	r1, r3, #1
 8008050:	6179      	str	r1, [r7, #20]
 8008052:	7812      	ldrb	r2, [r2, #0]
 8008054:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	1e5a      	subs	r2, r3, #1
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1f2      	bne.n	8008046 <mem_cpy+0x16>
}
 8008060:	bf00      	nop
 8008062:	bf00      	nop
 8008064:	371c      	adds	r7, #28
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800806e:	b480      	push	{r7}
 8008070:	b087      	sub	sp, #28
 8008072:	af00      	add	r7, sp, #0
 8008074:	60f8      	str	r0, [r7, #12]
 8008076:	60b9      	str	r1, [r7, #8]
 8008078:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800807e:	e005      	b.n	800808c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	617a      	str	r2, [r7, #20]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	1e5a      	subs	r2, r3, #1
 8008090:	607a      	str	r2, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f4      	bne.n	8008080 <mem_set+0x12>
}
 8008096:	bf00      	nop
 8008098:	bf00      	nop
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80080a4:	b480      	push	{r7}
 80080a6:	b089      	sub	sp, #36	; 0x24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	61fb      	str	r3, [r7, #28]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80080bc:	bf00      	nop
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	1e5a      	subs	r2, r3, #1
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00d      	beq.n	80080e4 <mem_cmp+0x40>
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	61fa      	str	r2, [r7, #28]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	4619      	mov	r1, r3
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	61ba      	str	r2, [r7, #24]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	1acb      	subs	r3, r1, r3
 80080dc:	617b      	str	r3, [r7, #20]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0ec      	beq.n	80080be <mem_cmp+0x1a>
	return r;
 80080e4:	697b      	ldr	r3, [r7, #20]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3724      	adds	r7, #36	; 0x24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80080fc:	e002      	b.n	8008104 <chk_chr+0x12>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3301      	adds	r3, #1
 8008102:	607b      	str	r3, [r7, #4]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <chk_chr+0x26>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	4293      	cmp	r3, r2
 8008116:	d1f2      	bne.n	80080fe <chk_chr+0xc>
	return *str;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	781b      	ldrb	r3, [r3, #0]
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008132:	2300      	movs	r3, #0
 8008134:	60bb      	str	r3, [r7, #8]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	e038      	b.n	80081ae <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800813c:	4930      	ldr	r1, [pc, #192]	; (8008200 <chk_lock+0xd8>)
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	4613      	mov	r3, r2
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	4413      	add	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	440b      	add	r3, r1
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d029      	beq.n	80081a4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008150:	492b      	ldr	r1, [pc, #172]	; (8008200 <chk_lock+0xd8>)
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4613      	mov	r3, r2
 8008156:	005b      	lsls	r3, r3, #1
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	440b      	add	r3, r1
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008166:	429a      	cmp	r2, r3
 8008168:	d11e      	bne.n	80081a8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800816a:	4925      	ldr	r1, [pc, #148]	; (8008200 <chk_lock+0xd8>)
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4613      	mov	r3, r2
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	4413      	add	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	440b      	add	r3, r1
 8008178:	3304      	adds	r3, #4
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008182:	429a      	cmp	r2, r3
 8008184:	d110      	bne.n	80081a8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8008186:	491e      	ldr	r1, [pc, #120]	; (8008200 <chk_lock+0xd8>)
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	4613      	mov	r3, r2
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	440b      	add	r3, r1
 8008194:	3308      	adds	r3, #8
 8008196:	881a      	ldrh	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
				Files[i].clu == dp->sclust &&
 800819e:	429a      	cmp	r2, r3
 80081a0:	d102      	bne.n	80081a8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80081a2:	e007      	b.n	80081b4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80081a4:	2301      	movs	r3, #1
 80081a6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d9c3      	bls.n	800813c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d109      	bne.n	80081ce <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <chk_lock+0x9e>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d101      	bne.n	80081ca <chk_lock+0xa2>
 80081c6:	2300      	movs	r3, #0
 80081c8:	e013      	b.n	80081f2 <chk_lock+0xca>
 80081ca:	2312      	movs	r3, #18
 80081cc:	e011      	b.n	80081f2 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10b      	bne.n	80081ec <chk_lock+0xc4>
 80081d4:	490a      	ldr	r1, [pc, #40]	; (8008200 <chk_lock+0xd8>)
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4613      	mov	r3, r2
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	330a      	adds	r3, #10
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ea:	d101      	bne.n	80081f0 <chk_lock+0xc8>
 80081ec:	2310      	movs	r3, #16
 80081ee:	e000      	b.n	80081f2 <chk_lock+0xca>
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	20000ce0 	.word	0x20000ce0

08008204 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800820a:	2300      	movs	r3, #0
 800820c:	607b      	str	r3, [r7, #4]
 800820e:	e002      	b.n	8008216 <enq_lock+0x12>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3301      	adds	r3, #1
 8008214:	607b      	str	r3, [r7, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d809      	bhi.n	8008230 <enq_lock+0x2c>
 800821c:	490a      	ldr	r1, [pc, #40]	; (8008248 <enq_lock+0x44>)
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4613      	mov	r3, r2
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1ef      	bne.n	8008210 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b02      	cmp	r3, #2
 8008234:	bf14      	ite	ne
 8008236:	2301      	movne	r3, #1
 8008238:	2300      	moveq	r3, #0
 800823a:	b2db      	uxtb	r3, r3
}
 800823c:	4618      	mov	r0, r3
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	20000ce0 	.word	0x20000ce0

0800824c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	e02b      	b.n	80082b4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800825c:	4956      	ldr	r1, [pc, #344]	; (80083b8 <inc_lock+0x16c>)
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	4613      	mov	r3, r2
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008272:	429a      	cmp	r2, r3
 8008274:	d11b      	bne.n	80082ae <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8008276:	4950      	ldr	r1, [pc, #320]	; (80083b8 <inc_lock+0x16c>)
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4613      	mov	r3, r2
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	440b      	add	r3, r1
 8008284:	3304      	adds	r3, #4
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
		if (Files[i].fs == dp->fs &&
 800828e:	429a      	cmp	r2, r3
 8008290:	d10d      	bne.n	80082ae <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8008292:	4949      	ldr	r1, [pc, #292]	; (80083b8 <inc_lock+0x16c>)
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4613      	mov	r3, r2
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	3308      	adds	r3, #8
 80082a2:	881a      	ldrh	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
			Files[i].clu == dp->sclust &&
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d006      	beq.n	80082bc <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3301      	adds	r3, #1
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d9d0      	bls.n	800825c <inc_lock+0x10>
 80082ba:	e000      	b.n	80082be <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80082bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d145      	bne.n	8008350 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80082c4:	2300      	movs	r3, #0
 80082c6:	60fb      	str	r3, [r7, #12]
 80082c8:	e002      	b.n	80082d0 <inc_lock+0x84>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3301      	adds	r3, #1
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d809      	bhi.n	80082ea <inc_lock+0x9e>
 80082d6:	4938      	ldr	r1, [pc, #224]	; (80083b8 <inc_lock+0x16c>)
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4613      	mov	r3, r2
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1ef      	bne.n	80082ca <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d101      	bne.n	80082f4 <inc_lock+0xa8>
 80082f0:	2300      	movs	r3, #0
 80082f2:	e05a      	b.n	80083aa <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80082fa:	482f      	ldr	r0, [pc, #188]	; (80083b8 <inc_lock+0x16c>)
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4613      	mov	r3, r2
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4403      	add	r3, r0
 8008308:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
 8008310:	4829      	ldr	r0, [pc, #164]	; (80083b8 <inc_lock+0x16c>)
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4613      	mov	r3, r2
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4403      	add	r3, r0
 800831e:	3304      	adds	r3, #4
 8008320:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8b3 0406 	ldrh.w	r0, [r3, #1030]	; 0x406
 8008328:	4923      	ldr	r1, [pc, #140]	; (80083b8 <inc_lock+0x16c>)
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	4613      	mov	r3, r2
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	3308      	adds	r3, #8
 8008338:	4602      	mov	r2, r0
 800833a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800833c:	491e      	ldr	r1, [pc, #120]	; (80083b8 <inc_lock+0x16c>)
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	4613      	mov	r3, r2
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	440b      	add	r3, r1
 800834a:	330a      	adds	r3, #10
 800834c:	2200      	movs	r2, #0
 800834e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00c      	beq.n	8008370 <inc_lock+0x124>
 8008356:	4918      	ldr	r1, [pc, #96]	; (80083b8 <inc_lock+0x16c>)
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4613      	mov	r3, r2
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	330a      	adds	r3, #10
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <inc_lock+0x124>
 800836c:	2300      	movs	r3, #0
 800836e:	e01c      	b.n	80083aa <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10b      	bne.n	800838e <inc_lock+0x142>
 8008376:	4910      	ldr	r1, [pc, #64]	; (80083b8 <inc_lock+0x16c>)
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4613      	mov	r3, r2
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	330a      	adds	r3, #10
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	3301      	adds	r3, #1
 800838a:	b299      	uxth	r1, r3
 800838c:	e001      	b.n	8008392 <inc_lock+0x146>
 800838e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008392:	4809      	ldr	r0, [pc, #36]	; (80083b8 <inc_lock+0x16c>)
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4613      	mov	r3, r2
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4403      	add	r3, r0
 80083a0:	330a      	adds	r3, #10
 80083a2:	460a      	mov	r2, r1
 80083a4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3301      	adds	r3, #1
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	20000ce0 	.word	0x20000ce0

080083bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	607b      	str	r3, [r7, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d82e      	bhi.n	800842e <dec_lock+0x72>
		n = Files[i].ctr;
 80083d0:	491b      	ldr	r1, [pc, #108]	; (8008440 <dec_lock+0x84>)
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	4613      	mov	r3, r2
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	330a      	adds	r3, #10
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80083e4:	89fb      	ldrh	r3, [r7, #14]
 80083e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ea:	d101      	bne.n	80083f0 <dec_lock+0x34>
 80083ec:	2300      	movs	r3, #0
 80083ee:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80083f0:	89fb      	ldrh	r3, [r7, #14]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <dec_lock+0x40>
 80083f6:	89fb      	ldrh	r3, [r7, #14]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80083fc:	4910      	ldr	r1, [pc, #64]	; (8008440 <dec_lock+0x84>)
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	4613      	mov	r3, r2
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	330a      	adds	r3, #10
 800840c:	89fa      	ldrh	r2, [r7, #14]
 800840e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008410:	89fb      	ldrh	r3, [r7, #14]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d108      	bne.n	8008428 <dec_lock+0x6c>
 8008416:	490a      	ldr	r1, [pc, #40]	; (8008440 <dec_lock+0x84>)
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	005b      	lsls	r3, r3, #1
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	737b      	strb	r3, [r7, #13]
 800842c:	e001      	b.n	8008432 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800842e:	2302      	movs	r3, #2
 8008430:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008432:	7b7b      	ldrb	r3, [r7, #13]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	20000ce0 	.word	0x20000ce0

08008444 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	e016      	b.n	8008480 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008452:	4910      	ldr	r1, [pc, #64]	; (8008494 <clear_lock+0x50>)
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4613      	mov	r3, r2
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	440b      	add	r3, r1
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	429a      	cmp	r2, r3
 8008466:	d108      	bne.n	800847a <clear_lock+0x36>
 8008468:	490a      	ldr	r1, [pc, #40]	; (8008494 <clear_lock+0x50>)
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	4613      	mov	r3, r2
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	440b      	add	r3, r1
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3301      	adds	r3, #1
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d9e5      	bls.n	8008452 <clear_lock+0xe>
	}
}
 8008486:	bf00      	nop
 8008488:	bf00      	nop
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	20000ce0 	.word	0x20000ce0

08008498 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d038      	beq.n	8008520 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 80084b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	2301      	movs	r3, #1
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	f7ff fd77 	bl	8007fb4 <disk_write>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <sync_window+0x3a>
			res = FR_DISK_ERR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	73fb      	strb	r3, [r7, #15]
 80084d0:	e026      	b.n	8008520 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	1ad2      	subs	r2, r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d218      	bcs.n	8008520 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 80084f4:	613b      	str	r3, [r7, #16]
 80084f6:	e010      	b.n	800851a <sync_window+0x82>
					wsect += fs->fsize;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4413      	add	r3, r2
 8008502:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	2301      	movs	r3, #1
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	f7ff fd50 	bl	8007fb4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	3b01      	subs	r3, #1
 8008518:	613b      	str	r3, [r7, #16]
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d8eb      	bhi.n	80084f8 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d01b      	beq.n	800857c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7ff ffa7 	bl	8008498 <sync_window>
 800854a:	4603      	mov	r3, r0
 800854c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d113      	bne.n	800857c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	2301      	movs	r3, #1
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	f7ff fd08 	bl	8007f74 <disk_read>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d004      	beq.n	8008574 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800856a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800856e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008570:	2301      	movs	r3, #1
 8008572:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff ff82 	bl	8008498 <sync_window>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f040 809c 	bne.w	80086d8 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	f040 8089 	bne.w	80086be <sync_fs+0x138>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	f040 8083 	bne.w	80086be <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80085c0:	461a      	mov	r2, r3
 80085c2:	2100      	movs	r1, #0
 80085c4:	f7ff fd53 	bl	800806e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2255      	movs	r2, #85	; 0x55
 80085cc:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	22aa      	movs	r2, #170	; 0xaa
 80085d4:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2252      	movs	r2, #82	; 0x52
 80085dc:	701a      	strb	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2252      	movs	r2, #82	; 0x52
 80085e2:	705a      	strb	r2, [r3, #1]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2261      	movs	r2, #97	; 0x61
 80085e8:	709a      	strb	r2, [r3, #2]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2241      	movs	r2, #65	; 0x41
 80085ee:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2272      	movs	r2, #114	; 0x72
 80085f4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2272      	movs	r2, #114	; 0x72
 80085fc:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2241      	movs	r2, #65	; 0x41
 8008604:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2261      	movs	r2, #97	; 0x61
 800860c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008616:	b2da      	uxtb	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008624:	b29b      	uxth	r3, r3
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	b29b      	uxth	r3, r3
 800862a:	b2da      	uxtb	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008638:	0c1b      	lsrs	r3, r3, #16
 800863a:	b2da      	uxtb	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008648:	0e1b      	lsrs	r3, r3, #24
 800864a:	b2da      	uxtb	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008658:	b2da      	uxtb	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008666:	b29b      	uxth	r3, r3
 8008668:	0a1b      	lsrs	r3, r3, #8
 800866a:	b29b      	uxth	r3, r3
 800866c:	b2da      	uxtb	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	b2da      	uxtb	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800868a:	0e1b      	lsrs	r3, r3, #24
 800868c:	b2da      	uxtb	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80086b0:	2301      	movs	r3, #1
 80086b2:	f7ff fc7f 	bl	8007fb4 <disk_write>
			fs->fsi_flag = 0;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80086c4:	2200      	movs	r2, #0
 80086c6:	2100      	movs	r1, #0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff fc93 	bl	8007ff4 <disk_ioctl>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <sync_fs+0x152>
			res = FR_DISK_ERR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	3b02      	subs	r3, #2
 80086f0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80086f8:	3b02      	subs	r3, #2
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d301      	bcc.n	8008704 <clust2sect+0x22>
 8008700:	2300      	movs	r3, #0
 8008702:	e00a      	b.n	800871a <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800870a:	461a      	mov	r2, r3
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	fb03 f202 	mul.w	r2, r3, r2
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8008718:	4413      	add	r3, r2
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b086      	sub	sp, #24
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d905      	bls.n	8008742 <get_fat+0x1c>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	429a      	cmp	r2, r3
 8008740:	d302      	bcc.n	8008748 <get_fat+0x22>
		val = 1;	/* Internal error */
 8008742:	2301      	movs	r3, #1
 8008744:	617b      	str	r3, [r7, #20]
 8008746:	e0d7      	b.n	80088f8 <get_fat+0x1d2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800874c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008754:	2b03      	cmp	r3, #3
 8008756:	f000 808f 	beq.w	8008878 <get_fat+0x152>
 800875a:	2b03      	cmp	r3, #3
 800875c:	f300 80c2 	bgt.w	80088e4 <get_fat+0x1be>
 8008760:	2b01      	cmp	r3, #1
 8008762:	d002      	beq.n	800876a <get_fat+0x44>
 8008764:	2b02      	cmp	r3, #2
 8008766:	d059      	beq.n	800881c <get_fat+0xf6>
 8008768:	e0bc      	b.n	80088e4 <get_fat+0x1be>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	60fb      	str	r3, [r7, #12]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4413      	add	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008784:	4619      	mov	r1, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	fbb3 f3f1 	udiv	r3, r3, r1
 800878c:	4413      	add	r3, r2
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7ff feca 	bl	800852a <move_window>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	f040 80a6 	bne.w	80088ea <get_fat+0x1c4>
			wc = fs->win.d8[bc++ % SS(fs)];
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	60fa      	str	r2, [r7, #12]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80087aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80087ae:	fb01 f202 	mul.w	r2, r1, r2
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	5cd3      	ldrb	r3, [r2, r3]
 80087b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80087c6:	4619      	mov	r1, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80087ce:	4413      	add	r3, r2
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff fea9 	bl	800852a <move_window>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f040 8087 	bne.w	80088ee <get_fat+0x1c8>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80087e6:	461a      	mov	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80087ee:	fb01 f202 	mul.w	r2, r1, r2
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	5cd3      	ldrb	r3, [r2, r3]
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	461a      	mov	r2, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <get_fat+0xec>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	091b      	lsrs	r3, r3, #4
 8008810:	e002      	b.n	8008818 <get_fat+0xf2>
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008818:	617b      	str	r3, [r7, #20]
			break;
 800881a:	e06d      	b.n	80088f8 <get_fat+0x1d2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008828:	085b      	lsrs	r3, r3, #1
 800882a:	b29b      	uxth	r3, r3
 800882c:	4619      	mov	r1, r3
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	fbb3 f3f1 	udiv	r3, r3, r1
 8008834:	4413      	add	r3, r2
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7ff fe76 	bl	800852a <move_window>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d156      	bne.n	80088f2 <get_fat+0x1cc>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800884e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008852:	fb01 f202 	mul.w	r2, r1, r2
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	4413      	add	r3, r2
 800885c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	3301      	adds	r3, #1
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	021b      	lsls	r3, r3, #8
 8008866:	b21a      	sxth	r2, r3
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	b21b      	sxth	r3, r3
 800886e:	4313      	orrs	r3, r2
 8008870:	b21b      	sxth	r3, r3
 8008872:	b29b      	uxth	r3, r3
 8008874:	617b      	str	r3, [r7, #20]
			break;
 8008876:	e03f      	b.n	80088f8 <get_fat+0x1d2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008884:	089b      	lsrs	r3, r3, #2
 8008886:	b29b      	uxth	r3, r3
 8008888:	4619      	mov	r1, r3
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008890:	4413      	add	r3, r2
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff fe48 	bl	800852a <move_window>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d12a      	bne.n	80088f6 <get_fat+0x1d0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80088aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80088ae:	fb01 f202 	mul.w	r2, r1, r2
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	4413      	add	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	3303      	adds	r3, #3
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	061a      	lsls	r2, r3, #24
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	3302      	adds	r3, #2
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	041b      	lsls	r3, r3, #16
 80088ca:	4313      	orrs	r3, r2
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	3201      	adds	r2, #1
 80088d0:	7812      	ldrb	r2, [r2, #0]
 80088d2:	0212      	lsls	r2, r2, #8
 80088d4:	4313      	orrs	r3, r2
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	7812      	ldrb	r2, [r2, #0]
 80088da:	4313      	orrs	r3, r2
 80088dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80088e0:	617b      	str	r3, [r7, #20]
			break;
 80088e2:	e009      	b.n	80088f8 <get_fat+0x1d2>

		default:
			val = 1;	/* Internal error */
 80088e4:	2301      	movs	r3, #1
 80088e6:	617b      	str	r3, [r7, #20]
 80088e8:	e006      	b.n	80088f8 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088ea:	bf00      	nop
 80088ec:	e004      	b.n	80088f8 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088ee:	bf00      	nop
 80088f0:	e002      	b.n	80088f8 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80088f2:	bf00      	nop
 80088f4:	e000      	b.n	80088f8 <get_fat+0x1d2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80088f6:	bf00      	nop
		}
	}

	return val;
 80088f8:	697b      	ldr	r3, [r7, #20]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b088      	sub	sp, #32
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d905      	bls.n	8008920 <put_fat+0x1e>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800891a:	68ba      	ldr	r2, [r7, #8]
 800891c:	429a      	cmp	r2, r3
 800891e:	d302      	bcc.n	8008926 <put_fat+0x24>
		res = FR_INT_ERR;
 8008920:	2302      	movs	r3, #2
 8008922:	77fb      	strb	r3, [r7, #31]
 8008924:	e128      	b.n	8008b78 <put_fat+0x276>

	} else {
		switch (fs->fs_type) {
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800892c:	2b03      	cmp	r3, #3
 800892e:	f000 80c3 	beq.w	8008ab8 <put_fat+0x1b6>
 8008932:	2b03      	cmp	r3, #3
 8008934:	f300 8116 	bgt.w	8008b64 <put_fat+0x262>
 8008938:	2b01      	cmp	r3, #1
 800893a:	d003      	beq.n	8008944 <put_fat+0x42>
 800893c:	2b02      	cmp	r3, #2
 800893e:	f000 8087 	beq.w	8008a50 <put_fat+0x14e>
 8008942:	e10f      	b.n	8008b64 <put_fat+0x262>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	085b      	lsrs	r3, r3, #1
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	4413      	add	r3, r2
 8008950:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800895e:	4619      	mov	r1, r3
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	fbb3 f3f1 	udiv	r3, r3, r1
 8008966:	4413      	add	r3, r2
 8008968:	4619      	mov	r1, r3
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f7ff fddd 	bl	800852a <move_window>
 8008970:	4603      	mov	r3, r0
 8008972:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008974:	7ffb      	ldrb	r3, [r7, #31]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f040 80f7 	bne.w	8008b6a <put_fat+0x268>
			p = &fs->win.d8[bc++ % SS(fs)];
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	617a      	str	r2, [r7, #20]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008988:	fbb3 f1f2 	udiv	r1, r3, r2
 800898c:	fb01 f202 	mul.w	r2, r1, r2
 8008990:	1a9b      	subs	r3, r3, r2
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4413      	add	r3, r2
 8008996:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00d      	beq.n	80089be <put_fat+0xbc>
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b25b      	sxtb	r3, r3
 80089a8:	f003 030f 	and.w	r3, r3, #15
 80089ac:	b25a      	sxtb	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	b25b      	sxtb	r3, r3
 80089b6:	4313      	orrs	r3, r2
 80089b8:	b25b      	sxtb	r3, r3
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	e001      	b.n	80089c2 <put_fat+0xc0>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80089da:	4619      	mov	r1, r3
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	fbb3 f3f1 	udiv	r3, r3, r1
 80089e2:	4413      	add	r3, r2
 80089e4:	4619      	mov	r1, r3
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f7ff fd9f 	bl	800852a <move_window>
 80089ec:	4603      	mov	r3, r0
 80089ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089f0:	7ffb      	ldrb	r3, [r7, #31]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f040 80bb 	bne.w	8008b6e <put_fat+0x26c>
			p = &fs->win.d8[bc % SS(fs)];
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80089fe:	461a      	mov	r2, r3
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a06:	fb01 f202 	mul.w	r2, r1, r2
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4413      	add	r3, r2
 8008a10:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <put_fat+0x122>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	091b      	lsrs	r3, r3, #4
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	e00e      	b.n	8008a42 <put_fat+0x140>
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	b25b      	sxtb	r3, r3
 8008a2a:	f023 030f 	bic.w	r3, r3, #15
 8008a2e:	b25a      	sxtb	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	0a1b      	lsrs	r3, r3, #8
 8008a34:	b25b      	sxtb	r3, r3
 8008a36:	f003 030f 	and.w	r3, r3, #15
 8008a3a:	b25b      	sxtb	r3, r3
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	b25b      	sxtb	r3, r3
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8008a4e:	e093      	b.n	8008b78 <put_fat+0x276>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008a5c:	085b      	lsrs	r3, r3, #1
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	4619      	mov	r1, r3
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a68:	4413      	add	r3, r2
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f7ff fd5c 	bl	800852a <move_window>
 8008a72:	4603      	mov	r3, r0
 8008a74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a76:	7ffb      	ldrb	r3, [r7, #31]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d17a      	bne.n	8008b72 <put_fat+0x270>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008a86:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a8a:	fb01 f202 	mul.w	r2, r1, r2
 8008a8e:	1a9b      	subs	r3, r3, r2
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4413      	add	r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	701a      	strb	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	0a1b      	lsrs	r3, r3, #8
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8008ab6:	e05f      	b.n	8008b78 <put_fat+0x276>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008ac4:	089b      	lsrs	r3, r3, #2
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	4619      	mov	r1, r3
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ad0:	4413      	add	r3, r2
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f7ff fd28 	bl	800852a <move_window>
 8008ada:	4603      	mov	r3, r0
 8008adc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ade:	7ffb      	ldrb	r3, [r7, #31]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d148      	bne.n	8008b76 <put_fat+0x274>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8008aee:	fbb3 f1f2 	udiv	r1, r3, r2
 8008af2:	fb01 f202 	mul.w	r2, r1, r2
 8008af6:	1a9b      	subs	r3, r3, r2
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	4413      	add	r3, r2
 8008afc:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	3303      	adds	r3, #3
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	061a      	lsls	r2, r3, #24
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	3302      	adds	r3, #2
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	3201      	adds	r2, #1
 8008b14:	7812      	ldrb	r2, [r2, #0]
 8008b16:	0212      	lsls	r2, r2, #8
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	7812      	ldrb	r2, [r2, #0]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	701a      	strb	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	0a1b      	lsrs	r3, r3, #8
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	0c1a      	lsrs	r2, r3, #16
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	3302      	adds	r3, #2
 8008b4a:	b2d2      	uxtb	r2, r2
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	0e1a      	lsrs	r2, r3, #24
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	3303      	adds	r3, #3
 8008b56:	b2d2      	uxtb	r2, r2
 8008b58:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8008b62:	e009      	b.n	8008b78 <put_fat+0x276>

		default :
			res = FR_INT_ERR;
 8008b64:	2302      	movs	r3, #2
 8008b66:	77fb      	strb	r3, [r7, #31]
 8008b68:	e006      	b.n	8008b78 <put_fat+0x276>
			if (res != FR_OK) break;
 8008b6a:	bf00      	nop
 8008b6c:	e004      	b.n	8008b78 <put_fat+0x276>
			if (res != FR_OK) break;
 8008b6e:	bf00      	nop
 8008b70:	e002      	b.n	8008b78 <put_fat+0x276>
			if (res != FR_OK) break;
 8008b72:	bf00      	nop
 8008b74:	e000      	b.n	8008b78 <put_fat+0x276>
			if (res != FR_OK) break;
 8008b76:	bf00      	nop
		}
	}

	return res;
 8008b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3720      	adds	r7, #32
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d905      	bls.n	8008b9e <remove_chain+0x1c>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d302      	bcc.n	8008ba4 <remove_chain+0x22>
		res = FR_INT_ERR;
 8008b9e:	2302      	movs	r3, #2
 8008ba0:	73fb      	strb	r3, [r7, #15]
 8008ba2:	e043      	b.n	8008c2c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008ba8:	e036      	b.n	8008c18 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff fdba 	bl	8008726 <get_fat>
 8008bb2:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d035      	beq.n	8008c26 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d102      	bne.n	8008bc6 <remove_chain+0x44>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	73fb      	strb	r3, [r7, #15]
 8008bc4:	e032      	b.n	8008c2c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bcc:	d102      	bne.n	8008bd4 <remove_chain+0x52>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	73fb      	strb	r3, [r7, #15]
 8008bd2:	e02b      	b.n	8008c2c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff fe92 	bl	8008902 <put_fat>
 8008bde:	4603      	mov	r3, r0
 8008be0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d120      	bne.n	8008c2a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bf2:	d00f      	beq.n	8008c14 <remove_chain+0x92>
				fs->free_clust++;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8008c08:	f043 0301 	orr.w	r3, r3, #1
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d3c2      	bcc.n	8008baa <remove_chain+0x28>
 8008c24:	e002      	b.n	8008c2c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8008c26:	bf00      	nop
 8008c28:	e000      	b.n	8008c2c <remove_chain+0xaa>
			if (res != FR_OK) break;
 8008c2a:	bf00      	nop
		}
	}

	return res;
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b086      	sub	sp, #24
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10f      	bne.n	8008c66 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008c4c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <create_chain+0x2a>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d31c      	bcc.n	8008c9a <create_chain+0x64>
 8008c60:	2301      	movs	r3, #1
 8008c62:	613b      	str	r3, [r7, #16]
 8008c64:	e019      	b.n	8008c9a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff fd5c 	bl	8008726 <get_fat>
 8008c6e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d801      	bhi.n	8008c7a <create_chain+0x44>
 8008c76:	2301      	movs	r3, #1
 8008c78:	e076      	b.n	8008d68 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c80:	d101      	bne.n	8008c86 <create_chain+0x50>
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	e070      	b.n	8008d68 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d201      	bcs.n	8008c96 <create_chain+0x60>
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	e068      	b.n	8008d68 <create_chain+0x132>
		scl = clst;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d307      	bcc.n	8008cc0 <create_chain+0x8a>
			ncl = 2;
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d901      	bls.n	8008cc0 <create_chain+0x8a>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	e053      	b.n	8008d68 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8008cc0:	6979      	ldr	r1, [r7, #20]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff fd2f 	bl	8008726 <get_fat>
 8008cc8:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00e      	beq.n	8008cee <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cd6:	d002      	beq.n	8008cde <create_chain+0xa8>
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <create_chain+0xac>
			return cs;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	e042      	b.n	8008d68 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d1d9      	bne.n	8008c9e <create_chain+0x68>
 8008cea:	2300      	movs	r3, #0
 8008cec:	e03c      	b.n	8008d68 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8008cee:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8008cf0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008cf4:	6979      	ldr	r1, [r7, #20]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7ff fe03 	bl	8008902 <put_fat>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <create_chain+0xe4>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d006      	beq.n	8008d1a <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff fdf6 	bl	8008902 <put_fat>
 8008d16:	4603      	mov	r3, r0
 8008d18:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d11a      	bne.n	8008d56 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d32:	d018      	beq.n	8008d66 <create_chain+0x130>
			fs->free_clust--;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008d3a:	1e5a      	subs	r2, r3, #1
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8008d48:	f043 0301 	orr.w	r3, r3, #1
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 8008d54:	e007      	b.n	8008d66 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d102      	bne.n	8008d62 <create_chain+0x12c>
 8008d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d60:	e000      	b.n	8008d64 <create_chain+0x12e>
 8008d62:	2301      	movs	r3, #1
 8008d64:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8008d66:	697b      	ldr	r3, [r7, #20]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8008d80:	3304      	adds	r3, #4
 8008d82:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008d8a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008d8e:	461a      	mov	r2, r3
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8008d9c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8008da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008da4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	1d1a      	adds	r2, r3, #4
 8008daa:	613a      	str	r2, [r7, #16]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <clmt_clust+0x4a>
 8008db6:	2300      	movs	r3, #0
 8008db8:	e010      	b.n	8008ddc <clmt_clust+0x6c>
		if (cl < ncl) break;	/* In this fragment? */
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d307      	bcc.n	8008dd2 <clmt_clust+0x62>
		cl -= ncl; tbl++;		/* Next fragment */
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	617b      	str	r3, [r7, #20]
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008dd0:	e7e9      	b.n	8008da6 <clmt_clust+0x36>
		if (cl < ncl) break;	/* In this fragment? */
 8008dd2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	4413      	add	r3, r2
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	371c      	adds	r7, #28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008e02:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d007      	beq.n	8008e1a <dir_sdi+0x32>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008e10:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d301      	bcc.n	8008e1e <dir_sdi+0x36>
		return FR_INT_ERR;
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e091      	b.n	8008f42 <dir_sdi+0x15a>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10c      	bne.n	8008e3e <dir_sdi+0x56>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008e2a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d105      	bne.n	8008e3e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008e38:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8008e3c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d111      	bne.n	8008e68 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008e4a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8008e4e:	461a      	mov	r2, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d301      	bcc.n	8008e5a <dir_sdi+0x72>
			return FR_INT_ERR;
 8008e56:	2302      	movs	r3, #2
 8008e58:	e073      	b.n	8008f42 <dir_sdi+0x15a>
		sect = dp->fs->dirbase;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008e60:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8008e64:	613b      	str	r3, [r7, #16]
 8008e66:	e03b      	b.n	8008ee0 <dir_sdi+0xf8>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008e6e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008e72:	095b      	lsrs	r3, r3, #5
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	461a      	mov	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008e7e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8008e82:	fb02 f303 	mul.w	r3, r2, r3
 8008e86:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8008e88:	e01e      	b.n	8008ec8 <dir_sdi+0xe0>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008e90:	6979      	ldr	r1, [r7, #20]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7ff fc47 	bl	8008726 <get_fat>
 8008e98:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ea0:	d101      	bne.n	8008ea6 <dir_sdi+0xbe>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e04d      	b.n	8008f42 <dir_sdi+0x15a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d907      	bls.n	8008ebc <dir_sdi+0xd4>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008eb2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d301      	bcc.n	8008ec0 <dir_sdi+0xd8>
				return FR_INT_ERR;
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e040      	b.n	8008f42 <dir_sdi+0x15a>
			idx -= ic;
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d2dc      	bcs.n	8008e8a <dir_sdi+0xa2>
		}
		sect = clust2sect(dp->fs, clst);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008ed6:	6979      	ldr	r1, [r7, #20]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff fc02 	bl	80086e2 <clust2sect>
 8008ede:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	if (!sect) return FR_INT_ERR;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <dir_sdi+0x10a>
 8008eee:	2302      	movs	r3, #2
 8008ef0:	e027      	b.n	8008f42 <dir_sdi+0x15a>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008ef8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	461a      	mov	r2, r3
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	441a      	add	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008f18:	4618      	mov	r0, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008f20:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008f24:	095b      	lsrs	r3, r3, #5
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f30:	fb01 f202 	mul.w	r2, r1, r2
 8008f34:	1a9b      	subs	r3, r3, r2
 8008f36:	015b      	lsls	r3, r3, #5
 8008f38:	18c2      	adds	r2, r0, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008f4a:	b590      	push	{r4, r7, lr}
 8008f4c:	b087      	sub	sp, #28
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d004      	beq.n	8008f70 <dir_next+0x26>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <dir_next+0x2a>
		return FR_NO_FILE;
 8008f70:	2304      	movs	r3, #4
 8008f72:	e100      	b.n	8009176 <dir_next+0x22c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008f7a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008f7e:	095b      	lsrs	r3, r3, #5
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f8a:	fb01 f202 	mul.w	r2, r1, r2
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f040 80d3 	bne.w	800913c <dir_next+0x1f2>
		dp->sect++;					/* Next sector */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

		if (!dp->clust) {		/* Static table */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10b      	bne.n	8008fc6 <dir_next+0x7c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008fb4:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8008fb8:	461a      	mov	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	f0c0 80bd 	bcc.w	800913c <dir_next+0x1f2>
				return FR_NO_FILE;
 8008fc2:	2304      	movs	r3, #4
 8008fc4:	e0d7      	b.n	8009176 <dir_next+0x22c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008fcc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8008fd0:	095b      	lsrs	r3, r3, #5
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8008fe2:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8008fe6:	3a01      	subs	r2, #1
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f040 80a6 	bne.w	800913c <dir_next+0x1f2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4610      	mov	r0, r2
 8009000:	f7ff fb91 	bl	8008726 <get_fat>
 8009004:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d801      	bhi.n	8009010 <dir_next+0xc6>
 800900c:	2302      	movs	r3, #2
 800900e:	e0b2      	b.n	8009176 <dir_next+0x22c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009016:	d101      	bne.n	800901c <dir_next+0xd2>
 8009018:	2301      	movs	r3, #1
 800901a:	e0ac      	b.n	8009176 <dir_next+0x22c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009022:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	429a      	cmp	r2, r3
 800902a:	d378      	bcc.n	800911e <dir_next+0x1d4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <dir_next+0xec>
 8009032:	2304      	movs	r3, #4
 8009034:	e09f      	b.n	8009176 <dir_next+0x22c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009042:	4619      	mov	r1, r3
 8009044:	4610      	mov	r0, r2
 8009046:	f7ff fdf6 	bl	8008c36 <create_chain>
 800904a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <dir_next+0x10c>
 8009052:	2307      	movs	r3, #7
 8009054:	e08f      	b.n	8009176 <dir_next+0x22c>
					if (clst == 1) return FR_INT_ERR;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <dir_next+0x116>
 800905c:	2302      	movs	r3, #2
 800905e:	e08a      	b.n	8009176 <dir_next+0x22c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009066:	d101      	bne.n	800906c <dir_next+0x122>
 8009068:	2301      	movs	r3, #1
 800906a:	e084      	b.n	8009176 <dir_next+0x22c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff fa10 	bl	8008498 <sync_window>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <dir_next+0x138>
 800907e:	2301      	movs	r3, #1
 8009080:	e079      	b.n	8009176 <dir_next+0x22c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009088:	4618      	mov	r0, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009090:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009094:	461a      	mov	r2, r3
 8009096:	2100      	movs	r1, #0
 8009098:	f7fe ffe9 	bl	800806e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 80090a8:	6979      	ldr	r1, [r7, #20]
 80090aa:	4610      	mov	r0, r2
 80090ac:	f7ff fb19 	bl	80086e2 <clust2sect>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80090b6:	2300      	movs	r3, #0
 80090b8:	613b      	str	r3, [r7, #16]
 80090ba:	e01b      	b.n	80090f4 <dir_next+0x1aa>
						dp->fs->wflag = 1;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff f9e2 	bl	8008498 <sync_window>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <dir_next+0x194>
 80090da:	2301      	movs	r3, #1
 80090dc:	e04b      	b.n	8009176 <dir_next+0x22c>
						dp->fs->winsect++;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80090e4:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80090e8:	3201      	adds	r2, #1
 80090ea:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	3301      	adds	r3, #1
 80090f2:	613b      	str	r3, [r7, #16]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80090fa:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80090fe:	461a      	mov	r2, r3
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	4293      	cmp	r3, r2
 8009104:	d3da      	bcc.n	80090bc <dir_next+0x172>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800910c:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	1a8a      	subs	r2, r1, r2
 800911a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
				dp->sect = clust2sect(dp->fs, clst);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800912c:	6979      	ldr	r1, [r7, #20]
 800912e:	4618      	mov	r0, r3
 8009130:	f7ff fad7 	bl	80086e2 <clust2sect>
 8009134:	4602      	mov	r2, r0
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	b29a      	uxth	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800914c:	4618      	mov	r0, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009154:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8009158:	095b      	lsrs	r3, r3, #5
 800915a:	b29b      	uxth	r3, r3
 800915c:	461a      	mov	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	fbb3 f1f2 	udiv	r1, r3, r2
 8009164:	fb01 f202 	mul.w	r2, r1, r2
 8009168:	1a9b      	subs	r3, r3, r2
 800916a:	015b      	lsls	r3, r3, #5
 800916c:	18c2      	adds	r2, r0, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	371c      	adds	r7, #28
 800917a:	46bd      	mov	sp, r7
 800917c:	bd90      	pop	{r4, r7, pc}

0800917e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8009188:	2100      	movs	r1, #0
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff fe2c 	bl	8008de8 <dir_sdi>
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d131      	bne.n	80091fe <dir_alloc+0x80>
		n = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80091aa:	4619      	mov	r1, r3
 80091ac:	4610      	mov	r0, r2
 80091ae:	f7ff f9bc 	bl	800852a <move_window>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d11f      	bne.n	80091fc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2be5      	cmp	r3, #229	; 0xe5
 80091c6:	d005      	beq.n	80091d4 <dir_alloc+0x56>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d107      	bne.n	80091e4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	3301      	adds	r3, #1
 80091d8:	60bb      	str	r3, [r7, #8]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d102      	bne.n	80091e8 <dir_alloc+0x6a>
 80091e2:	e00c      	b.n	80091fe <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80091e4:	2300      	movs	r3, #0
 80091e6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80091e8:	2101      	movs	r1, #1
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff fead 	bl	8008f4a <dir_next>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0d1      	beq.n	800919e <dir_alloc+0x20>
 80091fa:	e000      	b.n	80091fe <dir_alloc+0x80>
			if (res != FR_OK) break;
 80091fc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
 8009200:	2b04      	cmp	r3, #4
 8009202:	d101      	bne.n	8009208 <dir_alloc+0x8a>
 8009204:	2307      	movs	r3, #7
 8009206:	73fb      	strb	r3, [r7, #15]
	return res;
 8009208:	7bfb      	ldrb	r3, [r7, #15]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8009212:	b480      	push	{r7}
 8009214:	b085      	sub	sp, #20
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	331b      	adds	r3, #27
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	021b      	lsls	r3, r3, #8
 8009224:	b21a      	sxth	r2, r3
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	331a      	adds	r3, #26
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	b21b      	sxth	r3, r3
 800922e:	4313      	orrs	r3, r2
 8009230:	b21b      	sxth	r3, r3
 8009232:	b29b      	uxth	r3, r3
 8009234:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800923c:	2b03      	cmp	r3, #3
 800923e:	d10f      	bne.n	8009260 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	3315      	adds	r3, #21
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	b21a      	sxth	r2, r3
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	3314      	adds	r3, #20
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	b21b      	sxth	r3, r3
 8009252:	4313      	orrs	r3, r2
 8009254:	b21b      	sxth	r3, r3
 8009256:	b29b      	uxth	r3, r3
 8009258:	041b      	lsls	r3, r3, #16
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	4313      	orrs	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]

	return cl;
 8009260:	68fb      	ldr	r3, [r7, #12]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	331a      	adds	r3, #26
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	b2d2      	uxtb	r2, r2
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	b29b      	uxth	r3, r3
 8009286:	0a1b      	lsrs	r3, r3, #8
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	331b      	adds	r3, #27
 800928e:	b2d2      	uxtb	r2, r2
 8009290:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	0c1a      	lsrs	r2, r3, #16
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3314      	adds	r3, #20
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	701a      	strb	r2, [r3, #0]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	0c1b      	lsrs	r3, r3, #16
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	0a1b      	lsrs	r3, r3, #8
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3315      	adds	r3, #21
 80092ac:	b2d2      	uxtb	r2, r2
 80092ae:	701a      	strb	r2, [r3, #0]
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ce:	1e5a      	subs	r2, r3, #1
 80092d0:	4613      	mov	r3, r2
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80092dc:	2300      	movs	r3, #0
 80092de:	613b      	str	r3, [r7, #16]
 80092e0:	2301      	movs	r3, #1
 80092e2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80092e4:	4a2b      	ldr	r2, [pc, #172]	; (8009394 <cmp_lfn+0xd8>)
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	4413      	add	r3, r2
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	3301      	adds	r3, #1
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	4413      	add	r3, r2
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	021b      	lsls	r3, r3, #8
 80092f6:	b21a      	sxth	r2, r3
 80092f8:	4926      	ldr	r1, [pc, #152]	; (8009394 <cmp_lfn+0xd8>)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	440b      	add	r3, r1
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	4619      	mov	r1, r3
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	440b      	add	r3, r1
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	b21b      	sxth	r3, r3
 800930a:	4313      	orrs	r3, r2
 800930c:	b21b      	sxth	r3, r3
 800930e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8009310:	89fb      	ldrh	r3, [r7, #14]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d019      	beq.n	800934a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8009316:	89bb      	ldrh	r3, [r7, #12]
 8009318:	4618      	mov	r0, r3
 800931a:	f002 f9eb 	bl	800b6f4 <ff_wtoupper>
 800931e:	4603      	mov	r3, r0
 8009320:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2bfe      	cmp	r3, #254	; 0xfe
 8009326:	d80e      	bhi.n	8009346 <cmp_lfn+0x8a>
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	617a      	str	r2, [r7, #20]
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	4413      	add	r3, r2
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	4618      	mov	r0, r3
 8009338:	f002 f9dc 	bl	800b6f4 <ff_wtoupper>
 800933c:	4603      	mov	r3, r0
 800933e:	461a      	mov	r2, r3
 8009340:	89fb      	ldrh	r3, [r7, #14]
 8009342:	4293      	cmp	r3, r2
 8009344:	d008      	beq.n	8009358 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8009346:	2300      	movs	r3, #0
 8009348:	e01f      	b.n	800938a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800934a:	89bb      	ldrh	r3, [r7, #12]
 800934c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009350:	4293      	cmp	r3, r2
 8009352:	d001      	beq.n	8009358 <cmp_lfn+0x9c>
 8009354:	2300      	movs	r3, #0
 8009356:	e018      	b.n	800938a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	3301      	adds	r3, #1
 800935c:	613b      	str	r3, [r7, #16]
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b0c      	cmp	r3, #12
 8009362:	d9bf      	bls.n	80092e4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <cmp_lfn+0xcc>
 8009370:	89fb      	ldrh	r3, [r7, #14]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d008      	beq.n	8009388 <cmp_lfn+0xcc>
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	4413      	add	r3, r2
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <cmp_lfn+0xcc>
		return 0;
 8009384:	2300      	movs	r3, #0
 8009386:	e000      	b.n	800938a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8009388:	2301      	movs	r3, #1
}
 800938a:	4618      	mov	r0, r3
 800938c:	3718      	adds	r7, #24
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	0800f584 	.word	0x0800f584

08009398 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8009398:	b480      	push	{r7}
 800939a:	b089      	sub	sp, #36	; 0x24
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	4611      	mov	r1, r2
 80093a4:	461a      	mov	r2, r3
 80093a6:	460b      	mov	r3, r1
 80093a8:	71fb      	strb	r3, [r7, #7]
 80093aa:	4613      	mov	r3, r2
 80093ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	330d      	adds	r3, #13
 80093b2:	79ba      	ldrb	r2, [r7, #6]
 80093b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	330b      	adds	r3, #11
 80093ba:	220f      	movs	r2, #15
 80093bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	330c      	adds	r3, #12
 80093c2:	2200      	movs	r2, #0
 80093c4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	331a      	adds	r3, #26
 80093ca:	2200      	movs	r2, #0
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	331b      	adds	r3, #27
 80093d2:	2200      	movs	r2, #0
 80093d4:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80093d6:	79fb      	ldrb	r3, [r7, #7]
 80093d8:	1e5a      	subs	r2, r3, #1
 80093da:	4613      	mov	r3, r2
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	4413      	add	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	82fb      	strh	r3, [r7, #22]
 80093ea:	2300      	movs	r3, #0
 80093ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80093ee:	8afb      	ldrh	r3, [r7, #22]
 80093f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d007      	beq.n	8009408 <fit_lfn+0x70>
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	1c5a      	adds	r2, r3, #1
 80093fc:	61fa      	str	r2, [r7, #28]
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8009408:	4a1d      	ldr	r2, [pc, #116]	; (8009480 <fit_lfn+0xe8>)
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	4413      	add	r3, r2
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	4413      	add	r3, r2
 8009416:	8afa      	ldrh	r2, [r7, #22]
 8009418:	b2d2      	uxtb	r2, r2
 800941a:	701a      	strb	r2, [r3, #0]
 800941c:	8afb      	ldrh	r3, [r7, #22]
 800941e:	0a1b      	lsrs	r3, r3, #8
 8009420:	b299      	uxth	r1, r3
 8009422:	4a17      	ldr	r2, [pc, #92]	; (8009480 <fit_lfn+0xe8>)
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	4413      	add	r3, r2
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	3301      	adds	r3, #1
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	4413      	add	r3, r2
 8009430:	b2ca      	uxtb	r2, r1
 8009432:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8009434:	8afb      	ldrh	r3, [r7, #22]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d102      	bne.n	8009440 <fit_lfn+0xa8>
 800943a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800943e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	3301      	adds	r3, #1
 8009444:	61bb      	str	r3, [r7, #24]
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b0c      	cmp	r3, #12
 800944a:	d9d0      	bls.n	80093ee <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800944c:	8afb      	ldrh	r3, [r7, #22]
 800944e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009452:	4293      	cmp	r3, r2
 8009454:	d006      	beq.n	8009464 <fit_lfn+0xcc>
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	005b      	lsls	r3, r3, #1
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	4413      	add	r3, r2
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d103      	bne.n	800946c <fit_lfn+0xd4>
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800946a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	79fa      	ldrb	r2, [r7, #7]
 8009470:	701a      	strb	r2, [r3, #0]
}
 8009472:	bf00      	nop
 8009474:	3724      	adds	r7, #36	; 0x24
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	0800f584 	.word	0x0800f584

08009484 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08c      	sub	sp, #48	; 0x30
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009492:	220b      	movs	r2, #11
 8009494:	68b9      	ldr	r1, [r7, #8]
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7fe fdca 	bl	8008030 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2b05      	cmp	r3, #5
 80094a0:	d92b      	bls.n	80094fa <gen_numname+0x76>
		sr = seq;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80094a6:	e022      	b.n	80094ee <gen_numname+0x6a>
			wc = *lfn++;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	1c9a      	adds	r2, r3, #2
 80094ac:	607a      	str	r2, [r7, #4]
 80094ae:	881b      	ldrh	r3, [r3, #0]
 80094b0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80094b2:	2300      	movs	r3, #0
 80094b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80094b6:	e017      	b.n	80094e8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	005a      	lsls	r2, r3, #1
 80094bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	4413      	add	r3, r2
 80094c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80094c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094c8:	085b      	lsrs	r3, r3, #1
 80094ca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <gen_numname+0x5e>
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80094dc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80094e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80094e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e4:	3301      	adds	r3, #1
 80094e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80094e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ea:	2b0f      	cmp	r3, #15
 80094ec:	d9e4      	bls.n	80094b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1d8      	bne.n	80094a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80094fa:	2307      	movs	r3, #7
 80094fc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	b2db      	uxtb	r3, r3
 8009502:	f003 030f 	and.w	r3, r3, #15
 8009506:	b2db      	uxtb	r3, r3
 8009508:	3330      	adds	r3, #48	; 0x30
 800950a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800950e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009512:	2b39      	cmp	r3, #57	; 0x39
 8009514:	d904      	bls.n	8009520 <gen_numname+0x9c>
 8009516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800951a:	3307      	adds	r3, #7
 800951c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	1e5a      	subs	r2, r3, #1
 8009524:	62ba      	str	r2, [r7, #40]	; 0x28
 8009526:	3330      	adds	r3, #48	; 0x30
 8009528:	443b      	add	r3, r7
 800952a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800952e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	091b      	lsrs	r3, r3, #4
 8009536:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1df      	bne.n	80094fe <gen_numname+0x7a>
	ns[i] = '~';
 800953e:	f107 0214 	add.w	r2, r7, #20
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	4413      	add	r3, r2
 8009546:	227e      	movs	r2, #126	; 0x7e
 8009548:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800954a:	2300      	movs	r3, #0
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
 800954e:	e002      	b.n	8009556 <gen_numname+0xd2>
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	3301      	adds	r3, #1
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
 8009556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955a:	429a      	cmp	r2, r3
 800955c:	d205      	bcs.n	800956a <gen_numname+0xe6>
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	4413      	add	r3, r2
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	2b20      	cmp	r3, #32
 8009568:	d1f2      	bne.n	8009550 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	2b07      	cmp	r3, #7
 800956e:	d807      	bhi.n	8009580 <gen_numname+0xfc>
 8009570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	62ba      	str	r2, [r7, #40]	; 0x28
 8009576:	3330      	adds	r3, #48	; 0x30
 8009578:	443b      	add	r3, r7
 800957a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800957e:	e000      	b.n	8009582 <gen_numname+0xfe>
 8009580:	2120      	movs	r1, #32
 8009582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009584:	1c5a      	adds	r2, r3, #1
 8009586:	627a      	str	r2, [r7, #36]	; 0x24
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4413      	add	r3, r2
 800958c:	460a      	mov	r2, r1
 800958e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009592:	2b07      	cmp	r3, #7
 8009594:	d9e9      	bls.n	800956a <gen_numname+0xe6>
}
 8009596:	bf00      	nop
 8009598:	bf00      	nop
 800959a:	3730      	adds	r7, #48	; 0x30
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80095ac:	230b      	movs	r3, #11
 80095ae:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	0852      	lsrs	r2, r2, #1
 80095b6:	01db      	lsls	r3, r3, #7
 80095b8:	4313      	orrs	r3, r2
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	1c59      	adds	r1, r3, #1
 80095c0:	6079      	str	r1, [r7, #4]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	4413      	add	r3, r2
 80095c6:	73fb      	strb	r3, [r7, #15]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	3b01      	subs	r3, #1
 80095cc:	60bb      	str	r3, [r7, #8]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1ed      	bne.n	80095b0 <sum_sfn+0x10>
	return sum;
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b086      	sub	sp, #24
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80095ea:	2100      	movs	r1, #0
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff fbfb 	bl	8008de8 <dir_sdi>
 80095f2:	4603      	mov	r3, r0
 80095f4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <dir_find+0x1e>
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	e0ac      	b.n	800975a <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009600:	23ff      	movs	r3, #255	; 0xff
 8009602:	753b      	strb	r3, [r7, #20]
 8009604:	7d3b      	ldrb	r3, [r7, #20]
 8009606:	757b      	strb	r3, [r7, #21]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800960e:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800961e:	4619      	mov	r1, r3
 8009620:	4610      	mov	r0, r2
 8009622:	f7fe ff82 	bl	800852a <move_window>
 8009626:	4603      	mov	r3, r0
 8009628:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	2b00      	cmp	r3, #0
 800962e:	f040 808e 	bne.w	800974e <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009638:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009640:	7dbb      	ldrb	r3, [r7, #22]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d102      	bne.n	800964c <dir_find+0x6a>
 8009646:	2304      	movs	r3, #4
 8009648:	75fb      	strb	r3, [r7, #23]
 800964a:	e085      	b.n	8009758 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	330b      	adds	r3, #11
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009656:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009658:	7dbb      	ldrb	r3, [r7, #22]
 800965a:	2be5      	cmp	r3, #229	; 0xe5
 800965c:	d007      	beq.n	800966e <dir_find+0x8c>
 800965e:	7bfb      	ldrb	r3, [r7, #15]
 8009660:	f003 0308 	and.w	r3, r3, #8
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00a      	beq.n	800967e <dir_find+0x9c>
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	2b0f      	cmp	r3, #15
 800966c:	d007      	beq.n	800967e <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800966e:	23ff      	movs	r3, #255	; 0xff
 8009670:	757b      	strb	r3, [r7, #21]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009678:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
 800967c:	e05c      	b.n	8009738 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800967e:	7bfb      	ldrb	r3, [r7, #15]
 8009680:	2b0f      	cmp	r3, #15
 8009682:	d133      	bne.n	80096ec <dir_find+0x10a>
				if (dp->lfn) {
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800968a:	2b00      	cmp	r3, #0
 800968c:	d054      	beq.n	8009738 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800968e:	7dbb      	ldrb	r3, [r7, #22]
 8009690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00e      	beq.n	80096b6 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	7b5b      	ldrb	r3, [r3, #13]
 800969c:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800969e:	7dbb      	ldrb	r3, [r7, #22]
 80096a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096a4:	75bb      	strb	r3, [r7, #22]
 80096a6:	7dbb      	ldrb	r3, [r7, #22]
 80096a8:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80096b6:	7dba      	ldrb	r2, [r7, #22]
 80096b8:	7d7b      	ldrb	r3, [r7, #21]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d113      	bne.n	80096e6 <dir_find+0x104>
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	330d      	adds	r3, #13
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	7d3a      	ldrb	r2, [r7, #20]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d10d      	bne.n	80096e6 <dir_find+0x104>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80096d0:	6939      	ldr	r1, [r7, #16]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff fdf2 	bl	80092bc <cmp_lfn>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d003      	beq.n	80096e6 <dir_find+0x104>
 80096de:	7d7b      	ldrb	r3, [r7, #21]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	e000      	b.n	80096e8 <dir_find+0x106>
 80096e6:	23ff      	movs	r3, #255	; 0xff
 80096e8:	757b      	strb	r3, [r7, #21]
 80096ea:	e025      	b.n	8009738 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80096ec:	7d7b      	ldrb	r3, [r7, #21]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d107      	bne.n	8009702 <dir_find+0x120>
 80096f2:	6938      	ldr	r0, [r7, #16]
 80096f4:	f7ff ff54 	bl	80095a0 <sum_sfn>
 80096f8:	4603      	mov	r3, r0
 80096fa:	461a      	mov	r2, r3
 80096fc:	7d3b      	ldrb	r3, [r7, #20]
 80096fe:	4293      	cmp	r3, r2
 8009700:	d027      	beq.n	8009752 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009708:	330b      	adds	r3, #11
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <dir_find+0x148>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800971a:	220b      	movs	r2, #11
 800971c:	4619      	mov	r1, r3
 800971e:	6938      	ldr	r0, [r7, #16]
 8009720:	f7fe fcc0 	bl	80080a4 <mem_cmp>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d015      	beq.n	8009756 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800972a:	23ff      	movs	r3, #255	; 0xff
 800972c:	757b      	strb	r3, [r7, #21]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009734:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8009738:	2100      	movs	r1, #0
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff fc05 	bl	8008f4a <dir_next>
 8009740:	4603      	mov	r3, r0
 8009742:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009744:	7dfb      	ldrb	r3, [r7, #23]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f43f af63 	beq.w	8009612 <dir_find+0x30>
 800974c:	e004      	b.n	8009758 <dir_find+0x176>
		if (res != FR_OK) break;
 800974e:	bf00      	nop
 8009750:	e002      	b.n	8009758 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8009752:	bf00      	nop
 8009754:	e000      	b.n	8009758 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009756:	bf00      	nop

	return res;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b08c      	sub	sp, #48	; 0x30
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009772:	623b      	str	r3, [r7, #32]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800977a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800977c:	f107 030c 	add.w	r3, r7, #12
 8009780:	220c      	movs	r2, #12
 8009782:	6a39      	ldr	r1, [r7, #32]
 8009784:	4618      	mov	r0, r3
 8009786:	f7fe fc53 	bl	8008030 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800978a:	7dfb      	ldrb	r3, [r7, #23]
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	d037      	beq.n	8009804 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	330b      	adds	r3, #11
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		for (n = 1; n < 100; n++) {
 80097a4:	2301      	movs	r3, #1
 80097a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80097a8:	e013      	b.n	80097d2 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80097aa:	f107 010c 	add.w	r1, r7, #12
 80097ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b0:	69fa      	ldr	r2, [r7, #28]
 80097b2:	6a38      	ldr	r0, [r7, #32]
 80097b4:	f7ff fe66 	bl	8009484 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7ff ff12 	bl	80095e2 <dir_find>
 80097be:	4603      	mov	r3, r0
 80097c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80097c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d106      	bne.n	80097da <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ce:	3301      	adds	r3, #1
 80097d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80097d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d4:	2b63      	cmp	r3, #99	; 0x63
 80097d6:	d9e8      	bls.n	80097aa <dir_register+0x46>
 80097d8:	e000      	b.n	80097dc <dir_register+0x78>
			if (res != FR_OK) break;
 80097da:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	2b64      	cmp	r3, #100	; 0x64
 80097e0:	d101      	bne.n	80097e6 <dir_register+0x82>
 80097e2:	2307      	movs	r3, #7
 80097e4:	e0c5      	b.n	8009972 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80097e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d002      	beq.n	80097f4 <dir_register+0x90>
 80097ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097f2:	e0be      	b.n	8009972 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	330b      	adds	r3, #11
 80097f8:	7dfa      	ldrb	r2, [r7, #23]
 80097fa:	701a      	strb	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	69fa      	ldr	r2, [r7, #28]
 8009800:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8009804:	7dfb      	ldrb	r3, [r7, #23]
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b00      	cmp	r3, #0
 800980c:	d014      	beq.n	8009838 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800980e:	2300      	movs	r3, #0
 8009810:	62bb      	str	r3, [r7, #40]	; 0x28
 8009812:	e002      	b.n	800981a <dir_register+0xb6>
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	3301      	adds	r3, #1
 8009818:	62bb      	str	r3, [r7, #40]	; 0x28
 800981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	69fa      	ldr	r2, [r7, #28]
 8009820:	4413      	add	r3, r2
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1f5      	bne.n	8009814 <dir_register+0xb0>
		nent = (n + 25) / 13;
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	3319      	adds	r3, #25
 800982c:	4a53      	ldr	r2, [pc, #332]	; (800997c <dir_register+0x218>)
 800982e:	fba2 2303 	umull	r2, r3, r2, r3
 8009832:	089b      	lsrs	r3, r3, #2
 8009834:	627b      	str	r3, [r7, #36]	; 0x24
 8009836:	e001      	b.n	800983c <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8009838:	2301      	movs	r3, #1
 800983a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800983c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7ff fc9d 	bl	800917e <dir_alloc>
 8009844:	4603      	mov	r3, r0
 8009846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800984a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800984e:	2b00      	cmp	r3, #0
 8009850:	d153      	bne.n	80098fa <dir_register+0x196>
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	3b01      	subs	r3, #1
 8009856:	627b      	str	r3, [r7, #36]	; 0x24
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	2b00      	cmp	r3, #0
 800985c:	d04d      	beq.n	80098fa <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8009864:	461a      	mov	r2, r3
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff fabb 	bl	8008de8 <dir_sdi>
 8009872:	4603      	mov	r3, r0
 8009874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800987c:	2b00      	cmp	r3, #0
 800987e:	d13c      	bne.n	80098fa <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009886:	4618      	mov	r0, r3
 8009888:	f7ff fe8a 	bl	80095a0 <sum_sfn>
 800988c:	4603      	mov	r3, r0
 800988e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800989c:	4619      	mov	r1, r3
 800989e:	4610      	mov	r0, r2
 80098a0:	f7fe fe43 	bl	800852a <move_window>
 80098a4:	4603      	mov	r3, r0
 80098a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80098aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d122      	bne.n	80098f8 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	7efb      	ldrb	r3, [r7, #27]
 80098c4:	f7ff fd68 	bl	8009398 <fit_lfn>
				dp->fs->wflag = 1;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 80098d4:	2100      	movs	r1, #0
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7ff fb37 	bl	8008f4a <dir_next>
 80098dc:	4603      	mov	r3, r0
 80098de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80098e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d107      	bne.n	80098fa <dir_register+0x196>
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	3b01      	subs	r3, #1
 80098ee:	627b      	str	r3, [r7, #36]	; 0x24
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1cc      	bne.n	8009890 <dir_register+0x12c>
 80098f6:	e000      	b.n	80098fa <dir_register+0x196>
				if (res != FR_OK) break;
 80098f8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80098fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d135      	bne.n	800996e <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800990e:	4619      	mov	r1, r3
 8009910:	4610      	mov	r0, r2
 8009912:	f7fe fe0a 	bl	800852a <move_window>
 8009916:	4603      	mov	r3, r0
 8009918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800991c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009920:	2b00      	cmp	r3, #0
 8009922:	d124      	bne.n	800996e <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800992a:	2220      	movs	r2, #32
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f7fe fb9d 	bl	800806e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009940:	220b      	movs	r2, #11
 8009942:	4619      	mov	r1, r3
 8009944:	f7fe fb74 	bl	8008030 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800994e:	330b      	adds	r3, #11
 8009950:	781a      	ldrb	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009958:	330c      	adds	r3, #12
 800995a:	f002 0218 	and.w	r2, r2, #24
 800995e:	b2d2      	uxtb	r2, r2
 8009960:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009968:	2201      	movs	r2, #1
 800996a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 800996e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009972:	4618      	mov	r0, r3
 8009974:	3730      	adds	r7, #48	; 0x30
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	4ec4ec4f 	.word	0x4ec4ec4f

08009980 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b08a      	sub	sp, #40	; 0x28
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	613b      	str	r3, [r7, #16]
 8009990:	e002      	b.n	8009998 <create_name+0x18>
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	3301      	adds	r3, #1
 8009996:	613b      	str	r3, [r7, #16]
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	2b2f      	cmp	r3, #47	; 0x2f
 800999e:	d0f8      	beq.n	8009992 <create_name+0x12>
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b5c      	cmp	r3, #92	; 0x5c
 80099a6:	d0f4      	beq.n	8009992 <create_name+0x12>
	lfn = dp->lfn;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80099ae:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	617b      	str	r3, [r7, #20]
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	61ba      	str	r2, [r7, #24]
 80099be:	693a      	ldr	r2, [r7, #16]
 80099c0:	4413      	add	r3, r2
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80099c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099c8:	2b1f      	cmp	r3, #31
 80099ca:	d92f      	bls.n	8009a2c <create_name+0xac>
 80099cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099ce:	2b2f      	cmp	r3, #47	; 0x2f
 80099d0:	d02c      	beq.n	8009a2c <create_name+0xac>
 80099d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099d4:	2b5c      	cmp	r3, #92	; 0x5c
 80099d6:	d029      	beq.n	8009a2c <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	2bfe      	cmp	r3, #254	; 0xfe
 80099dc:	d901      	bls.n	80099e2 <create_name+0x62>
			return FR_INVALID_NAME;
 80099de:	2306      	movs	r3, #6
 80099e0:	e182      	b.n	8009ce8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80099e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80099e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099ea:	2101      	movs	r1, #1
 80099ec:	4618      	mov	r0, r3
 80099ee:	f001 fe45 	bl	800b67c <ff_convert>
 80099f2:	4603      	mov	r3, r0
 80099f4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80099f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <create_name+0x80>
 80099fc:	2306      	movs	r3, #6
 80099fe:	e173      	b.n	8009ce8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8009a00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a02:	2b7f      	cmp	r3, #127	; 0x7f
 8009a04:	d809      	bhi.n	8009a1a <create_name+0x9a>
 8009a06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a08:	4619      	mov	r1, r3
 8009a0a:	488e      	ldr	r0, [pc, #568]	; (8009c44 <create_name+0x2c4>)
 8009a0c:	f7fe fb71 	bl	80080f2 <chk_chr>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <create_name+0x9a>
			return FR_INVALID_NAME;
 8009a16:	2306      	movs	r3, #6
 8009a18:	e166      	b.n	8009ce8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	617a      	str	r2, [r7, #20]
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	4413      	add	r3, r2
 8009a26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a28:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009a2a:	e7c5      	b.n	80099b8 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	441a      	add	r2, r3
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a38:	2b1f      	cmp	r3, #31
 8009a3a:	d801      	bhi.n	8009a40 <create_name+0xc0>
 8009a3c:	2304      	movs	r3, #4
 8009a3e:	e000      	b.n	8009a42 <create_name+0xc2>
 8009a40:	2300      	movs	r3, #0
 8009a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8009a46:	e011      	b.n	8009a6c <create_name+0xec>
		w = lfn[di - 1];
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	005b      	lsls	r3, r3, #1
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	4413      	add	r3, r2
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a5c:	2b20      	cmp	r3, #32
 8009a5e:	d002      	beq.n	8009a66 <create_name+0xe6>
 8009a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a62:	2b2e      	cmp	r3, #46	; 0x2e
 8009a64:	d106      	bne.n	8009a74 <create_name+0xf4>
		di--;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1ea      	bne.n	8009a48 <create_name+0xc8>
 8009a72:	e000      	b.n	8009a76 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 8009a74:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <create_name+0x100>
 8009a7c:	2306      	movs	r3, #6
 8009a7e:	e133      	b.n	8009ce8 <create_name+0x368>

	lfn[di] = 0;						/* LFN is created */
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	005b      	lsls	r3, r3, #1
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	4413      	add	r3, r2
 8009a88:	2200      	movs	r2, #0
 8009a8a:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009a92:	220b      	movs	r2, #11
 8009a94:	2120      	movs	r1, #32
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fae9 	bl	800806e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61bb      	str	r3, [r7, #24]
 8009aa0:	e002      	b.n	8009aa8 <create_name+0x128>
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	61bb      	str	r3, [r7, #24]
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	4413      	add	r3, r2
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	d0f5      	beq.n	8009aa2 <create_name+0x122>
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	4413      	add	r3, r2
 8009abe:	881b      	ldrh	r3, [r3, #0]
 8009ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ac2:	d0ee      	beq.n	8009aa2 <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d009      	beq.n	8009ade <create_name+0x15e>
 8009aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ace:	f043 0303 	orr.w	r3, r3, #3
 8009ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009ad6:	e002      	b.n	8009ade <create_name+0x15e>
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	617b      	str	r3, [r7, #20]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d009      	beq.n	8009af8 <create_name+0x178>
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009aea:	3b01      	subs	r3, #1
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	4413      	add	r3, r2
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	2b2e      	cmp	r3, #46	; 0x2e
 8009af6:	d1ef      	bne.n	8009ad8 <create_name+0x158>

	b = i = 0; ni = 8;
 8009af8:	2300      	movs	r3, #0
 8009afa:	623b      	str	r3, [r7, #32]
 8009afc:	2300      	movs	r3, #0
 8009afe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b02:	2308      	movs	r3, #8
 8009b04:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	61ba      	str	r2, [r7, #24]
 8009b0c:	005b      	lsls	r3, r3, #1
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	4413      	add	r3, r2
 8009b12:	881b      	ldrh	r3, [r3, #0]
 8009b14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 8090 	beq.w	8009c3e <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d006      	beq.n	8009b32 <create_name+0x1b2>
 8009b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b26:	2b2e      	cmp	r3, #46	; 0x2e
 8009b28:	d10a      	bne.n	8009b40 <create_name+0x1c0>
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d006      	beq.n	8009b40 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 8009b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b36:	f043 0303 	orr.w	r3, r3, #3
 8009b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b3e:	e07d      	b.n	8009c3c <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009b40:	6a3a      	ldr	r2, [r7, #32]
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d203      	bcs.n	8009b50 <create_name+0x1d0>
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d123      	bne.n	8009b98 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	2b0b      	cmp	r3, #11
 8009b54:	d106      	bne.n	8009b64 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 8009b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b5a:	f043 0303 	orr.w	r3, r3, #3
 8009b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b62:	e076      	b.n	8009c52 <create_name+0x2d2>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d005      	beq.n	8009b78 <create_name+0x1f8>
 8009b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b70:	f043 0303 	orr.w	r3, r3, #3
 8009b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d867      	bhi.n	8009c50 <create_name+0x2d0>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	61bb      	str	r3, [r7, #24]
 8009b84:	2308      	movs	r3, #8
 8009b86:	623b      	str	r3, [r7, #32]
 8009b88:	230b      	movs	r3, #11
 8009b8a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b96:	e051      	b.n	8009c3c <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8009b9c:	d914      	bls.n	8009bc8 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 fd6a 	bl	800b67c <ff_convert>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d004      	beq.n	8009bbc <create_name+0x23c>
 8009bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bb4:	3b80      	subs	r3, #128	; 0x80
 8009bb6:	4a24      	ldr	r2, [pc, #144]	; (8009c48 <create_name+0x2c8>)
 8009bb8:	5cd3      	ldrb	r3, [r2, r3]
 8009bba:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bc0:	f043 0302 	orr.w	r3, r3, #2
 8009bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d007      	beq.n	8009bde <create_name+0x25e>
 8009bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	481e      	ldr	r0, [pc, #120]	; (8009c4c <create_name+0x2cc>)
 8009bd4:	f7fe fa8d 	bl	80080f2 <chk_chr>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d008      	beq.n	8009bf0 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009bde:	235f      	movs	r3, #95	; 0x5f
 8009be0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009be6:	f043 0303 	orr.w	r3, r3, #3
 8009bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009bee:	e01b      	b.n	8009c28 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bf2:	2b40      	cmp	r3, #64	; 0x40
 8009bf4:	d909      	bls.n	8009c0a <create_name+0x28a>
 8009bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bf8:	2b5a      	cmp	r3, #90	; 0x5a
 8009bfa:	d806      	bhi.n	8009c0a <create_name+0x28a>
					b |= 2;
 8009bfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c00:	f043 0302 	orr.w	r3, r3, #2
 8009c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009c08:	e00e      	b.n	8009c28 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c0c:	2b60      	cmp	r3, #96	; 0x60
 8009c0e:	d90b      	bls.n	8009c28 <create_name+0x2a8>
 8009c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c12:	2b7a      	cmp	r3, #122	; 0x7a
 8009c14:	d808      	bhi.n	8009c28 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 8009c16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c1a:	f043 0301 	orr.w	r3, r3, #1
 8009c1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c24:	3b20      	subs	r3, #32
 8009c26:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	1c59      	adds	r1, r3, #1
 8009c32:	6239      	str	r1, [r7, #32]
 8009c34:	4413      	add	r3, r2
 8009c36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c38:	b2d2      	uxtb	r2, r2
 8009c3a:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8009c3c:	e763      	b.n	8009b06 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 8009c3e:	bf00      	nop
 8009c40:	e007      	b.n	8009c52 <create_name+0x2d2>
 8009c42:	bf00      	nop
 8009c44:	0800f48c 	.word	0x0800f48c
 8009c48:	0800f504 	.word	0x0800f504
 8009c4c:	0800f498 	.word	0x0800f498
			if (si > di) break;			/* No extension */
 8009c50:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	2be5      	cmp	r3, #229	; 0xe5
 8009c5c:	d104      	bne.n	8009c68 <create_name+0x2e8>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009c64:	2205      	movs	r2, #5
 8009c66:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d104      	bne.n	8009c78 <create_name+0x2f8>
 8009c6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8009c78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c7c:	f003 030c 	and.w	r3, r3, #12
 8009c80:	2b0c      	cmp	r3, #12
 8009c82:	d005      	beq.n	8009c90 <create_name+0x310>
 8009c84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c88:	f003 0303 	and.w	r3, r3, #3
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d105      	bne.n	8009c9c <create_name+0x31c>
		cf |= NS_LFN;
 8009c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c94:	f043 0302 	orr.w	r3, r3, #2
 8009c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d117      	bne.n	8009cd8 <create_name+0x358>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009cac:	f003 0303 	and.w	r3, r3, #3
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d105      	bne.n	8009cc0 <create_name+0x340>
 8009cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cb8:	f043 0310 	orr.w	r3, r3, #16
 8009cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009cc4:	f003 030c 	and.w	r3, r3, #12
 8009cc8:	2b04      	cmp	r3, #4
 8009cca:	d105      	bne.n	8009cd8 <create_name+0x358>
 8009ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cd0:	f043 0308 	orr.w	r3, r3, #8
 8009cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009cde:	330b      	adds	r3, #11
 8009ce0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009ce4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009ce6:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3728      	adds	r7, #40	; 0x28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b2f      	cmp	r3, #47	; 0x2f
 8009d00:	d003      	beq.n	8009d0a <follow_path+0x1a>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b5c      	cmp	r3, #92	; 0x5c
 8009d08:	d102      	bne.n	8009d10 <follow_path+0x20>
		path++;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b1f      	cmp	r3, #31
 8009d1e:	d80a      	bhi.n	8009d36 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8009d20:	2100      	movs	r1, #0
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff f860 	bl	8008de8 <dir_sdi>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8009d34:	e045      	b.n	8009dc2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d36:	463b      	mov	r3, r7
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff fe20 	bl	8009980 <create_name>
 8009d40:	4603      	mov	r3, r0
 8009d42:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d136      	bne.n	8009db8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7ff fc49 	bl	80095e2 <dir_find>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8009d5a:	7adb      	ldrb	r3, [r3, #11]
 8009d5c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00a      	beq.n	8009d7a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
 8009d66:	2b04      	cmp	r3, #4
 8009d68:	d128      	bne.n	8009dbc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d123      	bne.n	8009dbc <follow_path+0xcc>
 8009d74:	2305      	movs	r3, #5
 8009d76:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8009d78:	e020      	b.n	8009dbc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d7a:	7bbb      	ldrb	r3, [r7, #14]
 8009d7c:	f003 0304 	and.w	r3, r3, #4
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d11d      	bne.n	8009dc0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8009d8a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	330b      	adds	r3, #11
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	f003 0310 	and.w	r3, r3, #16
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d102      	bne.n	8009da0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8009d9a:	2305      	movs	r3, #5
 8009d9c:	73fb      	strb	r3, [r7, #15]
 8009d9e:	e010      	b.n	8009dc2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009da6:	68b9      	ldr	r1, [r7, #8]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff fa32 	bl	8009212 <ld_clust>
 8009dae:	4602      	mov	r2, r0
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009db6:	e7be      	b.n	8009d36 <follow_path+0x46>
			if (res != FR_OK) break;
 8009db8:	bf00      	nop
 8009dba:	e002      	b.n	8009dc2 <follow_path+0xd2>
				break;
 8009dbc:	bf00      	nop
 8009dbe:	e000      	b.n	8009dc2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009dc0:	bf00      	nop
		}
	}

	return res;
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dd8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d031      	beq.n	8009e46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	617b      	str	r3, [r7, #20]
 8009de8:	e002      	b.n	8009df0 <get_ldnumber+0x24>
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	3301      	adds	r3, #1
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b1f      	cmp	r3, #31
 8009df6:	d903      	bls.n	8009e00 <get_ldnumber+0x34>
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b3a      	cmp	r3, #58	; 0x3a
 8009dfe:	d1f4      	bne.n	8009dea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2b3a      	cmp	r3, #58	; 0x3a
 8009e06:	d11c      	bne.n	8009e42 <get_ldnumber+0x76>
			tp = *path;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	1c5a      	adds	r2, r3, #1
 8009e12:	60fa      	str	r2, [r7, #12]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	3b30      	subs	r3, #48	; 0x30
 8009e18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2b09      	cmp	r3, #9
 8009e1e:	d80e      	bhi.n	8009e3e <get_ldnumber+0x72>
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d10a      	bne.n	8009e3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d107      	bne.n	8009e3e <get_ldnumber+0x72>
					vol = (int)i;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	3301      	adds	r3, #1
 8009e36:	617b      	str	r3, [r7, #20]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	e002      	b.n	8009e48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009e42:	2300      	movs	r3, #0
 8009e44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009e46:	693b      	ldr	r3, [r7, #16]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	371c      	adds	r7, #28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e6c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7fe fb59 	bl	800852a <move_window>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <check_fs+0x2e>
		return 3;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e04a      	b.n	8009f18 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e88:	3301      	adds	r3, #1
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	021b      	lsls	r3, r3, #8
 8009e8e:	b21a      	sxth	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8009e96:	b21b      	sxth	r3, r3
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	b21b      	sxth	r3, r3
 8009e9c:	4a20      	ldr	r2, [pc, #128]	; (8009f20 <check_fs+0xcc>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d001      	beq.n	8009ea6 <check_fs+0x52>
		return 2;
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	e038      	b.n	8009f18 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3336      	adds	r3, #54	; 0x36
 8009eaa:	3303      	adds	r3, #3
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	061a      	lsls	r2, r3, #24
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3336      	adds	r3, #54	; 0x36
 8009eb4:	3302      	adds	r3, #2
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	041b      	lsls	r3, r3, #16
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	3236      	adds	r2, #54	; 0x36
 8009ec0:	3201      	adds	r2, #1
 8009ec2:	7812      	ldrb	r2, [r2, #0]
 8009ec4:	0212      	lsls	r2, r2, #8
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009ed4:	4a13      	ldr	r2, [pc, #76]	; (8009f24 <check_fs+0xd0>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d101      	bne.n	8009ede <check_fs+0x8a>
		return 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	e01c      	b.n	8009f18 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	3352      	adds	r3, #82	; 0x52
 8009ee2:	3303      	adds	r3, #3
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	061a      	lsls	r2, r3, #24
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3352      	adds	r3, #82	; 0x52
 8009eec:	3302      	adds	r3, #2
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	041b      	lsls	r3, r3, #16
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	3252      	adds	r2, #82	; 0x52
 8009ef8:	3201      	adds	r2, #1
 8009efa:	7812      	ldrb	r2, [r2, #0]
 8009efc:	0212      	lsls	r2, r2, #8
 8009efe:	4313      	orrs	r3, r2
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8009f06:	4313      	orrs	r3, r2
 8009f08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009f0c:	4a05      	ldr	r2, [pc, #20]	; (8009f24 <check_fs+0xd0>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d101      	bne.n	8009f16 <check_fs+0xc2>
		return 0;
 8009f12:	2300      	movs	r3, #0
 8009f14:	e000      	b.n	8009f18 <check_fs+0xc4>

	return 1;
 8009f16:	2301      	movs	r3, #1
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	ffffaa55 	.word	0xffffaa55
 8009f24:	00544146 	.word	0x00544146

08009f28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b096      	sub	sp, #88	; 0x58
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	4613      	mov	r3, r2
 8009f34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009f3c:	68b8      	ldr	r0, [r7, #8]
 8009f3e:	f7ff ff45 	bl	8009dcc <get_ldnumber>
 8009f42:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	da01      	bge.n	8009f4e <find_volume+0x26>
 8009f4a:	230b      	movs	r3, #11
 8009f4c:	e2db      	b.n	800a506 <find_volume+0x5de>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009f4e:	4aa0      	ldr	r2, [pc, #640]	; (800a1d0 <find_volume+0x2a8>)
 8009f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <find_volume+0x3a>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	e2d1      	b.n	800a506 <find_volume+0x5de>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f66:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d01b      	beq.n	8009faa <find_volume+0x82>
		stat = disk_status(fs->drv);
 8009f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f74:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fd ffbb 	bl	8007ef4 <disk_status>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009f84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f88:	f003 0301 	and.w	r3, r3, #1
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10c      	bne.n	8009faa <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009f90:	79fb      	ldrb	r3, [r7, #7]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d007      	beq.n	8009fa6 <find_volume+0x7e>
 8009f96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f9a:	f003 0304 	and.w	r3, r3, #4
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8009fa2:	230a      	movs	r3, #10
 8009fa4:	e2af      	b.n	800a506 <find_volume+0x5de>
			return FR_OK;				/* The file system object is valid */
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	e2ad      	b.n	800a506 <find_volume+0x5de>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbe:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fd ffb0 	bl	8007f28 <disk_initialize>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009fce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e293      	b.n	800a506 <find_volume+0x5de>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d007      	beq.n	8009ff4 <find_volume+0xcc>
 8009fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fe8:	f003 0304 	and.w	r3, r3, #4
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8009ff0:	230a      	movs	r3, #10
 8009ff2:	e288      	b.n	800a506 <find_volume+0x5de>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 800a000:	461a      	mov	r2, r3
 800a002:	2102      	movs	r1, #2
 800a004:	f7fd fff6 	bl	8007ff4 <disk_ioctl>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10b      	bne.n	800a026 <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a018:	d305      	bcc.n	800a026 <find_volume+0xfe>
 800a01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a024:	d901      	bls.n	800a02a <find_volume+0x102>
 800a026:	2301      	movs	r3, #1
 800a028:	e26d      	b.n	800a506 <find_volume+0x5de>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800a02a:	2300      	movs	r3, #0
 800a02c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800a02e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a030:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a032:	f7ff ff0f 	bl	8009e54 <check_fs>
 800a036:	4603      	mov	r3, r0
 800a038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800a03c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a040:	2b01      	cmp	r3, #1
 800a042:	d153      	bne.n	800a0ec <find_volume+0x1c4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a044:	2300      	movs	r3, #0
 800a046:	643b      	str	r3, [r7, #64]	; 0x40
 800a048:	e028      	b.n	800a09c <find_volume+0x174>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800a04a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a04e:	011b      	lsls	r3, r3, #4
 800a050:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a054:	4413      	add	r3, r2
 800a056:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	3304      	adds	r3, #4
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d012      	beq.n	800a088 <find_volume+0x160>
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	330b      	adds	r3, #11
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	061a      	lsls	r2, r3, #24
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	330a      	adds	r3, #10
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	041b      	lsls	r3, r3, #16
 800a072:	4313      	orrs	r3, r2
 800a074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a076:	3209      	adds	r2, #9
 800a078:	7812      	ldrb	r2, [r2, #0]
 800a07a:	0212      	lsls	r2, r2, #8
 800a07c:	4313      	orrs	r3, r2
 800a07e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a080:	3208      	adds	r2, #8
 800a082:	7812      	ldrb	r2, [r2, #0]
 800a084:	431a      	orrs	r2, r3
 800a086:	e000      	b.n	800a08a <find_volume+0x162>
 800a088:	2200      	movs	r2, #0
 800a08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	3358      	adds	r3, #88	; 0x58
 800a090:	443b      	add	r3, r7
 800a092:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a098:	3301      	adds	r3, #1
 800a09a:	643b      	str	r3, [r7, #64]	; 0x40
 800a09c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d9d3      	bls.n	800a04a <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <find_volume+0x18a>
 800a0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800a0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	3358      	adds	r3, #88	; 0x58
 800a0b8:	443b      	add	r3, r7
 800a0ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a0be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a0c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d005      	beq.n	800a0d2 <find_volume+0x1aa>
 800a0c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0ca:	f7ff fec3 	bl	8009e54 <check_fs>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	e000      	b.n	800a0d4 <find_volume+0x1ac>
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d005      	beq.n	800a0ec <find_volume+0x1c4>
 800a0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	643b      	str	r3, [r7, #64]	; 0x40
 800a0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d9e2      	bls.n	800a0b2 <find_volume+0x18a>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a0ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d101      	bne.n	800a0f8 <find_volume+0x1d0>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e206      	b.n	800a506 <find_volume+0x5de>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800a0f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <find_volume+0x1dc>
 800a100:	230d      	movs	r3, #13
 800a102:	e200      	b.n	800a506 <find_volume+0x5de>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	7b1b      	ldrb	r3, [r3, #12]
 800a108:	021b      	lsls	r3, r3, #8
 800a10a:	b21a      	sxth	r2, r3
 800a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10e:	7adb      	ldrb	r3, [r3, #11]
 800a110:	b21b      	sxth	r3, r3
 800a112:	4313      	orrs	r3, r2
 800a114:	b21a      	sxth	r2, r3
 800a116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a118:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a11c:	b21b      	sxth	r3, r3
 800a11e:	429a      	cmp	r2, r3
 800a120:	d001      	beq.n	800a126 <find_volume+0x1fe>
		return FR_NO_FILESYSTEM;
 800a122:	230d      	movs	r3, #13
 800a124:	e1ef      	b.n	800a506 <find_volume+0x5de>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	7ddb      	ldrb	r3, [r3, #23]
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	b21a      	sxth	r2, r3
 800a12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a130:	7d9b      	ldrb	r3, [r3, #22]
 800a132:	b21b      	sxth	r3, r3
 800a134:	4313      	orrs	r3, r2
 800a136:	b21b      	sxth	r3, r3
 800a138:	b29b      	uxth	r3, r3
 800a13a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a13c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d112      	bne.n	800a168 <find_volume+0x240>
 800a142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a144:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a148:	061a      	lsls	r2, r3, #24
 800a14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a150:	041b      	lsls	r3, r3, #16
 800a152:	4313      	orrs	r3, r2
 800a154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a156:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800a15a:	0212      	lsls	r2, r2, #8
 800a15c:	4313      	orrs	r3, r2
 800a15e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a160:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a164:	4313      	orrs	r3, r2
 800a166:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a16c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	7c1a      	ldrb	r2, [r3, #16]
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17c:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800a180:	2b01      	cmp	r3, #1
 800a182:	d006      	beq.n	800a192 <find_volume+0x26a>
 800a184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a186:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d001      	beq.n	800a192 <find_volume+0x26a>
		return FR_NO_FILESYSTEM;
 800a18e:	230d      	movs	r3, #13
 800a190:	e1b9      	b.n	800a506 <find_volume+0x5de>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800a198:	461a      	mov	r2, r3
 800a19a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a19c:	fb02 f303 	mul.w	r3, r2, r3
 800a1a0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a4:	7b5a      	ldrb	r2, [r3, #13]
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a8:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00a      	beq.n	800a1cc <find_volume+0x2a4>
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b8:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800a1bc:	461a      	mov	r2, r3
 800a1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c0:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d003      	beq.n	800a1d4 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 800a1cc:	230d      	movs	r3, #13
 800a1ce:	e19a      	b.n	800a506 <find_volume+0x5de>
 800a1d0:	20000cd8 	.word	0x20000cd8

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d6:	7c9b      	ldrb	r3, [r3, #18]
 800a1d8:	021b      	lsls	r3, r3, #8
 800a1da:	b21a      	sxth	r2, r3
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1de:	7c5b      	ldrb	r3, [r3, #17]
 800a1e0:	b21b      	sxth	r3, r3
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	b21b      	sxth	r3, r3
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800a1f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1f6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a1fa:	0952      	lsrs	r2, r2, #5
 800a1fc:	b292      	uxth	r2, r2
 800a1fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800a202:	fb01 f202 	mul.w	r2, r1, r2
 800a206:	1a9b      	subs	r3, r3, r2
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <find_volume+0x2ea>
		return FR_NO_FILESYSTEM;
 800a20e:	230d      	movs	r3, #13
 800a210:	e179      	b.n	800a506 <find_volume+0x5de>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800a212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a214:	7d1b      	ldrb	r3, [r3, #20]
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	b21a      	sxth	r2, r3
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	7cdb      	ldrb	r3, [r3, #19]
 800a21e:	b21b      	sxth	r3, r3
 800a220:	4313      	orrs	r3, r2
 800a222:	b21b      	sxth	r3, r3
 800a224:	b29b      	uxth	r3, r3
 800a226:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d112      	bne.n	800a254 <find_volume+0x32c>
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a234:	061a      	lsls	r2, r3, #24
 800a236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a238:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a23c:	041b      	lsls	r3, r3, #16
 800a23e:	4313      	orrs	r3, r2
 800a240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a242:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800a246:	0212      	lsls	r2, r2, #8
 800a248:	4313      	orrs	r3, r2
 800a24a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a24c:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a250:	4313      	orrs	r3, r2
 800a252:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a256:	7bdb      	ldrb	r3, [r3, #15]
 800a258:	021b      	lsls	r3, r3, #8
 800a25a:	b21a      	sxth	r2, r3
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	7b9b      	ldrb	r3, [r3, #14]
 800a260:	b21b      	sxth	r3, r3
 800a262:	4313      	orrs	r3, r2
 800a264:	b21b      	sxth	r3, r3
 800a266:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800a268:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <find_volume+0x34a>
 800a26e:	230d      	movs	r3, #13
 800a270:	e149      	b.n	800a506 <find_volume+0x5de>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800a272:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a276:	4413      	add	r3, r2
 800a278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a27a:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 800a27e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a280:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800a284:	0952      	lsrs	r2, r2, #5
 800a286:	b292      	uxth	r2, r2
 800a288:	fbb1 f2f2 	udiv	r2, r1, r2
 800a28c:	b292      	uxth	r2, r2
 800a28e:	4413      	add	r3, r2
 800a290:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	429a      	cmp	r2, r3
 800a298:	d201      	bcs.n	800a29e <find_volume+0x376>
 800a29a:	230d      	movs	r3, #13
 800a29c:	e133      	b.n	800a506 <find_volume+0x5de>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800a29e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2a6:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800a2aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2ae:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <find_volume+0x392>
 800a2b6:	230d      	movs	r3, #13
 800a2b8:	e125      	b.n	800a506 <find_volume+0x5de>
	fmt = FS_FAT12;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d902      	bls.n	800a2d0 <find_volume+0x3a8>
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d902      	bls.n	800a2e0 <find_volume+0x3b8>
 800a2da:	2303      	movs	r3, #3
 800a2dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	1c9a      	adds	r2, r3, #2
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2ee:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a2f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a2f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2f6:	441a      	add	r2, r3
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 800a2fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	441a      	add	r2, r3
 800a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a306:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 800a30a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d121      	bne.n	800a356 <find_volume+0x42e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <find_volume+0x3f8>
 800a31c:	230d      	movs	r3, #13
 800a31e:	e0f2      	b.n	800a506 <find_volume+0x5de>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a326:	061a      	lsls	r2, r3, #24
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a32e:	041b      	lsls	r3, r3, #16
 800a330:	4313      	orrs	r3, r2
 800a332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a334:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800a338:	0212      	lsls	r2, r2, #8
 800a33a:	4313      	orrs	r3, r2
 800a33c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a33e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800a342:	431a      	orrs	r2, r3
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	647b      	str	r3, [r7, #68]	; 0x44
 800a354:	e025      	b.n	800a3a2 <find_volume+0x47a>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a358:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <find_volume+0x43c>
 800a360:	230d      	movs	r3, #13
 800a362:	e0d0      	b.n	800a506 <find_volume+0x5de>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800a36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a36c:	441a      	add	r2, r3
 800a36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a370:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d104      	bne.n	800a386 <find_volume+0x45e>
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	e00c      	b.n	800a3a0 <find_volume+0x478>
 800a386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a388:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 800a38c:	4613      	mov	r3, r2
 800a38e:	005b      	lsls	r3, r3, #1
 800a390:	4413      	add	r3, r2
 800a392:	085a      	lsrs	r2, r3, #1
 800a394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a396:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800a3a0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3b2:	440b      	add	r3, r1
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3b8:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 800a3bc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d201      	bcs.n	800a3c8 <find_volume+0x4a0>
		return FR_NO_FILESYSTEM;
 800a3c4:	230d      	movs	r3, #13
 800a3c6:	e09e      	b.n	800a506 <find_volume+0x5de>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3ce:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800a3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e0:	2280      	movs	r2, #128	; 0x80
 800a3e2:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a3e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d177      	bne.n	800a4de <find_volume+0x5b6>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	b21a      	sxth	r2, r3
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3fe:	b21b      	sxth	r3, r3
 800a400:	4313      	orrs	r3, r2
 800a402:	b21b      	sxth	r3, r3
 800a404:	2b01      	cmp	r3, #1
 800a406:	d16a      	bne.n	800a4de <find_volume+0x5b6>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a40a:	3301      	adds	r3, #1
 800a40c:	4619      	mov	r1, r3
 800a40e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a410:	f7fe f88b 	bl	800852a <move_window>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d161      	bne.n	800a4de <find_volume+0x5b6>
	{
		fs->fsi_flag = 0;
 800a41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41c:	2200      	movs	r2, #0
 800a41e:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800a428:	021b      	lsls	r3, r3, #8
 800a42a:	b21a      	sxth	r2, r3
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800a432:	b21b      	sxth	r3, r3
 800a434:	4313      	orrs	r3, r2
 800a436:	b21b      	sxth	r3, r3
 800a438:	4a35      	ldr	r2, [pc, #212]	; (800a510 <find_volume+0x5e8>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d14f      	bne.n	800a4de <find_volume+0x5b6>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	78db      	ldrb	r3, [r3, #3]
 800a442:	061a      	lsls	r2, r3, #24
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	789b      	ldrb	r3, [r3, #2]
 800a448:	041b      	lsls	r3, r3, #16
 800a44a:	4313      	orrs	r3, r2
 800a44c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a44e:	7852      	ldrb	r2, [r2, #1]
 800a450:	0212      	lsls	r2, r2, #8
 800a452:	4313      	orrs	r3, r2
 800a454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a456:	7812      	ldrb	r2, [r2, #0]
 800a458:	4313      	orrs	r3, r2
 800a45a:	4a2e      	ldr	r2, [pc, #184]	; (800a514 <find_volume+0x5ec>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d13e      	bne.n	800a4de <find_volume+0x5b6>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800a466:	061a      	lsls	r2, r3, #24
 800a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46a:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800a46e:	041b      	lsls	r3, r3, #16
 800a470:	4313      	orrs	r3, r2
 800a472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a474:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800a478:	0212      	lsls	r2, r2, #8
 800a47a:	4313      	orrs	r3, r2
 800a47c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a47e:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800a482:	4313      	orrs	r3, r2
 800a484:	4a24      	ldr	r2, [pc, #144]	; (800a518 <find_volume+0x5f0>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d129      	bne.n	800a4de <find_volume+0x5b6>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800a48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48c:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800a490:	061a      	lsls	r2, r3, #24
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800a498:	041b      	lsls	r3, r3, #16
 800a49a:	4313      	orrs	r3, r2
 800a49c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a49e:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800a4a2:	0212      	lsls	r2, r2, #8
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4a8:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800a4ac:	431a      	orrs	r2, r3
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800a4ba:	061a      	lsls	r2, r3, #24
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800a4c2:	041b      	lsls	r3, r3, #16
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4c8:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800a4cc:	0212      	lsls	r2, r2, #8
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4d2:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800a4d6:	431a      	orrs	r2, r3
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4da:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a4e4:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 800a4e8:	4b0c      	ldr	r3, [pc, #48]	; (800a51c <find_volume+0x5f4>)
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	; (800a51c <find_volume+0x5f4>)
 800a4f2:	801a      	strh	r2, [r3, #0]
 800a4f4:	4b09      	ldr	r3, [pc, #36]	; (800a51c <find_volume+0x5f4>)
 800a4f6:	881a      	ldrh	r2, [r3, #0]
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800a4fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a500:	f7fd ffa0 	bl	8008444 <clear_lock>
#endif

	return FR_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3758      	adds	r7, #88	; 0x58
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	ffffaa55 	.word	0xffffaa55
 800a514:	41615252 	.word	0x41615252
 800a518:	61417272 	.word	0x61417272
 800a51c:	20000cdc 	.word	0x20000cdc

0800a520 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d022      	beq.n	800a578 <validate+0x58>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d01d      	beq.n	800a578 <validate+0x58>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a542:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800a546:	2b00      	cmp	r3, #0
 800a548:	d016      	beq.n	800a578 <validate+0x58>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a550:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d10c      	bne.n	800a578 <validate+0x58>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a564:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fd fcc3 	bl	8007ef4 <disk_status>
 800a56e:	4603      	mov	r3, r0
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <validate+0x5c>
		return FR_INVALID_OBJECT;
 800a578:	2309      	movs	r3, #9
 800a57a:	e000      	b.n	800a57e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	4613      	mov	r3, r2
 800a594:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800a59a:	f107 0310 	add.w	r3, r7, #16
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fc14 	bl	8009dcc <get_ldnumber>
 800a5a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	da01      	bge.n	800a5b0 <f_mount+0x28>
 800a5ac:	230b      	movs	r3, #11
 800a5ae:	e02d      	b.n	800a60c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a5b0:	4a18      	ldr	r2, [pc, #96]	; (800a614 <f_mount+0x8c>)
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d006      	beq.n	800a5ce <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800a5c0:	69b8      	ldr	r0, [r7, #24]
 800a5c2:	f7fd ff3f 	bl	8008444 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d003      	beq.n	800a5dc <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	490d      	ldr	r1, [pc, #52]	; (800a614 <f_mount+0x8c>)
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <f_mount+0x6a>
 800a5ec:	79fb      	ldrb	r3, [r7, #7]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d001      	beq.n	800a5f6 <f_mount+0x6e>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e00a      	b.n	800a60c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800a5f6:	f107 0108 	add.w	r1, r7, #8
 800a5fa:	f107 030c 	add.w	r3, r7, #12
 800a5fe:	2200      	movs	r2, #0
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff fc91 	bl	8009f28 <find_volume>
 800a606:	4603      	mov	r3, r0
 800a608:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3720      	adds	r7, #32
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	20000cd8 	.word	0x20000cd8

0800a618 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
 800a61e:	af00      	add	r7, sp, #0
 800a620:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a624:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800a628:	6018      	str	r0, [r3, #0]
 800a62a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a62e:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800a632:	6019      	str	r1, [r3, #0]
 800a634:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a638:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a63c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800a63e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a642:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <f_open+0x38>
 800a64c:	2309      	movs	r3, #9
 800a64e:	e260      	b.n	800ab12 <f_open+0x4fa>
	fp->fs = 0;			/* Clear file object */
 800a650:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a654:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a660:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a664:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a668:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 800a66c:	f2a2 4251 	subw	r2, r2, #1105	; 0x451
 800a670:	7812      	ldrb	r2, [r2, #0]
 800a672:	f002 021f 	and.w	r2, r2, #31
 800a676:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a678:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a67c:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	f023 0301 	bic.w	r3, r3, #1
 800a686:	b2da      	uxtb	r2, r3
 800a688:	f107 0108 	add.w	r1, r7, #8
 800a68c:	f107 0320 	add.w	r3, r7, #32
 800a690:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff fc47 	bl	8009f28 <find_volume>
 800a69a:	4603      	mov	r3, r0
 800a69c:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800a6a0:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f040 8232 	bne.w	800ab0e <f_open+0x4f6>
		INIT_BUF(dj);
 800a6aa:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a6ae:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800a6b2:	f107 0214 	add.w	r2, r7, #20
 800a6b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800a6ba:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a6be:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800a6c2:	4a9d      	ldr	r2, [pc, #628]	; (800a938 <f_open+0x320>)
 800a6c4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		res = follow_path(&dj, path);	/* Follow the file path */
 800a6c8:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a6cc:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	f107 0320 	add.w	r3, r7, #32
 800a6d6:	4611      	mov	r1, r2
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff fb09 	bl	8009cf0 <follow_path>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
		dir = dj.dir;
 800a6e4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a6e8:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800a6ec:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a6f0:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a6f4:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d11d      	bne.n	800a738 <f_open+0x120>
			if (!dir)	/* Default directory itself */
 800a6fc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a700:	2b00      	cmp	r3, #0
 800a702:	d103      	bne.n	800a70c <f_open+0xf4>
				res = FR_INVALID_NAME;
 800a704:	2306      	movs	r3, #6
 800a706:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800a70a:	e015      	b.n	800a738 <f_open+0x120>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a70c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a710:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	f023 0301 	bic.w	r3, r3, #1
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bf14      	ite	ne
 800a71e:	2301      	movne	r3, #1
 800a720:	2300      	moveq	r3, #0
 800a722:	b2db      	uxtb	r3, r3
 800a724:	461a      	mov	r2, r3
 800a726:	f107 0320 	add.w	r3, r7, #32
 800a72a:	4611      	mov	r1, r2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fd fcfb 	bl	8008128 <chk_lock>
 800a732:	4603      	mov	r3, r0
 800a734:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a738:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a73c:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	f003 031c 	and.w	r3, r3, #28
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 80e6 	beq.w	800a918 <f_open+0x300>
			if (res != FR_OK) {					/* No file, create new */
 800a74c:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a750:	2b00      	cmp	r3, #0
 800a752:	d027      	beq.n	800a7a4 <f_open+0x18c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a754:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a758:	2b04      	cmp	r3, #4
 800a75a:	d10e      	bne.n	800a77a <f_open+0x162>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a75c:	f7fd fd52 	bl	8008204 <enq_lock>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d006      	beq.n	800a774 <f_open+0x15c>
 800a766:	f107 0320 	add.w	r3, r7, #32
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe fffa 	bl	8009764 <dir_register>
 800a770:	4603      	mov	r3, r0
 800a772:	e000      	b.n	800a776 <f_open+0x15e>
 800a774:	2312      	movs	r3, #18
 800a776:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a77a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a77e:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a782:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 800a786:	f2a2 4251 	subw	r2, r2, #1105	; 0x451
 800a78a:	7812      	ldrb	r2, [r2, #0]
 800a78c:	f042 0208 	orr.w	r2, r2, #8
 800a790:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800a792:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a796:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800a79a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800a79e:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800a7a2:	e017      	b.n	800a7d4 <f_open+0x1bc>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a7a4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a7a8:	330b      	adds	r3, #11
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	f003 0311 	and.w	r3, r3, #17
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d003      	beq.n	800a7bc <f_open+0x1a4>
					res = FR_DENIED;
 800a7b4:	2307      	movs	r3, #7
 800a7b6:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800a7ba:	e00b      	b.n	800a7d4 <f_open+0x1bc>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a7bc:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a7c0:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	f003 0304 	and.w	r3, r3, #4
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d002      	beq.n	800a7d4 <f_open+0x1bc>
						res = FR_EXIST;
 800a7ce:	2308      	movs	r3, #8
 800a7d0:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a7d4:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f040 80c3 	bne.w	800a964 <f_open+0x34c>
 800a7de:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a7e2:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	f003 0308 	and.w	r3, r3, #8
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 80b9 	beq.w	800a964 <f_open+0x34c>
				dw = GET_FATTIME();				/* Created time */
 800a7f2:	f7fd fb21 	bl	8007e38 <get_fattime>
 800a7f6:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a7fa:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a7fe:	330e      	adds	r3, #14
 800a800:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 800a804:	b2d2      	uxtb	r2, r2
 800a806:	701a      	strb	r2, [r3, #0]
 800a808:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	0a1b      	lsrs	r3, r3, #8
 800a810:	b29a      	uxth	r2, r3
 800a812:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a816:	330f      	adds	r3, #15
 800a818:	b2d2      	uxtb	r2, r2
 800a81a:	701a      	strb	r2, [r3, #0]
 800a81c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800a820:	0c1a      	lsrs	r2, r3, #16
 800a822:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a826:	3310      	adds	r3, #16
 800a828:	b2d2      	uxtb	r2, r2
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800a830:	0e1a      	lsrs	r2, r3, #24
 800a832:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a836:	3311      	adds	r3, #17
 800a838:	b2d2      	uxtb	r2, r2
 800a83a:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a83c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a840:	330b      	adds	r3, #11
 800a842:	2200      	movs	r2, #0
 800a844:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a846:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a84a:	331c      	adds	r3, #28
 800a84c:	2200      	movs	r2, #0
 800a84e:	701a      	strb	r2, [r3, #0]
 800a850:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a854:	331d      	adds	r3, #29
 800a856:	2200      	movs	r2, #0
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a85e:	331e      	adds	r3, #30
 800a860:	2200      	movs	r2, #0
 800a862:	701a      	strb	r2, [r3, #0]
 800a864:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a868:	331f      	adds	r3, #31
 800a86a:	2200      	movs	r2, #0
 800a86c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a86e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a872:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800a876:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a87a:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fe fcc7 	bl	8009212 <ld_clust>
 800a884:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 800a888:	2100      	movs	r1, #0
 800a88a:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 800a88e:	f7fe fcee 	bl	800926e <st_clust>
				dj.fs->wflag = 1;
 800a892:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a896:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800a89a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 800a8a4:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d05b      	beq.n	800a964 <f_open+0x34c>
					dw = dj.fs->winsect;
 800a8ac:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a8b0:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800a8b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a8b8:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800a8bc:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
					res = remove_chain(dj.fs, cl);
 800a8c0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a8c4:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800a8c8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a8cc:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7fe f956 	bl	8008b82 <remove_chain>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
					if (res == FR_OK) {
 800a8dc:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d13f      	bne.n	800a964 <f_open+0x34c>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a8e4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a8e8:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800a8ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a8f0:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 800a8f4:	3a01      	subs	r2, #1
 800a8f6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 800a8fa:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a8fe:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800a902:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a906:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fd fe0d 	bl	800852a <move_window>
 800a910:	4603      	mov	r3, r0
 800a912:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800a916:	e025      	b.n	800a964 <f_open+0x34c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800a918:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d121      	bne.n	800a964 <f_open+0x34c>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800a920:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a924:	330b      	adds	r3, #11
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	f003 0310 	and.w	r3, r3, #16
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d005      	beq.n	800a93c <f_open+0x324>
					res = FR_NO_FILE;
 800a930:	2304      	movs	r3, #4
 800a932:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800a936:	e015      	b.n	800a964 <f_open+0x34c>
 800a938:	20000cf8 	.word	0x20000cf8
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800a93c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a940:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	f003 0302 	and.w	r3, r3, #2
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <f_open+0x34c>
 800a94e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800a952:	330b      	adds	r3, #11
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	f003 0301 	and.w	r3, r3, #1
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d002      	beq.n	800a964 <f_open+0x34c>
						res = FR_DENIED;
 800a95e:	2307      	movs	r3, #7
 800a960:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
		}
		if (res == FR_OK) {
 800a964:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d153      	bne.n	800aa14 <f_open+0x3fc>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a96c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a970:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	f003 0308 	and.w	r3, r3, #8
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00b      	beq.n	800a996 <f_open+0x37e>
				mode |= FA__WRITTEN;
 800a97e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a982:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a986:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 800a98a:	f2a2 4251 	subw	r2, r2, #1105	; 0x451
 800a98e:	7812      	ldrb	r2, [r2, #0]
 800a990:	f042 0220 	orr.w	r2, r2, #32
 800a994:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a996:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a99a:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800a99e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a9a2:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800a9a6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a9aa:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
			fp->dir_ptr = dir;
 800a9b4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a9b8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800a9c2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9c6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a9ca:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	f023 0301 	bic.w	r3, r3, #1
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	bf14      	ite	ne
 800a9d8:	2301      	movne	r3, #1
 800a9da:	2300      	moveq	r3, #0
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	461a      	mov	r2, r3
 800a9e0:	f107 0320 	add.w	r3, r7, #32
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fd fc30 	bl	800824c <inc_lock>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800a9f2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
			if (!fp->lockid) res = FR_INT_ERR;
 800a9fc:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aa00:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d102      	bne.n	800aa14 <f_open+0x3fc>
 800aa0e:	2302      	movs	r3, #2
 800aa10:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800aa14:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d178      	bne.n	800ab0e <f_open+0x4f6>
			fp->flag = mode;					/* File access mode */
 800aa1c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aa20:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 800aa2a:	f2a2 4251 	subw	r2, r2, #1105	; 0x451
 800aa2e:	7812      	ldrb	r2, [r2, #0]
 800aa30:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			fp->err = 0;						/* Clear error flag */
 800aa34:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aa38:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800aa44:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aa48:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800aa4c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa50:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fe fbdc 	bl	8009212 <ld_clust>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aa60:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800aa6a:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800aa6e:	331f      	adds	r3, #31
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	061a      	lsls	r2, r3, #24
 800aa74:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800aa78:	331e      	adds	r3, #30
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	041b      	lsls	r3, r3, #16
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800aa84:	321d      	adds	r2, #29
 800aa86:	7812      	ldrb	r2, [r2, #0]
 800aa88:	0212      	lsls	r2, r2, #8
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800aa90:	321c      	adds	r2, #28
 800aa92:	7812      	ldrb	r2, [r2, #0]
 800aa94:	431a      	orrs	r2, r3
 800aa96:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aa9a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			fp->fptr = 0;						/* File pointer */
 800aaa4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aaa8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			fp->dsect = 0;
 800aab4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aab8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800aac4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aac8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2200      	movs	r2, #0
 800aad0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800aad4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aad8:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 800aadc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800aae0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aae4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
			fp->id = fp->fs->id;
 800aaee:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800aaf2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aafc:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 800ab00:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800ab04:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		}
	}

	LEAVE_FF(dj.fs, res);
 800ab0e:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08a      	sub	sp, #40	; 0x28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
 800ab28:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2200      	movs	r2, #0
 800ab32:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f7ff fcf3 	bl	800a520 <validate>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <f_write+0x2c>
 800ab44:	7dfb      	ldrb	r3, [r7, #23]
 800ab46:	e1cc      	b.n	800aee2 <f_write+0x3c6>
	if (fp->err)							/* Check error */
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800ab58:	e1c3      	b.n	800aee2 <f_write+0x3c6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800ab60:	f003 0302 	and.w	r3, r3, #2
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ab68:	2307      	movs	r3, #7
 800ab6a:	e1ba      	b.n	800aee2 <f_write+0x3c6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	441a      	add	r2, r3
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	f080 8192 	bcs.w	800aea6 <f_write+0x38a>
 800ab82:	2300      	movs	r3, #0
 800ab84:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800ab86:	e18e      	b.n	800aea6 <f_write+0x38a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800ab94:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800ab98:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab9c:	fb01 f202 	mul.w	r2, r1, r2
 800aba0:	1a9b      	subs	r3, r3, r2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f040 8131 	bne.w	800ae0a <f_write+0x2ee>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800abb4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800abb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800abbc:	b2da      	uxtb	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800abc4:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800abc8:	3b01      	subs	r3, #1
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	4013      	ands	r3, r2
 800abce:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800abd0:	7dbb      	ldrb	r3, [r7, #22]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d151      	bne.n	800ac7a <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10f      	bne.n	800ac00 <f_write+0xe4>
					clst = fp->sclust;		/* Follow from the origin */
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800abe6:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	2b00      	cmp	r3, #0
 800abec:	d121      	bne.n	800ac32 <f_write+0x116>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800abf4:	2100      	movs	r1, #0
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fe f81d 	bl	8008c36 <create_chain>
 800abfc:	6278      	str	r0, [r7, #36]	; 0x24
 800abfe:	e018      	b.n	800ac32 <f_write+0x116>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d008      	beq.n	800ac1c <f_write+0x100>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800ac10:	4619      	mov	r1, r3
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f7fe f8ac 	bl	8008d70 <clmt_clust>
 800ac18:	6278      	str	r0, [r7, #36]	; 0x24
 800ac1a:	e00a      	b.n	800ac32 <f_write+0x116>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800ac28:	4619      	mov	r1, r3
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	f7fe f803 	bl	8008c36 <create_chain>
 800ac30:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 813b 	beq.w	800aeb0 <f_write+0x394>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d105      	bne.n	800ac4c <f_write+0x130>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2202      	movs	r2, #2
 800ac44:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800ac48:	2302      	movs	r3, #2
 800ac4a:	e14a      	b.n	800aee2 <f_write+0x3c6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac52:	d105      	bne.n	800ac60 <f_write+0x144>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e140      	b.n	800aee2 <f_write+0x3c6>
				fp->clust = clst;			/* Update current cluster */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac64:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d103      	bne.n	800ac7a <f_write+0x15e>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac76:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800ac80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d01d      	beq.n	800acc4 <f_write+0x1a8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ac8e:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800ac92:	68f9      	ldr	r1, [r7, #12]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f7fd f98a 	bl	8007fb4 <disk_write>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d005      	beq.n	800acb2 <f_write+0x196>
					ABORT(fp->fs, FR_DISK_ERR);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800acae:	2301      	movs	r3, #1
 800acb0:	e117      	b.n	800aee2 <f_write+0x3c6>
				fp->flag &= ~FA__DIRTY;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800acb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acbc:	b2da      	uxtb	r2, r3
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800acd0:	4619      	mov	r1, r3
 800acd2:	4610      	mov	r0, r2
 800acd4:	f7fd fd05 	bl	80086e2 <clust2sect>
 800acd8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d105      	bne.n	800acec <f_write+0x1d0>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2202      	movs	r2, #2
 800ace4:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800ace8:	2302      	movs	r3, #2
 800acea:	e0fa      	b.n	800aee2 <f_write+0x3c6>
			sect += csect;
 800acec:	7dbb      	ldrb	r3, [r7, #22]
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	4413      	add	r3, r2
 800acf2:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800acfa:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800acfe:	461a      	mov	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad06:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d058      	beq.n	800adc0 <f_write+0x2a4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800ad0e:	7dba      	ldrb	r2, [r7, #22]
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	4413      	add	r3, r2
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800ad1a:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d908      	bls.n	800ad34 <f_write+0x218>
					cc = fp->fs->csize - csect;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ad28:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	7dbb      	ldrb	r3, [r7, #22]
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ad3a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	69b9      	ldr	r1, [r7, #24]
 800ad44:	f7fd f936 	bl	8007fb4 <disk_write>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d005      	beq.n	800ad5a <f_write+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2201      	movs	r2, #1
 800ad52:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800ad56:	2301      	movs	r3, #1
 800ad58:	e0c3      	b.n	800aee2 <f_write+0x3c6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	69fa      	ldr	r2, [r7, #28]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d91f      	bls.n	800adaa <f_write+0x28e>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800ad7c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800ad80:	fb02 f303 	mul.w	r3, r2, r3
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	18d1      	adds	r1, r2, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ad8e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800ad92:	461a      	mov	r2, r3
 800ad94:	f7fd f94c 	bl	8008030 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800ad9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800adb0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800adb4:	461a      	mov	r2, r3
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	fb02 f303 	mul.w	r3, r2, r3
 800adbc:	623b      	str	r3, [r7, #32]
				continue;
 800adbe:	e05c      	b.n	800ae7a <f_write+0x35e>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d01a      	beq.n	800ae02 <f_write+0x2e6>
				if (fp->fptr < fp->fsize &&
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800add8:	429a      	cmp	r2, r3
 800adda:	d212      	bcs.n	800ae02 <f_write+0x2e6>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ade2:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800ade6:	68f9      	ldr	r1, [r7, #12]
 800ade8:	2301      	movs	r3, #1
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	f7fd f8c2 	bl	8007f74 <disk_read>
 800adf0:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d005      	beq.n	800ae02 <f_write+0x2e6>
						ABORT(fp->fs, FR_DISK_ERR);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800adfe:	2301      	movs	r3, #1
 800ae00:	e06f      	b.n	800aee2 <f_write+0x3c6>
			}
#endif
			fp->dsect = sect;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ae10:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800ae14:	4618      	mov	r0, r3
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800ae22:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800ae26:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae2a:	fb01 f202 	mul.w	r2, r1, r2
 800ae2e:	1a9b      	subs	r3, r3, r2
 800ae30:	1ac3      	subs	r3, r0, r3
 800ae32:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800ae34:	6a3a      	ldr	r2, [r7, #32]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d901      	bls.n	800ae40 <f_write+0x324>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800ae4c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800ae50:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae54:	fb01 f202 	mul.w	r2, r1, r2
 800ae58:	1a9b      	subs	r3, r3, r2
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	6a3a      	ldr	r2, [r7, #32]
 800ae60:	69b9      	ldr	r1, [r7, #24]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fd f8e4 	bl	8008030 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800ae6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae72:	b2da      	uxtb	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800ae7a:	69ba      	ldr	r2, [r7, #24]
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	4413      	add	r3, r2
 800ae80:	61bb      	str	r3, [r7, #24]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	441a      	add	r2, r3
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	441a      	add	r2, r3
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	601a      	str	r2, [r3, #0]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f47f ae6d 	bne.w	800ab88 <f_write+0x6c>
 800aeae:	e000      	b.n	800aeb2 <f_write+0x396>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aeb0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d905      	bls.n	800aece <f_write+0x3b2>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800aed4:	f043 0320 	orr.w	r3, r3, #32
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406

	LEAVE_FF(fp->fs, FR_OK);
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3728      	adds	r7, #40	; 0x28
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b086      	sub	sp, #24
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7ff fb14 	bl	800a520 <validate>
 800aef8:	4603      	mov	r3, r0
 800aefa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f040 80a8 	bne.w	800b054 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f000 80a0 	beq.w	800b054 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800af1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d019      	beq.n	800af56 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800af28:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800af2c:	6879      	ldr	r1, [r7, #4]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800af34:	2301      	movs	r3, #1
 800af36:	f7fd f83d 	bl	8007fb4 <disk_write>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800af40:	2301      	movs	r3, #1
 800af42:	e088      	b.n	800b056 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800af4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800af62:	4619      	mov	r1, r3
 800af64:	4610      	mov	r0, r2
 800af66:	f7fd fae0 	bl	800852a <move_window>
 800af6a:	4603      	mov	r3, r0
 800af6c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d16f      	bne.n	800b054 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800af7a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	330b      	adds	r3, #11
 800af80:	781a      	ldrb	r2, [r3, #0]
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	330b      	adds	r3, #11
 800af86:	f042 0220 	orr.w	r2, r2, #32
 800af8a:	b2d2      	uxtb	r2, r2
 800af8c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	331c      	adds	r3, #28
 800af98:	b2d2      	uxtb	r2, r2
 800af9a:	701a      	strb	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	0a1b      	lsrs	r3, r3, #8
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	331d      	adds	r3, #29
 800afac:	b2d2      	uxtb	r2, r2
 800afae:	701a      	strb	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800afb6:	0c1a      	lsrs	r2, r3, #16
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	331e      	adds	r3, #30
 800afbc:	b2d2      	uxtb	r2, r2
 800afbe:	701a      	strb	r2, [r3, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800afc6:	0e1a      	lsrs	r2, r3, #24
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	331f      	adds	r3, #31
 800afcc:	b2d2      	uxtb	r2, r2
 800afce:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800afd6:	4619      	mov	r1, r3
 800afd8:	6938      	ldr	r0, [r7, #16]
 800afda:	f7fe f948 	bl	800926e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800afde:	f7fc ff2b 	bl	8007e38 <get_fattime>
 800afe2:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	3316      	adds	r3, #22
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	b2d2      	uxtb	r2, r2
 800afec:	701a      	strb	r2, [r3, #0]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	0a1b      	lsrs	r3, r3, #8
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	3317      	adds	r3, #23
 800affa:	b2d2      	uxtb	r2, r2
 800affc:	701a      	strb	r2, [r3, #0]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	0c1a      	lsrs	r2, r3, #16
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	3318      	adds	r3, #24
 800b006:	b2d2      	uxtb	r2, r2
 800b008:	701a      	strb	r2, [r3, #0]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	0e1a      	lsrs	r2, r3, #24
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	3319      	adds	r3, #25
 800b012:	b2d2      	uxtb	r2, r2
 800b014:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	3312      	adds	r3, #18
 800b01a:	2200      	movs	r2, #0
 800b01c:	701a      	strb	r2, [r3, #0]
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	3313      	adds	r3, #19
 800b022:	2200      	movs	r2, #0
 800b024:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800b02c:	f023 0320 	bic.w	r3, r3, #32
 800b030:	b2da      	uxtb	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				fp->fs->wflag = 1;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fd fa9b 	bl	8008586 <sync_fs>
 800b050:	4603      	mov	r3, r0
 800b052:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800b054:	7dfb      	ldrb	r3, [r7, #23]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff ff3f 	bl	800aeea <f_sync>
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d116      	bne.n	800b0a4 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff fa52 	bl	800a520 <validate>
 800b07c:	4603      	mov	r3, r0
 800b07e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10e      	bne.n	800b0a4 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fd f995 	bl	80083bc <dec_lock>
 800b092:	4603      	mov	r3, r0
 800b094:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b096:	7bfb      	ldrb	r3, [r7, #15]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d103      	bne.n	800b0a4 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b090      	sub	sp, #64	; 0x40
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff fa31 	bl	800a520 <validate>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b0c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <f_lseek+0x24>
 800b0cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b0d0:	e274      	b.n	800b5bc <f_lseek+0x50e>
	if (fp->err)						/* Check error */
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800b0e2:	e26b      	b.n	800b5bc <f_lseek+0x50e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f000 8100 	beq.w	800b2f0 <f_lseek+0x242>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0f6:	d164      	bne.n	800b1c2 <f_lseek+0x114>
			tbl = fp->cltbl;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800b0fe:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b102:	1d1a      	adds	r2, r3, #4
 800b104:	627a      	str	r2, [r7, #36]	; 0x24
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	617b      	str	r3, [r7, #20]
 800b10a:	2302      	movs	r3, #2
 800b10c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b114:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d041      	beq.n	800b1a0 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	613b      	str	r3, [r7, #16]
 800b120:	2300      	movs	r3, #0
 800b122:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	3302      	adds	r3, #2
 800b128:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b130:	3301      	adds	r3, #1
 800b132:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b13a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fd faf2 	bl	8008726 <get_fat>
 800b142:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800b144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b146:	2b01      	cmp	r3, #1
 800b148:	d805      	bhi.n	800b156 <f_lseek+0xa8>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2202      	movs	r2, #2
 800b14e:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b152:	2302      	movs	r3, #2
 800b154:	e232      	b.n	800b5bc <f_lseek+0x50e>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b15c:	d105      	bne.n	800b16a <f_lseek+0xbc>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b166:	2301      	movs	r3, #1
 800b168:	e228      	b.n	800b5bc <f_lseek+0x50e>
					} while (cl == pcl + 1);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	3301      	adds	r3, #1
 800b16e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b170:	429a      	cmp	r2, r3
 800b172:	d0da      	beq.n	800b12a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d809      	bhi.n	800b190 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	1d1a      	adds	r2, r3, #4
 800b180:	627a      	str	r2, [r7, #36]	; 0x24
 800b182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	1d1a      	adds	r2, r3, #4
 800b18a:	627a      	str	r2, [r7, #36]	; 0x24
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b196:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b19a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d3bd      	bcc.n	800b11c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800b1a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1a8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800b1aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d803      	bhi.n	800b1ba <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	e1fe      	b.n	800b5b8 <f_lseek+0x50a>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b1ba:	2311      	movs	r3, #17
 800b1bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b1c0:	e1fa      	b.n	800b5b8 <f_lseek+0x50a>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d903      	bls.n	800b1d6 <f_lseek+0x128>
				ofs = fp->fsize;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b1d4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			if (ofs) {
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f000 81e9 	beq.w	800b5b8 <f_lseek+0x50a>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7fd fdbf 	bl	8008d70 <clmt_clust>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
				dsc = clust2sect(fp->fs, fp->clust);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b206:	4619      	mov	r1, r3
 800b208:	4610      	mov	r0, r2
 800b20a:	f7fd fa6a 	bl	80086e2 <clust2sect>
 800b20e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d105      	bne.n	800b222 <f_lseek+0x174>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2202      	movs	r2, #2
 800b21a:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b21e:	2302      	movs	r3, #2
 800b220:	e1cc      	b.n	800b5bc <f_lseek+0x50e>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	3b01      	subs	r3, #1
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800b22c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b230:	fbb3 f3f2 	udiv	r3, r3, r2
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800b23a:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800b23e:	3a01      	subs	r2, #1
 800b240:	4013      	ands	r3, r2
 800b242:	69ba      	ldr	r2, [r7, #24]
 800b244:	4413      	add	r3, r2
 800b246:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800b254:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b258:	fbb3 f1f2 	udiv	r1, r3, r2
 800b25c:	fb01 f202 	mul.w	r2, r1, r2
 800b260:	1a9b      	subs	r3, r3, r2
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 81a8 	beq.w	800b5b8 <f_lseek+0x50a>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b26e:	69ba      	ldr	r2, [r7, #24]
 800b270:	429a      	cmp	r2, r3
 800b272:	f000 81a1 	beq.w	800b5b8 <f_lseek+0x50a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800b27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b280:	2b00      	cmp	r3, #0
 800b282:	d01d      	beq.n	800b2c0 <f_lseek+0x212>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b28a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800b296:	2301      	movs	r3, #1
 800b298:	f7fc fe8c 	bl	8007fb4 <disk_write>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <f_lseek+0x200>
							ABORT(fp->fs, FR_DISK_ERR);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e186      	b.n	800b5bc <f_lseek+0x50e>
						fp->flag &= ~FA__DIRTY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800b2b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b2c6:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b2ca:	6879      	ldr	r1, [r7, #4]
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	f7fc fe50 	bl	8007f74 <disk_read>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d005      	beq.n	800b2e6 <f_lseek+0x238>
						ABORT(fp->fs, FR_DISK_ERR);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e16a      	b.n	800b5bc <f_lseek+0x50e>
#endif
					fp->dsect = dsc;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	69ba      	ldr	r2, [r7, #24]
 800b2ea:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800b2ee:	e163      	b.n	800b5b8 <f_lseek+0x50a>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d90a      	bls.n	800b312 <f_lseek+0x264>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800b302:	f003 0302 	and.w	r3, r3, #2
 800b306:	2b00      	cmp	r3, #0
 800b308:	d103      	bne.n	800b312 <f_lseek+0x264>
#endif
			) ofs = fp->fsize;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b310:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b318:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	637b      	str	r3, [r7, #52]	; 0x34
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b322:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
		if (ofs) {
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 80dd 	beq.w	800b4e8 <f_lseek+0x43a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b334:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 800b338:	461a      	mov	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b340:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b344:	fb02 f303 	mul.w	r3, r2, r3
 800b348:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b34a:	6a3b      	ldr	r3, [r7, #32]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d01e      	beq.n	800b38e <f_lseek+0x2e0>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	1e5a      	subs	r2, r3, #1
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	fbb2 f2f3 	udiv	r2, r2, r3
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	1e59      	subs	r1, r3, #1
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b364:	429a      	cmp	r2, r3
 800b366:	d312      	bcc.n	800b38e <f_lseek+0x2e0>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	1e5a      	subs	r2, r3, #1
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	425b      	negs	r3, r3
 800b370:	401a      	ands	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
				ofs -= fp->fptr;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b38a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b38c:	e029      	b.n	800b3e2 <f_lseek+0x334>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800b394:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d11e      	bne.n	800b3da <f_lseek+0x32c>
					clst = create_chain(fp->fs, 0);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fd fc46 	bl	8008c36 <create_chain>
 800b3aa:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d105      	bne.n	800b3be <f_lseek+0x310>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	e0fe      	b.n	800b5bc <f_lseek+0x50e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3c4:	d105      	bne.n	800b3d2 <f_lseek+0x324>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e0f4      	b.n	800b5bc <f_lseek+0x50e>
					fp->sclust = clst;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3d6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				}
#endif
				fp->clust = clst;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3de:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
			}
			if (clst != 0) {
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d07f      	beq.n	800b4e8 <f_lseek+0x43a>
				while (ofs > bcs) {						/* Cluster following loop */
 800b3e8:	e047      	b.n	800b47a <f_lseek+0x3cc>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800b3f0:	f003 0302 	and.w	r3, r3, #2
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00d      	beq.n	800b414 <f_lseek+0x366>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b3fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b400:	4618      	mov	r0, r3
 800b402:	f7fd fc18 	bl	8008c36 <create_chain>
 800b406:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d10a      	bne.n	800b424 <f_lseek+0x376>
							ofs = bcs; break;
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	603b      	str	r3, [r7, #0]
 800b412:	e036      	b.n	800b482 <f_lseek+0x3d4>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b41a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fd f982 	bl	8008726 <get_fat>
 800b422:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b42a:	d105      	bne.n	800b438 <f_lseek+0x38a>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b434:	2301      	movs	r3, #1
 800b436:	e0c1      	b.n	800b5bc <f_lseek+0x50e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d907      	bls.n	800b44e <f_lseek+0x3a0>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b444:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800b448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d305      	bcc.n	800b45a <f_lseek+0x3ac>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2202      	movs	r2, #2
 800b452:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b456:	2302      	movs	r3, #2
 800b458:	e0b0      	b.n	800b5bc <f_lseek+0x50e>
					fp->clust = clst;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b45e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
					fp->fptr += bcs;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	441a      	add	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
					ofs -= bcs;
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d8b3      	bhi.n	800b3ea <f_lseek+0x33c>
				}
				fp->fptr += ofs;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	441a      	add	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
				if (ofs % SS(fp->fs)) {
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b498:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b49c:	461a      	mov	r2, r3
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4a4:	fb01 f202 	mul.w	r2, r1, r2
 800b4a8:	1a9b      	subs	r3, r3, r2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d01c      	beq.n	800b4e8 <f_lseek+0x43a>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b4b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fd f913 	bl	80086e2 <clust2sect>
 800b4bc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800b4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d105      	bne.n	800b4d0 <f_lseek+0x422>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	e075      	b.n	800b5bc <f_lseek+0x50e>
					nsect += ofs / SS(fp->fs);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b4d6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800b4da:	461a      	mov	r2, r3
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4e4:	4413      	add	r3, r2
 800b4e6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800b4f4:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800b4f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4fc:	fb01 f202 	mul.w	r2, r1, r2
 800b500:	1a9b      	subs	r3, r3, r2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d041      	beq.n	800b58a <f_lseek+0x4dc>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800b50c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b50e:	429a      	cmp	r2, r3
 800b510:	d03b      	beq.n	800b58a <f_lseek+0x4dc>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800b518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d01d      	beq.n	800b55c <f_lseek+0x4ae>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b526:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800b532:	2301      	movs	r3, #1
 800b534:	f7fc fd3e 	bl	8007fb4 <disk_write>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d005      	beq.n	800b54a <f_lseek+0x49c>
					ABORT(fp->fs, FR_DISK_ERR);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b546:	2301      	movs	r3, #1
 800b548:	e038      	b.n	800b5bc <f_lseek+0x50e>
				fp->flag &= ~FA__DIRTY;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800b550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b554:	b2da      	uxtb	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b562:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	2301      	movs	r3, #1
 800b56a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b56c:	f7fc fd02 	bl	8007f74 <disk_read>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d005      	beq.n	800b582 <f_lseek+0x4d4>
				ABORT(fp->fs, FR_DISK_ERR);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800b57e:	2301      	movs	r3, #1
 800b580:	e01c      	b.n	800b5bc <f_lseek+0x50e>
#endif
			fp->dsect = nsect;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b586:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800b596:	429a      	cmp	r2, r3
 800b598:	d90e      	bls.n	800b5b8 <f_lseek+0x50a>
			fp->fsize = fp->fptr;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			fp->flag |= FA__WRITTEN;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800b5ac:	f043 0320 	orr.w	r3, r3, #32
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800b5b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3740      	adds	r7, #64	; 0x40
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b087      	sub	sp, #28
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800b5da:	4b1f      	ldr	r3, [pc, #124]	; (800b658 <FATFS_LinkDriverEx+0x94>)
 800b5dc:	7a5b      	ldrb	r3, [r3, #9]
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d831      	bhi.n	800b648 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b5e4:	4b1c      	ldr	r3, [pc, #112]	; (800b658 <FATFS_LinkDriverEx+0x94>)
 800b5e6:	7a5b      	ldrb	r3, [r3, #9]
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	4b1a      	ldr	r3, [pc, #104]	; (800b658 <FATFS_LinkDriverEx+0x94>)
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800b5f2:	4b19      	ldr	r3, [pc, #100]	; (800b658 <FATFS_LinkDriverEx+0x94>)
 800b5f4:	7a5b      	ldrb	r3, [r3, #9]
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	4a17      	ldr	r2, [pc, #92]	; (800b658 <FATFS_LinkDriverEx+0x94>)
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800b602:	4b15      	ldr	r3, [pc, #84]	; (800b658 <FATFS_LinkDriverEx+0x94>)
 800b604:	7a5b      	ldrb	r3, [r3, #9]
 800b606:	b2db      	uxtb	r3, r3
 800b608:	461a      	mov	r2, r3
 800b60a:	4b13      	ldr	r3, [pc, #76]	; (800b658 <FATFS_LinkDriverEx+0x94>)
 800b60c:	4413      	add	r3, r2
 800b60e:	79fa      	ldrb	r2, [r7, #7]
 800b610:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b612:	4b11      	ldr	r3, [pc, #68]	; (800b658 <FATFS_LinkDriverEx+0x94>)
 800b614:	7a5b      	ldrb	r3, [r3, #9]
 800b616:	b2db      	uxtb	r3, r3
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	b2d1      	uxtb	r1, r2
 800b61c:	4a0e      	ldr	r2, [pc, #56]	; (800b658 <FATFS_LinkDriverEx+0x94>)
 800b61e:	7251      	strb	r1, [r2, #9]
 800b620:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b622:	7dbb      	ldrb	r3, [r7, #22]
 800b624:	3330      	adds	r3, #48	; 0x30
 800b626:	b2da      	uxtb	r2, r3
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	3301      	adds	r3, #1
 800b630:	223a      	movs	r2, #58	; 0x3a
 800b632:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	3302      	adds	r3, #2
 800b638:	222f      	movs	r2, #47	; 0x2f
 800b63a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	3303      	adds	r3, #3
 800b640:	2200      	movs	r2, #0
 800b642:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800b648:	7dfb      	ldrb	r3, [r7, #23]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	371c      	adds	r7, #28
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	20000ef8 	.word	0x20000ef8

0800b65c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b666:	2200      	movs	r2, #0
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff ffaa 	bl	800b5c4 <FATFS_LinkDriverEx>
 800b670:	4603      	mov	r3, r0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
	...

0800b67c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	6039      	str	r1, [r7, #0]
 800b686:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b688:	88fb      	ldrh	r3, [r7, #6]
 800b68a:	2b7f      	cmp	r3, #127	; 0x7f
 800b68c:	d802      	bhi.n	800b694 <ff_convert+0x18>
		c = chr;
 800b68e:	88fb      	ldrh	r3, [r7, #6]
 800b690:	81fb      	strh	r3, [r7, #14]
 800b692:	e025      	b.n	800b6e0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00b      	beq.n	800b6b2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b69a:	88fb      	ldrh	r3, [r7, #6]
 800b69c:	2bff      	cmp	r3, #255	; 0xff
 800b69e:	d805      	bhi.n	800b6ac <ff_convert+0x30>
 800b6a0:	88fb      	ldrh	r3, [r7, #6]
 800b6a2:	3b80      	subs	r3, #128	; 0x80
 800b6a4:	4a12      	ldr	r2, [pc, #72]	; (800b6f0 <ff_convert+0x74>)
 800b6a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6aa:	e000      	b.n	800b6ae <ff_convert+0x32>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	81fb      	strh	r3, [r7, #14]
 800b6b0:	e016      	b.n	800b6e0 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	81fb      	strh	r3, [r7, #14]
 800b6b6:	e009      	b.n	800b6cc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b6b8:	89fb      	ldrh	r3, [r7, #14]
 800b6ba:	4a0d      	ldr	r2, [pc, #52]	; (800b6f0 <ff_convert+0x74>)
 800b6bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6c0:	88fa      	ldrh	r2, [r7, #6]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d006      	beq.n	800b6d4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b6c6:	89fb      	ldrh	r3, [r7, #14]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	81fb      	strh	r3, [r7, #14]
 800b6cc:	89fb      	ldrh	r3, [r7, #14]
 800b6ce:	2b7f      	cmp	r3, #127	; 0x7f
 800b6d0:	d9f2      	bls.n	800b6b8 <ff_convert+0x3c>
 800b6d2:	e000      	b.n	800b6d6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b6d4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b6d6:	89fb      	ldrh	r3, [r7, #14]
 800b6d8:	3380      	adds	r3, #128	; 0x80
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b6e0:	89fb      	ldrh	r3, [r7, #14]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	0800f594 	.word	0x0800f594

0800b6f4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800b6fe:	2300      	movs	r3, #0
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	e002      	b.n	800b70a <ff_wtoupper+0x16>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	3301      	adds	r3, #1
 800b708:	60fb      	str	r3, [r7, #12]
 800b70a:	4a0f      	ldr	r2, [pc, #60]	; (800b748 <ff_wtoupper+0x54>)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d006      	beq.n	800b724 <ff_wtoupper+0x30>
 800b716:	4a0c      	ldr	r2, [pc, #48]	; (800b748 <ff_wtoupper+0x54>)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b71e:	88fa      	ldrh	r2, [r7, #6]
 800b720:	429a      	cmp	r2, r3
 800b722:	d1ef      	bne.n	800b704 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800b724:	4a08      	ldr	r2, [pc, #32]	; (800b748 <ff_wtoupper+0x54>)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d004      	beq.n	800b73a <ff_wtoupper+0x46>
 800b730:	4a06      	ldr	r2, [pc, #24]	; (800b74c <ff_wtoupper+0x58>)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b738:	e000      	b.n	800b73c <ff_wtoupper+0x48>
 800b73a:	88fb      	ldrh	r3, [r7, #6]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	0800f694 	.word	0x0800f694
 800b74c:	0800f874 	.word	0x0800f874

0800b750 <__cvt>:
 800b750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b754:	ec55 4b10 	vmov	r4, r5, d0
 800b758:	2d00      	cmp	r5, #0
 800b75a:	460e      	mov	r6, r1
 800b75c:	4619      	mov	r1, r3
 800b75e:	462b      	mov	r3, r5
 800b760:	bfbb      	ittet	lt
 800b762:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b766:	461d      	movlt	r5, r3
 800b768:	2300      	movge	r3, #0
 800b76a:	232d      	movlt	r3, #45	; 0x2d
 800b76c:	700b      	strb	r3, [r1, #0]
 800b76e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b770:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b774:	4691      	mov	r9, r2
 800b776:	f023 0820 	bic.w	r8, r3, #32
 800b77a:	bfbc      	itt	lt
 800b77c:	4622      	movlt	r2, r4
 800b77e:	4614      	movlt	r4, r2
 800b780:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b784:	d005      	beq.n	800b792 <__cvt+0x42>
 800b786:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b78a:	d100      	bne.n	800b78e <__cvt+0x3e>
 800b78c:	3601      	adds	r6, #1
 800b78e:	2102      	movs	r1, #2
 800b790:	e000      	b.n	800b794 <__cvt+0x44>
 800b792:	2103      	movs	r1, #3
 800b794:	ab03      	add	r3, sp, #12
 800b796:	9301      	str	r3, [sp, #4]
 800b798:	ab02      	add	r3, sp, #8
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	ec45 4b10 	vmov	d0, r4, r5
 800b7a0:	4653      	mov	r3, sl
 800b7a2:	4632      	mov	r2, r6
 800b7a4:	f000 fe4c 	bl	800c440 <_dtoa_r>
 800b7a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b7ac:	4607      	mov	r7, r0
 800b7ae:	d102      	bne.n	800b7b6 <__cvt+0x66>
 800b7b0:	f019 0f01 	tst.w	r9, #1
 800b7b4:	d022      	beq.n	800b7fc <__cvt+0xac>
 800b7b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7ba:	eb07 0906 	add.w	r9, r7, r6
 800b7be:	d110      	bne.n	800b7e2 <__cvt+0x92>
 800b7c0:	783b      	ldrb	r3, [r7, #0]
 800b7c2:	2b30      	cmp	r3, #48	; 0x30
 800b7c4:	d10a      	bne.n	800b7dc <__cvt+0x8c>
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	f7f5 f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7d2:	b918      	cbnz	r0, 800b7dc <__cvt+0x8c>
 800b7d4:	f1c6 0601 	rsb	r6, r6, #1
 800b7d8:	f8ca 6000 	str.w	r6, [sl]
 800b7dc:	f8da 3000 	ldr.w	r3, [sl]
 800b7e0:	4499      	add	r9, r3
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	f7f5 f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7ee:	b108      	cbz	r0, 800b7f4 <__cvt+0xa4>
 800b7f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b7f4:	2230      	movs	r2, #48	; 0x30
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	454b      	cmp	r3, r9
 800b7fa:	d307      	bcc.n	800b80c <__cvt+0xbc>
 800b7fc:	9b03      	ldr	r3, [sp, #12]
 800b7fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b800:	1bdb      	subs	r3, r3, r7
 800b802:	4638      	mov	r0, r7
 800b804:	6013      	str	r3, [r2, #0]
 800b806:	b004      	add	sp, #16
 800b808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80c:	1c59      	adds	r1, r3, #1
 800b80e:	9103      	str	r1, [sp, #12]
 800b810:	701a      	strb	r2, [r3, #0]
 800b812:	e7f0      	b.n	800b7f6 <__cvt+0xa6>

0800b814 <__exponent>:
 800b814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b816:	4603      	mov	r3, r0
 800b818:	2900      	cmp	r1, #0
 800b81a:	bfb8      	it	lt
 800b81c:	4249      	neglt	r1, r1
 800b81e:	f803 2b02 	strb.w	r2, [r3], #2
 800b822:	bfb4      	ite	lt
 800b824:	222d      	movlt	r2, #45	; 0x2d
 800b826:	222b      	movge	r2, #43	; 0x2b
 800b828:	2909      	cmp	r1, #9
 800b82a:	7042      	strb	r2, [r0, #1]
 800b82c:	dd2a      	ble.n	800b884 <__exponent+0x70>
 800b82e:	f10d 0207 	add.w	r2, sp, #7
 800b832:	4617      	mov	r7, r2
 800b834:	260a      	movs	r6, #10
 800b836:	4694      	mov	ip, r2
 800b838:	fb91 f5f6 	sdiv	r5, r1, r6
 800b83c:	fb06 1415 	mls	r4, r6, r5, r1
 800b840:	3430      	adds	r4, #48	; 0x30
 800b842:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b846:	460c      	mov	r4, r1
 800b848:	2c63      	cmp	r4, #99	; 0x63
 800b84a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b84e:	4629      	mov	r1, r5
 800b850:	dcf1      	bgt.n	800b836 <__exponent+0x22>
 800b852:	3130      	adds	r1, #48	; 0x30
 800b854:	f1ac 0402 	sub.w	r4, ip, #2
 800b858:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b85c:	1c41      	adds	r1, r0, #1
 800b85e:	4622      	mov	r2, r4
 800b860:	42ba      	cmp	r2, r7
 800b862:	d30a      	bcc.n	800b87a <__exponent+0x66>
 800b864:	f10d 0209 	add.w	r2, sp, #9
 800b868:	eba2 020c 	sub.w	r2, r2, ip
 800b86c:	42bc      	cmp	r4, r7
 800b86e:	bf88      	it	hi
 800b870:	2200      	movhi	r2, #0
 800b872:	4413      	add	r3, r2
 800b874:	1a18      	subs	r0, r3, r0
 800b876:	b003      	add	sp, #12
 800b878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b87a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b87e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b882:	e7ed      	b.n	800b860 <__exponent+0x4c>
 800b884:	2330      	movs	r3, #48	; 0x30
 800b886:	3130      	adds	r1, #48	; 0x30
 800b888:	7083      	strb	r3, [r0, #2]
 800b88a:	70c1      	strb	r1, [r0, #3]
 800b88c:	1d03      	adds	r3, r0, #4
 800b88e:	e7f1      	b.n	800b874 <__exponent+0x60>

0800b890 <_printf_float>:
 800b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b894:	ed2d 8b02 	vpush	{d8}
 800b898:	b08d      	sub	sp, #52	; 0x34
 800b89a:	460c      	mov	r4, r1
 800b89c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8a0:	4616      	mov	r6, r2
 800b8a2:	461f      	mov	r7, r3
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	f000 fd11 	bl	800c2cc <_localeconv_r>
 800b8aa:	f8d0 a000 	ldr.w	sl, [r0]
 800b8ae:	4650      	mov	r0, sl
 800b8b0:	f7f4 fcde 	bl	8000270 <strlen>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	9305      	str	r3, [sp, #20]
 800b8bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b8c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b8c4:	3307      	adds	r3, #7
 800b8c6:	f023 0307 	bic.w	r3, r3, #7
 800b8ca:	f103 0208 	add.w	r2, r3, #8
 800b8ce:	f8c8 2000 	str.w	r2, [r8]
 800b8d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8da:	9307      	str	r3, [sp, #28]
 800b8dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b8e0:	ee08 0a10 	vmov	s16, r0
 800b8e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b8e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8ec:	4b9e      	ldr	r3, [pc, #632]	; (800bb68 <_printf_float+0x2d8>)
 800b8ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8f2:	f7f5 f91b 	bl	8000b2c <__aeabi_dcmpun>
 800b8f6:	bb88      	cbnz	r0, 800b95c <_printf_float+0xcc>
 800b8f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8fc:	4b9a      	ldr	r3, [pc, #616]	; (800bb68 <_printf_float+0x2d8>)
 800b8fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b902:	f7f5 f8f5 	bl	8000af0 <__aeabi_dcmple>
 800b906:	bb48      	cbnz	r0, 800b95c <_printf_float+0xcc>
 800b908:	2200      	movs	r2, #0
 800b90a:	2300      	movs	r3, #0
 800b90c:	4640      	mov	r0, r8
 800b90e:	4649      	mov	r1, r9
 800b910:	f7f5 f8e4 	bl	8000adc <__aeabi_dcmplt>
 800b914:	b110      	cbz	r0, 800b91c <_printf_float+0x8c>
 800b916:	232d      	movs	r3, #45	; 0x2d
 800b918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b91c:	4a93      	ldr	r2, [pc, #588]	; (800bb6c <_printf_float+0x2dc>)
 800b91e:	4b94      	ldr	r3, [pc, #592]	; (800bb70 <_printf_float+0x2e0>)
 800b920:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b924:	bf94      	ite	ls
 800b926:	4690      	movls	r8, r2
 800b928:	4698      	movhi	r8, r3
 800b92a:	2303      	movs	r3, #3
 800b92c:	6123      	str	r3, [r4, #16]
 800b92e:	9b05      	ldr	r3, [sp, #20]
 800b930:	f023 0304 	bic.w	r3, r3, #4
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	f04f 0900 	mov.w	r9, #0
 800b93a:	9700      	str	r7, [sp, #0]
 800b93c:	4633      	mov	r3, r6
 800b93e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b940:	4621      	mov	r1, r4
 800b942:	4628      	mov	r0, r5
 800b944:	f000 f9da 	bl	800bcfc <_printf_common>
 800b948:	3001      	adds	r0, #1
 800b94a:	f040 8090 	bne.w	800ba6e <_printf_float+0x1de>
 800b94e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b952:	b00d      	add	sp, #52	; 0x34
 800b954:	ecbd 8b02 	vpop	{d8}
 800b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95c:	4642      	mov	r2, r8
 800b95e:	464b      	mov	r3, r9
 800b960:	4640      	mov	r0, r8
 800b962:	4649      	mov	r1, r9
 800b964:	f7f5 f8e2 	bl	8000b2c <__aeabi_dcmpun>
 800b968:	b140      	cbz	r0, 800b97c <_printf_float+0xec>
 800b96a:	464b      	mov	r3, r9
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	bfbc      	itt	lt
 800b970:	232d      	movlt	r3, #45	; 0x2d
 800b972:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b976:	4a7f      	ldr	r2, [pc, #508]	; (800bb74 <_printf_float+0x2e4>)
 800b978:	4b7f      	ldr	r3, [pc, #508]	; (800bb78 <_printf_float+0x2e8>)
 800b97a:	e7d1      	b.n	800b920 <_printf_float+0x90>
 800b97c:	6863      	ldr	r3, [r4, #4]
 800b97e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b982:	9206      	str	r2, [sp, #24]
 800b984:	1c5a      	adds	r2, r3, #1
 800b986:	d13f      	bne.n	800ba08 <_printf_float+0x178>
 800b988:	2306      	movs	r3, #6
 800b98a:	6063      	str	r3, [r4, #4]
 800b98c:	9b05      	ldr	r3, [sp, #20]
 800b98e:	6861      	ldr	r1, [r4, #4]
 800b990:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b994:	2300      	movs	r3, #0
 800b996:	9303      	str	r3, [sp, #12]
 800b998:	ab0a      	add	r3, sp, #40	; 0x28
 800b99a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b99e:	ab09      	add	r3, sp, #36	; 0x24
 800b9a0:	ec49 8b10 	vmov	d0, r8, r9
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	6022      	str	r2, [r4, #0]
 800b9a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	f7ff fecf 	bl	800b750 <__cvt>
 800b9b2:	9b06      	ldr	r3, [sp, #24]
 800b9b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9b6:	2b47      	cmp	r3, #71	; 0x47
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	d108      	bne.n	800b9ce <_printf_float+0x13e>
 800b9bc:	1cc8      	adds	r0, r1, #3
 800b9be:	db02      	blt.n	800b9c6 <_printf_float+0x136>
 800b9c0:	6863      	ldr	r3, [r4, #4]
 800b9c2:	4299      	cmp	r1, r3
 800b9c4:	dd41      	ble.n	800ba4a <_printf_float+0x1ba>
 800b9c6:	f1ab 0302 	sub.w	r3, fp, #2
 800b9ca:	fa5f fb83 	uxtb.w	fp, r3
 800b9ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b9d2:	d820      	bhi.n	800ba16 <_printf_float+0x186>
 800b9d4:	3901      	subs	r1, #1
 800b9d6:	465a      	mov	r2, fp
 800b9d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b9dc:	9109      	str	r1, [sp, #36]	; 0x24
 800b9de:	f7ff ff19 	bl	800b814 <__exponent>
 800b9e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9e4:	1813      	adds	r3, r2, r0
 800b9e6:	2a01      	cmp	r2, #1
 800b9e8:	4681      	mov	r9, r0
 800b9ea:	6123      	str	r3, [r4, #16]
 800b9ec:	dc02      	bgt.n	800b9f4 <_printf_float+0x164>
 800b9ee:	6822      	ldr	r2, [r4, #0]
 800b9f0:	07d2      	lsls	r2, r2, #31
 800b9f2:	d501      	bpl.n	800b9f8 <_printf_float+0x168>
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	6123      	str	r3, [r4, #16]
 800b9f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d09c      	beq.n	800b93a <_printf_float+0xaa>
 800ba00:	232d      	movs	r3, #45	; 0x2d
 800ba02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba06:	e798      	b.n	800b93a <_printf_float+0xaa>
 800ba08:	9a06      	ldr	r2, [sp, #24]
 800ba0a:	2a47      	cmp	r2, #71	; 0x47
 800ba0c:	d1be      	bne.n	800b98c <_printf_float+0xfc>
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1bc      	bne.n	800b98c <_printf_float+0xfc>
 800ba12:	2301      	movs	r3, #1
 800ba14:	e7b9      	b.n	800b98a <_printf_float+0xfa>
 800ba16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba1a:	d118      	bne.n	800ba4e <_printf_float+0x1be>
 800ba1c:	2900      	cmp	r1, #0
 800ba1e:	6863      	ldr	r3, [r4, #4]
 800ba20:	dd0b      	ble.n	800ba3a <_printf_float+0x1aa>
 800ba22:	6121      	str	r1, [r4, #16]
 800ba24:	b913      	cbnz	r3, 800ba2c <_printf_float+0x19c>
 800ba26:	6822      	ldr	r2, [r4, #0]
 800ba28:	07d0      	lsls	r0, r2, #31
 800ba2a:	d502      	bpl.n	800ba32 <_printf_float+0x1a2>
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	440b      	add	r3, r1
 800ba30:	6123      	str	r3, [r4, #16]
 800ba32:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba34:	f04f 0900 	mov.w	r9, #0
 800ba38:	e7de      	b.n	800b9f8 <_printf_float+0x168>
 800ba3a:	b913      	cbnz	r3, 800ba42 <_printf_float+0x1b2>
 800ba3c:	6822      	ldr	r2, [r4, #0]
 800ba3e:	07d2      	lsls	r2, r2, #31
 800ba40:	d501      	bpl.n	800ba46 <_printf_float+0x1b6>
 800ba42:	3302      	adds	r3, #2
 800ba44:	e7f4      	b.n	800ba30 <_printf_float+0x1a0>
 800ba46:	2301      	movs	r3, #1
 800ba48:	e7f2      	b.n	800ba30 <_printf_float+0x1a0>
 800ba4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba50:	4299      	cmp	r1, r3
 800ba52:	db05      	blt.n	800ba60 <_printf_float+0x1d0>
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	6121      	str	r1, [r4, #16]
 800ba58:	07d8      	lsls	r0, r3, #31
 800ba5a:	d5ea      	bpl.n	800ba32 <_printf_float+0x1a2>
 800ba5c:	1c4b      	adds	r3, r1, #1
 800ba5e:	e7e7      	b.n	800ba30 <_printf_float+0x1a0>
 800ba60:	2900      	cmp	r1, #0
 800ba62:	bfd4      	ite	le
 800ba64:	f1c1 0202 	rsble	r2, r1, #2
 800ba68:	2201      	movgt	r2, #1
 800ba6a:	4413      	add	r3, r2
 800ba6c:	e7e0      	b.n	800ba30 <_printf_float+0x1a0>
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	055a      	lsls	r2, r3, #21
 800ba72:	d407      	bmi.n	800ba84 <_printf_float+0x1f4>
 800ba74:	6923      	ldr	r3, [r4, #16]
 800ba76:	4642      	mov	r2, r8
 800ba78:	4631      	mov	r1, r6
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	47b8      	blx	r7
 800ba7e:	3001      	adds	r0, #1
 800ba80:	d12c      	bne.n	800badc <_printf_float+0x24c>
 800ba82:	e764      	b.n	800b94e <_printf_float+0xbe>
 800ba84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba88:	f240 80e0 	bls.w	800bc4c <_printf_float+0x3bc>
 800ba8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba90:	2200      	movs	r2, #0
 800ba92:	2300      	movs	r3, #0
 800ba94:	f7f5 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d034      	beq.n	800bb06 <_printf_float+0x276>
 800ba9c:	4a37      	ldr	r2, [pc, #220]	; (800bb7c <_printf_float+0x2ec>)
 800ba9e:	2301      	movs	r3, #1
 800baa0:	4631      	mov	r1, r6
 800baa2:	4628      	mov	r0, r5
 800baa4:	47b8      	blx	r7
 800baa6:	3001      	adds	r0, #1
 800baa8:	f43f af51 	beq.w	800b94e <_printf_float+0xbe>
 800baac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bab0:	429a      	cmp	r2, r3
 800bab2:	db02      	blt.n	800baba <_printf_float+0x22a>
 800bab4:	6823      	ldr	r3, [r4, #0]
 800bab6:	07d8      	lsls	r0, r3, #31
 800bab8:	d510      	bpl.n	800badc <_printf_float+0x24c>
 800baba:	ee18 3a10 	vmov	r3, s16
 800babe:	4652      	mov	r2, sl
 800bac0:	4631      	mov	r1, r6
 800bac2:	4628      	mov	r0, r5
 800bac4:	47b8      	blx	r7
 800bac6:	3001      	adds	r0, #1
 800bac8:	f43f af41 	beq.w	800b94e <_printf_float+0xbe>
 800bacc:	f04f 0800 	mov.w	r8, #0
 800bad0:	f104 091a 	add.w	r9, r4, #26
 800bad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bad6:	3b01      	subs	r3, #1
 800bad8:	4543      	cmp	r3, r8
 800bada:	dc09      	bgt.n	800baf0 <_printf_float+0x260>
 800badc:	6823      	ldr	r3, [r4, #0]
 800bade:	079b      	lsls	r3, r3, #30
 800bae0:	f100 8107 	bmi.w	800bcf2 <_printf_float+0x462>
 800bae4:	68e0      	ldr	r0, [r4, #12]
 800bae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bae8:	4298      	cmp	r0, r3
 800baea:	bfb8      	it	lt
 800baec:	4618      	movlt	r0, r3
 800baee:	e730      	b.n	800b952 <_printf_float+0xc2>
 800baf0:	2301      	movs	r3, #1
 800baf2:	464a      	mov	r2, r9
 800baf4:	4631      	mov	r1, r6
 800baf6:	4628      	mov	r0, r5
 800baf8:	47b8      	blx	r7
 800bafa:	3001      	adds	r0, #1
 800bafc:	f43f af27 	beq.w	800b94e <_printf_float+0xbe>
 800bb00:	f108 0801 	add.w	r8, r8, #1
 800bb04:	e7e6      	b.n	800bad4 <_printf_float+0x244>
 800bb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	dc39      	bgt.n	800bb80 <_printf_float+0x2f0>
 800bb0c:	4a1b      	ldr	r2, [pc, #108]	; (800bb7c <_printf_float+0x2ec>)
 800bb0e:	2301      	movs	r3, #1
 800bb10:	4631      	mov	r1, r6
 800bb12:	4628      	mov	r0, r5
 800bb14:	47b8      	blx	r7
 800bb16:	3001      	adds	r0, #1
 800bb18:	f43f af19 	beq.w	800b94e <_printf_float+0xbe>
 800bb1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bb20:	4313      	orrs	r3, r2
 800bb22:	d102      	bne.n	800bb2a <_printf_float+0x29a>
 800bb24:	6823      	ldr	r3, [r4, #0]
 800bb26:	07d9      	lsls	r1, r3, #31
 800bb28:	d5d8      	bpl.n	800badc <_printf_float+0x24c>
 800bb2a:	ee18 3a10 	vmov	r3, s16
 800bb2e:	4652      	mov	r2, sl
 800bb30:	4631      	mov	r1, r6
 800bb32:	4628      	mov	r0, r5
 800bb34:	47b8      	blx	r7
 800bb36:	3001      	adds	r0, #1
 800bb38:	f43f af09 	beq.w	800b94e <_printf_float+0xbe>
 800bb3c:	f04f 0900 	mov.w	r9, #0
 800bb40:	f104 0a1a 	add.w	sl, r4, #26
 800bb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb46:	425b      	negs	r3, r3
 800bb48:	454b      	cmp	r3, r9
 800bb4a:	dc01      	bgt.n	800bb50 <_printf_float+0x2c0>
 800bb4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb4e:	e792      	b.n	800ba76 <_printf_float+0x1e6>
 800bb50:	2301      	movs	r3, #1
 800bb52:	4652      	mov	r2, sl
 800bb54:	4631      	mov	r1, r6
 800bb56:	4628      	mov	r0, r5
 800bb58:	47b8      	blx	r7
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	f43f aef7 	beq.w	800b94e <_printf_float+0xbe>
 800bb60:	f109 0901 	add.w	r9, r9, #1
 800bb64:	e7ee      	b.n	800bb44 <_printf_float+0x2b4>
 800bb66:	bf00      	nop
 800bb68:	7fefffff 	.word	0x7fefffff
 800bb6c:	0800fa54 	.word	0x0800fa54
 800bb70:	0800fa58 	.word	0x0800fa58
 800bb74:	0800fa5c 	.word	0x0800fa5c
 800bb78:	0800fa60 	.word	0x0800fa60
 800bb7c:	0800fa64 	.word	0x0800fa64
 800bb80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb84:	429a      	cmp	r2, r3
 800bb86:	bfa8      	it	ge
 800bb88:	461a      	movge	r2, r3
 800bb8a:	2a00      	cmp	r2, #0
 800bb8c:	4691      	mov	r9, r2
 800bb8e:	dc37      	bgt.n	800bc00 <_printf_float+0x370>
 800bb90:	f04f 0b00 	mov.w	fp, #0
 800bb94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb98:	f104 021a 	add.w	r2, r4, #26
 800bb9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb9e:	9305      	str	r3, [sp, #20]
 800bba0:	eba3 0309 	sub.w	r3, r3, r9
 800bba4:	455b      	cmp	r3, fp
 800bba6:	dc33      	bgt.n	800bc10 <_printf_float+0x380>
 800bba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbac:	429a      	cmp	r2, r3
 800bbae:	db3b      	blt.n	800bc28 <_printf_float+0x398>
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	07da      	lsls	r2, r3, #31
 800bbb4:	d438      	bmi.n	800bc28 <_printf_float+0x398>
 800bbb6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bbba:	eba2 0903 	sub.w	r9, r2, r3
 800bbbe:	9b05      	ldr	r3, [sp, #20]
 800bbc0:	1ad2      	subs	r2, r2, r3
 800bbc2:	4591      	cmp	r9, r2
 800bbc4:	bfa8      	it	ge
 800bbc6:	4691      	movge	r9, r2
 800bbc8:	f1b9 0f00 	cmp.w	r9, #0
 800bbcc:	dc35      	bgt.n	800bc3a <_printf_float+0x3aa>
 800bbce:	f04f 0800 	mov.w	r8, #0
 800bbd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbd6:	f104 0a1a 	add.w	sl, r4, #26
 800bbda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbde:	1a9b      	subs	r3, r3, r2
 800bbe0:	eba3 0309 	sub.w	r3, r3, r9
 800bbe4:	4543      	cmp	r3, r8
 800bbe6:	f77f af79 	ble.w	800badc <_printf_float+0x24c>
 800bbea:	2301      	movs	r3, #1
 800bbec:	4652      	mov	r2, sl
 800bbee:	4631      	mov	r1, r6
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	47b8      	blx	r7
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	f43f aeaa 	beq.w	800b94e <_printf_float+0xbe>
 800bbfa:	f108 0801 	add.w	r8, r8, #1
 800bbfe:	e7ec      	b.n	800bbda <_printf_float+0x34a>
 800bc00:	4613      	mov	r3, r2
 800bc02:	4631      	mov	r1, r6
 800bc04:	4642      	mov	r2, r8
 800bc06:	4628      	mov	r0, r5
 800bc08:	47b8      	blx	r7
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	d1c0      	bne.n	800bb90 <_printf_float+0x300>
 800bc0e:	e69e      	b.n	800b94e <_printf_float+0xbe>
 800bc10:	2301      	movs	r3, #1
 800bc12:	4631      	mov	r1, r6
 800bc14:	4628      	mov	r0, r5
 800bc16:	9205      	str	r2, [sp, #20]
 800bc18:	47b8      	blx	r7
 800bc1a:	3001      	adds	r0, #1
 800bc1c:	f43f ae97 	beq.w	800b94e <_printf_float+0xbe>
 800bc20:	9a05      	ldr	r2, [sp, #20]
 800bc22:	f10b 0b01 	add.w	fp, fp, #1
 800bc26:	e7b9      	b.n	800bb9c <_printf_float+0x30c>
 800bc28:	ee18 3a10 	vmov	r3, s16
 800bc2c:	4652      	mov	r2, sl
 800bc2e:	4631      	mov	r1, r6
 800bc30:	4628      	mov	r0, r5
 800bc32:	47b8      	blx	r7
 800bc34:	3001      	adds	r0, #1
 800bc36:	d1be      	bne.n	800bbb6 <_printf_float+0x326>
 800bc38:	e689      	b.n	800b94e <_printf_float+0xbe>
 800bc3a:	9a05      	ldr	r2, [sp, #20]
 800bc3c:	464b      	mov	r3, r9
 800bc3e:	4442      	add	r2, r8
 800bc40:	4631      	mov	r1, r6
 800bc42:	4628      	mov	r0, r5
 800bc44:	47b8      	blx	r7
 800bc46:	3001      	adds	r0, #1
 800bc48:	d1c1      	bne.n	800bbce <_printf_float+0x33e>
 800bc4a:	e680      	b.n	800b94e <_printf_float+0xbe>
 800bc4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc4e:	2a01      	cmp	r2, #1
 800bc50:	dc01      	bgt.n	800bc56 <_printf_float+0x3c6>
 800bc52:	07db      	lsls	r3, r3, #31
 800bc54:	d53a      	bpl.n	800bccc <_printf_float+0x43c>
 800bc56:	2301      	movs	r3, #1
 800bc58:	4642      	mov	r2, r8
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	47b8      	blx	r7
 800bc60:	3001      	adds	r0, #1
 800bc62:	f43f ae74 	beq.w	800b94e <_printf_float+0xbe>
 800bc66:	ee18 3a10 	vmov	r3, s16
 800bc6a:	4652      	mov	r2, sl
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4628      	mov	r0, r5
 800bc70:	47b8      	blx	r7
 800bc72:	3001      	adds	r0, #1
 800bc74:	f43f ae6b 	beq.w	800b94e <_printf_float+0xbe>
 800bc78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2300      	movs	r3, #0
 800bc80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bc84:	f7f4 ff20 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc88:	b9d8      	cbnz	r0, 800bcc2 <_printf_float+0x432>
 800bc8a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bc8e:	f108 0201 	add.w	r2, r8, #1
 800bc92:	4631      	mov	r1, r6
 800bc94:	4628      	mov	r0, r5
 800bc96:	47b8      	blx	r7
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d10e      	bne.n	800bcba <_printf_float+0x42a>
 800bc9c:	e657      	b.n	800b94e <_printf_float+0xbe>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	4652      	mov	r2, sl
 800bca2:	4631      	mov	r1, r6
 800bca4:	4628      	mov	r0, r5
 800bca6:	47b8      	blx	r7
 800bca8:	3001      	adds	r0, #1
 800bcaa:	f43f ae50 	beq.w	800b94e <_printf_float+0xbe>
 800bcae:	f108 0801 	add.w	r8, r8, #1
 800bcb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	4543      	cmp	r3, r8
 800bcb8:	dcf1      	bgt.n	800bc9e <_printf_float+0x40e>
 800bcba:	464b      	mov	r3, r9
 800bcbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bcc0:	e6da      	b.n	800ba78 <_printf_float+0x1e8>
 800bcc2:	f04f 0800 	mov.w	r8, #0
 800bcc6:	f104 0a1a 	add.w	sl, r4, #26
 800bcca:	e7f2      	b.n	800bcb2 <_printf_float+0x422>
 800bccc:	2301      	movs	r3, #1
 800bcce:	4642      	mov	r2, r8
 800bcd0:	e7df      	b.n	800bc92 <_printf_float+0x402>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	464a      	mov	r2, r9
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	4628      	mov	r0, r5
 800bcda:	47b8      	blx	r7
 800bcdc:	3001      	adds	r0, #1
 800bcde:	f43f ae36 	beq.w	800b94e <_printf_float+0xbe>
 800bce2:	f108 0801 	add.w	r8, r8, #1
 800bce6:	68e3      	ldr	r3, [r4, #12]
 800bce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcea:	1a5b      	subs	r3, r3, r1
 800bcec:	4543      	cmp	r3, r8
 800bcee:	dcf0      	bgt.n	800bcd2 <_printf_float+0x442>
 800bcf0:	e6f8      	b.n	800bae4 <_printf_float+0x254>
 800bcf2:	f04f 0800 	mov.w	r8, #0
 800bcf6:	f104 0919 	add.w	r9, r4, #25
 800bcfa:	e7f4      	b.n	800bce6 <_printf_float+0x456>

0800bcfc <_printf_common>:
 800bcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd00:	4616      	mov	r6, r2
 800bd02:	4699      	mov	r9, r3
 800bd04:	688a      	ldr	r2, [r1, #8]
 800bd06:	690b      	ldr	r3, [r1, #16]
 800bd08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	bfb8      	it	lt
 800bd10:	4613      	movlt	r3, r2
 800bd12:	6033      	str	r3, [r6, #0]
 800bd14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd18:	4607      	mov	r7, r0
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	b10a      	cbz	r2, 800bd22 <_printf_common+0x26>
 800bd1e:	3301      	adds	r3, #1
 800bd20:	6033      	str	r3, [r6, #0]
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	0699      	lsls	r1, r3, #26
 800bd26:	bf42      	ittt	mi
 800bd28:	6833      	ldrmi	r3, [r6, #0]
 800bd2a:	3302      	addmi	r3, #2
 800bd2c:	6033      	strmi	r3, [r6, #0]
 800bd2e:	6825      	ldr	r5, [r4, #0]
 800bd30:	f015 0506 	ands.w	r5, r5, #6
 800bd34:	d106      	bne.n	800bd44 <_printf_common+0x48>
 800bd36:	f104 0a19 	add.w	sl, r4, #25
 800bd3a:	68e3      	ldr	r3, [r4, #12]
 800bd3c:	6832      	ldr	r2, [r6, #0]
 800bd3e:	1a9b      	subs	r3, r3, r2
 800bd40:	42ab      	cmp	r3, r5
 800bd42:	dc26      	bgt.n	800bd92 <_printf_common+0x96>
 800bd44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd48:	1e13      	subs	r3, r2, #0
 800bd4a:	6822      	ldr	r2, [r4, #0]
 800bd4c:	bf18      	it	ne
 800bd4e:	2301      	movne	r3, #1
 800bd50:	0692      	lsls	r2, r2, #26
 800bd52:	d42b      	bmi.n	800bdac <_printf_common+0xb0>
 800bd54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd58:	4649      	mov	r1, r9
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	47c0      	blx	r8
 800bd5e:	3001      	adds	r0, #1
 800bd60:	d01e      	beq.n	800bda0 <_printf_common+0xa4>
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	6922      	ldr	r2, [r4, #16]
 800bd66:	f003 0306 	and.w	r3, r3, #6
 800bd6a:	2b04      	cmp	r3, #4
 800bd6c:	bf02      	ittt	eq
 800bd6e:	68e5      	ldreq	r5, [r4, #12]
 800bd70:	6833      	ldreq	r3, [r6, #0]
 800bd72:	1aed      	subeq	r5, r5, r3
 800bd74:	68a3      	ldr	r3, [r4, #8]
 800bd76:	bf0c      	ite	eq
 800bd78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd7c:	2500      	movne	r5, #0
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	bfc4      	itt	gt
 800bd82:	1a9b      	subgt	r3, r3, r2
 800bd84:	18ed      	addgt	r5, r5, r3
 800bd86:	2600      	movs	r6, #0
 800bd88:	341a      	adds	r4, #26
 800bd8a:	42b5      	cmp	r5, r6
 800bd8c:	d11a      	bne.n	800bdc4 <_printf_common+0xc8>
 800bd8e:	2000      	movs	r0, #0
 800bd90:	e008      	b.n	800bda4 <_printf_common+0xa8>
 800bd92:	2301      	movs	r3, #1
 800bd94:	4652      	mov	r2, sl
 800bd96:	4649      	mov	r1, r9
 800bd98:	4638      	mov	r0, r7
 800bd9a:	47c0      	blx	r8
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	d103      	bne.n	800bda8 <_printf_common+0xac>
 800bda0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda8:	3501      	adds	r5, #1
 800bdaa:	e7c6      	b.n	800bd3a <_printf_common+0x3e>
 800bdac:	18e1      	adds	r1, r4, r3
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	2030      	movs	r0, #48	; 0x30
 800bdb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdb6:	4422      	add	r2, r4
 800bdb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdc0:	3302      	adds	r3, #2
 800bdc2:	e7c7      	b.n	800bd54 <_printf_common+0x58>
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	4622      	mov	r2, r4
 800bdc8:	4649      	mov	r1, r9
 800bdca:	4638      	mov	r0, r7
 800bdcc:	47c0      	blx	r8
 800bdce:	3001      	adds	r0, #1
 800bdd0:	d0e6      	beq.n	800bda0 <_printf_common+0xa4>
 800bdd2:	3601      	adds	r6, #1
 800bdd4:	e7d9      	b.n	800bd8a <_printf_common+0x8e>
	...

0800bdd8 <_printf_i>:
 800bdd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bddc:	7e0f      	ldrb	r7, [r1, #24]
 800bdde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bde0:	2f78      	cmp	r7, #120	; 0x78
 800bde2:	4691      	mov	r9, r2
 800bde4:	4680      	mov	r8, r0
 800bde6:	460c      	mov	r4, r1
 800bde8:	469a      	mov	sl, r3
 800bdea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bdee:	d807      	bhi.n	800be00 <_printf_i+0x28>
 800bdf0:	2f62      	cmp	r7, #98	; 0x62
 800bdf2:	d80a      	bhi.n	800be0a <_printf_i+0x32>
 800bdf4:	2f00      	cmp	r7, #0
 800bdf6:	f000 80d4 	beq.w	800bfa2 <_printf_i+0x1ca>
 800bdfa:	2f58      	cmp	r7, #88	; 0x58
 800bdfc:	f000 80c0 	beq.w	800bf80 <_printf_i+0x1a8>
 800be00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be08:	e03a      	b.n	800be80 <_printf_i+0xa8>
 800be0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be0e:	2b15      	cmp	r3, #21
 800be10:	d8f6      	bhi.n	800be00 <_printf_i+0x28>
 800be12:	a101      	add	r1, pc, #4	; (adr r1, 800be18 <_printf_i+0x40>)
 800be14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be18:	0800be71 	.word	0x0800be71
 800be1c:	0800be85 	.word	0x0800be85
 800be20:	0800be01 	.word	0x0800be01
 800be24:	0800be01 	.word	0x0800be01
 800be28:	0800be01 	.word	0x0800be01
 800be2c:	0800be01 	.word	0x0800be01
 800be30:	0800be85 	.word	0x0800be85
 800be34:	0800be01 	.word	0x0800be01
 800be38:	0800be01 	.word	0x0800be01
 800be3c:	0800be01 	.word	0x0800be01
 800be40:	0800be01 	.word	0x0800be01
 800be44:	0800bf89 	.word	0x0800bf89
 800be48:	0800beb1 	.word	0x0800beb1
 800be4c:	0800bf43 	.word	0x0800bf43
 800be50:	0800be01 	.word	0x0800be01
 800be54:	0800be01 	.word	0x0800be01
 800be58:	0800bfab 	.word	0x0800bfab
 800be5c:	0800be01 	.word	0x0800be01
 800be60:	0800beb1 	.word	0x0800beb1
 800be64:	0800be01 	.word	0x0800be01
 800be68:	0800be01 	.word	0x0800be01
 800be6c:	0800bf4b 	.word	0x0800bf4b
 800be70:	682b      	ldr	r3, [r5, #0]
 800be72:	1d1a      	adds	r2, r3, #4
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	602a      	str	r2, [r5, #0]
 800be78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be80:	2301      	movs	r3, #1
 800be82:	e09f      	b.n	800bfc4 <_printf_i+0x1ec>
 800be84:	6820      	ldr	r0, [r4, #0]
 800be86:	682b      	ldr	r3, [r5, #0]
 800be88:	0607      	lsls	r7, r0, #24
 800be8a:	f103 0104 	add.w	r1, r3, #4
 800be8e:	6029      	str	r1, [r5, #0]
 800be90:	d501      	bpl.n	800be96 <_printf_i+0xbe>
 800be92:	681e      	ldr	r6, [r3, #0]
 800be94:	e003      	b.n	800be9e <_printf_i+0xc6>
 800be96:	0646      	lsls	r6, r0, #25
 800be98:	d5fb      	bpl.n	800be92 <_printf_i+0xba>
 800be9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800be9e:	2e00      	cmp	r6, #0
 800bea0:	da03      	bge.n	800beaa <_printf_i+0xd2>
 800bea2:	232d      	movs	r3, #45	; 0x2d
 800bea4:	4276      	negs	r6, r6
 800bea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beaa:	485a      	ldr	r0, [pc, #360]	; (800c014 <_printf_i+0x23c>)
 800beac:	230a      	movs	r3, #10
 800beae:	e012      	b.n	800bed6 <_printf_i+0xfe>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	6820      	ldr	r0, [r4, #0]
 800beb4:	1d19      	adds	r1, r3, #4
 800beb6:	6029      	str	r1, [r5, #0]
 800beb8:	0605      	lsls	r5, r0, #24
 800beba:	d501      	bpl.n	800bec0 <_printf_i+0xe8>
 800bebc:	681e      	ldr	r6, [r3, #0]
 800bebe:	e002      	b.n	800bec6 <_printf_i+0xee>
 800bec0:	0641      	lsls	r1, r0, #25
 800bec2:	d5fb      	bpl.n	800bebc <_printf_i+0xe4>
 800bec4:	881e      	ldrh	r6, [r3, #0]
 800bec6:	4853      	ldr	r0, [pc, #332]	; (800c014 <_printf_i+0x23c>)
 800bec8:	2f6f      	cmp	r7, #111	; 0x6f
 800beca:	bf0c      	ite	eq
 800becc:	2308      	moveq	r3, #8
 800bece:	230a      	movne	r3, #10
 800bed0:	2100      	movs	r1, #0
 800bed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bed6:	6865      	ldr	r5, [r4, #4]
 800bed8:	60a5      	str	r5, [r4, #8]
 800beda:	2d00      	cmp	r5, #0
 800bedc:	bfa2      	ittt	ge
 800bede:	6821      	ldrge	r1, [r4, #0]
 800bee0:	f021 0104 	bicge.w	r1, r1, #4
 800bee4:	6021      	strge	r1, [r4, #0]
 800bee6:	b90e      	cbnz	r6, 800beec <_printf_i+0x114>
 800bee8:	2d00      	cmp	r5, #0
 800beea:	d04b      	beq.n	800bf84 <_printf_i+0x1ac>
 800beec:	4615      	mov	r5, r2
 800beee:	fbb6 f1f3 	udiv	r1, r6, r3
 800bef2:	fb03 6711 	mls	r7, r3, r1, r6
 800bef6:	5dc7      	ldrb	r7, [r0, r7]
 800bef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800befc:	4637      	mov	r7, r6
 800befe:	42bb      	cmp	r3, r7
 800bf00:	460e      	mov	r6, r1
 800bf02:	d9f4      	bls.n	800beee <_printf_i+0x116>
 800bf04:	2b08      	cmp	r3, #8
 800bf06:	d10b      	bne.n	800bf20 <_printf_i+0x148>
 800bf08:	6823      	ldr	r3, [r4, #0]
 800bf0a:	07de      	lsls	r6, r3, #31
 800bf0c:	d508      	bpl.n	800bf20 <_printf_i+0x148>
 800bf0e:	6923      	ldr	r3, [r4, #16]
 800bf10:	6861      	ldr	r1, [r4, #4]
 800bf12:	4299      	cmp	r1, r3
 800bf14:	bfde      	ittt	le
 800bf16:	2330      	movle	r3, #48	; 0x30
 800bf18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bf20:	1b52      	subs	r2, r2, r5
 800bf22:	6122      	str	r2, [r4, #16]
 800bf24:	f8cd a000 	str.w	sl, [sp]
 800bf28:	464b      	mov	r3, r9
 800bf2a:	aa03      	add	r2, sp, #12
 800bf2c:	4621      	mov	r1, r4
 800bf2e:	4640      	mov	r0, r8
 800bf30:	f7ff fee4 	bl	800bcfc <_printf_common>
 800bf34:	3001      	adds	r0, #1
 800bf36:	d14a      	bne.n	800bfce <_printf_i+0x1f6>
 800bf38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf3c:	b004      	add	sp, #16
 800bf3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf42:	6823      	ldr	r3, [r4, #0]
 800bf44:	f043 0320 	orr.w	r3, r3, #32
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	4833      	ldr	r0, [pc, #204]	; (800c018 <_printf_i+0x240>)
 800bf4c:	2778      	movs	r7, #120	; 0x78
 800bf4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	6829      	ldr	r1, [r5, #0]
 800bf56:	061f      	lsls	r7, r3, #24
 800bf58:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf5c:	d402      	bmi.n	800bf64 <_printf_i+0x18c>
 800bf5e:	065f      	lsls	r7, r3, #25
 800bf60:	bf48      	it	mi
 800bf62:	b2b6      	uxthmi	r6, r6
 800bf64:	07df      	lsls	r7, r3, #31
 800bf66:	bf48      	it	mi
 800bf68:	f043 0320 	orrmi.w	r3, r3, #32
 800bf6c:	6029      	str	r1, [r5, #0]
 800bf6e:	bf48      	it	mi
 800bf70:	6023      	strmi	r3, [r4, #0]
 800bf72:	b91e      	cbnz	r6, 800bf7c <_printf_i+0x1a4>
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	f023 0320 	bic.w	r3, r3, #32
 800bf7a:	6023      	str	r3, [r4, #0]
 800bf7c:	2310      	movs	r3, #16
 800bf7e:	e7a7      	b.n	800bed0 <_printf_i+0xf8>
 800bf80:	4824      	ldr	r0, [pc, #144]	; (800c014 <_printf_i+0x23c>)
 800bf82:	e7e4      	b.n	800bf4e <_printf_i+0x176>
 800bf84:	4615      	mov	r5, r2
 800bf86:	e7bd      	b.n	800bf04 <_printf_i+0x12c>
 800bf88:	682b      	ldr	r3, [r5, #0]
 800bf8a:	6826      	ldr	r6, [r4, #0]
 800bf8c:	6961      	ldr	r1, [r4, #20]
 800bf8e:	1d18      	adds	r0, r3, #4
 800bf90:	6028      	str	r0, [r5, #0]
 800bf92:	0635      	lsls	r5, r6, #24
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	d501      	bpl.n	800bf9c <_printf_i+0x1c4>
 800bf98:	6019      	str	r1, [r3, #0]
 800bf9a:	e002      	b.n	800bfa2 <_printf_i+0x1ca>
 800bf9c:	0670      	lsls	r0, r6, #25
 800bf9e:	d5fb      	bpl.n	800bf98 <_printf_i+0x1c0>
 800bfa0:	8019      	strh	r1, [r3, #0]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	6123      	str	r3, [r4, #16]
 800bfa6:	4615      	mov	r5, r2
 800bfa8:	e7bc      	b.n	800bf24 <_printf_i+0x14c>
 800bfaa:	682b      	ldr	r3, [r5, #0]
 800bfac:	1d1a      	adds	r2, r3, #4
 800bfae:	602a      	str	r2, [r5, #0]
 800bfb0:	681d      	ldr	r5, [r3, #0]
 800bfb2:	6862      	ldr	r2, [r4, #4]
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	f7f4 f90a 	bl	80001d0 <memchr>
 800bfbc:	b108      	cbz	r0, 800bfc2 <_printf_i+0x1ea>
 800bfbe:	1b40      	subs	r0, r0, r5
 800bfc0:	6060      	str	r0, [r4, #4]
 800bfc2:	6863      	ldr	r3, [r4, #4]
 800bfc4:	6123      	str	r3, [r4, #16]
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfcc:	e7aa      	b.n	800bf24 <_printf_i+0x14c>
 800bfce:	6923      	ldr	r3, [r4, #16]
 800bfd0:	462a      	mov	r2, r5
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	4640      	mov	r0, r8
 800bfd6:	47d0      	blx	sl
 800bfd8:	3001      	adds	r0, #1
 800bfda:	d0ad      	beq.n	800bf38 <_printf_i+0x160>
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	079b      	lsls	r3, r3, #30
 800bfe0:	d413      	bmi.n	800c00a <_printf_i+0x232>
 800bfe2:	68e0      	ldr	r0, [r4, #12]
 800bfe4:	9b03      	ldr	r3, [sp, #12]
 800bfe6:	4298      	cmp	r0, r3
 800bfe8:	bfb8      	it	lt
 800bfea:	4618      	movlt	r0, r3
 800bfec:	e7a6      	b.n	800bf3c <_printf_i+0x164>
 800bfee:	2301      	movs	r3, #1
 800bff0:	4632      	mov	r2, r6
 800bff2:	4649      	mov	r1, r9
 800bff4:	4640      	mov	r0, r8
 800bff6:	47d0      	blx	sl
 800bff8:	3001      	adds	r0, #1
 800bffa:	d09d      	beq.n	800bf38 <_printf_i+0x160>
 800bffc:	3501      	adds	r5, #1
 800bffe:	68e3      	ldr	r3, [r4, #12]
 800c000:	9903      	ldr	r1, [sp, #12]
 800c002:	1a5b      	subs	r3, r3, r1
 800c004:	42ab      	cmp	r3, r5
 800c006:	dcf2      	bgt.n	800bfee <_printf_i+0x216>
 800c008:	e7eb      	b.n	800bfe2 <_printf_i+0x20a>
 800c00a:	2500      	movs	r5, #0
 800c00c:	f104 0619 	add.w	r6, r4, #25
 800c010:	e7f5      	b.n	800bffe <_printf_i+0x226>
 800c012:	bf00      	nop
 800c014:	0800fa66 	.word	0x0800fa66
 800c018:	0800fa77 	.word	0x0800fa77

0800c01c <siprintf>:
 800c01c:	b40e      	push	{r1, r2, r3}
 800c01e:	b500      	push	{lr}
 800c020:	b09c      	sub	sp, #112	; 0x70
 800c022:	ab1d      	add	r3, sp, #116	; 0x74
 800c024:	9002      	str	r0, [sp, #8]
 800c026:	9006      	str	r0, [sp, #24]
 800c028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c02c:	4809      	ldr	r0, [pc, #36]	; (800c054 <siprintf+0x38>)
 800c02e:	9107      	str	r1, [sp, #28]
 800c030:	9104      	str	r1, [sp, #16]
 800c032:	4909      	ldr	r1, [pc, #36]	; (800c058 <siprintf+0x3c>)
 800c034:	f853 2b04 	ldr.w	r2, [r3], #4
 800c038:	9105      	str	r1, [sp, #20]
 800c03a:	6800      	ldr	r0, [r0, #0]
 800c03c:	9301      	str	r3, [sp, #4]
 800c03e:	a902      	add	r1, sp, #8
 800c040:	f001 f84a 	bl	800d0d8 <_svfiprintf_r>
 800c044:	9b02      	ldr	r3, [sp, #8]
 800c046:	2200      	movs	r2, #0
 800c048:	701a      	strb	r2, [r3, #0]
 800c04a:	b01c      	add	sp, #112	; 0x70
 800c04c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c050:	b003      	add	sp, #12
 800c052:	4770      	bx	lr
 800c054:	20000080 	.word	0x20000080
 800c058:	ffff0208 	.word	0xffff0208

0800c05c <std>:
 800c05c:	2300      	movs	r3, #0
 800c05e:	b510      	push	{r4, lr}
 800c060:	4604      	mov	r4, r0
 800c062:	e9c0 3300 	strd	r3, r3, [r0]
 800c066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c06a:	6083      	str	r3, [r0, #8]
 800c06c:	8181      	strh	r1, [r0, #12]
 800c06e:	6643      	str	r3, [r0, #100]	; 0x64
 800c070:	81c2      	strh	r2, [r0, #14]
 800c072:	6183      	str	r3, [r0, #24]
 800c074:	4619      	mov	r1, r3
 800c076:	2208      	movs	r2, #8
 800c078:	305c      	adds	r0, #92	; 0x5c
 800c07a:	f000 f91f 	bl	800c2bc <memset>
 800c07e:	4b0d      	ldr	r3, [pc, #52]	; (800c0b4 <std+0x58>)
 800c080:	6263      	str	r3, [r4, #36]	; 0x24
 800c082:	4b0d      	ldr	r3, [pc, #52]	; (800c0b8 <std+0x5c>)
 800c084:	62a3      	str	r3, [r4, #40]	; 0x28
 800c086:	4b0d      	ldr	r3, [pc, #52]	; (800c0bc <std+0x60>)
 800c088:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c08a:	4b0d      	ldr	r3, [pc, #52]	; (800c0c0 <std+0x64>)
 800c08c:	6323      	str	r3, [r4, #48]	; 0x30
 800c08e:	4b0d      	ldr	r3, [pc, #52]	; (800c0c4 <std+0x68>)
 800c090:	6224      	str	r4, [r4, #32]
 800c092:	429c      	cmp	r4, r3
 800c094:	d006      	beq.n	800c0a4 <std+0x48>
 800c096:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c09a:	4294      	cmp	r4, r2
 800c09c:	d002      	beq.n	800c0a4 <std+0x48>
 800c09e:	33d0      	adds	r3, #208	; 0xd0
 800c0a0:	429c      	cmp	r4, r3
 800c0a2:	d105      	bne.n	800c0b0 <std+0x54>
 800c0a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ac:	f000 b93c 	b.w	800c328 <__retarget_lock_init_recursive>
 800c0b0:	bd10      	pop	{r4, pc}
 800c0b2:	bf00      	nop
 800c0b4:	0800df19 	.word	0x0800df19
 800c0b8:	0800df3b 	.word	0x0800df3b
 800c0bc:	0800df73 	.word	0x0800df73
 800c0c0:	0800df97 	.word	0x0800df97
 800c0c4:	20000f04 	.word	0x20000f04

0800c0c8 <stdio_exit_handler>:
 800c0c8:	4a02      	ldr	r2, [pc, #8]	; (800c0d4 <stdio_exit_handler+0xc>)
 800c0ca:	4903      	ldr	r1, [pc, #12]	; (800c0d8 <stdio_exit_handler+0x10>)
 800c0cc:	4803      	ldr	r0, [pc, #12]	; (800c0dc <stdio_exit_handler+0x14>)
 800c0ce:	f000 b869 	b.w	800c1a4 <_fwalk_sglue>
 800c0d2:	bf00      	nop
 800c0d4:	20000028 	.word	0x20000028
 800c0d8:	0800d7b9 	.word	0x0800d7b9
 800c0dc:	20000034 	.word	0x20000034

0800c0e0 <cleanup_stdio>:
 800c0e0:	6841      	ldr	r1, [r0, #4]
 800c0e2:	4b0c      	ldr	r3, [pc, #48]	; (800c114 <cleanup_stdio+0x34>)
 800c0e4:	4299      	cmp	r1, r3
 800c0e6:	b510      	push	{r4, lr}
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	d001      	beq.n	800c0f0 <cleanup_stdio+0x10>
 800c0ec:	f001 fb64 	bl	800d7b8 <_fflush_r>
 800c0f0:	68a1      	ldr	r1, [r4, #8]
 800c0f2:	4b09      	ldr	r3, [pc, #36]	; (800c118 <cleanup_stdio+0x38>)
 800c0f4:	4299      	cmp	r1, r3
 800c0f6:	d002      	beq.n	800c0fe <cleanup_stdio+0x1e>
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f001 fb5d 	bl	800d7b8 <_fflush_r>
 800c0fe:	68e1      	ldr	r1, [r4, #12]
 800c100:	4b06      	ldr	r3, [pc, #24]	; (800c11c <cleanup_stdio+0x3c>)
 800c102:	4299      	cmp	r1, r3
 800c104:	d004      	beq.n	800c110 <cleanup_stdio+0x30>
 800c106:	4620      	mov	r0, r4
 800c108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c10c:	f001 bb54 	b.w	800d7b8 <_fflush_r>
 800c110:	bd10      	pop	{r4, pc}
 800c112:	bf00      	nop
 800c114:	20000f04 	.word	0x20000f04
 800c118:	20000f6c 	.word	0x20000f6c
 800c11c:	20000fd4 	.word	0x20000fd4

0800c120 <global_stdio_init.part.0>:
 800c120:	b510      	push	{r4, lr}
 800c122:	4b0b      	ldr	r3, [pc, #44]	; (800c150 <global_stdio_init.part.0+0x30>)
 800c124:	4c0b      	ldr	r4, [pc, #44]	; (800c154 <global_stdio_init.part.0+0x34>)
 800c126:	4a0c      	ldr	r2, [pc, #48]	; (800c158 <global_stdio_init.part.0+0x38>)
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	4620      	mov	r0, r4
 800c12c:	2200      	movs	r2, #0
 800c12e:	2104      	movs	r1, #4
 800c130:	f7ff ff94 	bl	800c05c <std>
 800c134:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c138:	2201      	movs	r2, #1
 800c13a:	2109      	movs	r1, #9
 800c13c:	f7ff ff8e 	bl	800c05c <std>
 800c140:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c144:	2202      	movs	r2, #2
 800c146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c14a:	2112      	movs	r1, #18
 800c14c:	f7ff bf86 	b.w	800c05c <std>
 800c150:	2000103c 	.word	0x2000103c
 800c154:	20000f04 	.word	0x20000f04
 800c158:	0800c0c9 	.word	0x0800c0c9

0800c15c <__sfp_lock_acquire>:
 800c15c:	4801      	ldr	r0, [pc, #4]	; (800c164 <__sfp_lock_acquire+0x8>)
 800c15e:	f000 b8e4 	b.w	800c32a <__retarget_lock_acquire_recursive>
 800c162:	bf00      	nop
 800c164:	20001041 	.word	0x20001041

0800c168 <__sfp_lock_release>:
 800c168:	4801      	ldr	r0, [pc, #4]	; (800c170 <__sfp_lock_release+0x8>)
 800c16a:	f000 b8df 	b.w	800c32c <__retarget_lock_release_recursive>
 800c16e:	bf00      	nop
 800c170:	20001041 	.word	0x20001041

0800c174 <__sinit>:
 800c174:	b510      	push	{r4, lr}
 800c176:	4604      	mov	r4, r0
 800c178:	f7ff fff0 	bl	800c15c <__sfp_lock_acquire>
 800c17c:	6a23      	ldr	r3, [r4, #32]
 800c17e:	b11b      	cbz	r3, 800c188 <__sinit+0x14>
 800c180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c184:	f7ff bff0 	b.w	800c168 <__sfp_lock_release>
 800c188:	4b04      	ldr	r3, [pc, #16]	; (800c19c <__sinit+0x28>)
 800c18a:	6223      	str	r3, [r4, #32]
 800c18c:	4b04      	ldr	r3, [pc, #16]	; (800c1a0 <__sinit+0x2c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1f5      	bne.n	800c180 <__sinit+0xc>
 800c194:	f7ff ffc4 	bl	800c120 <global_stdio_init.part.0>
 800c198:	e7f2      	b.n	800c180 <__sinit+0xc>
 800c19a:	bf00      	nop
 800c19c:	0800c0e1 	.word	0x0800c0e1
 800c1a0:	2000103c 	.word	0x2000103c

0800c1a4 <_fwalk_sglue>:
 800c1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1a8:	4607      	mov	r7, r0
 800c1aa:	4688      	mov	r8, r1
 800c1ac:	4614      	mov	r4, r2
 800c1ae:	2600      	movs	r6, #0
 800c1b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1b4:	f1b9 0901 	subs.w	r9, r9, #1
 800c1b8:	d505      	bpl.n	800c1c6 <_fwalk_sglue+0x22>
 800c1ba:	6824      	ldr	r4, [r4, #0]
 800c1bc:	2c00      	cmp	r4, #0
 800c1be:	d1f7      	bne.n	800c1b0 <_fwalk_sglue+0xc>
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1c6:	89ab      	ldrh	r3, [r5, #12]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d907      	bls.n	800c1dc <_fwalk_sglue+0x38>
 800c1cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	d003      	beq.n	800c1dc <_fwalk_sglue+0x38>
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	4638      	mov	r0, r7
 800c1d8:	47c0      	blx	r8
 800c1da:	4306      	orrs	r6, r0
 800c1dc:	3568      	adds	r5, #104	; 0x68
 800c1de:	e7e9      	b.n	800c1b4 <_fwalk_sglue+0x10>

0800c1e0 <iprintf>:
 800c1e0:	b40f      	push	{r0, r1, r2, r3}
 800c1e2:	b507      	push	{r0, r1, r2, lr}
 800c1e4:	4906      	ldr	r1, [pc, #24]	; (800c200 <iprintf+0x20>)
 800c1e6:	ab04      	add	r3, sp, #16
 800c1e8:	6808      	ldr	r0, [r1, #0]
 800c1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ee:	6881      	ldr	r1, [r0, #8]
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	f001 f899 	bl	800d328 <_vfiprintf_r>
 800c1f6:	b003      	add	sp, #12
 800c1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1fc:	b004      	add	sp, #16
 800c1fe:	4770      	bx	lr
 800c200:	20000080 	.word	0x20000080

0800c204 <_puts_r>:
 800c204:	6a03      	ldr	r3, [r0, #32]
 800c206:	b570      	push	{r4, r5, r6, lr}
 800c208:	6884      	ldr	r4, [r0, #8]
 800c20a:	4605      	mov	r5, r0
 800c20c:	460e      	mov	r6, r1
 800c20e:	b90b      	cbnz	r3, 800c214 <_puts_r+0x10>
 800c210:	f7ff ffb0 	bl	800c174 <__sinit>
 800c214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c216:	07db      	lsls	r3, r3, #31
 800c218:	d405      	bmi.n	800c226 <_puts_r+0x22>
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	0598      	lsls	r0, r3, #22
 800c21e:	d402      	bmi.n	800c226 <_puts_r+0x22>
 800c220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c222:	f000 f882 	bl	800c32a <__retarget_lock_acquire_recursive>
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	0719      	lsls	r1, r3, #28
 800c22a:	d513      	bpl.n	800c254 <_puts_r+0x50>
 800c22c:	6923      	ldr	r3, [r4, #16]
 800c22e:	b18b      	cbz	r3, 800c254 <_puts_r+0x50>
 800c230:	3e01      	subs	r6, #1
 800c232:	68a3      	ldr	r3, [r4, #8]
 800c234:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c238:	3b01      	subs	r3, #1
 800c23a:	60a3      	str	r3, [r4, #8]
 800c23c:	b9e9      	cbnz	r1, 800c27a <_puts_r+0x76>
 800c23e:	2b00      	cmp	r3, #0
 800c240:	da2e      	bge.n	800c2a0 <_puts_r+0x9c>
 800c242:	4622      	mov	r2, r4
 800c244:	210a      	movs	r1, #10
 800c246:	4628      	mov	r0, r5
 800c248:	f001 fed8 	bl	800dffc <__swbuf_r>
 800c24c:	3001      	adds	r0, #1
 800c24e:	d007      	beq.n	800c260 <_puts_r+0x5c>
 800c250:	250a      	movs	r5, #10
 800c252:	e007      	b.n	800c264 <_puts_r+0x60>
 800c254:	4621      	mov	r1, r4
 800c256:	4628      	mov	r0, r5
 800c258:	f001 ff0e 	bl	800e078 <__swsetup_r>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d0e7      	beq.n	800c230 <_puts_r+0x2c>
 800c260:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c266:	07da      	lsls	r2, r3, #31
 800c268:	d405      	bmi.n	800c276 <_puts_r+0x72>
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	059b      	lsls	r3, r3, #22
 800c26e:	d402      	bmi.n	800c276 <_puts_r+0x72>
 800c270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c272:	f000 f85b 	bl	800c32c <__retarget_lock_release_recursive>
 800c276:	4628      	mov	r0, r5
 800c278:	bd70      	pop	{r4, r5, r6, pc}
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	da04      	bge.n	800c288 <_puts_r+0x84>
 800c27e:	69a2      	ldr	r2, [r4, #24]
 800c280:	429a      	cmp	r2, r3
 800c282:	dc06      	bgt.n	800c292 <_puts_r+0x8e>
 800c284:	290a      	cmp	r1, #10
 800c286:	d004      	beq.n	800c292 <_puts_r+0x8e>
 800c288:	6823      	ldr	r3, [r4, #0]
 800c28a:	1c5a      	adds	r2, r3, #1
 800c28c:	6022      	str	r2, [r4, #0]
 800c28e:	7019      	strb	r1, [r3, #0]
 800c290:	e7cf      	b.n	800c232 <_puts_r+0x2e>
 800c292:	4622      	mov	r2, r4
 800c294:	4628      	mov	r0, r5
 800c296:	f001 feb1 	bl	800dffc <__swbuf_r>
 800c29a:	3001      	adds	r0, #1
 800c29c:	d1c9      	bne.n	800c232 <_puts_r+0x2e>
 800c29e:	e7df      	b.n	800c260 <_puts_r+0x5c>
 800c2a0:	6823      	ldr	r3, [r4, #0]
 800c2a2:	250a      	movs	r5, #10
 800c2a4:	1c5a      	adds	r2, r3, #1
 800c2a6:	6022      	str	r2, [r4, #0]
 800c2a8:	701d      	strb	r5, [r3, #0]
 800c2aa:	e7db      	b.n	800c264 <_puts_r+0x60>

0800c2ac <puts>:
 800c2ac:	4b02      	ldr	r3, [pc, #8]	; (800c2b8 <puts+0xc>)
 800c2ae:	4601      	mov	r1, r0
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	f7ff bfa7 	b.w	800c204 <_puts_r>
 800c2b6:	bf00      	nop
 800c2b8:	20000080 	.word	0x20000080

0800c2bc <memset>:
 800c2bc:	4402      	add	r2, r0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d100      	bne.n	800c2c6 <memset+0xa>
 800c2c4:	4770      	bx	lr
 800c2c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c2ca:	e7f9      	b.n	800c2c0 <memset+0x4>

0800c2cc <_localeconv_r>:
 800c2cc:	4800      	ldr	r0, [pc, #0]	; (800c2d0 <_localeconv_r+0x4>)
 800c2ce:	4770      	bx	lr
 800c2d0:	20000174 	.word	0x20000174

0800c2d4 <__errno>:
 800c2d4:	4b01      	ldr	r3, [pc, #4]	; (800c2dc <__errno+0x8>)
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	20000080 	.word	0x20000080

0800c2e0 <__libc_init_array>:
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	4d0d      	ldr	r5, [pc, #52]	; (800c318 <__libc_init_array+0x38>)
 800c2e4:	4c0d      	ldr	r4, [pc, #52]	; (800c31c <__libc_init_array+0x3c>)
 800c2e6:	1b64      	subs	r4, r4, r5
 800c2e8:	10a4      	asrs	r4, r4, #2
 800c2ea:	2600      	movs	r6, #0
 800c2ec:	42a6      	cmp	r6, r4
 800c2ee:	d109      	bne.n	800c304 <__libc_init_array+0x24>
 800c2f0:	4d0b      	ldr	r5, [pc, #44]	; (800c320 <__libc_init_array+0x40>)
 800c2f2:	4c0c      	ldr	r4, [pc, #48]	; (800c324 <__libc_init_array+0x44>)
 800c2f4:	f003 f858 	bl	800f3a8 <_init>
 800c2f8:	1b64      	subs	r4, r4, r5
 800c2fa:	10a4      	asrs	r4, r4, #2
 800c2fc:	2600      	movs	r6, #0
 800c2fe:	42a6      	cmp	r6, r4
 800c300:	d105      	bne.n	800c30e <__libc_init_array+0x2e>
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	f855 3b04 	ldr.w	r3, [r5], #4
 800c308:	4798      	blx	r3
 800c30a:	3601      	adds	r6, #1
 800c30c:	e7ee      	b.n	800c2ec <__libc_init_array+0xc>
 800c30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c312:	4798      	blx	r3
 800c314:	3601      	adds	r6, #1
 800c316:	e7f2      	b.n	800c2fe <__libc_init_array+0x1e>
 800c318:	0800fdf8 	.word	0x0800fdf8
 800c31c:	0800fdf8 	.word	0x0800fdf8
 800c320:	0800fdf8 	.word	0x0800fdf8
 800c324:	0800fdfc 	.word	0x0800fdfc

0800c328 <__retarget_lock_init_recursive>:
 800c328:	4770      	bx	lr

0800c32a <__retarget_lock_acquire_recursive>:
 800c32a:	4770      	bx	lr

0800c32c <__retarget_lock_release_recursive>:
 800c32c:	4770      	bx	lr

0800c32e <quorem>:
 800c32e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c332:	6903      	ldr	r3, [r0, #16]
 800c334:	690c      	ldr	r4, [r1, #16]
 800c336:	42a3      	cmp	r3, r4
 800c338:	4607      	mov	r7, r0
 800c33a:	db7e      	blt.n	800c43a <quorem+0x10c>
 800c33c:	3c01      	subs	r4, #1
 800c33e:	f101 0814 	add.w	r8, r1, #20
 800c342:	f100 0514 	add.w	r5, r0, #20
 800c346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c34a:	9301      	str	r3, [sp, #4]
 800c34c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c350:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c354:	3301      	adds	r3, #1
 800c356:	429a      	cmp	r2, r3
 800c358:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c35c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c360:	fbb2 f6f3 	udiv	r6, r2, r3
 800c364:	d331      	bcc.n	800c3ca <quorem+0x9c>
 800c366:	f04f 0e00 	mov.w	lr, #0
 800c36a:	4640      	mov	r0, r8
 800c36c:	46ac      	mov	ip, r5
 800c36e:	46f2      	mov	sl, lr
 800c370:	f850 2b04 	ldr.w	r2, [r0], #4
 800c374:	b293      	uxth	r3, r2
 800c376:	fb06 e303 	mla	r3, r6, r3, lr
 800c37a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c37e:	0c1a      	lsrs	r2, r3, #16
 800c380:	b29b      	uxth	r3, r3
 800c382:	ebaa 0303 	sub.w	r3, sl, r3
 800c386:	f8dc a000 	ldr.w	sl, [ip]
 800c38a:	fa13 f38a 	uxtah	r3, r3, sl
 800c38e:	fb06 220e 	mla	r2, r6, lr, r2
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	9b00      	ldr	r3, [sp, #0]
 800c396:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c39a:	b292      	uxth	r2, r2
 800c39c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c3a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c3a8:	4581      	cmp	r9, r0
 800c3aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3ae:	f84c 3b04 	str.w	r3, [ip], #4
 800c3b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c3b6:	d2db      	bcs.n	800c370 <quorem+0x42>
 800c3b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c3bc:	b92b      	cbnz	r3, 800c3ca <quorem+0x9c>
 800c3be:	9b01      	ldr	r3, [sp, #4]
 800c3c0:	3b04      	subs	r3, #4
 800c3c2:	429d      	cmp	r5, r3
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	d32c      	bcc.n	800c422 <quorem+0xf4>
 800c3c8:	613c      	str	r4, [r7, #16]
 800c3ca:	4638      	mov	r0, r7
 800c3cc:	f001 fca4 	bl	800dd18 <__mcmp>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	db22      	blt.n	800c41a <quorem+0xec>
 800c3d4:	3601      	adds	r6, #1
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f858 2b04 	ldr.w	r2, [r8], #4
 800c3de:	f8d1 c000 	ldr.w	ip, [r1]
 800c3e2:	b293      	uxth	r3, r2
 800c3e4:	1ac3      	subs	r3, r0, r3
 800c3e6:	0c12      	lsrs	r2, r2, #16
 800c3e8:	fa13 f38c 	uxtah	r3, r3, ip
 800c3ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c3f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3fa:	45c1      	cmp	r9, r8
 800c3fc:	f841 3b04 	str.w	r3, [r1], #4
 800c400:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c404:	d2e9      	bcs.n	800c3da <quorem+0xac>
 800c406:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c40a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c40e:	b922      	cbnz	r2, 800c41a <quorem+0xec>
 800c410:	3b04      	subs	r3, #4
 800c412:	429d      	cmp	r5, r3
 800c414:	461a      	mov	r2, r3
 800c416:	d30a      	bcc.n	800c42e <quorem+0x100>
 800c418:	613c      	str	r4, [r7, #16]
 800c41a:	4630      	mov	r0, r6
 800c41c:	b003      	add	sp, #12
 800c41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c422:	6812      	ldr	r2, [r2, #0]
 800c424:	3b04      	subs	r3, #4
 800c426:	2a00      	cmp	r2, #0
 800c428:	d1ce      	bne.n	800c3c8 <quorem+0x9a>
 800c42a:	3c01      	subs	r4, #1
 800c42c:	e7c9      	b.n	800c3c2 <quorem+0x94>
 800c42e:	6812      	ldr	r2, [r2, #0]
 800c430:	3b04      	subs	r3, #4
 800c432:	2a00      	cmp	r2, #0
 800c434:	d1f0      	bne.n	800c418 <quorem+0xea>
 800c436:	3c01      	subs	r4, #1
 800c438:	e7eb      	b.n	800c412 <quorem+0xe4>
 800c43a:	2000      	movs	r0, #0
 800c43c:	e7ee      	b.n	800c41c <quorem+0xee>
	...

0800c440 <_dtoa_r>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	ed2d 8b04 	vpush	{d8-d9}
 800c448:	69c5      	ldr	r5, [r0, #28]
 800c44a:	b093      	sub	sp, #76	; 0x4c
 800c44c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c450:	ec57 6b10 	vmov	r6, r7, d0
 800c454:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c458:	9107      	str	r1, [sp, #28]
 800c45a:	4604      	mov	r4, r0
 800c45c:	920a      	str	r2, [sp, #40]	; 0x28
 800c45e:	930d      	str	r3, [sp, #52]	; 0x34
 800c460:	b975      	cbnz	r5, 800c480 <_dtoa_r+0x40>
 800c462:	2010      	movs	r0, #16
 800c464:	f001 f87a 	bl	800d55c <malloc>
 800c468:	4602      	mov	r2, r0
 800c46a:	61e0      	str	r0, [r4, #28]
 800c46c:	b920      	cbnz	r0, 800c478 <_dtoa_r+0x38>
 800c46e:	4bae      	ldr	r3, [pc, #696]	; (800c728 <_dtoa_r+0x2e8>)
 800c470:	21ef      	movs	r1, #239	; 0xef
 800c472:	48ae      	ldr	r0, [pc, #696]	; (800c72c <_dtoa_r+0x2ec>)
 800c474:	f001 ff5a 	bl	800e32c <__assert_func>
 800c478:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c47c:	6005      	str	r5, [r0, #0]
 800c47e:	60c5      	str	r5, [r0, #12]
 800c480:	69e3      	ldr	r3, [r4, #28]
 800c482:	6819      	ldr	r1, [r3, #0]
 800c484:	b151      	cbz	r1, 800c49c <_dtoa_r+0x5c>
 800c486:	685a      	ldr	r2, [r3, #4]
 800c488:	604a      	str	r2, [r1, #4]
 800c48a:	2301      	movs	r3, #1
 800c48c:	4093      	lsls	r3, r2
 800c48e:	608b      	str	r3, [r1, #8]
 800c490:	4620      	mov	r0, r4
 800c492:	f001 fa05 	bl	800d8a0 <_Bfree>
 800c496:	69e3      	ldr	r3, [r4, #28]
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
 800c49c:	1e3b      	subs	r3, r7, #0
 800c49e:	bfbb      	ittet	lt
 800c4a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c4a4:	9303      	strlt	r3, [sp, #12]
 800c4a6:	2300      	movge	r3, #0
 800c4a8:	2201      	movlt	r2, #1
 800c4aa:	bfac      	ite	ge
 800c4ac:	f8c8 3000 	strge.w	r3, [r8]
 800c4b0:	f8c8 2000 	strlt.w	r2, [r8]
 800c4b4:	4b9e      	ldr	r3, [pc, #632]	; (800c730 <_dtoa_r+0x2f0>)
 800c4b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c4ba:	ea33 0308 	bics.w	r3, r3, r8
 800c4be:	d11b      	bne.n	800c4f8 <_dtoa_r+0xb8>
 800c4c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c4c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c4c6:	6013      	str	r3, [r2, #0]
 800c4c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c4cc:	4333      	orrs	r3, r6
 800c4ce:	f000 8593 	beq.w	800cff8 <_dtoa_r+0xbb8>
 800c4d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4d4:	b963      	cbnz	r3, 800c4f0 <_dtoa_r+0xb0>
 800c4d6:	4b97      	ldr	r3, [pc, #604]	; (800c734 <_dtoa_r+0x2f4>)
 800c4d8:	e027      	b.n	800c52a <_dtoa_r+0xea>
 800c4da:	4b97      	ldr	r3, [pc, #604]	; (800c738 <_dtoa_r+0x2f8>)
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	3308      	adds	r3, #8
 800c4e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4e2:	6013      	str	r3, [r2, #0]
 800c4e4:	9800      	ldr	r0, [sp, #0]
 800c4e6:	b013      	add	sp, #76	; 0x4c
 800c4e8:	ecbd 8b04 	vpop	{d8-d9}
 800c4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f0:	4b90      	ldr	r3, [pc, #576]	; (800c734 <_dtoa_r+0x2f4>)
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	3303      	adds	r3, #3
 800c4f6:	e7f3      	b.n	800c4e0 <_dtoa_r+0xa0>
 800c4f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	ec51 0b17 	vmov	r0, r1, d7
 800c502:	eeb0 8a47 	vmov.f32	s16, s14
 800c506:	eef0 8a67 	vmov.f32	s17, s15
 800c50a:	2300      	movs	r3, #0
 800c50c:	f7f4 fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c510:	4681      	mov	r9, r0
 800c512:	b160      	cbz	r0, 800c52e <_dtoa_r+0xee>
 800c514:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c516:	2301      	movs	r3, #1
 800c518:	6013      	str	r3, [r2, #0]
 800c51a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 8568 	beq.w	800cff2 <_dtoa_r+0xbb2>
 800c522:	4b86      	ldr	r3, [pc, #536]	; (800c73c <_dtoa_r+0x2fc>)
 800c524:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c526:	6013      	str	r3, [r2, #0]
 800c528:	3b01      	subs	r3, #1
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	e7da      	b.n	800c4e4 <_dtoa_r+0xa4>
 800c52e:	aa10      	add	r2, sp, #64	; 0x40
 800c530:	a911      	add	r1, sp, #68	; 0x44
 800c532:	4620      	mov	r0, r4
 800c534:	eeb0 0a48 	vmov.f32	s0, s16
 800c538:	eef0 0a68 	vmov.f32	s1, s17
 800c53c:	f001 fc92 	bl	800de64 <__d2b>
 800c540:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c544:	4682      	mov	sl, r0
 800c546:	2d00      	cmp	r5, #0
 800c548:	d07f      	beq.n	800c64a <_dtoa_r+0x20a>
 800c54a:	ee18 3a90 	vmov	r3, s17
 800c54e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c552:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c556:	ec51 0b18 	vmov	r0, r1, d8
 800c55a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c55e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c562:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c566:	4619      	mov	r1, r3
 800c568:	2200      	movs	r2, #0
 800c56a:	4b75      	ldr	r3, [pc, #468]	; (800c740 <_dtoa_r+0x300>)
 800c56c:	f7f3 fe8c 	bl	8000288 <__aeabi_dsub>
 800c570:	a367      	add	r3, pc, #412	; (adr r3, 800c710 <_dtoa_r+0x2d0>)
 800c572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c576:	f7f4 f83f 	bl	80005f8 <__aeabi_dmul>
 800c57a:	a367      	add	r3, pc, #412	; (adr r3, 800c718 <_dtoa_r+0x2d8>)
 800c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c580:	f7f3 fe84 	bl	800028c <__adddf3>
 800c584:	4606      	mov	r6, r0
 800c586:	4628      	mov	r0, r5
 800c588:	460f      	mov	r7, r1
 800c58a:	f7f3 ffcb 	bl	8000524 <__aeabi_i2d>
 800c58e:	a364      	add	r3, pc, #400	; (adr r3, 800c720 <_dtoa_r+0x2e0>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	f7f4 f830 	bl	80005f8 <__aeabi_dmul>
 800c598:	4602      	mov	r2, r0
 800c59a:	460b      	mov	r3, r1
 800c59c:	4630      	mov	r0, r6
 800c59e:	4639      	mov	r1, r7
 800c5a0:	f7f3 fe74 	bl	800028c <__adddf3>
 800c5a4:	4606      	mov	r6, r0
 800c5a6:	460f      	mov	r7, r1
 800c5a8:	f7f4 fad6 	bl	8000b58 <__aeabi_d2iz>
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	4683      	mov	fp, r0
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	f7f4 fa91 	bl	8000adc <__aeabi_dcmplt>
 800c5ba:	b148      	cbz	r0, 800c5d0 <_dtoa_r+0x190>
 800c5bc:	4658      	mov	r0, fp
 800c5be:	f7f3 ffb1 	bl	8000524 <__aeabi_i2d>
 800c5c2:	4632      	mov	r2, r6
 800c5c4:	463b      	mov	r3, r7
 800c5c6:	f7f4 fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5ca:	b908      	cbnz	r0, 800c5d0 <_dtoa_r+0x190>
 800c5cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c5d0:	f1bb 0f16 	cmp.w	fp, #22
 800c5d4:	d857      	bhi.n	800c686 <_dtoa_r+0x246>
 800c5d6:	4b5b      	ldr	r3, [pc, #364]	; (800c744 <_dtoa_r+0x304>)
 800c5d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e0:	ec51 0b18 	vmov	r0, r1, d8
 800c5e4:	f7f4 fa7a 	bl	8000adc <__aeabi_dcmplt>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d04e      	beq.n	800c68a <_dtoa_r+0x24a>
 800c5ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	930c      	str	r3, [sp, #48]	; 0x30
 800c5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5f6:	1b5b      	subs	r3, r3, r5
 800c5f8:	1e5a      	subs	r2, r3, #1
 800c5fa:	bf45      	ittet	mi
 800c5fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800c600:	9305      	strmi	r3, [sp, #20]
 800c602:	2300      	movpl	r3, #0
 800c604:	2300      	movmi	r3, #0
 800c606:	9206      	str	r2, [sp, #24]
 800c608:	bf54      	ite	pl
 800c60a:	9305      	strpl	r3, [sp, #20]
 800c60c:	9306      	strmi	r3, [sp, #24]
 800c60e:	f1bb 0f00 	cmp.w	fp, #0
 800c612:	db3c      	blt.n	800c68e <_dtoa_r+0x24e>
 800c614:	9b06      	ldr	r3, [sp, #24]
 800c616:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c61a:	445b      	add	r3, fp
 800c61c:	9306      	str	r3, [sp, #24]
 800c61e:	2300      	movs	r3, #0
 800c620:	9308      	str	r3, [sp, #32]
 800c622:	9b07      	ldr	r3, [sp, #28]
 800c624:	2b09      	cmp	r3, #9
 800c626:	d868      	bhi.n	800c6fa <_dtoa_r+0x2ba>
 800c628:	2b05      	cmp	r3, #5
 800c62a:	bfc4      	itt	gt
 800c62c:	3b04      	subgt	r3, #4
 800c62e:	9307      	strgt	r3, [sp, #28]
 800c630:	9b07      	ldr	r3, [sp, #28]
 800c632:	f1a3 0302 	sub.w	r3, r3, #2
 800c636:	bfcc      	ite	gt
 800c638:	2500      	movgt	r5, #0
 800c63a:	2501      	movle	r5, #1
 800c63c:	2b03      	cmp	r3, #3
 800c63e:	f200 8085 	bhi.w	800c74c <_dtoa_r+0x30c>
 800c642:	e8df f003 	tbb	[pc, r3]
 800c646:	3b2e      	.short	0x3b2e
 800c648:	5839      	.short	0x5839
 800c64a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c64e:	441d      	add	r5, r3
 800c650:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c654:	2b20      	cmp	r3, #32
 800c656:	bfc1      	itttt	gt
 800c658:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c65c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c660:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c664:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c668:	bfd6      	itet	le
 800c66a:	f1c3 0320 	rsble	r3, r3, #32
 800c66e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c672:	fa06 f003 	lslle.w	r0, r6, r3
 800c676:	f7f3 ff45 	bl	8000504 <__aeabi_ui2d>
 800c67a:	2201      	movs	r2, #1
 800c67c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c680:	3d01      	subs	r5, #1
 800c682:	920e      	str	r2, [sp, #56]	; 0x38
 800c684:	e76f      	b.n	800c566 <_dtoa_r+0x126>
 800c686:	2301      	movs	r3, #1
 800c688:	e7b3      	b.n	800c5f2 <_dtoa_r+0x1b2>
 800c68a:	900c      	str	r0, [sp, #48]	; 0x30
 800c68c:	e7b2      	b.n	800c5f4 <_dtoa_r+0x1b4>
 800c68e:	9b05      	ldr	r3, [sp, #20]
 800c690:	eba3 030b 	sub.w	r3, r3, fp
 800c694:	9305      	str	r3, [sp, #20]
 800c696:	f1cb 0300 	rsb	r3, fp, #0
 800c69a:	9308      	str	r3, [sp, #32]
 800c69c:	2300      	movs	r3, #0
 800c69e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6a0:	e7bf      	b.n	800c622 <_dtoa_r+0x1e2>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	dc52      	bgt.n	800c752 <_dtoa_r+0x312>
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	9301      	str	r3, [sp, #4]
 800c6b0:	9304      	str	r3, [sp, #16]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	920a      	str	r2, [sp, #40]	; 0x28
 800c6b6:	e00b      	b.n	800c6d0 <_dtoa_r+0x290>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e7f3      	b.n	800c6a4 <_dtoa_r+0x264>
 800c6bc:	2300      	movs	r3, #0
 800c6be:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c2:	445b      	add	r3, fp
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	bfb8      	it	lt
 800c6ce:	2301      	movlt	r3, #1
 800c6d0:	69e0      	ldr	r0, [r4, #28]
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	2204      	movs	r2, #4
 800c6d6:	f102 0614 	add.w	r6, r2, #20
 800c6da:	429e      	cmp	r6, r3
 800c6dc:	d93d      	bls.n	800c75a <_dtoa_r+0x31a>
 800c6de:	6041      	str	r1, [r0, #4]
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f001 f89d 	bl	800d820 <_Balloc>
 800c6e6:	9000      	str	r0, [sp, #0]
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d139      	bne.n	800c760 <_dtoa_r+0x320>
 800c6ec:	4b16      	ldr	r3, [pc, #88]	; (800c748 <_dtoa_r+0x308>)
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	f240 11af 	movw	r1, #431	; 0x1af
 800c6f4:	e6bd      	b.n	800c472 <_dtoa_r+0x32>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e7e1      	b.n	800c6be <_dtoa_r+0x27e>
 800c6fa:	2501      	movs	r5, #1
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	9307      	str	r3, [sp, #28]
 800c700:	9509      	str	r5, [sp, #36]	; 0x24
 800c702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c706:	9301      	str	r3, [sp, #4]
 800c708:	9304      	str	r3, [sp, #16]
 800c70a:	2200      	movs	r2, #0
 800c70c:	2312      	movs	r3, #18
 800c70e:	e7d1      	b.n	800c6b4 <_dtoa_r+0x274>
 800c710:	636f4361 	.word	0x636f4361
 800c714:	3fd287a7 	.word	0x3fd287a7
 800c718:	8b60c8b3 	.word	0x8b60c8b3
 800c71c:	3fc68a28 	.word	0x3fc68a28
 800c720:	509f79fb 	.word	0x509f79fb
 800c724:	3fd34413 	.word	0x3fd34413
 800c728:	0800fa95 	.word	0x0800fa95
 800c72c:	0800faac 	.word	0x0800faac
 800c730:	7ff00000 	.word	0x7ff00000
 800c734:	0800fa91 	.word	0x0800fa91
 800c738:	0800fa88 	.word	0x0800fa88
 800c73c:	0800fa65 	.word	0x0800fa65
 800c740:	3ff80000 	.word	0x3ff80000
 800c744:	0800fba8 	.word	0x0800fba8
 800c748:	0800fb04 	.word	0x0800fb04
 800c74c:	2301      	movs	r3, #1
 800c74e:	9309      	str	r3, [sp, #36]	; 0x24
 800c750:	e7d7      	b.n	800c702 <_dtoa_r+0x2c2>
 800c752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c754:	9301      	str	r3, [sp, #4]
 800c756:	9304      	str	r3, [sp, #16]
 800c758:	e7ba      	b.n	800c6d0 <_dtoa_r+0x290>
 800c75a:	3101      	adds	r1, #1
 800c75c:	0052      	lsls	r2, r2, #1
 800c75e:	e7ba      	b.n	800c6d6 <_dtoa_r+0x296>
 800c760:	69e3      	ldr	r3, [r4, #28]
 800c762:	9a00      	ldr	r2, [sp, #0]
 800c764:	601a      	str	r2, [r3, #0]
 800c766:	9b04      	ldr	r3, [sp, #16]
 800c768:	2b0e      	cmp	r3, #14
 800c76a:	f200 80a8 	bhi.w	800c8be <_dtoa_r+0x47e>
 800c76e:	2d00      	cmp	r5, #0
 800c770:	f000 80a5 	beq.w	800c8be <_dtoa_r+0x47e>
 800c774:	f1bb 0f00 	cmp.w	fp, #0
 800c778:	dd38      	ble.n	800c7ec <_dtoa_r+0x3ac>
 800c77a:	4bc0      	ldr	r3, [pc, #768]	; (800ca7c <_dtoa_r+0x63c>)
 800c77c:	f00b 020f 	and.w	r2, fp, #15
 800c780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c784:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c788:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c78c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c790:	d019      	beq.n	800c7c6 <_dtoa_r+0x386>
 800c792:	4bbb      	ldr	r3, [pc, #748]	; (800ca80 <_dtoa_r+0x640>)
 800c794:	ec51 0b18 	vmov	r0, r1, d8
 800c798:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c79c:	f7f4 f856 	bl	800084c <__aeabi_ddiv>
 800c7a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7a4:	f008 080f 	and.w	r8, r8, #15
 800c7a8:	2503      	movs	r5, #3
 800c7aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ca80 <_dtoa_r+0x640>
 800c7ae:	f1b8 0f00 	cmp.w	r8, #0
 800c7b2:	d10a      	bne.n	800c7ca <_dtoa_r+0x38a>
 800c7b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7b8:	4632      	mov	r2, r6
 800c7ba:	463b      	mov	r3, r7
 800c7bc:	f7f4 f846 	bl	800084c <__aeabi_ddiv>
 800c7c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7c4:	e02b      	b.n	800c81e <_dtoa_r+0x3de>
 800c7c6:	2502      	movs	r5, #2
 800c7c8:	e7ef      	b.n	800c7aa <_dtoa_r+0x36a>
 800c7ca:	f018 0f01 	tst.w	r8, #1
 800c7ce:	d008      	beq.n	800c7e2 <_dtoa_r+0x3a2>
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	4639      	mov	r1, r7
 800c7d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c7d8:	f7f3 ff0e 	bl	80005f8 <__aeabi_dmul>
 800c7dc:	3501      	adds	r5, #1
 800c7de:	4606      	mov	r6, r0
 800c7e0:	460f      	mov	r7, r1
 800c7e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c7e6:	f109 0908 	add.w	r9, r9, #8
 800c7ea:	e7e0      	b.n	800c7ae <_dtoa_r+0x36e>
 800c7ec:	f000 809f 	beq.w	800c92e <_dtoa_r+0x4ee>
 800c7f0:	f1cb 0600 	rsb	r6, fp, #0
 800c7f4:	4ba1      	ldr	r3, [pc, #644]	; (800ca7c <_dtoa_r+0x63c>)
 800c7f6:	4fa2      	ldr	r7, [pc, #648]	; (800ca80 <_dtoa_r+0x640>)
 800c7f8:	f006 020f 	and.w	r2, r6, #15
 800c7fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c804:	ec51 0b18 	vmov	r0, r1, d8
 800c808:	f7f3 fef6 	bl	80005f8 <__aeabi_dmul>
 800c80c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c810:	1136      	asrs	r6, r6, #4
 800c812:	2300      	movs	r3, #0
 800c814:	2502      	movs	r5, #2
 800c816:	2e00      	cmp	r6, #0
 800c818:	d17e      	bne.n	800c918 <_dtoa_r+0x4d8>
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d1d0      	bne.n	800c7c0 <_dtoa_r+0x380>
 800c81e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c820:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	f000 8084 	beq.w	800c932 <_dtoa_r+0x4f2>
 800c82a:	4b96      	ldr	r3, [pc, #600]	; (800ca84 <_dtoa_r+0x644>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	4640      	mov	r0, r8
 800c830:	4649      	mov	r1, r9
 800c832:	f7f4 f953 	bl	8000adc <__aeabi_dcmplt>
 800c836:	2800      	cmp	r0, #0
 800c838:	d07b      	beq.n	800c932 <_dtoa_r+0x4f2>
 800c83a:	9b04      	ldr	r3, [sp, #16]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d078      	beq.n	800c932 <_dtoa_r+0x4f2>
 800c840:	9b01      	ldr	r3, [sp, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	dd39      	ble.n	800c8ba <_dtoa_r+0x47a>
 800c846:	4b90      	ldr	r3, [pc, #576]	; (800ca88 <_dtoa_r+0x648>)
 800c848:	2200      	movs	r2, #0
 800c84a:	4640      	mov	r0, r8
 800c84c:	4649      	mov	r1, r9
 800c84e:	f7f3 fed3 	bl	80005f8 <__aeabi_dmul>
 800c852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c856:	9e01      	ldr	r6, [sp, #4]
 800c858:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c85c:	3501      	adds	r5, #1
 800c85e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c862:	4628      	mov	r0, r5
 800c864:	f7f3 fe5e 	bl	8000524 <__aeabi_i2d>
 800c868:	4642      	mov	r2, r8
 800c86a:	464b      	mov	r3, r9
 800c86c:	f7f3 fec4 	bl	80005f8 <__aeabi_dmul>
 800c870:	4b86      	ldr	r3, [pc, #536]	; (800ca8c <_dtoa_r+0x64c>)
 800c872:	2200      	movs	r2, #0
 800c874:	f7f3 fd0a 	bl	800028c <__adddf3>
 800c878:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c87c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c880:	9303      	str	r3, [sp, #12]
 800c882:	2e00      	cmp	r6, #0
 800c884:	d158      	bne.n	800c938 <_dtoa_r+0x4f8>
 800c886:	4b82      	ldr	r3, [pc, #520]	; (800ca90 <_dtoa_r+0x650>)
 800c888:	2200      	movs	r2, #0
 800c88a:	4640      	mov	r0, r8
 800c88c:	4649      	mov	r1, r9
 800c88e:	f7f3 fcfb 	bl	8000288 <__aeabi_dsub>
 800c892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c896:	4680      	mov	r8, r0
 800c898:	4689      	mov	r9, r1
 800c89a:	f7f4 f93d 	bl	8000b18 <__aeabi_dcmpgt>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	f040 8296 	bne.w	800cdd0 <_dtoa_r+0x990>
 800c8a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	f7f4 f914 	bl	8000adc <__aeabi_dcmplt>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	f040 8289 	bne.w	800cdcc <_dtoa_r+0x98c>
 800c8ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c8be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f2c0 814e 	blt.w	800cb62 <_dtoa_r+0x722>
 800c8c6:	f1bb 0f0e 	cmp.w	fp, #14
 800c8ca:	f300 814a 	bgt.w	800cb62 <_dtoa_r+0x722>
 800c8ce:	4b6b      	ldr	r3, [pc, #428]	; (800ca7c <_dtoa_r+0x63c>)
 800c8d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c8d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f280 80dc 	bge.w	800ca98 <_dtoa_r+0x658>
 800c8e0:	9b04      	ldr	r3, [sp, #16]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f300 80d8 	bgt.w	800ca98 <_dtoa_r+0x658>
 800c8e8:	f040 826f 	bne.w	800cdca <_dtoa_r+0x98a>
 800c8ec:	4b68      	ldr	r3, [pc, #416]	; (800ca90 <_dtoa_r+0x650>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	4640      	mov	r0, r8
 800c8f2:	4649      	mov	r1, r9
 800c8f4:	f7f3 fe80 	bl	80005f8 <__aeabi_dmul>
 800c8f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8fc:	f7f4 f902 	bl	8000b04 <__aeabi_dcmpge>
 800c900:	9e04      	ldr	r6, [sp, #16]
 800c902:	4637      	mov	r7, r6
 800c904:	2800      	cmp	r0, #0
 800c906:	f040 8245 	bne.w	800cd94 <_dtoa_r+0x954>
 800c90a:	9d00      	ldr	r5, [sp, #0]
 800c90c:	2331      	movs	r3, #49	; 0x31
 800c90e:	f805 3b01 	strb.w	r3, [r5], #1
 800c912:	f10b 0b01 	add.w	fp, fp, #1
 800c916:	e241      	b.n	800cd9c <_dtoa_r+0x95c>
 800c918:	07f2      	lsls	r2, r6, #31
 800c91a:	d505      	bpl.n	800c928 <_dtoa_r+0x4e8>
 800c91c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c920:	f7f3 fe6a 	bl	80005f8 <__aeabi_dmul>
 800c924:	3501      	adds	r5, #1
 800c926:	2301      	movs	r3, #1
 800c928:	1076      	asrs	r6, r6, #1
 800c92a:	3708      	adds	r7, #8
 800c92c:	e773      	b.n	800c816 <_dtoa_r+0x3d6>
 800c92e:	2502      	movs	r5, #2
 800c930:	e775      	b.n	800c81e <_dtoa_r+0x3de>
 800c932:	9e04      	ldr	r6, [sp, #16]
 800c934:	465f      	mov	r7, fp
 800c936:	e792      	b.n	800c85e <_dtoa_r+0x41e>
 800c938:	9900      	ldr	r1, [sp, #0]
 800c93a:	4b50      	ldr	r3, [pc, #320]	; (800ca7c <_dtoa_r+0x63c>)
 800c93c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c940:	4431      	add	r1, r6
 800c942:	9102      	str	r1, [sp, #8]
 800c944:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c946:	eeb0 9a47 	vmov.f32	s18, s14
 800c94a:	eef0 9a67 	vmov.f32	s19, s15
 800c94e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c952:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c956:	2900      	cmp	r1, #0
 800c958:	d044      	beq.n	800c9e4 <_dtoa_r+0x5a4>
 800c95a:	494e      	ldr	r1, [pc, #312]	; (800ca94 <_dtoa_r+0x654>)
 800c95c:	2000      	movs	r0, #0
 800c95e:	f7f3 ff75 	bl	800084c <__aeabi_ddiv>
 800c962:	ec53 2b19 	vmov	r2, r3, d9
 800c966:	f7f3 fc8f 	bl	8000288 <__aeabi_dsub>
 800c96a:	9d00      	ldr	r5, [sp, #0]
 800c96c:	ec41 0b19 	vmov	d9, r0, r1
 800c970:	4649      	mov	r1, r9
 800c972:	4640      	mov	r0, r8
 800c974:	f7f4 f8f0 	bl	8000b58 <__aeabi_d2iz>
 800c978:	4606      	mov	r6, r0
 800c97a:	f7f3 fdd3 	bl	8000524 <__aeabi_i2d>
 800c97e:	4602      	mov	r2, r0
 800c980:	460b      	mov	r3, r1
 800c982:	4640      	mov	r0, r8
 800c984:	4649      	mov	r1, r9
 800c986:	f7f3 fc7f 	bl	8000288 <__aeabi_dsub>
 800c98a:	3630      	adds	r6, #48	; 0x30
 800c98c:	f805 6b01 	strb.w	r6, [r5], #1
 800c990:	ec53 2b19 	vmov	r2, r3, d9
 800c994:	4680      	mov	r8, r0
 800c996:	4689      	mov	r9, r1
 800c998:	f7f4 f8a0 	bl	8000adc <__aeabi_dcmplt>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d164      	bne.n	800ca6a <_dtoa_r+0x62a>
 800c9a0:	4642      	mov	r2, r8
 800c9a2:	464b      	mov	r3, r9
 800c9a4:	4937      	ldr	r1, [pc, #220]	; (800ca84 <_dtoa_r+0x644>)
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	f7f3 fc6e 	bl	8000288 <__aeabi_dsub>
 800c9ac:	ec53 2b19 	vmov	r2, r3, d9
 800c9b0:	f7f4 f894 	bl	8000adc <__aeabi_dcmplt>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	f040 80b6 	bne.w	800cb26 <_dtoa_r+0x6e6>
 800c9ba:	9b02      	ldr	r3, [sp, #8]
 800c9bc:	429d      	cmp	r5, r3
 800c9be:	f43f af7c 	beq.w	800c8ba <_dtoa_r+0x47a>
 800c9c2:	4b31      	ldr	r3, [pc, #196]	; (800ca88 <_dtoa_r+0x648>)
 800c9c4:	ec51 0b19 	vmov	r0, r1, d9
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	f7f3 fe15 	bl	80005f8 <__aeabi_dmul>
 800c9ce:	4b2e      	ldr	r3, [pc, #184]	; (800ca88 <_dtoa_r+0x648>)
 800c9d0:	ec41 0b19 	vmov	d9, r0, r1
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	4649      	mov	r1, r9
 800c9da:	f7f3 fe0d 	bl	80005f8 <__aeabi_dmul>
 800c9de:	4680      	mov	r8, r0
 800c9e0:	4689      	mov	r9, r1
 800c9e2:	e7c5      	b.n	800c970 <_dtoa_r+0x530>
 800c9e4:	ec51 0b17 	vmov	r0, r1, d7
 800c9e8:	f7f3 fe06 	bl	80005f8 <__aeabi_dmul>
 800c9ec:	9b02      	ldr	r3, [sp, #8]
 800c9ee:	9d00      	ldr	r5, [sp, #0]
 800c9f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9f2:	ec41 0b19 	vmov	d9, r0, r1
 800c9f6:	4649      	mov	r1, r9
 800c9f8:	4640      	mov	r0, r8
 800c9fa:	f7f4 f8ad 	bl	8000b58 <__aeabi_d2iz>
 800c9fe:	4606      	mov	r6, r0
 800ca00:	f7f3 fd90 	bl	8000524 <__aeabi_i2d>
 800ca04:	3630      	adds	r6, #48	; 0x30
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4640      	mov	r0, r8
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	f7f3 fc3b 	bl	8000288 <__aeabi_dsub>
 800ca12:	f805 6b01 	strb.w	r6, [r5], #1
 800ca16:	9b02      	ldr	r3, [sp, #8]
 800ca18:	429d      	cmp	r5, r3
 800ca1a:	4680      	mov	r8, r0
 800ca1c:	4689      	mov	r9, r1
 800ca1e:	f04f 0200 	mov.w	r2, #0
 800ca22:	d124      	bne.n	800ca6e <_dtoa_r+0x62e>
 800ca24:	4b1b      	ldr	r3, [pc, #108]	; (800ca94 <_dtoa_r+0x654>)
 800ca26:	ec51 0b19 	vmov	r0, r1, d9
 800ca2a:	f7f3 fc2f 	bl	800028c <__adddf3>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	460b      	mov	r3, r1
 800ca32:	4640      	mov	r0, r8
 800ca34:	4649      	mov	r1, r9
 800ca36:	f7f4 f86f 	bl	8000b18 <__aeabi_dcmpgt>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d173      	bne.n	800cb26 <_dtoa_r+0x6e6>
 800ca3e:	ec53 2b19 	vmov	r2, r3, d9
 800ca42:	4914      	ldr	r1, [pc, #80]	; (800ca94 <_dtoa_r+0x654>)
 800ca44:	2000      	movs	r0, #0
 800ca46:	f7f3 fc1f 	bl	8000288 <__aeabi_dsub>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	4640      	mov	r0, r8
 800ca50:	4649      	mov	r1, r9
 800ca52:	f7f4 f843 	bl	8000adc <__aeabi_dcmplt>
 800ca56:	2800      	cmp	r0, #0
 800ca58:	f43f af2f 	beq.w	800c8ba <_dtoa_r+0x47a>
 800ca5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ca5e:	1e6b      	subs	r3, r5, #1
 800ca60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca66:	2b30      	cmp	r3, #48	; 0x30
 800ca68:	d0f8      	beq.n	800ca5c <_dtoa_r+0x61c>
 800ca6a:	46bb      	mov	fp, r7
 800ca6c:	e04a      	b.n	800cb04 <_dtoa_r+0x6c4>
 800ca6e:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <_dtoa_r+0x648>)
 800ca70:	f7f3 fdc2 	bl	80005f8 <__aeabi_dmul>
 800ca74:	4680      	mov	r8, r0
 800ca76:	4689      	mov	r9, r1
 800ca78:	e7bd      	b.n	800c9f6 <_dtoa_r+0x5b6>
 800ca7a:	bf00      	nop
 800ca7c:	0800fba8 	.word	0x0800fba8
 800ca80:	0800fb80 	.word	0x0800fb80
 800ca84:	3ff00000 	.word	0x3ff00000
 800ca88:	40240000 	.word	0x40240000
 800ca8c:	401c0000 	.word	0x401c0000
 800ca90:	40140000 	.word	0x40140000
 800ca94:	3fe00000 	.word	0x3fe00000
 800ca98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca9c:	9d00      	ldr	r5, [sp, #0]
 800ca9e:	4642      	mov	r2, r8
 800caa0:	464b      	mov	r3, r9
 800caa2:	4630      	mov	r0, r6
 800caa4:	4639      	mov	r1, r7
 800caa6:	f7f3 fed1 	bl	800084c <__aeabi_ddiv>
 800caaa:	f7f4 f855 	bl	8000b58 <__aeabi_d2iz>
 800caae:	9001      	str	r0, [sp, #4]
 800cab0:	f7f3 fd38 	bl	8000524 <__aeabi_i2d>
 800cab4:	4642      	mov	r2, r8
 800cab6:	464b      	mov	r3, r9
 800cab8:	f7f3 fd9e 	bl	80005f8 <__aeabi_dmul>
 800cabc:	4602      	mov	r2, r0
 800cabe:	460b      	mov	r3, r1
 800cac0:	4630      	mov	r0, r6
 800cac2:	4639      	mov	r1, r7
 800cac4:	f7f3 fbe0 	bl	8000288 <__aeabi_dsub>
 800cac8:	9e01      	ldr	r6, [sp, #4]
 800caca:	9f04      	ldr	r7, [sp, #16]
 800cacc:	3630      	adds	r6, #48	; 0x30
 800cace:	f805 6b01 	strb.w	r6, [r5], #1
 800cad2:	9e00      	ldr	r6, [sp, #0]
 800cad4:	1bae      	subs	r6, r5, r6
 800cad6:	42b7      	cmp	r7, r6
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	d134      	bne.n	800cb48 <_dtoa_r+0x708>
 800cade:	f7f3 fbd5 	bl	800028c <__adddf3>
 800cae2:	4642      	mov	r2, r8
 800cae4:	464b      	mov	r3, r9
 800cae6:	4606      	mov	r6, r0
 800cae8:	460f      	mov	r7, r1
 800caea:	f7f4 f815 	bl	8000b18 <__aeabi_dcmpgt>
 800caee:	b9c8      	cbnz	r0, 800cb24 <_dtoa_r+0x6e4>
 800caf0:	4642      	mov	r2, r8
 800caf2:	464b      	mov	r3, r9
 800caf4:	4630      	mov	r0, r6
 800caf6:	4639      	mov	r1, r7
 800caf8:	f7f3 ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cafc:	b110      	cbz	r0, 800cb04 <_dtoa_r+0x6c4>
 800cafe:	9b01      	ldr	r3, [sp, #4]
 800cb00:	07db      	lsls	r3, r3, #31
 800cb02:	d40f      	bmi.n	800cb24 <_dtoa_r+0x6e4>
 800cb04:	4651      	mov	r1, sl
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 feca 	bl	800d8a0 <_Bfree>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb10:	702b      	strb	r3, [r5, #0]
 800cb12:	f10b 0301 	add.w	r3, fp, #1
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f43f ace2 	beq.w	800c4e4 <_dtoa_r+0xa4>
 800cb20:	601d      	str	r5, [r3, #0]
 800cb22:	e4df      	b.n	800c4e4 <_dtoa_r+0xa4>
 800cb24:	465f      	mov	r7, fp
 800cb26:	462b      	mov	r3, r5
 800cb28:	461d      	mov	r5, r3
 800cb2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb2e:	2a39      	cmp	r2, #57	; 0x39
 800cb30:	d106      	bne.n	800cb40 <_dtoa_r+0x700>
 800cb32:	9a00      	ldr	r2, [sp, #0]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d1f7      	bne.n	800cb28 <_dtoa_r+0x6e8>
 800cb38:	9900      	ldr	r1, [sp, #0]
 800cb3a:	2230      	movs	r2, #48	; 0x30
 800cb3c:	3701      	adds	r7, #1
 800cb3e:	700a      	strb	r2, [r1, #0]
 800cb40:	781a      	ldrb	r2, [r3, #0]
 800cb42:	3201      	adds	r2, #1
 800cb44:	701a      	strb	r2, [r3, #0]
 800cb46:	e790      	b.n	800ca6a <_dtoa_r+0x62a>
 800cb48:	4ba3      	ldr	r3, [pc, #652]	; (800cdd8 <_dtoa_r+0x998>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f7f3 fd54 	bl	80005f8 <__aeabi_dmul>
 800cb50:	2200      	movs	r2, #0
 800cb52:	2300      	movs	r3, #0
 800cb54:	4606      	mov	r6, r0
 800cb56:	460f      	mov	r7, r1
 800cb58:	f7f3 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d09e      	beq.n	800ca9e <_dtoa_r+0x65e>
 800cb60:	e7d0      	b.n	800cb04 <_dtoa_r+0x6c4>
 800cb62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb64:	2a00      	cmp	r2, #0
 800cb66:	f000 80ca 	beq.w	800ccfe <_dtoa_r+0x8be>
 800cb6a:	9a07      	ldr	r2, [sp, #28]
 800cb6c:	2a01      	cmp	r2, #1
 800cb6e:	f300 80ad 	bgt.w	800cccc <_dtoa_r+0x88c>
 800cb72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb74:	2a00      	cmp	r2, #0
 800cb76:	f000 80a5 	beq.w	800ccc4 <_dtoa_r+0x884>
 800cb7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb7e:	9e08      	ldr	r6, [sp, #32]
 800cb80:	9d05      	ldr	r5, [sp, #20]
 800cb82:	9a05      	ldr	r2, [sp, #20]
 800cb84:	441a      	add	r2, r3
 800cb86:	9205      	str	r2, [sp, #20]
 800cb88:	9a06      	ldr	r2, [sp, #24]
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	441a      	add	r2, r3
 800cb8e:	4620      	mov	r0, r4
 800cb90:	9206      	str	r2, [sp, #24]
 800cb92:	f000 ff3b 	bl	800da0c <__i2b>
 800cb96:	4607      	mov	r7, r0
 800cb98:	b165      	cbz	r5, 800cbb4 <_dtoa_r+0x774>
 800cb9a:	9b06      	ldr	r3, [sp, #24]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	dd09      	ble.n	800cbb4 <_dtoa_r+0x774>
 800cba0:	42ab      	cmp	r3, r5
 800cba2:	9a05      	ldr	r2, [sp, #20]
 800cba4:	bfa8      	it	ge
 800cba6:	462b      	movge	r3, r5
 800cba8:	1ad2      	subs	r2, r2, r3
 800cbaa:	9205      	str	r2, [sp, #20]
 800cbac:	9a06      	ldr	r2, [sp, #24]
 800cbae:	1aed      	subs	r5, r5, r3
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	9306      	str	r3, [sp, #24]
 800cbb4:	9b08      	ldr	r3, [sp, #32]
 800cbb6:	b1f3      	cbz	r3, 800cbf6 <_dtoa_r+0x7b6>
 800cbb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 80a3 	beq.w	800cd06 <_dtoa_r+0x8c6>
 800cbc0:	2e00      	cmp	r6, #0
 800cbc2:	dd10      	ble.n	800cbe6 <_dtoa_r+0x7a6>
 800cbc4:	4639      	mov	r1, r7
 800cbc6:	4632      	mov	r2, r6
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f000 ffdf 	bl	800db8c <__pow5mult>
 800cbce:	4652      	mov	r2, sl
 800cbd0:	4601      	mov	r1, r0
 800cbd2:	4607      	mov	r7, r0
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f000 ff2f 	bl	800da38 <__multiply>
 800cbda:	4651      	mov	r1, sl
 800cbdc:	4680      	mov	r8, r0
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f000 fe5e 	bl	800d8a0 <_Bfree>
 800cbe4:	46c2      	mov	sl, r8
 800cbe6:	9b08      	ldr	r3, [sp, #32]
 800cbe8:	1b9a      	subs	r2, r3, r6
 800cbea:	d004      	beq.n	800cbf6 <_dtoa_r+0x7b6>
 800cbec:	4651      	mov	r1, sl
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f000 ffcc 	bl	800db8c <__pow5mult>
 800cbf4:	4682      	mov	sl, r0
 800cbf6:	2101      	movs	r1, #1
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f000 ff07 	bl	800da0c <__i2b>
 800cbfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	4606      	mov	r6, r0
 800cc04:	f340 8081 	ble.w	800cd0a <_dtoa_r+0x8ca>
 800cc08:	461a      	mov	r2, r3
 800cc0a:	4601      	mov	r1, r0
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f000 ffbd 	bl	800db8c <__pow5mult>
 800cc12:	9b07      	ldr	r3, [sp, #28]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	4606      	mov	r6, r0
 800cc18:	dd7a      	ble.n	800cd10 <_dtoa_r+0x8d0>
 800cc1a:	f04f 0800 	mov.w	r8, #0
 800cc1e:	6933      	ldr	r3, [r6, #16]
 800cc20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cc24:	6918      	ldr	r0, [r3, #16]
 800cc26:	f000 fea3 	bl	800d970 <__hi0bits>
 800cc2a:	f1c0 0020 	rsb	r0, r0, #32
 800cc2e:	9b06      	ldr	r3, [sp, #24]
 800cc30:	4418      	add	r0, r3
 800cc32:	f010 001f 	ands.w	r0, r0, #31
 800cc36:	f000 8094 	beq.w	800cd62 <_dtoa_r+0x922>
 800cc3a:	f1c0 0320 	rsb	r3, r0, #32
 800cc3e:	2b04      	cmp	r3, #4
 800cc40:	f340 8085 	ble.w	800cd4e <_dtoa_r+0x90e>
 800cc44:	9b05      	ldr	r3, [sp, #20]
 800cc46:	f1c0 001c 	rsb	r0, r0, #28
 800cc4a:	4403      	add	r3, r0
 800cc4c:	9305      	str	r3, [sp, #20]
 800cc4e:	9b06      	ldr	r3, [sp, #24]
 800cc50:	4403      	add	r3, r0
 800cc52:	4405      	add	r5, r0
 800cc54:	9306      	str	r3, [sp, #24]
 800cc56:	9b05      	ldr	r3, [sp, #20]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	dd05      	ble.n	800cc68 <_dtoa_r+0x828>
 800cc5c:	4651      	mov	r1, sl
 800cc5e:	461a      	mov	r2, r3
 800cc60:	4620      	mov	r0, r4
 800cc62:	f000 ffed 	bl	800dc40 <__lshift>
 800cc66:	4682      	mov	sl, r0
 800cc68:	9b06      	ldr	r3, [sp, #24]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	dd05      	ble.n	800cc7a <_dtoa_r+0x83a>
 800cc6e:	4631      	mov	r1, r6
 800cc70:	461a      	mov	r2, r3
 800cc72:	4620      	mov	r0, r4
 800cc74:	f000 ffe4 	bl	800dc40 <__lshift>
 800cc78:	4606      	mov	r6, r0
 800cc7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d072      	beq.n	800cd66 <_dtoa_r+0x926>
 800cc80:	4631      	mov	r1, r6
 800cc82:	4650      	mov	r0, sl
 800cc84:	f001 f848 	bl	800dd18 <__mcmp>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	da6c      	bge.n	800cd66 <_dtoa_r+0x926>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	4651      	mov	r1, sl
 800cc90:	220a      	movs	r2, #10
 800cc92:	4620      	mov	r0, r4
 800cc94:	f000 fe26 	bl	800d8e4 <__multadd>
 800cc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cc9e:	4682      	mov	sl, r0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f000 81b0 	beq.w	800d006 <_dtoa_r+0xbc6>
 800cca6:	2300      	movs	r3, #0
 800cca8:	4639      	mov	r1, r7
 800ccaa:	220a      	movs	r2, #10
 800ccac:	4620      	mov	r0, r4
 800ccae:	f000 fe19 	bl	800d8e4 <__multadd>
 800ccb2:	9b01      	ldr	r3, [sp, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	4607      	mov	r7, r0
 800ccb8:	f300 8096 	bgt.w	800cde8 <_dtoa_r+0x9a8>
 800ccbc:	9b07      	ldr	r3, [sp, #28]
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	dc59      	bgt.n	800cd76 <_dtoa_r+0x936>
 800ccc2:	e091      	b.n	800cde8 <_dtoa_r+0x9a8>
 800ccc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ccca:	e758      	b.n	800cb7e <_dtoa_r+0x73e>
 800cccc:	9b04      	ldr	r3, [sp, #16]
 800ccce:	1e5e      	subs	r6, r3, #1
 800ccd0:	9b08      	ldr	r3, [sp, #32]
 800ccd2:	42b3      	cmp	r3, r6
 800ccd4:	bfbf      	itttt	lt
 800ccd6:	9b08      	ldrlt	r3, [sp, #32]
 800ccd8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ccda:	9608      	strlt	r6, [sp, #32]
 800ccdc:	1af3      	sublt	r3, r6, r3
 800ccde:	bfb4      	ite	lt
 800cce0:	18d2      	addlt	r2, r2, r3
 800cce2:	1b9e      	subge	r6, r3, r6
 800cce4:	9b04      	ldr	r3, [sp, #16]
 800cce6:	bfbc      	itt	lt
 800cce8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ccea:	2600      	movlt	r6, #0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	bfb7      	itett	lt
 800ccf0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ccf4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ccf8:	1a9d      	sublt	r5, r3, r2
 800ccfa:	2300      	movlt	r3, #0
 800ccfc:	e741      	b.n	800cb82 <_dtoa_r+0x742>
 800ccfe:	9e08      	ldr	r6, [sp, #32]
 800cd00:	9d05      	ldr	r5, [sp, #20]
 800cd02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cd04:	e748      	b.n	800cb98 <_dtoa_r+0x758>
 800cd06:	9a08      	ldr	r2, [sp, #32]
 800cd08:	e770      	b.n	800cbec <_dtoa_r+0x7ac>
 800cd0a:	9b07      	ldr	r3, [sp, #28]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	dc19      	bgt.n	800cd44 <_dtoa_r+0x904>
 800cd10:	9b02      	ldr	r3, [sp, #8]
 800cd12:	b9bb      	cbnz	r3, 800cd44 <_dtoa_r+0x904>
 800cd14:	9b03      	ldr	r3, [sp, #12]
 800cd16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd1a:	b99b      	cbnz	r3, 800cd44 <_dtoa_r+0x904>
 800cd1c:	9b03      	ldr	r3, [sp, #12]
 800cd1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd22:	0d1b      	lsrs	r3, r3, #20
 800cd24:	051b      	lsls	r3, r3, #20
 800cd26:	b183      	cbz	r3, 800cd4a <_dtoa_r+0x90a>
 800cd28:	9b05      	ldr	r3, [sp, #20]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	9305      	str	r3, [sp, #20]
 800cd2e:	9b06      	ldr	r3, [sp, #24]
 800cd30:	3301      	adds	r3, #1
 800cd32:	9306      	str	r3, [sp, #24]
 800cd34:	f04f 0801 	mov.w	r8, #1
 800cd38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f47f af6f 	bne.w	800cc1e <_dtoa_r+0x7de>
 800cd40:	2001      	movs	r0, #1
 800cd42:	e774      	b.n	800cc2e <_dtoa_r+0x7ee>
 800cd44:	f04f 0800 	mov.w	r8, #0
 800cd48:	e7f6      	b.n	800cd38 <_dtoa_r+0x8f8>
 800cd4a:	4698      	mov	r8, r3
 800cd4c:	e7f4      	b.n	800cd38 <_dtoa_r+0x8f8>
 800cd4e:	d082      	beq.n	800cc56 <_dtoa_r+0x816>
 800cd50:	9a05      	ldr	r2, [sp, #20]
 800cd52:	331c      	adds	r3, #28
 800cd54:	441a      	add	r2, r3
 800cd56:	9205      	str	r2, [sp, #20]
 800cd58:	9a06      	ldr	r2, [sp, #24]
 800cd5a:	441a      	add	r2, r3
 800cd5c:	441d      	add	r5, r3
 800cd5e:	9206      	str	r2, [sp, #24]
 800cd60:	e779      	b.n	800cc56 <_dtoa_r+0x816>
 800cd62:	4603      	mov	r3, r0
 800cd64:	e7f4      	b.n	800cd50 <_dtoa_r+0x910>
 800cd66:	9b04      	ldr	r3, [sp, #16]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	dc37      	bgt.n	800cddc <_dtoa_r+0x99c>
 800cd6c:	9b07      	ldr	r3, [sp, #28]
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	dd34      	ble.n	800cddc <_dtoa_r+0x99c>
 800cd72:	9b04      	ldr	r3, [sp, #16]
 800cd74:	9301      	str	r3, [sp, #4]
 800cd76:	9b01      	ldr	r3, [sp, #4]
 800cd78:	b963      	cbnz	r3, 800cd94 <_dtoa_r+0x954>
 800cd7a:	4631      	mov	r1, r6
 800cd7c:	2205      	movs	r2, #5
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f000 fdb0 	bl	800d8e4 <__multadd>
 800cd84:	4601      	mov	r1, r0
 800cd86:	4606      	mov	r6, r0
 800cd88:	4650      	mov	r0, sl
 800cd8a:	f000 ffc5 	bl	800dd18 <__mcmp>
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	f73f adbb 	bgt.w	800c90a <_dtoa_r+0x4ca>
 800cd94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd96:	9d00      	ldr	r5, [sp, #0]
 800cd98:	ea6f 0b03 	mvn.w	fp, r3
 800cd9c:	f04f 0800 	mov.w	r8, #0
 800cda0:	4631      	mov	r1, r6
 800cda2:	4620      	mov	r0, r4
 800cda4:	f000 fd7c 	bl	800d8a0 <_Bfree>
 800cda8:	2f00      	cmp	r7, #0
 800cdaa:	f43f aeab 	beq.w	800cb04 <_dtoa_r+0x6c4>
 800cdae:	f1b8 0f00 	cmp.w	r8, #0
 800cdb2:	d005      	beq.n	800cdc0 <_dtoa_r+0x980>
 800cdb4:	45b8      	cmp	r8, r7
 800cdb6:	d003      	beq.n	800cdc0 <_dtoa_r+0x980>
 800cdb8:	4641      	mov	r1, r8
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f000 fd70 	bl	800d8a0 <_Bfree>
 800cdc0:	4639      	mov	r1, r7
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f000 fd6c 	bl	800d8a0 <_Bfree>
 800cdc8:	e69c      	b.n	800cb04 <_dtoa_r+0x6c4>
 800cdca:	2600      	movs	r6, #0
 800cdcc:	4637      	mov	r7, r6
 800cdce:	e7e1      	b.n	800cd94 <_dtoa_r+0x954>
 800cdd0:	46bb      	mov	fp, r7
 800cdd2:	4637      	mov	r7, r6
 800cdd4:	e599      	b.n	800c90a <_dtoa_r+0x4ca>
 800cdd6:	bf00      	nop
 800cdd8:	40240000 	.word	0x40240000
 800cddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f000 80c8 	beq.w	800cf74 <_dtoa_r+0xb34>
 800cde4:	9b04      	ldr	r3, [sp, #16]
 800cde6:	9301      	str	r3, [sp, #4]
 800cde8:	2d00      	cmp	r5, #0
 800cdea:	dd05      	ble.n	800cdf8 <_dtoa_r+0x9b8>
 800cdec:	4639      	mov	r1, r7
 800cdee:	462a      	mov	r2, r5
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 ff25 	bl	800dc40 <__lshift>
 800cdf6:	4607      	mov	r7, r0
 800cdf8:	f1b8 0f00 	cmp.w	r8, #0
 800cdfc:	d05b      	beq.n	800ceb6 <_dtoa_r+0xa76>
 800cdfe:	6879      	ldr	r1, [r7, #4]
 800ce00:	4620      	mov	r0, r4
 800ce02:	f000 fd0d 	bl	800d820 <_Balloc>
 800ce06:	4605      	mov	r5, r0
 800ce08:	b928      	cbnz	r0, 800ce16 <_dtoa_r+0x9d6>
 800ce0a:	4b83      	ldr	r3, [pc, #524]	; (800d018 <_dtoa_r+0xbd8>)
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ce12:	f7ff bb2e 	b.w	800c472 <_dtoa_r+0x32>
 800ce16:	693a      	ldr	r2, [r7, #16]
 800ce18:	3202      	adds	r2, #2
 800ce1a:	0092      	lsls	r2, r2, #2
 800ce1c:	f107 010c 	add.w	r1, r7, #12
 800ce20:	300c      	adds	r0, #12
 800ce22:	f001 fa75 	bl	800e310 <memcpy>
 800ce26:	2201      	movs	r2, #1
 800ce28:	4629      	mov	r1, r5
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	f000 ff08 	bl	800dc40 <__lshift>
 800ce30:	9b00      	ldr	r3, [sp, #0]
 800ce32:	3301      	adds	r3, #1
 800ce34:	9304      	str	r3, [sp, #16]
 800ce36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	9308      	str	r3, [sp, #32]
 800ce3e:	9b02      	ldr	r3, [sp, #8]
 800ce40:	f003 0301 	and.w	r3, r3, #1
 800ce44:	46b8      	mov	r8, r7
 800ce46:	9306      	str	r3, [sp, #24]
 800ce48:	4607      	mov	r7, r0
 800ce4a:	9b04      	ldr	r3, [sp, #16]
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	4650      	mov	r0, sl
 800ce52:	9301      	str	r3, [sp, #4]
 800ce54:	f7ff fa6b 	bl	800c32e <quorem>
 800ce58:	4641      	mov	r1, r8
 800ce5a:	9002      	str	r0, [sp, #8]
 800ce5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ce60:	4650      	mov	r0, sl
 800ce62:	f000 ff59 	bl	800dd18 <__mcmp>
 800ce66:	463a      	mov	r2, r7
 800ce68:	9005      	str	r0, [sp, #20]
 800ce6a:	4631      	mov	r1, r6
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f000 ff6f 	bl	800dd50 <__mdiff>
 800ce72:	68c2      	ldr	r2, [r0, #12]
 800ce74:	4605      	mov	r5, r0
 800ce76:	bb02      	cbnz	r2, 800ceba <_dtoa_r+0xa7a>
 800ce78:	4601      	mov	r1, r0
 800ce7a:	4650      	mov	r0, sl
 800ce7c:	f000 ff4c 	bl	800dd18 <__mcmp>
 800ce80:	4602      	mov	r2, r0
 800ce82:	4629      	mov	r1, r5
 800ce84:	4620      	mov	r0, r4
 800ce86:	9209      	str	r2, [sp, #36]	; 0x24
 800ce88:	f000 fd0a 	bl	800d8a0 <_Bfree>
 800ce8c:	9b07      	ldr	r3, [sp, #28]
 800ce8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce90:	9d04      	ldr	r5, [sp, #16]
 800ce92:	ea43 0102 	orr.w	r1, r3, r2
 800ce96:	9b06      	ldr	r3, [sp, #24]
 800ce98:	4319      	orrs	r1, r3
 800ce9a:	d110      	bne.n	800cebe <_dtoa_r+0xa7e>
 800ce9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cea0:	d029      	beq.n	800cef6 <_dtoa_r+0xab6>
 800cea2:	9b05      	ldr	r3, [sp, #20]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	dd02      	ble.n	800ceae <_dtoa_r+0xa6e>
 800cea8:	9b02      	ldr	r3, [sp, #8]
 800ceaa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ceae:	9b01      	ldr	r3, [sp, #4]
 800ceb0:	f883 9000 	strb.w	r9, [r3]
 800ceb4:	e774      	b.n	800cda0 <_dtoa_r+0x960>
 800ceb6:	4638      	mov	r0, r7
 800ceb8:	e7ba      	b.n	800ce30 <_dtoa_r+0x9f0>
 800ceba:	2201      	movs	r2, #1
 800cebc:	e7e1      	b.n	800ce82 <_dtoa_r+0xa42>
 800cebe:	9b05      	ldr	r3, [sp, #20]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	db04      	blt.n	800cece <_dtoa_r+0xa8e>
 800cec4:	9907      	ldr	r1, [sp, #28]
 800cec6:	430b      	orrs	r3, r1
 800cec8:	9906      	ldr	r1, [sp, #24]
 800ceca:	430b      	orrs	r3, r1
 800cecc:	d120      	bne.n	800cf10 <_dtoa_r+0xad0>
 800cece:	2a00      	cmp	r2, #0
 800ced0:	dded      	ble.n	800ceae <_dtoa_r+0xa6e>
 800ced2:	4651      	mov	r1, sl
 800ced4:	2201      	movs	r2, #1
 800ced6:	4620      	mov	r0, r4
 800ced8:	f000 feb2 	bl	800dc40 <__lshift>
 800cedc:	4631      	mov	r1, r6
 800cede:	4682      	mov	sl, r0
 800cee0:	f000 ff1a 	bl	800dd18 <__mcmp>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	dc03      	bgt.n	800cef0 <_dtoa_r+0xab0>
 800cee8:	d1e1      	bne.n	800ceae <_dtoa_r+0xa6e>
 800ceea:	f019 0f01 	tst.w	r9, #1
 800ceee:	d0de      	beq.n	800ceae <_dtoa_r+0xa6e>
 800cef0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cef4:	d1d8      	bne.n	800cea8 <_dtoa_r+0xa68>
 800cef6:	9a01      	ldr	r2, [sp, #4]
 800cef8:	2339      	movs	r3, #57	; 0x39
 800cefa:	7013      	strb	r3, [r2, #0]
 800cefc:	462b      	mov	r3, r5
 800cefe:	461d      	mov	r5, r3
 800cf00:	3b01      	subs	r3, #1
 800cf02:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cf06:	2a39      	cmp	r2, #57	; 0x39
 800cf08:	d06c      	beq.n	800cfe4 <_dtoa_r+0xba4>
 800cf0a:	3201      	adds	r2, #1
 800cf0c:	701a      	strb	r2, [r3, #0]
 800cf0e:	e747      	b.n	800cda0 <_dtoa_r+0x960>
 800cf10:	2a00      	cmp	r2, #0
 800cf12:	dd07      	ble.n	800cf24 <_dtoa_r+0xae4>
 800cf14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cf18:	d0ed      	beq.n	800cef6 <_dtoa_r+0xab6>
 800cf1a:	9a01      	ldr	r2, [sp, #4]
 800cf1c:	f109 0301 	add.w	r3, r9, #1
 800cf20:	7013      	strb	r3, [r2, #0]
 800cf22:	e73d      	b.n	800cda0 <_dtoa_r+0x960>
 800cf24:	9b04      	ldr	r3, [sp, #16]
 800cf26:	9a08      	ldr	r2, [sp, #32]
 800cf28:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d043      	beq.n	800cfb8 <_dtoa_r+0xb78>
 800cf30:	4651      	mov	r1, sl
 800cf32:	2300      	movs	r3, #0
 800cf34:	220a      	movs	r2, #10
 800cf36:	4620      	mov	r0, r4
 800cf38:	f000 fcd4 	bl	800d8e4 <__multadd>
 800cf3c:	45b8      	cmp	r8, r7
 800cf3e:	4682      	mov	sl, r0
 800cf40:	f04f 0300 	mov.w	r3, #0
 800cf44:	f04f 020a 	mov.w	r2, #10
 800cf48:	4641      	mov	r1, r8
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	d107      	bne.n	800cf5e <_dtoa_r+0xb1e>
 800cf4e:	f000 fcc9 	bl	800d8e4 <__multadd>
 800cf52:	4680      	mov	r8, r0
 800cf54:	4607      	mov	r7, r0
 800cf56:	9b04      	ldr	r3, [sp, #16]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	9304      	str	r3, [sp, #16]
 800cf5c:	e775      	b.n	800ce4a <_dtoa_r+0xa0a>
 800cf5e:	f000 fcc1 	bl	800d8e4 <__multadd>
 800cf62:	4639      	mov	r1, r7
 800cf64:	4680      	mov	r8, r0
 800cf66:	2300      	movs	r3, #0
 800cf68:	220a      	movs	r2, #10
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	f000 fcba 	bl	800d8e4 <__multadd>
 800cf70:	4607      	mov	r7, r0
 800cf72:	e7f0      	b.n	800cf56 <_dtoa_r+0xb16>
 800cf74:	9b04      	ldr	r3, [sp, #16]
 800cf76:	9301      	str	r3, [sp, #4]
 800cf78:	9d00      	ldr	r5, [sp, #0]
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	4650      	mov	r0, sl
 800cf7e:	f7ff f9d6 	bl	800c32e <quorem>
 800cf82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cf86:	9b00      	ldr	r3, [sp, #0]
 800cf88:	f805 9b01 	strb.w	r9, [r5], #1
 800cf8c:	1aea      	subs	r2, r5, r3
 800cf8e:	9b01      	ldr	r3, [sp, #4]
 800cf90:	4293      	cmp	r3, r2
 800cf92:	dd07      	ble.n	800cfa4 <_dtoa_r+0xb64>
 800cf94:	4651      	mov	r1, sl
 800cf96:	2300      	movs	r3, #0
 800cf98:	220a      	movs	r2, #10
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f000 fca2 	bl	800d8e4 <__multadd>
 800cfa0:	4682      	mov	sl, r0
 800cfa2:	e7ea      	b.n	800cf7a <_dtoa_r+0xb3a>
 800cfa4:	9b01      	ldr	r3, [sp, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	bfc8      	it	gt
 800cfaa:	461d      	movgt	r5, r3
 800cfac:	9b00      	ldr	r3, [sp, #0]
 800cfae:	bfd8      	it	le
 800cfb0:	2501      	movle	r5, #1
 800cfb2:	441d      	add	r5, r3
 800cfb4:	f04f 0800 	mov.w	r8, #0
 800cfb8:	4651      	mov	r1, sl
 800cfba:	2201      	movs	r2, #1
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	f000 fe3f 	bl	800dc40 <__lshift>
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	4682      	mov	sl, r0
 800cfc6:	f000 fea7 	bl	800dd18 <__mcmp>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	dc96      	bgt.n	800cefc <_dtoa_r+0xabc>
 800cfce:	d102      	bne.n	800cfd6 <_dtoa_r+0xb96>
 800cfd0:	f019 0f01 	tst.w	r9, #1
 800cfd4:	d192      	bne.n	800cefc <_dtoa_r+0xabc>
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	461d      	mov	r5, r3
 800cfda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfde:	2a30      	cmp	r2, #48	; 0x30
 800cfe0:	d0fa      	beq.n	800cfd8 <_dtoa_r+0xb98>
 800cfe2:	e6dd      	b.n	800cda0 <_dtoa_r+0x960>
 800cfe4:	9a00      	ldr	r2, [sp, #0]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d189      	bne.n	800cefe <_dtoa_r+0xabe>
 800cfea:	f10b 0b01 	add.w	fp, fp, #1
 800cfee:	2331      	movs	r3, #49	; 0x31
 800cff0:	e796      	b.n	800cf20 <_dtoa_r+0xae0>
 800cff2:	4b0a      	ldr	r3, [pc, #40]	; (800d01c <_dtoa_r+0xbdc>)
 800cff4:	f7ff ba99 	b.w	800c52a <_dtoa_r+0xea>
 800cff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	f47f aa6d 	bne.w	800c4da <_dtoa_r+0x9a>
 800d000:	4b07      	ldr	r3, [pc, #28]	; (800d020 <_dtoa_r+0xbe0>)
 800d002:	f7ff ba92 	b.w	800c52a <_dtoa_r+0xea>
 800d006:	9b01      	ldr	r3, [sp, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	dcb5      	bgt.n	800cf78 <_dtoa_r+0xb38>
 800d00c:	9b07      	ldr	r3, [sp, #28]
 800d00e:	2b02      	cmp	r3, #2
 800d010:	f73f aeb1 	bgt.w	800cd76 <_dtoa_r+0x936>
 800d014:	e7b0      	b.n	800cf78 <_dtoa_r+0xb38>
 800d016:	bf00      	nop
 800d018:	0800fb04 	.word	0x0800fb04
 800d01c:	0800fa64 	.word	0x0800fa64
 800d020:	0800fa88 	.word	0x0800fa88

0800d024 <__ssputs_r>:
 800d024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d028:	688e      	ldr	r6, [r1, #8]
 800d02a:	461f      	mov	r7, r3
 800d02c:	42be      	cmp	r6, r7
 800d02e:	680b      	ldr	r3, [r1, #0]
 800d030:	4682      	mov	sl, r0
 800d032:	460c      	mov	r4, r1
 800d034:	4690      	mov	r8, r2
 800d036:	d82c      	bhi.n	800d092 <__ssputs_r+0x6e>
 800d038:	898a      	ldrh	r2, [r1, #12]
 800d03a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d03e:	d026      	beq.n	800d08e <__ssputs_r+0x6a>
 800d040:	6965      	ldr	r5, [r4, #20]
 800d042:	6909      	ldr	r1, [r1, #16]
 800d044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d048:	eba3 0901 	sub.w	r9, r3, r1
 800d04c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d050:	1c7b      	adds	r3, r7, #1
 800d052:	444b      	add	r3, r9
 800d054:	106d      	asrs	r5, r5, #1
 800d056:	429d      	cmp	r5, r3
 800d058:	bf38      	it	cc
 800d05a:	461d      	movcc	r5, r3
 800d05c:	0553      	lsls	r3, r2, #21
 800d05e:	d527      	bpl.n	800d0b0 <__ssputs_r+0x8c>
 800d060:	4629      	mov	r1, r5
 800d062:	f000 faa3 	bl	800d5ac <_malloc_r>
 800d066:	4606      	mov	r6, r0
 800d068:	b360      	cbz	r0, 800d0c4 <__ssputs_r+0xa0>
 800d06a:	6921      	ldr	r1, [r4, #16]
 800d06c:	464a      	mov	r2, r9
 800d06e:	f001 f94f 	bl	800e310 <memcpy>
 800d072:	89a3      	ldrh	r3, [r4, #12]
 800d074:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d07c:	81a3      	strh	r3, [r4, #12]
 800d07e:	6126      	str	r6, [r4, #16]
 800d080:	6165      	str	r5, [r4, #20]
 800d082:	444e      	add	r6, r9
 800d084:	eba5 0509 	sub.w	r5, r5, r9
 800d088:	6026      	str	r6, [r4, #0]
 800d08a:	60a5      	str	r5, [r4, #8]
 800d08c:	463e      	mov	r6, r7
 800d08e:	42be      	cmp	r6, r7
 800d090:	d900      	bls.n	800d094 <__ssputs_r+0x70>
 800d092:	463e      	mov	r6, r7
 800d094:	6820      	ldr	r0, [r4, #0]
 800d096:	4632      	mov	r2, r6
 800d098:	4641      	mov	r1, r8
 800d09a:	f001 f8a7 	bl	800e1ec <memmove>
 800d09e:	68a3      	ldr	r3, [r4, #8]
 800d0a0:	1b9b      	subs	r3, r3, r6
 800d0a2:	60a3      	str	r3, [r4, #8]
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	4433      	add	r3, r6
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b0:	462a      	mov	r2, r5
 800d0b2:	f000 ff74 	bl	800df9e <_realloc_r>
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d1e0      	bne.n	800d07e <__ssputs_r+0x5a>
 800d0bc:	6921      	ldr	r1, [r4, #16]
 800d0be:	4650      	mov	r0, sl
 800d0c0:	f001 f968 	bl	800e394 <_free_r>
 800d0c4:	230c      	movs	r3, #12
 800d0c6:	f8ca 3000 	str.w	r3, [sl]
 800d0ca:	89a3      	ldrh	r3, [r4, #12]
 800d0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0d0:	81a3      	strh	r3, [r4, #12]
 800d0d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0d6:	e7e9      	b.n	800d0ac <__ssputs_r+0x88>

0800d0d8 <_svfiprintf_r>:
 800d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0dc:	4698      	mov	r8, r3
 800d0de:	898b      	ldrh	r3, [r1, #12]
 800d0e0:	061b      	lsls	r3, r3, #24
 800d0e2:	b09d      	sub	sp, #116	; 0x74
 800d0e4:	4607      	mov	r7, r0
 800d0e6:	460d      	mov	r5, r1
 800d0e8:	4614      	mov	r4, r2
 800d0ea:	d50e      	bpl.n	800d10a <_svfiprintf_r+0x32>
 800d0ec:	690b      	ldr	r3, [r1, #16]
 800d0ee:	b963      	cbnz	r3, 800d10a <_svfiprintf_r+0x32>
 800d0f0:	2140      	movs	r1, #64	; 0x40
 800d0f2:	f000 fa5b 	bl	800d5ac <_malloc_r>
 800d0f6:	6028      	str	r0, [r5, #0]
 800d0f8:	6128      	str	r0, [r5, #16]
 800d0fa:	b920      	cbnz	r0, 800d106 <_svfiprintf_r+0x2e>
 800d0fc:	230c      	movs	r3, #12
 800d0fe:	603b      	str	r3, [r7, #0]
 800d100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d104:	e0d0      	b.n	800d2a8 <_svfiprintf_r+0x1d0>
 800d106:	2340      	movs	r3, #64	; 0x40
 800d108:	616b      	str	r3, [r5, #20]
 800d10a:	2300      	movs	r3, #0
 800d10c:	9309      	str	r3, [sp, #36]	; 0x24
 800d10e:	2320      	movs	r3, #32
 800d110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d114:	f8cd 800c 	str.w	r8, [sp, #12]
 800d118:	2330      	movs	r3, #48	; 0x30
 800d11a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d2c0 <_svfiprintf_r+0x1e8>
 800d11e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d122:	f04f 0901 	mov.w	r9, #1
 800d126:	4623      	mov	r3, r4
 800d128:	469a      	mov	sl, r3
 800d12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d12e:	b10a      	cbz	r2, 800d134 <_svfiprintf_r+0x5c>
 800d130:	2a25      	cmp	r2, #37	; 0x25
 800d132:	d1f9      	bne.n	800d128 <_svfiprintf_r+0x50>
 800d134:	ebba 0b04 	subs.w	fp, sl, r4
 800d138:	d00b      	beq.n	800d152 <_svfiprintf_r+0x7a>
 800d13a:	465b      	mov	r3, fp
 800d13c:	4622      	mov	r2, r4
 800d13e:	4629      	mov	r1, r5
 800d140:	4638      	mov	r0, r7
 800d142:	f7ff ff6f 	bl	800d024 <__ssputs_r>
 800d146:	3001      	adds	r0, #1
 800d148:	f000 80a9 	beq.w	800d29e <_svfiprintf_r+0x1c6>
 800d14c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d14e:	445a      	add	r2, fp
 800d150:	9209      	str	r2, [sp, #36]	; 0x24
 800d152:	f89a 3000 	ldrb.w	r3, [sl]
 800d156:	2b00      	cmp	r3, #0
 800d158:	f000 80a1 	beq.w	800d29e <_svfiprintf_r+0x1c6>
 800d15c:	2300      	movs	r3, #0
 800d15e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d166:	f10a 0a01 	add.w	sl, sl, #1
 800d16a:	9304      	str	r3, [sp, #16]
 800d16c:	9307      	str	r3, [sp, #28]
 800d16e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d172:	931a      	str	r3, [sp, #104]	; 0x68
 800d174:	4654      	mov	r4, sl
 800d176:	2205      	movs	r2, #5
 800d178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d17c:	4850      	ldr	r0, [pc, #320]	; (800d2c0 <_svfiprintf_r+0x1e8>)
 800d17e:	f7f3 f827 	bl	80001d0 <memchr>
 800d182:	9a04      	ldr	r2, [sp, #16]
 800d184:	b9d8      	cbnz	r0, 800d1be <_svfiprintf_r+0xe6>
 800d186:	06d0      	lsls	r0, r2, #27
 800d188:	bf44      	itt	mi
 800d18a:	2320      	movmi	r3, #32
 800d18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d190:	0711      	lsls	r1, r2, #28
 800d192:	bf44      	itt	mi
 800d194:	232b      	movmi	r3, #43	; 0x2b
 800d196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d19a:	f89a 3000 	ldrb.w	r3, [sl]
 800d19e:	2b2a      	cmp	r3, #42	; 0x2a
 800d1a0:	d015      	beq.n	800d1ce <_svfiprintf_r+0xf6>
 800d1a2:	9a07      	ldr	r2, [sp, #28]
 800d1a4:	4654      	mov	r4, sl
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	f04f 0c0a 	mov.w	ip, #10
 800d1ac:	4621      	mov	r1, r4
 800d1ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1b2:	3b30      	subs	r3, #48	; 0x30
 800d1b4:	2b09      	cmp	r3, #9
 800d1b6:	d94d      	bls.n	800d254 <_svfiprintf_r+0x17c>
 800d1b8:	b1b0      	cbz	r0, 800d1e8 <_svfiprintf_r+0x110>
 800d1ba:	9207      	str	r2, [sp, #28]
 800d1bc:	e014      	b.n	800d1e8 <_svfiprintf_r+0x110>
 800d1be:	eba0 0308 	sub.w	r3, r0, r8
 800d1c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	46a2      	mov	sl, r4
 800d1cc:	e7d2      	b.n	800d174 <_svfiprintf_r+0x9c>
 800d1ce:	9b03      	ldr	r3, [sp, #12]
 800d1d0:	1d19      	adds	r1, r3, #4
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	9103      	str	r1, [sp, #12]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	bfbb      	ittet	lt
 800d1da:	425b      	neglt	r3, r3
 800d1dc:	f042 0202 	orrlt.w	r2, r2, #2
 800d1e0:	9307      	strge	r3, [sp, #28]
 800d1e2:	9307      	strlt	r3, [sp, #28]
 800d1e4:	bfb8      	it	lt
 800d1e6:	9204      	strlt	r2, [sp, #16]
 800d1e8:	7823      	ldrb	r3, [r4, #0]
 800d1ea:	2b2e      	cmp	r3, #46	; 0x2e
 800d1ec:	d10c      	bne.n	800d208 <_svfiprintf_r+0x130>
 800d1ee:	7863      	ldrb	r3, [r4, #1]
 800d1f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d1f2:	d134      	bne.n	800d25e <_svfiprintf_r+0x186>
 800d1f4:	9b03      	ldr	r3, [sp, #12]
 800d1f6:	1d1a      	adds	r2, r3, #4
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	9203      	str	r2, [sp, #12]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	bfb8      	it	lt
 800d200:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d204:	3402      	adds	r4, #2
 800d206:	9305      	str	r3, [sp, #20]
 800d208:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d2d0 <_svfiprintf_r+0x1f8>
 800d20c:	7821      	ldrb	r1, [r4, #0]
 800d20e:	2203      	movs	r2, #3
 800d210:	4650      	mov	r0, sl
 800d212:	f7f2 ffdd 	bl	80001d0 <memchr>
 800d216:	b138      	cbz	r0, 800d228 <_svfiprintf_r+0x150>
 800d218:	9b04      	ldr	r3, [sp, #16]
 800d21a:	eba0 000a 	sub.w	r0, r0, sl
 800d21e:	2240      	movs	r2, #64	; 0x40
 800d220:	4082      	lsls	r2, r0
 800d222:	4313      	orrs	r3, r2
 800d224:	3401      	adds	r4, #1
 800d226:	9304      	str	r3, [sp, #16]
 800d228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d22c:	4825      	ldr	r0, [pc, #148]	; (800d2c4 <_svfiprintf_r+0x1ec>)
 800d22e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d232:	2206      	movs	r2, #6
 800d234:	f7f2 ffcc 	bl	80001d0 <memchr>
 800d238:	2800      	cmp	r0, #0
 800d23a:	d038      	beq.n	800d2ae <_svfiprintf_r+0x1d6>
 800d23c:	4b22      	ldr	r3, [pc, #136]	; (800d2c8 <_svfiprintf_r+0x1f0>)
 800d23e:	bb1b      	cbnz	r3, 800d288 <_svfiprintf_r+0x1b0>
 800d240:	9b03      	ldr	r3, [sp, #12]
 800d242:	3307      	adds	r3, #7
 800d244:	f023 0307 	bic.w	r3, r3, #7
 800d248:	3308      	adds	r3, #8
 800d24a:	9303      	str	r3, [sp, #12]
 800d24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d24e:	4433      	add	r3, r6
 800d250:	9309      	str	r3, [sp, #36]	; 0x24
 800d252:	e768      	b.n	800d126 <_svfiprintf_r+0x4e>
 800d254:	fb0c 3202 	mla	r2, ip, r2, r3
 800d258:	460c      	mov	r4, r1
 800d25a:	2001      	movs	r0, #1
 800d25c:	e7a6      	b.n	800d1ac <_svfiprintf_r+0xd4>
 800d25e:	2300      	movs	r3, #0
 800d260:	3401      	adds	r4, #1
 800d262:	9305      	str	r3, [sp, #20]
 800d264:	4619      	mov	r1, r3
 800d266:	f04f 0c0a 	mov.w	ip, #10
 800d26a:	4620      	mov	r0, r4
 800d26c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d270:	3a30      	subs	r2, #48	; 0x30
 800d272:	2a09      	cmp	r2, #9
 800d274:	d903      	bls.n	800d27e <_svfiprintf_r+0x1a6>
 800d276:	2b00      	cmp	r3, #0
 800d278:	d0c6      	beq.n	800d208 <_svfiprintf_r+0x130>
 800d27a:	9105      	str	r1, [sp, #20]
 800d27c:	e7c4      	b.n	800d208 <_svfiprintf_r+0x130>
 800d27e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d282:	4604      	mov	r4, r0
 800d284:	2301      	movs	r3, #1
 800d286:	e7f0      	b.n	800d26a <_svfiprintf_r+0x192>
 800d288:	ab03      	add	r3, sp, #12
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	462a      	mov	r2, r5
 800d28e:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <_svfiprintf_r+0x1f4>)
 800d290:	a904      	add	r1, sp, #16
 800d292:	4638      	mov	r0, r7
 800d294:	f7fe fafc 	bl	800b890 <_printf_float>
 800d298:	1c42      	adds	r2, r0, #1
 800d29a:	4606      	mov	r6, r0
 800d29c:	d1d6      	bne.n	800d24c <_svfiprintf_r+0x174>
 800d29e:	89ab      	ldrh	r3, [r5, #12]
 800d2a0:	065b      	lsls	r3, r3, #25
 800d2a2:	f53f af2d 	bmi.w	800d100 <_svfiprintf_r+0x28>
 800d2a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2a8:	b01d      	add	sp, #116	; 0x74
 800d2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ae:	ab03      	add	r3, sp, #12
 800d2b0:	9300      	str	r3, [sp, #0]
 800d2b2:	462a      	mov	r2, r5
 800d2b4:	4b05      	ldr	r3, [pc, #20]	; (800d2cc <_svfiprintf_r+0x1f4>)
 800d2b6:	a904      	add	r1, sp, #16
 800d2b8:	4638      	mov	r0, r7
 800d2ba:	f7fe fd8d 	bl	800bdd8 <_printf_i>
 800d2be:	e7eb      	b.n	800d298 <_svfiprintf_r+0x1c0>
 800d2c0:	0800fb15 	.word	0x0800fb15
 800d2c4:	0800fb1f 	.word	0x0800fb1f
 800d2c8:	0800b891 	.word	0x0800b891
 800d2cc:	0800d025 	.word	0x0800d025
 800d2d0:	0800fb1b 	.word	0x0800fb1b

0800d2d4 <__sfputc_r>:
 800d2d4:	6893      	ldr	r3, [r2, #8]
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	b410      	push	{r4}
 800d2dc:	6093      	str	r3, [r2, #8]
 800d2de:	da08      	bge.n	800d2f2 <__sfputc_r+0x1e>
 800d2e0:	6994      	ldr	r4, [r2, #24]
 800d2e2:	42a3      	cmp	r3, r4
 800d2e4:	db01      	blt.n	800d2ea <__sfputc_r+0x16>
 800d2e6:	290a      	cmp	r1, #10
 800d2e8:	d103      	bne.n	800d2f2 <__sfputc_r+0x1e>
 800d2ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2ee:	f000 be85 	b.w	800dffc <__swbuf_r>
 800d2f2:	6813      	ldr	r3, [r2, #0]
 800d2f4:	1c58      	adds	r0, r3, #1
 800d2f6:	6010      	str	r0, [r2, #0]
 800d2f8:	7019      	strb	r1, [r3, #0]
 800d2fa:	4608      	mov	r0, r1
 800d2fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d300:	4770      	bx	lr

0800d302 <__sfputs_r>:
 800d302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d304:	4606      	mov	r6, r0
 800d306:	460f      	mov	r7, r1
 800d308:	4614      	mov	r4, r2
 800d30a:	18d5      	adds	r5, r2, r3
 800d30c:	42ac      	cmp	r4, r5
 800d30e:	d101      	bne.n	800d314 <__sfputs_r+0x12>
 800d310:	2000      	movs	r0, #0
 800d312:	e007      	b.n	800d324 <__sfputs_r+0x22>
 800d314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d318:	463a      	mov	r2, r7
 800d31a:	4630      	mov	r0, r6
 800d31c:	f7ff ffda 	bl	800d2d4 <__sfputc_r>
 800d320:	1c43      	adds	r3, r0, #1
 800d322:	d1f3      	bne.n	800d30c <__sfputs_r+0xa>
 800d324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d328 <_vfiprintf_r>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	460d      	mov	r5, r1
 800d32e:	b09d      	sub	sp, #116	; 0x74
 800d330:	4614      	mov	r4, r2
 800d332:	4698      	mov	r8, r3
 800d334:	4606      	mov	r6, r0
 800d336:	b118      	cbz	r0, 800d340 <_vfiprintf_r+0x18>
 800d338:	6a03      	ldr	r3, [r0, #32]
 800d33a:	b90b      	cbnz	r3, 800d340 <_vfiprintf_r+0x18>
 800d33c:	f7fe ff1a 	bl	800c174 <__sinit>
 800d340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d342:	07d9      	lsls	r1, r3, #31
 800d344:	d405      	bmi.n	800d352 <_vfiprintf_r+0x2a>
 800d346:	89ab      	ldrh	r3, [r5, #12]
 800d348:	059a      	lsls	r2, r3, #22
 800d34a:	d402      	bmi.n	800d352 <_vfiprintf_r+0x2a>
 800d34c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d34e:	f7fe ffec 	bl	800c32a <__retarget_lock_acquire_recursive>
 800d352:	89ab      	ldrh	r3, [r5, #12]
 800d354:	071b      	lsls	r3, r3, #28
 800d356:	d501      	bpl.n	800d35c <_vfiprintf_r+0x34>
 800d358:	692b      	ldr	r3, [r5, #16]
 800d35a:	b99b      	cbnz	r3, 800d384 <_vfiprintf_r+0x5c>
 800d35c:	4629      	mov	r1, r5
 800d35e:	4630      	mov	r0, r6
 800d360:	f000 fe8a 	bl	800e078 <__swsetup_r>
 800d364:	b170      	cbz	r0, 800d384 <_vfiprintf_r+0x5c>
 800d366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d368:	07dc      	lsls	r4, r3, #31
 800d36a:	d504      	bpl.n	800d376 <_vfiprintf_r+0x4e>
 800d36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d370:	b01d      	add	sp, #116	; 0x74
 800d372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d376:	89ab      	ldrh	r3, [r5, #12]
 800d378:	0598      	lsls	r0, r3, #22
 800d37a:	d4f7      	bmi.n	800d36c <_vfiprintf_r+0x44>
 800d37c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d37e:	f7fe ffd5 	bl	800c32c <__retarget_lock_release_recursive>
 800d382:	e7f3      	b.n	800d36c <_vfiprintf_r+0x44>
 800d384:	2300      	movs	r3, #0
 800d386:	9309      	str	r3, [sp, #36]	; 0x24
 800d388:	2320      	movs	r3, #32
 800d38a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d38e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d392:	2330      	movs	r3, #48	; 0x30
 800d394:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d548 <_vfiprintf_r+0x220>
 800d398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d39c:	f04f 0901 	mov.w	r9, #1
 800d3a0:	4623      	mov	r3, r4
 800d3a2:	469a      	mov	sl, r3
 800d3a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3a8:	b10a      	cbz	r2, 800d3ae <_vfiprintf_r+0x86>
 800d3aa:	2a25      	cmp	r2, #37	; 0x25
 800d3ac:	d1f9      	bne.n	800d3a2 <_vfiprintf_r+0x7a>
 800d3ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d3b2:	d00b      	beq.n	800d3cc <_vfiprintf_r+0xa4>
 800d3b4:	465b      	mov	r3, fp
 800d3b6:	4622      	mov	r2, r4
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	f7ff ffa1 	bl	800d302 <__sfputs_r>
 800d3c0:	3001      	adds	r0, #1
 800d3c2:	f000 80a9 	beq.w	800d518 <_vfiprintf_r+0x1f0>
 800d3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3c8:	445a      	add	r2, fp
 800d3ca:	9209      	str	r2, [sp, #36]	; 0x24
 800d3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f000 80a1 	beq.w	800d518 <_vfiprintf_r+0x1f0>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3e0:	f10a 0a01 	add.w	sl, sl, #1
 800d3e4:	9304      	str	r3, [sp, #16]
 800d3e6:	9307      	str	r3, [sp, #28]
 800d3e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3ec:	931a      	str	r3, [sp, #104]	; 0x68
 800d3ee:	4654      	mov	r4, sl
 800d3f0:	2205      	movs	r2, #5
 800d3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f6:	4854      	ldr	r0, [pc, #336]	; (800d548 <_vfiprintf_r+0x220>)
 800d3f8:	f7f2 feea 	bl	80001d0 <memchr>
 800d3fc:	9a04      	ldr	r2, [sp, #16]
 800d3fe:	b9d8      	cbnz	r0, 800d438 <_vfiprintf_r+0x110>
 800d400:	06d1      	lsls	r1, r2, #27
 800d402:	bf44      	itt	mi
 800d404:	2320      	movmi	r3, #32
 800d406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d40a:	0713      	lsls	r3, r2, #28
 800d40c:	bf44      	itt	mi
 800d40e:	232b      	movmi	r3, #43	; 0x2b
 800d410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d414:	f89a 3000 	ldrb.w	r3, [sl]
 800d418:	2b2a      	cmp	r3, #42	; 0x2a
 800d41a:	d015      	beq.n	800d448 <_vfiprintf_r+0x120>
 800d41c:	9a07      	ldr	r2, [sp, #28]
 800d41e:	4654      	mov	r4, sl
 800d420:	2000      	movs	r0, #0
 800d422:	f04f 0c0a 	mov.w	ip, #10
 800d426:	4621      	mov	r1, r4
 800d428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d42c:	3b30      	subs	r3, #48	; 0x30
 800d42e:	2b09      	cmp	r3, #9
 800d430:	d94d      	bls.n	800d4ce <_vfiprintf_r+0x1a6>
 800d432:	b1b0      	cbz	r0, 800d462 <_vfiprintf_r+0x13a>
 800d434:	9207      	str	r2, [sp, #28]
 800d436:	e014      	b.n	800d462 <_vfiprintf_r+0x13a>
 800d438:	eba0 0308 	sub.w	r3, r0, r8
 800d43c:	fa09 f303 	lsl.w	r3, r9, r3
 800d440:	4313      	orrs	r3, r2
 800d442:	9304      	str	r3, [sp, #16]
 800d444:	46a2      	mov	sl, r4
 800d446:	e7d2      	b.n	800d3ee <_vfiprintf_r+0xc6>
 800d448:	9b03      	ldr	r3, [sp, #12]
 800d44a:	1d19      	adds	r1, r3, #4
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	9103      	str	r1, [sp, #12]
 800d450:	2b00      	cmp	r3, #0
 800d452:	bfbb      	ittet	lt
 800d454:	425b      	neglt	r3, r3
 800d456:	f042 0202 	orrlt.w	r2, r2, #2
 800d45a:	9307      	strge	r3, [sp, #28]
 800d45c:	9307      	strlt	r3, [sp, #28]
 800d45e:	bfb8      	it	lt
 800d460:	9204      	strlt	r2, [sp, #16]
 800d462:	7823      	ldrb	r3, [r4, #0]
 800d464:	2b2e      	cmp	r3, #46	; 0x2e
 800d466:	d10c      	bne.n	800d482 <_vfiprintf_r+0x15a>
 800d468:	7863      	ldrb	r3, [r4, #1]
 800d46a:	2b2a      	cmp	r3, #42	; 0x2a
 800d46c:	d134      	bne.n	800d4d8 <_vfiprintf_r+0x1b0>
 800d46e:	9b03      	ldr	r3, [sp, #12]
 800d470:	1d1a      	adds	r2, r3, #4
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	9203      	str	r2, [sp, #12]
 800d476:	2b00      	cmp	r3, #0
 800d478:	bfb8      	it	lt
 800d47a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d47e:	3402      	adds	r4, #2
 800d480:	9305      	str	r3, [sp, #20]
 800d482:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d558 <_vfiprintf_r+0x230>
 800d486:	7821      	ldrb	r1, [r4, #0]
 800d488:	2203      	movs	r2, #3
 800d48a:	4650      	mov	r0, sl
 800d48c:	f7f2 fea0 	bl	80001d0 <memchr>
 800d490:	b138      	cbz	r0, 800d4a2 <_vfiprintf_r+0x17a>
 800d492:	9b04      	ldr	r3, [sp, #16]
 800d494:	eba0 000a 	sub.w	r0, r0, sl
 800d498:	2240      	movs	r2, #64	; 0x40
 800d49a:	4082      	lsls	r2, r0
 800d49c:	4313      	orrs	r3, r2
 800d49e:	3401      	adds	r4, #1
 800d4a0:	9304      	str	r3, [sp, #16]
 800d4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4a6:	4829      	ldr	r0, [pc, #164]	; (800d54c <_vfiprintf_r+0x224>)
 800d4a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4ac:	2206      	movs	r2, #6
 800d4ae:	f7f2 fe8f 	bl	80001d0 <memchr>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d03f      	beq.n	800d536 <_vfiprintf_r+0x20e>
 800d4b6:	4b26      	ldr	r3, [pc, #152]	; (800d550 <_vfiprintf_r+0x228>)
 800d4b8:	bb1b      	cbnz	r3, 800d502 <_vfiprintf_r+0x1da>
 800d4ba:	9b03      	ldr	r3, [sp, #12]
 800d4bc:	3307      	adds	r3, #7
 800d4be:	f023 0307 	bic.w	r3, r3, #7
 800d4c2:	3308      	adds	r3, #8
 800d4c4:	9303      	str	r3, [sp, #12]
 800d4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c8:	443b      	add	r3, r7
 800d4ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d4cc:	e768      	b.n	800d3a0 <_vfiprintf_r+0x78>
 800d4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	2001      	movs	r0, #1
 800d4d6:	e7a6      	b.n	800d426 <_vfiprintf_r+0xfe>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	3401      	adds	r4, #1
 800d4dc:	9305      	str	r3, [sp, #20]
 800d4de:	4619      	mov	r1, r3
 800d4e0:	f04f 0c0a 	mov.w	ip, #10
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4ea:	3a30      	subs	r2, #48	; 0x30
 800d4ec:	2a09      	cmp	r2, #9
 800d4ee:	d903      	bls.n	800d4f8 <_vfiprintf_r+0x1d0>
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d0c6      	beq.n	800d482 <_vfiprintf_r+0x15a>
 800d4f4:	9105      	str	r1, [sp, #20]
 800d4f6:	e7c4      	b.n	800d482 <_vfiprintf_r+0x15a>
 800d4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	2301      	movs	r3, #1
 800d500:	e7f0      	b.n	800d4e4 <_vfiprintf_r+0x1bc>
 800d502:	ab03      	add	r3, sp, #12
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	462a      	mov	r2, r5
 800d508:	4b12      	ldr	r3, [pc, #72]	; (800d554 <_vfiprintf_r+0x22c>)
 800d50a:	a904      	add	r1, sp, #16
 800d50c:	4630      	mov	r0, r6
 800d50e:	f7fe f9bf 	bl	800b890 <_printf_float>
 800d512:	4607      	mov	r7, r0
 800d514:	1c78      	adds	r0, r7, #1
 800d516:	d1d6      	bne.n	800d4c6 <_vfiprintf_r+0x19e>
 800d518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d51a:	07d9      	lsls	r1, r3, #31
 800d51c:	d405      	bmi.n	800d52a <_vfiprintf_r+0x202>
 800d51e:	89ab      	ldrh	r3, [r5, #12]
 800d520:	059a      	lsls	r2, r3, #22
 800d522:	d402      	bmi.n	800d52a <_vfiprintf_r+0x202>
 800d524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d526:	f7fe ff01 	bl	800c32c <__retarget_lock_release_recursive>
 800d52a:	89ab      	ldrh	r3, [r5, #12]
 800d52c:	065b      	lsls	r3, r3, #25
 800d52e:	f53f af1d 	bmi.w	800d36c <_vfiprintf_r+0x44>
 800d532:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d534:	e71c      	b.n	800d370 <_vfiprintf_r+0x48>
 800d536:	ab03      	add	r3, sp, #12
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	462a      	mov	r2, r5
 800d53c:	4b05      	ldr	r3, [pc, #20]	; (800d554 <_vfiprintf_r+0x22c>)
 800d53e:	a904      	add	r1, sp, #16
 800d540:	4630      	mov	r0, r6
 800d542:	f7fe fc49 	bl	800bdd8 <_printf_i>
 800d546:	e7e4      	b.n	800d512 <_vfiprintf_r+0x1ea>
 800d548:	0800fb15 	.word	0x0800fb15
 800d54c:	0800fb1f 	.word	0x0800fb1f
 800d550:	0800b891 	.word	0x0800b891
 800d554:	0800d303 	.word	0x0800d303
 800d558:	0800fb1b 	.word	0x0800fb1b

0800d55c <malloc>:
 800d55c:	4b02      	ldr	r3, [pc, #8]	; (800d568 <malloc+0xc>)
 800d55e:	4601      	mov	r1, r0
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	f000 b823 	b.w	800d5ac <_malloc_r>
 800d566:	bf00      	nop
 800d568:	20000080 	.word	0x20000080

0800d56c <sbrk_aligned>:
 800d56c:	b570      	push	{r4, r5, r6, lr}
 800d56e:	4e0e      	ldr	r6, [pc, #56]	; (800d5a8 <sbrk_aligned+0x3c>)
 800d570:	460c      	mov	r4, r1
 800d572:	6831      	ldr	r1, [r6, #0]
 800d574:	4605      	mov	r5, r0
 800d576:	b911      	cbnz	r1, 800d57e <sbrk_aligned+0x12>
 800d578:	f000 fea8 	bl	800e2cc <_sbrk_r>
 800d57c:	6030      	str	r0, [r6, #0]
 800d57e:	4621      	mov	r1, r4
 800d580:	4628      	mov	r0, r5
 800d582:	f000 fea3 	bl	800e2cc <_sbrk_r>
 800d586:	1c43      	adds	r3, r0, #1
 800d588:	d00a      	beq.n	800d5a0 <sbrk_aligned+0x34>
 800d58a:	1cc4      	adds	r4, r0, #3
 800d58c:	f024 0403 	bic.w	r4, r4, #3
 800d590:	42a0      	cmp	r0, r4
 800d592:	d007      	beq.n	800d5a4 <sbrk_aligned+0x38>
 800d594:	1a21      	subs	r1, r4, r0
 800d596:	4628      	mov	r0, r5
 800d598:	f000 fe98 	bl	800e2cc <_sbrk_r>
 800d59c:	3001      	adds	r0, #1
 800d59e:	d101      	bne.n	800d5a4 <sbrk_aligned+0x38>
 800d5a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	bd70      	pop	{r4, r5, r6, pc}
 800d5a8:	20001048 	.word	0x20001048

0800d5ac <_malloc_r>:
 800d5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b0:	1ccd      	adds	r5, r1, #3
 800d5b2:	f025 0503 	bic.w	r5, r5, #3
 800d5b6:	3508      	adds	r5, #8
 800d5b8:	2d0c      	cmp	r5, #12
 800d5ba:	bf38      	it	cc
 800d5bc:	250c      	movcc	r5, #12
 800d5be:	2d00      	cmp	r5, #0
 800d5c0:	4607      	mov	r7, r0
 800d5c2:	db01      	blt.n	800d5c8 <_malloc_r+0x1c>
 800d5c4:	42a9      	cmp	r1, r5
 800d5c6:	d905      	bls.n	800d5d4 <_malloc_r+0x28>
 800d5c8:	230c      	movs	r3, #12
 800d5ca:	603b      	str	r3, [r7, #0]
 800d5cc:	2600      	movs	r6, #0
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d6a8 <_malloc_r+0xfc>
 800d5d8:	f000 f916 	bl	800d808 <__malloc_lock>
 800d5dc:	f8d8 3000 	ldr.w	r3, [r8]
 800d5e0:	461c      	mov	r4, r3
 800d5e2:	bb5c      	cbnz	r4, 800d63c <_malloc_r+0x90>
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	f7ff ffc0 	bl	800d56c <sbrk_aligned>
 800d5ec:	1c43      	adds	r3, r0, #1
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	d155      	bne.n	800d69e <_malloc_r+0xf2>
 800d5f2:	f8d8 4000 	ldr.w	r4, [r8]
 800d5f6:	4626      	mov	r6, r4
 800d5f8:	2e00      	cmp	r6, #0
 800d5fa:	d145      	bne.n	800d688 <_malloc_r+0xdc>
 800d5fc:	2c00      	cmp	r4, #0
 800d5fe:	d048      	beq.n	800d692 <_malloc_r+0xe6>
 800d600:	6823      	ldr	r3, [r4, #0]
 800d602:	4631      	mov	r1, r6
 800d604:	4638      	mov	r0, r7
 800d606:	eb04 0903 	add.w	r9, r4, r3
 800d60a:	f000 fe5f 	bl	800e2cc <_sbrk_r>
 800d60e:	4581      	cmp	r9, r0
 800d610:	d13f      	bne.n	800d692 <_malloc_r+0xe6>
 800d612:	6821      	ldr	r1, [r4, #0]
 800d614:	1a6d      	subs	r5, r5, r1
 800d616:	4629      	mov	r1, r5
 800d618:	4638      	mov	r0, r7
 800d61a:	f7ff ffa7 	bl	800d56c <sbrk_aligned>
 800d61e:	3001      	adds	r0, #1
 800d620:	d037      	beq.n	800d692 <_malloc_r+0xe6>
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	442b      	add	r3, r5
 800d626:	6023      	str	r3, [r4, #0]
 800d628:	f8d8 3000 	ldr.w	r3, [r8]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d038      	beq.n	800d6a2 <_malloc_r+0xf6>
 800d630:	685a      	ldr	r2, [r3, #4]
 800d632:	42a2      	cmp	r2, r4
 800d634:	d12b      	bne.n	800d68e <_malloc_r+0xe2>
 800d636:	2200      	movs	r2, #0
 800d638:	605a      	str	r2, [r3, #4]
 800d63a:	e00f      	b.n	800d65c <_malloc_r+0xb0>
 800d63c:	6822      	ldr	r2, [r4, #0]
 800d63e:	1b52      	subs	r2, r2, r5
 800d640:	d41f      	bmi.n	800d682 <_malloc_r+0xd6>
 800d642:	2a0b      	cmp	r2, #11
 800d644:	d917      	bls.n	800d676 <_malloc_r+0xca>
 800d646:	1961      	adds	r1, r4, r5
 800d648:	42a3      	cmp	r3, r4
 800d64a:	6025      	str	r5, [r4, #0]
 800d64c:	bf18      	it	ne
 800d64e:	6059      	strne	r1, [r3, #4]
 800d650:	6863      	ldr	r3, [r4, #4]
 800d652:	bf08      	it	eq
 800d654:	f8c8 1000 	streq.w	r1, [r8]
 800d658:	5162      	str	r2, [r4, r5]
 800d65a:	604b      	str	r3, [r1, #4]
 800d65c:	4638      	mov	r0, r7
 800d65e:	f104 060b 	add.w	r6, r4, #11
 800d662:	f000 f8d7 	bl	800d814 <__malloc_unlock>
 800d666:	f026 0607 	bic.w	r6, r6, #7
 800d66a:	1d23      	adds	r3, r4, #4
 800d66c:	1af2      	subs	r2, r6, r3
 800d66e:	d0ae      	beq.n	800d5ce <_malloc_r+0x22>
 800d670:	1b9b      	subs	r3, r3, r6
 800d672:	50a3      	str	r3, [r4, r2]
 800d674:	e7ab      	b.n	800d5ce <_malloc_r+0x22>
 800d676:	42a3      	cmp	r3, r4
 800d678:	6862      	ldr	r2, [r4, #4]
 800d67a:	d1dd      	bne.n	800d638 <_malloc_r+0x8c>
 800d67c:	f8c8 2000 	str.w	r2, [r8]
 800d680:	e7ec      	b.n	800d65c <_malloc_r+0xb0>
 800d682:	4623      	mov	r3, r4
 800d684:	6864      	ldr	r4, [r4, #4]
 800d686:	e7ac      	b.n	800d5e2 <_malloc_r+0x36>
 800d688:	4634      	mov	r4, r6
 800d68a:	6876      	ldr	r6, [r6, #4]
 800d68c:	e7b4      	b.n	800d5f8 <_malloc_r+0x4c>
 800d68e:	4613      	mov	r3, r2
 800d690:	e7cc      	b.n	800d62c <_malloc_r+0x80>
 800d692:	230c      	movs	r3, #12
 800d694:	603b      	str	r3, [r7, #0]
 800d696:	4638      	mov	r0, r7
 800d698:	f000 f8bc 	bl	800d814 <__malloc_unlock>
 800d69c:	e797      	b.n	800d5ce <_malloc_r+0x22>
 800d69e:	6025      	str	r5, [r4, #0]
 800d6a0:	e7dc      	b.n	800d65c <_malloc_r+0xb0>
 800d6a2:	605b      	str	r3, [r3, #4]
 800d6a4:	deff      	udf	#255	; 0xff
 800d6a6:	bf00      	nop
 800d6a8:	20001044 	.word	0x20001044

0800d6ac <__sflush_r>:
 800d6ac:	898a      	ldrh	r2, [r1, #12]
 800d6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b2:	4605      	mov	r5, r0
 800d6b4:	0710      	lsls	r0, r2, #28
 800d6b6:	460c      	mov	r4, r1
 800d6b8:	d458      	bmi.n	800d76c <__sflush_r+0xc0>
 800d6ba:	684b      	ldr	r3, [r1, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	dc05      	bgt.n	800d6cc <__sflush_r+0x20>
 800d6c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	dc02      	bgt.n	800d6cc <__sflush_r+0x20>
 800d6c6:	2000      	movs	r0, #0
 800d6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6ce:	2e00      	cmp	r6, #0
 800d6d0:	d0f9      	beq.n	800d6c6 <__sflush_r+0x1a>
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6d8:	682f      	ldr	r7, [r5, #0]
 800d6da:	6a21      	ldr	r1, [r4, #32]
 800d6dc:	602b      	str	r3, [r5, #0]
 800d6de:	d032      	beq.n	800d746 <__sflush_r+0x9a>
 800d6e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6e2:	89a3      	ldrh	r3, [r4, #12]
 800d6e4:	075a      	lsls	r2, r3, #29
 800d6e6:	d505      	bpl.n	800d6f4 <__sflush_r+0x48>
 800d6e8:	6863      	ldr	r3, [r4, #4]
 800d6ea:	1ac0      	subs	r0, r0, r3
 800d6ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6ee:	b10b      	cbz	r3, 800d6f4 <__sflush_r+0x48>
 800d6f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6f2:	1ac0      	subs	r0, r0, r3
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6fa:	6a21      	ldr	r1, [r4, #32]
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	47b0      	blx	r6
 800d700:	1c43      	adds	r3, r0, #1
 800d702:	89a3      	ldrh	r3, [r4, #12]
 800d704:	d106      	bne.n	800d714 <__sflush_r+0x68>
 800d706:	6829      	ldr	r1, [r5, #0]
 800d708:	291d      	cmp	r1, #29
 800d70a:	d82b      	bhi.n	800d764 <__sflush_r+0xb8>
 800d70c:	4a29      	ldr	r2, [pc, #164]	; (800d7b4 <__sflush_r+0x108>)
 800d70e:	410a      	asrs	r2, r1
 800d710:	07d6      	lsls	r6, r2, #31
 800d712:	d427      	bmi.n	800d764 <__sflush_r+0xb8>
 800d714:	2200      	movs	r2, #0
 800d716:	6062      	str	r2, [r4, #4]
 800d718:	04d9      	lsls	r1, r3, #19
 800d71a:	6922      	ldr	r2, [r4, #16]
 800d71c:	6022      	str	r2, [r4, #0]
 800d71e:	d504      	bpl.n	800d72a <__sflush_r+0x7e>
 800d720:	1c42      	adds	r2, r0, #1
 800d722:	d101      	bne.n	800d728 <__sflush_r+0x7c>
 800d724:	682b      	ldr	r3, [r5, #0]
 800d726:	b903      	cbnz	r3, 800d72a <__sflush_r+0x7e>
 800d728:	6560      	str	r0, [r4, #84]	; 0x54
 800d72a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d72c:	602f      	str	r7, [r5, #0]
 800d72e:	2900      	cmp	r1, #0
 800d730:	d0c9      	beq.n	800d6c6 <__sflush_r+0x1a>
 800d732:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d736:	4299      	cmp	r1, r3
 800d738:	d002      	beq.n	800d740 <__sflush_r+0x94>
 800d73a:	4628      	mov	r0, r5
 800d73c:	f000 fe2a 	bl	800e394 <_free_r>
 800d740:	2000      	movs	r0, #0
 800d742:	6360      	str	r0, [r4, #52]	; 0x34
 800d744:	e7c0      	b.n	800d6c8 <__sflush_r+0x1c>
 800d746:	2301      	movs	r3, #1
 800d748:	4628      	mov	r0, r5
 800d74a:	47b0      	blx	r6
 800d74c:	1c41      	adds	r1, r0, #1
 800d74e:	d1c8      	bne.n	800d6e2 <__sflush_r+0x36>
 800d750:	682b      	ldr	r3, [r5, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d0c5      	beq.n	800d6e2 <__sflush_r+0x36>
 800d756:	2b1d      	cmp	r3, #29
 800d758:	d001      	beq.n	800d75e <__sflush_r+0xb2>
 800d75a:	2b16      	cmp	r3, #22
 800d75c:	d101      	bne.n	800d762 <__sflush_r+0xb6>
 800d75e:	602f      	str	r7, [r5, #0]
 800d760:	e7b1      	b.n	800d6c6 <__sflush_r+0x1a>
 800d762:	89a3      	ldrh	r3, [r4, #12]
 800d764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d768:	81a3      	strh	r3, [r4, #12]
 800d76a:	e7ad      	b.n	800d6c8 <__sflush_r+0x1c>
 800d76c:	690f      	ldr	r7, [r1, #16]
 800d76e:	2f00      	cmp	r7, #0
 800d770:	d0a9      	beq.n	800d6c6 <__sflush_r+0x1a>
 800d772:	0793      	lsls	r3, r2, #30
 800d774:	680e      	ldr	r6, [r1, #0]
 800d776:	bf08      	it	eq
 800d778:	694b      	ldreq	r3, [r1, #20]
 800d77a:	600f      	str	r7, [r1, #0]
 800d77c:	bf18      	it	ne
 800d77e:	2300      	movne	r3, #0
 800d780:	eba6 0807 	sub.w	r8, r6, r7
 800d784:	608b      	str	r3, [r1, #8]
 800d786:	f1b8 0f00 	cmp.w	r8, #0
 800d78a:	dd9c      	ble.n	800d6c6 <__sflush_r+0x1a>
 800d78c:	6a21      	ldr	r1, [r4, #32]
 800d78e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d790:	4643      	mov	r3, r8
 800d792:	463a      	mov	r2, r7
 800d794:	4628      	mov	r0, r5
 800d796:	47b0      	blx	r6
 800d798:	2800      	cmp	r0, #0
 800d79a:	dc06      	bgt.n	800d7aa <__sflush_r+0xfe>
 800d79c:	89a3      	ldrh	r3, [r4, #12]
 800d79e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7a2:	81a3      	strh	r3, [r4, #12]
 800d7a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7a8:	e78e      	b.n	800d6c8 <__sflush_r+0x1c>
 800d7aa:	4407      	add	r7, r0
 800d7ac:	eba8 0800 	sub.w	r8, r8, r0
 800d7b0:	e7e9      	b.n	800d786 <__sflush_r+0xda>
 800d7b2:	bf00      	nop
 800d7b4:	dfbffffe 	.word	0xdfbffffe

0800d7b8 <_fflush_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	690b      	ldr	r3, [r1, #16]
 800d7bc:	4605      	mov	r5, r0
 800d7be:	460c      	mov	r4, r1
 800d7c0:	b913      	cbnz	r3, 800d7c8 <_fflush_r+0x10>
 800d7c2:	2500      	movs	r5, #0
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	bd38      	pop	{r3, r4, r5, pc}
 800d7c8:	b118      	cbz	r0, 800d7d2 <_fflush_r+0x1a>
 800d7ca:	6a03      	ldr	r3, [r0, #32]
 800d7cc:	b90b      	cbnz	r3, 800d7d2 <_fflush_r+0x1a>
 800d7ce:	f7fe fcd1 	bl	800c174 <__sinit>
 800d7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d0f3      	beq.n	800d7c2 <_fflush_r+0xa>
 800d7da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7dc:	07d0      	lsls	r0, r2, #31
 800d7de:	d404      	bmi.n	800d7ea <_fflush_r+0x32>
 800d7e0:	0599      	lsls	r1, r3, #22
 800d7e2:	d402      	bmi.n	800d7ea <_fflush_r+0x32>
 800d7e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7e6:	f7fe fda0 	bl	800c32a <__retarget_lock_acquire_recursive>
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	f7ff ff5d 	bl	800d6ac <__sflush_r>
 800d7f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7f4:	07da      	lsls	r2, r3, #31
 800d7f6:	4605      	mov	r5, r0
 800d7f8:	d4e4      	bmi.n	800d7c4 <_fflush_r+0xc>
 800d7fa:	89a3      	ldrh	r3, [r4, #12]
 800d7fc:	059b      	lsls	r3, r3, #22
 800d7fe:	d4e1      	bmi.n	800d7c4 <_fflush_r+0xc>
 800d800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d802:	f7fe fd93 	bl	800c32c <__retarget_lock_release_recursive>
 800d806:	e7dd      	b.n	800d7c4 <_fflush_r+0xc>

0800d808 <__malloc_lock>:
 800d808:	4801      	ldr	r0, [pc, #4]	; (800d810 <__malloc_lock+0x8>)
 800d80a:	f7fe bd8e 	b.w	800c32a <__retarget_lock_acquire_recursive>
 800d80e:	bf00      	nop
 800d810:	20001040 	.word	0x20001040

0800d814 <__malloc_unlock>:
 800d814:	4801      	ldr	r0, [pc, #4]	; (800d81c <__malloc_unlock+0x8>)
 800d816:	f7fe bd89 	b.w	800c32c <__retarget_lock_release_recursive>
 800d81a:	bf00      	nop
 800d81c:	20001040 	.word	0x20001040

0800d820 <_Balloc>:
 800d820:	b570      	push	{r4, r5, r6, lr}
 800d822:	69c6      	ldr	r6, [r0, #28]
 800d824:	4604      	mov	r4, r0
 800d826:	460d      	mov	r5, r1
 800d828:	b976      	cbnz	r6, 800d848 <_Balloc+0x28>
 800d82a:	2010      	movs	r0, #16
 800d82c:	f7ff fe96 	bl	800d55c <malloc>
 800d830:	4602      	mov	r2, r0
 800d832:	61e0      	str	r0, [r4, #28]
 800d834:	b920      	cbnz	r0, 800d840 <_Balloc+0x20>
 800d836:	4b18      	ldr	r3, [pc, #96]	; (800d898 <_Balloc+0x78>)
 800d838:	4818      	ldr	r0, [pc, #96]	; (800d89c <_Balloc+0x7c>)
 800d83a:	216b      	movs	r1, #107	; 0x6b
 800d83c:	f000 fd76 	bl	800e32c <__assert_func>
 800d840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d844:	6006      	str	r6, [r0, #0]
 800d846:	60c6      	str	r6, [r0, #12]
 800d848:	69e6      	ldr	r6, [r4, #28]
 800d84a:	68f3      	ldr	r3, [r6, #12]
 800d84c:	b183      	cbz	r3, 800d870 <_Balloc+0x50>
 800d84e:	69e3      	ldr	r3, [r4, #28]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d856:	b9b8      	cbnz	r0, 800d888 <_Balloc+0x68>
 800d858:	2101      	movs	r1, #1
 800d85a:	fa01 f605 	lsl.w	r6, r1, r5
 800d85e:	1d72      	adds	r2, r6, #5
 800d860:	0092      	lsls	r2, r2, #2
 800d862:	4620      	mov	r0, r4
 800d864:	f000 fd80 	bl	800e368 <_calloc_r>
 800d868:	b160      	cbz	r0, 800d884 <_Balloc+0x64>
 800d86a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d86e:	e00e      	b.n	800d88e <_Balloc+0x6e>
 800d870:	2221      	movs	r2, #33	; 0x21
 800d872:	2104      	movs	r1, #4
 800d874:	4620      	mov	r0, r4
 800d876:	f000 fd77 	bl	800e368 <_calloc_r>
 800d87a:	69e3      	ldr	r3, [r4, #28]
 800d87c:	60f0      	str	r0, [r6, #12]
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1e4      	bne.n	800d84e <_Balloc+0x2e>
 800d884:	2000      	movs	r0, #0
 800d886:	bd70      	pop	{r4, r5, r6, pc}
 800d888:	6802      	ldr	r2, [r0, #0]
 800d88a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d88e:	2300      	movs	r3, #0
 800d890:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d894:	e7f7      	b.n	800d886 <_Balloc+0x66>
 800d896:	bf00      	nop
 800d898:	0800fa95 	.word	0x0800fa95
 800d89c:	0800fb26 	.word	0x0800fb26

0800d8a0 <_Bfree>:
 800d8a0:	b570      	push	{r4, r5, r6, lr}
 800d8a2:	69c6      	ldr	r6, [r0, #28]
 800d8a4:	4605      	mov	r5, r0
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	b976      	cbnz	r6, 800d8c8 <_Bfree+0x28>
 800d8aa:	2010      	movs	r0, #16
 800d8ac:	f7ff fe56 	bl	800d55c <malloc>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	61e8      	str	r0, [r5, #28]
 800d8b4:	b920      	cbnz	r0, 800d8c0 <_Bfree+0x20>
 800d8b6:	4b09      	ldr	r3, [pc, #36]	; (800d8dc <_Bfree+0x3c>)
 800d8b8:	4809      	ldr	r0, [pc, #36]	; (800d8e0 <_Bfree+0x40>)
 800d8ba:	218f      	movs	r1, #143	; 0x8f
 800d8bc:	f000 fd36 	bl	800e32c <__assert_func>
 800d8c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8c4:	6006      	str	r6, [r0, #0]
 800d8c6:	60c6      	str	r6, [r0, #12]
 800d8c8:	b13c      	cbz	r4, 800d8da <_Bfree+0x3a>
 800d8ca:	69eb      	ldr	r3, [r5, #28]
 800d8cc:	6862      	ldr	r2, [r4, #4]
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8d4:	6021      	str	r1, [r4, #0]
 800d8d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8da:	bd70      	pop	{r4, r5, r6, pc}
 800d8dc:	0800fa95 	.word	0x0800fa95
 800d8e0:	0800fb26 	.word	0x0800fb26

0800d8e4 <__multadd>:
 800d8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e8:	690d      	ldr	r5, [r1, #16]
 800d8ea:	4607      	mov	r7, r0
 800d8ec:	460c      	mov	r4, r1
 800d8ee:	461e      	mov	r6, r3
 800d8f0:	f101 0c14 	add.w	ip, r1, #20
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	f8dc 3000 	ldr.w	r3, [ip]
 800d8fa:	b299      	uxth	r1, r3
 800d8fc:	fb02 6101 	mla	r1, r2, r1, r6
 800d900:	0c1e      	lsrs	r6, r3, #16
 800d902:	0c0b      	lsrs	r3, r1, #16
 800d904:	fb02 3306 	mla	r3, r2, r6, r3
 800d908:	b289      	uxth	r1, r1
 800d90a:	3001      	adds	r0, #1
 800d90c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d910:	4285      	cmp	r5, r0
 800d912:	f84c 1b04 	str.w	r1, [ip], #4
 800d916:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d91a:	dcec      	bgt.n	800d8f6 <__multadd+0x12>
 800d91c:	b30e      	cbz	r6, 800d962 <__multadd+0x7e>
 800d91e:	68a3      	ldr	r3, [r4, #8]
 800d920:	42ab      	cmp	r3, r5
 800d922:	dc19      	bgt.n	800d958 <__multadd+0x74>
 800d924:	6861      	ldr	r1, [r4, #4]
 800d926:	4638      	mov	r0, r7
 800d928:	3101      	adds	r1, #1
 800d92a:	f7ff ff79 	bl	800d820 <_Balloc>
 800d92e:	4680      	mov	r8, r0
 800d930:	b928      	cbnz	r0, 800d93e <__multadd+0x5a>
 800d932:	4602      	mov	r2, r0
 800d934:	4b0c      	ldr	r3, [pc, #48]	; (800d968 <__multadd+0x84>)
 800d936:	480d      	ldr	r0, [pc, #52]	; (800d96c <__multadd+0x88>)
 800d938:	21ba      	movs	r1, #186	; 0xba
 800d93a:	f000 fcf7 	bl	800e32c <__assert_func>
 800d93e:	6922      	ldr	r2, [r4, #16]
 800d940:	3202      	adds	r2, #2
 800d942:	f104 010c 	add.w	r1, r4, #12
 800d946:	0092      	lsls	r2, r2, #2
 800d948:	300c      	adds	r0, #12
 800d94a:	f000 fce1 	bl	800e310 <memcpy>
 800d94e:	4621      	mov	r1, r4
 800d950:	4638      	mov	r0, r7
 800d952:	f7ff ffa5 	bl	800d8a0 <_Bfree>
 800d956:	4644      	mov	r4, r8
 800d958:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d95c:	3501      	adds	r5, #1
 800d95e:	615e      	str	r6, [r3, #20]
 800d960:	6125      	str	r5, [r4, #16]
 800d962:	4620      	mov	r0, r4
 800d964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d968:	0800fb04 	.word	0x0800fb04
 800d96c:	0800fb26 	.word	0x0800fb26

0800d970 <__hi0bits>:
 800d970:	0c03      	lsrs	r3, r0, #16
 800d972:	041b      	lsls	r3, r3, #16
 800d974:	b9d3      	cbnz	r3, 800d9ac <__hi0bits+0x3c>
 800d976:	0400      	lsls	r0, r0, #16
 800d978:	2310      	movs	r3, #16
 800d97a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d97e:	bf04      	itt	eq
 800d980:	0200      	lsleq	r0, r0, #8
 800d982:	3308      	addeq	r3, #8
 800d984:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d988:	bf04      	itt	eq
 800d98a:	0100      	lsleq	r0, r0, #4
 800d98c:	3304      	addeq	r3, #4
 800d98e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d992:	bf04      	itt	eq
 800d994:	0080      	lsleq	r0, r0, #2
 800d996:	3302      	addeq	r3, #2
 800d998:	2800      	cmp	r0, #0
 800d99a:	db05      	blt.n	800d9a8 <__hi0bits+0x38>
 800d99c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d9a0:	f103 0301 	add.w	r3, r3, #1
 800d9a4:	bf08      	it	eq
 800d9a6:	2320      	moveq	r3, #32
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	4770      	bx	lr
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	e7e4      	b.n	800d97a <__hi0bits+0xa>

0800d9b0 <__lo0bits>:
 800d9b0:	6803      	ldr	r3, [r0, #0]
 800d9b2:	f013 0207 	ands.w	r2, r3, #7
 800d9b6:	d00c      	beq.n	800d9d2 <__lo0bits+0x22>
 800d9b8:	07d9      	lsls	r1, r3, #31
 800d9ba:	d422      	bmi.n	800da02 <__lo0bits+0x52>
 800d9bc:	079a      	lsls	r2, r3, #30
 800d9be:	bf49      	itett	mi
 800d9c0:	085b      	lsrmi	r3, r3, #1
 800d9c2:	089b      	lsrpl	r3, r3, #2
 800d9c4:	6003      	strmi	r3, [r0, #0]
 800d9c6:	2201      	movmi	r2, #1
 800d9c8:	bf5c      	itt	pl
 800d9ca:	6003      	strpl	r3, [r0, #0]
 800d9cc:	2202      	movpl	r2, #2
 800d9ce:	4610      	mov	r0, r2
 800d9d0:	4770      	bx	lr
 800d9d2:	b299      	uxth	r1, r3
 800d9d4:	b909      	cbnz	r1, 800d9da <__lo0bits+0x2a>
 800d9d6:	0c1b      	lsrs	r3, r3, #16
 800d9d8:	2210      	movs	r2, #16
 800d9da:	b2d9      	uxtb	r1, r3
 800d9dc:	b909      	cbnz	r1, 800d9e2 <__lo0bits+0x32>
 800d9de:	3208      	adds	r2, #8
 800d9e0:	0a1b      	lsrs	r3, r3, #8
 800d9e2:	0719      	lsls	r1, r3, #28
 800d9e4:	bf04      	itt	eq
 800d9e6:	091b      	lsreq	r3, r3, #4
 800d9e8:	3204      	addeq	r2, #4
 800d9ea:	0799      	lsls	r1, r3, #30
 800d9ec:	bf04      	itt	eq
 800d9ee:	089b      	lsreq	r3, r3, #2
 800d9f0:	3202      	addeq	r2, #2
 800d9f2:	07d9      	lsls	r1, r3, #31
 800d9f4:	d403      	bmi.n	800d9fe <__lo0bits+0x4e>
 800d9f6:	085b      	lsrs	r3, r3, #1
 800d9f8:	f102 0201 	add.w	r2, r2, #1
 800d9fc:	d003      	beq.n	800da06 <__lo0bits+0x56>
 800d9fe:	6003      	str	r3, [r0, #0]
 800da00:	e7e5      	b.n	800d9ce <__lo0bits+0x1e>
 800da02:	2200      	movs	r2, #0
 800da04:	e7e3      	b.n	800d9ce <__lo0bits+0x1e>
 800da06:	2220      	movs	r2, #32
 800da08:	e7e1      	b.n	800d9ce <__lo0bits+0x1e>
	...

0800da0c <__i2b>:
 800da0c:	b510      	push	{r4, lr}
 800da0e:	460c      	mov	r4, r1
 800da10:	2101      	movs	r1, #1
 800da12:	f7ff ff05 	bl	800d820 <_Balloc>
 800da16:	4602      	mov	r2, r0
 800da18:	b928      	cbnz	r0, 800da26 <__i2b+0x1a>
 800da1a:	4b05      	ldr	r3, [pc, #20]	; (800da30 <__i2b+0x24>)
 800da1c:	4805      	ldr	r0, [pc, #20]	; (800da34 <__i2b+0x28>)
 800da1e:	f240 1145 	movw	r1, #325	; 0x145
 800da22:	f000 fc83 	bl	800e32c <__assert_func>
 800da26:	2301      	movs	r3, #1
 800da28:	6144      	str	r4, [r0, #20]
 800da2a:	6103      	str	r3, [r0, #16]
 800da2c:	bd10      	pop	{r4, pc}
 800da2e:	bf00      	nop
 800da30:	0800fb04 	.word	0x0800fb04
 800da34:	0800fb26 	.word	0x0800fb26

0800da38 <__multiply>:
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	4691      	mov	r9, r2
 800da3e:	690a      	ldr	r2, [r1, #16]
 800da40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da44:	429a      	cmp	r2, r3
 800da46:	bfb8      	it	lt
 800da48:	460b      	movlt	r3, r1
 800da4a:	460c      	mov	r4, r1
 800da4c:	bfbc      	itt	lt
 800da4e:	464c      	movlt	r4, r9
 800da50:	4699      	movlt	r9, r3
 800da52:	6927      	ldr	r7, [r4, #16]
 800da54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800da58:	68a3      	ldr	r3, [r4, #8]
 800da5a:	6861      	ldr	r1, [r4, #4]
 800da5c:	eb07 060a 	add.w	r6, r7, sl
 800da60:	42b3      	cmp	r3, r6
 800da62:	b085      	sub	sp, #20
 800da64:	bfb8      	it	lt
 800da66:	3101      	addlt	r1, #1
 800da68:	f7ff feda 	bl	800d820 <_Balloc>
 800da6c:	b930      	cbnz	r0, 800da7c <__multiply+0x44>
 800da6e:	4602      	mov	r2, r0
 800da70:	4b44      	ldr	r3, [pc, #272]	; (800db84 <__multiply+0x14c>)
 800da72:	4845      	ldr	r0, [pc, #276]	; (800db88 <__multiply+0x150>)
 800da74:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800da78:	f000 fc58 	bl	800e32c <__assert_func>
 800da7c:	f100 0514 	add.w	r5, r0, #20
 800da80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da84:	462b      	mov	r3, r5
 800da86:	2200      	movs	r2, #0
 800da88:	4543      	cmp	r3, r8
 800da8a:	d321      	bcc.n	800dad0 <__multiply+0x98>
 800da8c:	f104 0314 	add.w	r3, r4, #20
 800da90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da94:	f109 0314 	add.w	r3, r9, #20
 800da98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da9c:	9202      	str	r2, [sp, #8]
 800da9e:	1b3a      	subs	r2, r7, r4
 800daa0:	3a15      	subs	r2, #21
 800daa2:	f022 0203 	bic.w	r2, r2, #3
 800daa6:	3204      	adds	r2, #4
 800daa8:	f104 0115 	add.w	r1, r4, #21
 800daac:	428f      	cmp	r7, r1
 800daae:	bf38      	it	cc
 800dab0:	2204      	movcc	r2, #4
 800dab2:	9201      	str	r2, [sp, #4]
 800dab4:	9a02      	ldr	r2, [sp, #8]
 800dab6:	9303      	str	r3, [sp, #12]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d80c      	bhi.n	800dad6 <__multiply+0x9e>
 800dabc:	2e00      	cmp	r6, #0
 800dabe:	dd03      	ble.n	800dac8 <__multiply+0x90>
 800dac0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d05b      	beq.n	800db80 <__multiply+0x148>
 800dac8:	6106      	str	r6, [r0, #16]
 800daca:	b005      	add	sp, #20
 800dacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad0:	f843 2b04 	str.w	r2, [r3], #4
 800dad4:	e7d8      	b.n	800da88 <__multiply+0x50>
 800dad6:	f8b3 a000 	ldrh.w	sl, [r3]
 800dada:	f1ba 0f00 	cmp.w	sl, #0
 800dade:	d024      	beq.n	800db2a <__multiply+0xf2>
 800dae0:	f104 0e14 	add.w	lr, r4, #20
 800dae4:	46a9      	mov	r9, r5
 800dae6:	f04f 0c00 	mov.w	ip, #0
 800daea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800daee:	f8d9 1000 	ldr.w	r1, [r9]
 800daf2:	fa1f fb82 	uxth.w	fp, r2
 800daf6:	b289      	uxth	r1, r1
 800daf8:	fb0a 110b 	mla	r1, sl, fp, r1
 800dafc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800db00:	f8d9 2000 	ldr.w	r2, [r9]
 800db04:	4461      	add	r1, ip
 800db06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db0a:	fb0a c20b 	mla	r2, sl, fp, ip
 800db0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800db12:	b289      	uxth	r1, r1
 800db14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800db18:	4577      	cmp	r7, lr
 800db1a:	f849 1b04 	str.w	r1, [r9], #4
 800db1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db22:	d8e2      	bhi.n	800daea <__multiply+0xb2>
 800db24:	9a01      	ldr	r2, [sp, #4]
 800db26:	f845 c002 	str.w	ip, [r5, r2]
 800db2a:	9a03      	ldr	r2, [sp, #12]
 800db2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800db30:	3304      	adds	r3, #4
 800db32:	f1b9 0f00 	cmp.w	r9, #0
 800db36:	d021      	beq.n	800db7c <__multiply+0x144>
 800db38:	6829      	ldr	r1, [r5, #0]
 800db3a:	f104 0c14 	add.w	ip, r4, #20
 800db3e:	46ae      	mov	lr, r5
 800db40:	f04f 0a00 	mov.w	sl, #0
 800db44:	f8bc b000 	ldrh.w	fp, [ip]
 800db48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800db4c:	fb09 220b 	mla	r2, r9, fp, r2
 800db50:	4452      	add	r2, sl
 800db52:	b289      	uxth	r1, r1
 800db54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800db58:	f84e 1b04 	str.w	r1, [lr], #4
 800db5c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800db60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800db64:	f8be 1000 	ldrh.w	r1, [lr]
 800db68:	fb09 110a 	mla	r1, r9, sl, r1
 800db6c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800db70:	4567      	cmp	r7, ip
 800db72:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800db76:	d8e5      	bhi.n	800db44 <__multiply+0x10c>
 800db78:	9a01      	ldr	r2, [sp, #4]
 800db7a:	50a9      	str	r1, [r5, r2]
 800db7c:	3504      	adds	r5, #4
 800db7e:	e799      	b.n	800dab4 <__multiply+0x7c>
 800db80:	3e01      	subs	r6, #1
 800db82:	e79b      	b.n	800dabc <__multiply+0x84>
 800db84:	0800fb04 	.word	0x0800fb04
 800db88:	0800fb26 	.word	0x0800fb26

0800db8c <__pow5mult>:
 800db8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db90:	4615      	mov	r5, r2
 800db92:	f012 0203 	ands.w	r2, r2, #3
 800db96:	4606      	mov	r6, r0
 800db98:	460f      	mov	r7, r1
 800db9a:	d007      	beq.n	800dbac <__pow5mult+0x20>
 800db9c:	4c25      	ldr	r4, [pc, #148]	; (800dc34 <__pow5mult+0xa8>)
 800db9e:	3a01      	subs	r2, #1
 800dba0:	2300      	movs	r3, #0
 800dba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dba6:	f7ff fe9d 	bl	800d8e4 <__multadd>
 800dbaa:	4607      	mov	r7, r0
 800dbac:	10ad      	asrs	r5, r5, #2
 800dbae:	d03d      	beq.n	800dc2c <__pow5mult+0xa0>
 800dbb0:	69f4      	ldr	r4, [r6, #28]
 800dbb2:	b97c      	cbnz	r4, 800dbd4 <__pow5mult+0x48>
 800dbb4:	2010      	movs	r0, #16
 800dbb6:	f7ff fcd1 	bl	800d55c <malloc>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	61f0      	str	r0, [r6, #28]
 800dbbe:	b928      	cbnz	r0, 800dbcc <__pow5mult+0x40>
 800dbc0:	4b1d      	ldr	r3, [pc, #116]	; (800dc38 <__pow5mult+0xac>)
 800dbc2:	481e      	ldr	r0, [pc, #120]	; (800dc3c <__pow5mult+0xb0>)
 800dbc4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dbc8:	f000 fbb0 	bl	800e32c <__assert_func>
 800dbcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dbd0:	6004      	str	r4, [r0, #0]
 800dbd2:	60c4      	str	r4, [r0, #12]
 800dbd4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dbd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dbdc:	b94c      	cbnz	r4, 800dbf2 <__pow5mult+0x66>
 800dbde:	f240 2171 	movw	r1, #625	; 0x271
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	f7ff ff12 	bl	800da0c <__i2b>
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f8c8 0008 	str.w	r0, [r8, #8]
 800dbee:	4604      	mov	r4, r0
 800dbf0:	6003      	str	r3, [r0, #0]
 800dbf2:	f04f 0900 	mov.w	r9, #0
 800dbf6:	07eb      	lsls	r3, r5, #31
 800dbf8:	d50a      	bpl.n	800dc10 <__pow5mult+0x84>
 800dbfa:	4639      	mov	r1, r7
 800dbfc:	4622      	mov	r2, r4
 800dbfe:	4630      	mov	r0, r6
 800dc00:	f7ff ff1a 	bl	800da38 <__multiply>
 800dc04:	4639      	mov	r1, r7
 800dc06:	4680      	mov	r8, r0
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f7ff fe49 	bl	800d8a0 <_Bfree>
 800dc0e:	4647      	mov	r7, r8
 800dc10:	106d      	asrs	r5, r5, #1
 800dc12:	d00b      	beq.n	800dc2c <__pow5mult+0xa0>
 800dc14:	6820      	ldr	r0, [r4, #0]
 800dc16:	b938      	cbnz	r0, 800dc28 <__pow5mult+0x9c>
 800dc18:	4622      	mov	r2, r4
 800dc1a:	4621      	mov	r1, r4
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	f7ff ff0b 	bl	800da38 <__multiply>
 800dc22:	6020      	str	r0, [r4, #0]
 800dc24:	f8c0 9000 	str.w	r9, [r0]
 800dc28:	4604      	mov	r4, r0
 800dc2a:	e7e4      	b.n	800dbf6 <__pow5mult+0x6a>
 800dc2c:	4638      	mov	r0, r7
 800dc2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc32:	bf00      	nop
 800dc34:	0800fc70 	.word	0x0800fc70
 800dc38:	0800fa95 	.word	0x0800fa95
 800dc3c:	0800fb26 	.word	0x0800fb26

0800dc40 <__lshift>:
 800dc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc44:	460c      	mov	r4, r1
 800dc46:	6849      	ldr	r1, [r1, #4]
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc4e:	68a3      	ldr	r3, [r4, #8]
 800dc50:	4607      	mov	r7, r0
 800dc52:	4691      	mov	r9, r2
 800dc54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc58:	f108 0601 	add.w	r6, r8, #1
 800dc5c:	42b3      	cmp	r3, r6
 800dc5e:	db0b      	blt.n	800dc78 <__lshift+0x38>
 800dc60:	4638      	mov	r0, r7
 800dc62:	f7ff fddd 	bl	800d820 <_Balloc>
 800dc66:	4605      	mov	r5, r0
 800dc68:	b948      	cbnz	r0, 800dc7e <__lshift+0x3e>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	4b28      	ldr	r3, [pc, #160]	; (800dd10 <__lshift+0xd0>)
 800dc6e:	4829      	ldr	r0, [pc, #164]	; (800dd14 <__lshift+0xd4>)
 800dc70:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dc74:	f000 fb5a 	bl	800e32c <__assert_func>
 800dc78:	3101      	adds	r1, #1
 800dc7a:	005b      	lsls	r3, r3, #1
 800dc7c:	e7ee      	b.n	800dc5c <__lshift+0x1c>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f100 0114 	add.w	r1, r0, #20
 800dc84:	f100 0210 	add.w	r2, r0, #16
 800dc88:	4618      	mov	r0, r3
 800dc8a:	4553      	cmp	r3, sl
 800dc8c:	db33      	blt.n	800dcf6 <__lshift+0xb6>
 800dc8e:	6920      	ldr	r0, [r4, #16]
 800dc90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc94:	f104 0314 	add.w	r3, r4, #20
 800dc98:	f019 091f 	ands.w	r9, r9, #31
 800dc9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dca0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dca4:	d02b      	beq.n	800dcfe <__lshift+0xbe>
 800dca6:	f1c9 0e20 	rsb	lr, r9, #32
 800dcaa:	468a      	mov	sl, r1
 800dcac:	2200      	movs	r2, #0
 800dcae:	6818      	ldr	r0, [r3, #0]
 800dcb0:	fa00 f009 	lsl.w	r0, r0, r9
 800dcb4:	4310      	orrs	r0, r2
 800dcb6:	f84a 0b04 	str.w	r0, [sl], #4
 800dcba:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcbe:	459c      	cmp	ip, r3
 800dcc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800dcc4:	d8f3      	bhi.n	800dcae <__lshift+0x6e>
 800dcc6:	ebac 0304 	sub.w	r3, ip, r4
 800dcca:	3b15      	subs	r3, #21
 800dccc:	f023 0303 	bic.w	r3, r3, #3
 800dcd0:	3304      	adds	r3, #4
 800dcd2:	f104 0015 	add.w	r0, r4, #21
 800dcd6:	4584      	cmp	ip, r0
 800dcd8:	bf38      	it	cc
 800dcda:	2304      	movcc	r3, #4
 800dcdc:	50ca      	str	r2, [r1, r3]
 800dcde:	b10a      	cbz	r2, 800dce4 <__lshift+0xa4>
 800dce0:	f108 0602 	add.w	r6, r8, #2
 800dce4:	3e01      	subs	r6, #1
 800dce6:	4638      	mov	r0, r7
 800dce8:	612e      	str	r6, [r5, #16]
 800dcea:	4621      	mov	r1, r4
 800dcec:	f7ff fdd8 	bl	800d8a0 <_Bfree>
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	e7c5      	b.n	800dc8a <__lshift+0x4a>
 800dcfe:	3904      	subs	r1, #4
 800dd00:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd04:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd08:	459c      	cmp	ip, r3
 800dd0a:	d8f9      	bhi.n	800dd00 <__lshift+0xc0>
 800dd0c:	e7ea      	b.n	800dce4 <__lshift+0xa4>
 800dd0e:	bf00      	nop
 800dd10:	0800fb04 	.word	0x0800fb04
 800dd14:	0800fb26 	.word	0x0800fb26

0800dd18 <__mcmp>:
 800dd18:	b530      	push	{r4, r5, lr}
 800dd1a:	6902      	ldr	r2, [r0, #16]
 800dd1c:	690c      	ldr	r4, [r1, #16]
 800dd1e:	1b12      	subs	r2, r2, r4
 800dd20:	d10e      	bne.n	800dd40 <__mcmp+0x28>
 800dd22:	f100 0314 	add.w	r3, r0, #20
 800dd26:	3114      	adds	r1, #20
 800dd28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dd2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dd30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dd34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dd38:	42a5      	cmp	r5, r4
 800dd3a:	d003      	beq.n	800dd44 <__mcmp+0x2c>
 800dd3c:	d305      	bcc.n	800dd4a <__mcmp+0x32>
 800dd3e:	2201      	movs	r2, #1
 800dd40:	4610      	mov	r0, r2
 800dd42:	bd30      	pop	{r4, r5, pc}
 800dd44:	4283      	cmp	r3, r0
 800dd46:	d3f3      	bcc.n	800dd30 <__mcmp+0x18>
 800dd48:	e7fa      	b.n	800dd40 <__mcmp+0x28>
 800dd4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd4e:	e7f7      	b.n	800dd40 <__mcmp+0x28>

0800dd50 <__mdiff>:
 800dd50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd54:	460c      	mov	r4, r1
 800dd56:	4606      	mov	r6, r0
 800dd58:	4611      	mov	r1, r2
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	4690      	mov	r8, r2
 800dd5e:	f7ff ffdb 	bl	800dd18 <__mcmp>
 800dd62:	1e05      	subs	r5, r0, #0
 800dd64:	d110      	bne.n	800dd88 <__mdiff+0x38>
 800dd66:	4629      	mov	r1, r5
 800dd68:	4630      	mov	r0, r6
 800dd6a:	f7ff fd59 	bl	800d820 <_Balloc>
 800dd6e:	b930      	cbnz	r0, 800dd7e <__mdiff+0x2e>
 800dd70:	4b3a      	ldr	r3, [pc, #232]	; (800de5c <__mdiff+0x10c>)
 800dd72:	4602      	mov	r2, r0
 800dd74:	f240 2137 	movw	r1, #567	; 0x237
 800dd78:	4839      	ldr	r0, [pc, #228]	; (800de60 <__mdiff+0x110>)
 800dd7a:	f000 fad7 	bl	800e32c <__assert_func>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd88:	bfa4      	itt	ge
 800dd8a:	4643      	movge	r3, r8
 800dd8c:	46a0      	movge	r8, r4
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd94:	bfa6      	itte	ge
 800dd96:	461c      	movge	r4, r3
 800dd98:	2500      	movge	r5, #0
 800dd9a:	2501      	movlt	r5, #1
 800dd9c:	f7ff fd40 	bl	800d820 <_Balloc>
 800dda0:	b920      	cbnz	r0, 800ddac <__mdiff+0x5c>
 800dda2:	4b2e      	ldr	r3, [pc, #184]	; (800de5c <__mdiff+0x10c>)
 800dda4:	4602      	mov	r2, r0
 800dda6:	f240 2145 	movw	r1, #581	; 0x245
 800ddaa:	e7e5      	b.n	800dd78 <__mdiff+0x28>
 800ddac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ddb0:	6926      	ldr	r6, [r4, #16]
 800ddb2:	60c5      	str	r5, [r0, #12]
 800ddb4:	f104 0914 	add.w	r9, r4, #20
 800ddb8:	f108 0514 	add.w	r5, r8, #20
 800ddbc:	f100 0e14 	add.w	lr, r0, #20
 800ddc0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ddc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ddc8:	f108 0210 	add.w	r2, r8, #16
 800ddcc:	46f2      	mov	sl, lr
 800ddce:	2100      	movs	r1, #0
 800ddd0:	f859 3b04 	ldr.w	r3, [r9], #4
 800ddd4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ddd8:	fa11 f88b 	uxtah	r8, r1, fp
 800dddc:	b299      	uxth	r1, r3
 800ddde:	0c1b      	lsrs	r3, r3, #16
 800dde0:	eba8 0801 	sub.w	r8, r8, r1
 800dde4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dde8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ddec:	fa1f f888 	uxth.w	r8, r8
 800ddf0:	1419      	asrs	r1, r3, #16
 800ddf2:	454e      	cmp	r6, r9
 800ddf4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ddf8:	f84a 3b04 	str.w	r3, [sl], #4
 800ddfc:	d8e8      	bhi.n	800ddd0 <__mdiff+0x80>
 800ddfe:	1b33      	subs	r3, r6, r4
 800de00:	3b15      	subs	r3, #21
 800de02:	f023 0303 	bic.w	r3, r3, #3
 800de06:	3304      	adds	r3, #4
 800de08:	3415      	adds	r4, #21
 800de0a:	42a6      	cmp	r6, r4
 800de0c:	bf38      	it	cc
 800de0e:	2304      	movcc	r3, #4
 800de10:	441d      	add	r5, r3
 800de12:	4473      	add	r3, lr
 800de14:	469e      	mov	lr, r3
 800de16:	462e      	mov	r6, r5
 800de18:	4566      	cmp	r6, ip
 800de1a:	d30e      	bcc.n	800de3a <__mdiff+0xea>
 800de1c:	f10c 0203 	add.w	r2, ip, #3
 800de20:	1b52      	subs	r2, r2, r5
 800de22:	f022 0203 	bic.w	r2, r2, #3
 800de26:	3d03      	subs	r5, #3
 800de28:	45ac      	cmp	ip, r5
 800de2a:	bf38      	it	cc
 800de2c:	2200      	movcc	r2, #0
 800de2e:	4413      	add	r3, r2
 800de30:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800de34:	b17a      	cbz	r2, 800de56 <__mdiff+0x106>
 800de36:	6107      	str	r7, [r0, #16]
 800de38:	e7a4      	b.n	800dd84 <__mdiff+0x34>
 800de3a:	f856 8b04 	ldr.w	r8, [r6], #4
 800de3e:	fa11 f288 	uxtah	r2, r1, r8
 800de42:	1414      	asrs	r4, r2, #16
 800de44:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800de48:	b292      	uxth	r2, r2
 800de4a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800de4e:	f84e 2b04 	str.w	r2, [lr], #4
 800de52:	1421      	asrs	r1, r4, #16
 800de54:	e7e0      	b.n	800de18 <__mdiff+0xc8>
 800de56:	3f01      	subs	r7, #1
 800de58:	e7ea      	b.n	800de30 <__mdiff+0xe0>
 800de5a:	bf00      	nop
 800de5c:	0800fb04 	.word	0x0800fb04
 800de60:	0800fb26 	.word	0x0800fb26

0800de64 <__d2b>:
 800de64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de68:	460f      	mov	r7, r1
 800de6a:	2101      	movs	r1, #1
 800de6c:	ec59 8b10 	vmov	r8, r9, d0
 800de70:	4616      	mov	r6, r2
 800de72:	f7ff fcd5 	bl	800d820 <_Balloc>
 800de76:	4604      	mov	r4, r0
 800de78:	b930      	cbnz	r0, 800de88 <__d2b+0x24>
 800de7a:	4602      	mov	r2, r0
 800de7c:	4b24      	ldr	r3, [pc, #144]	; (800df10 <__d2b+0xac>)
 800de7e:	4825      	ldr	r0, [pc, #148]	; (800df14 <__d2b+0xb0>)
 800de80:	f240 310f 	movw	r1, #783	; 0x30f
 800de84:	f000 fa52 	bl	800e32c <__assert_func>
 800de88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800de8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800de90:	bb2d      	cbnz	r5, 800dede <__d2b+0x7a>
 800de92:	9301      	str	r3, [sp, #4]
 800de94:	f1b8 0300 	subs.w	r3, r8, #0
 800de98:	d026      	beq.n	800dee8 <__d2b+0x84>
 800de9a:	4668      	mov	r0, sp
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	f7ff fd87 	bl	800d9b0 <__lo0bits>
 800dea2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dea6:	b1e8      	cbz	r0, 800dee4 <__d2b+0x80>
 800dea8:	f1c0 0320 	rsb	r3, r0, #32
 800deac:	fa02 f303 	lsl.w	r3, r2, r3
 800deb0:	430b      	orrs	r3, r1
 800deb2:	40c2      	lsrs	r2, r0
 800deb4:	6163      	str	r3, [r4, #20]
 800deb6:	9201      	str	r2, [sp, #4]
 800deb8:	9b01      	ldr	r3, [sp, #4]
 800deba:	61a3      	str	r3, [r4, #24]
 800debc:	2b00      	cmp	r3, #0
 800debe:	bf14      	ite	ne
 800dec0:	2202      	movne	r2, #2
 800dec2:	2201      	moveq	r2, #1
 800dec4:	6122      	str	r2, [r4, #16]
 800dec6:	b1bd      	cbz	r5, 800def8 <__d2b+0x94>
 800dec8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800decc:	4405      	add	r5, r0
 800dece:	603d      	str	r5, [r7, #0]
 800ded0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ded4:	6030      	str	r0, [r6, #0]
 800ded6:	4620      	mov	r0, r4
 800ded8:	b003      	add	sp, #12
 800deda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dee2:	e7d6      	b.n	800de92 <__d2b+0x2e>
 800dee4:	6161      	str	r1, [r4, #20]
 800dee6:	e7e7      	b.n	800deb8 <__d2b+0x54>
 800dee8:	a801      	add	r0, sp, #4
 800deea:	f7ff fd61 	bl	800d9b0 <__lo0bits>
 800deee:	9b01      	ldr	r3, [sp, #4]
 800def0:	6163      	str	r3, [r4, #20]
 800def2:	3020      	adds	r0, #32
 800def4:	2201      	movs	r2, #1
 800def6:	e7e5      	b.n	800dec4 <__d2b+0x60>
 800def8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800defc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df00:	6038      	str	r0, [r7, #0]
 800df02:	6918      	ldr	r0, [r3, #16]
 800df04:	f7ff fd34 	bl	800d970 <__hi0bits>
 800df08:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df0c:	e7e2      	b.n	800ded4 <__d2b+0x70>
 800df0e:	bf00      	nop
 800df10:	0800fb04 	.word	0x0800fb04
 800df14:	0800fb26 	.word	0x0800fb26

0800df18 <__sread>:
 800df18:	b510      	push	{r4, lr}
 800df1a:	460c      	mov	r4, r1
 800df1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df20:	f000 f9c2 	bl	800e2a8 <_read_r>
 800df24:	2800      	cmp	r0, #0
 800df26:	bfab      	itete	ge
 800df28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df2a:	89a3      	ldrhlt	r3, [r4, #12]
 800df2c:	181b      	addge	r3, r3, r0
 800df2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df32:	bfac      	ite	ge
 800df34:	6563      	strge	r3, [r4, #84]	; 0x54
 800df36:	81a3      	strhlt	r3, [r4, #12]
 800df38:	bd10      	pop	{r4, pc}

0800df3a <__swrite>:
 800df3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df3e:	461f      	mov	r7, r3
 800df40:	898b      	ldrh	r3, [r1, #12]
 800df42:	05db      	lsls	r3, r3, #23
 800df44:	4605      	mov	r5, r0
 800df46:	460c      	mov	r4, r1
 800df48:	4616      	mov	r6, r2
 800df4a:	d505      	bpl.n	800df58 <__swrite+0x1e>
 800df4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df50:	2302      	movs	r3, #2
 800df52:	2200      	movs	r2, #0
 800df54:	f000 f996 	bl	800e284 <_lseek_r>
 800df58:	89a3      	ldrh	r3, [r4, #12]
 800df5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df62:	81a3      	strh	r3, [r4, #12]
 800df64:	4632      	mov	r2, r6
 800df66:	463b      	mov	r3, r7
 800df68:	4628      	mov	r0, r5
 800df6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df6e:	f000 b9bd 	b.w	800e2ec <_write_r>

0800df72 <__sseek>:
 800df72:	b510      	push	{r4, lr}
 800df74:	460c      	mov	r4, r1
 800df76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df7a:	f000 f983 	bl	800e284 <_lseek_r>
 800df7e:	1c43      	adds	r3, r0, #1
 800df80:	89a3      	ldrh	r3, [r4, #12]
 800df82:	bf15      	itete	ne
 800df84:	6560      	strne	r0, [r4, #84]	; 0x54
 800df86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df8e:	81a3      	strheq	r3, [r4, #12]
 800df90:	bf18      	it	ne
 800df92:	81a3      	strhne	r3, [r4, #12]
 800df94:	bd10      	pop	{r4, pc}

0800df96 <__sclose>:
 800df96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df9a:	f000 b941 	b.w	800e220 <_close_r>

0800df9e <_realloc_r>:
 800df9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa2:	4680      	mov	r8, r0
 800dfa4:	4614      	mov	r4, r2
 800dfa6:	460e      	mov	r6, r1
 800dfa8:	b921      	cbnz	r1, 800dfb4 <_realloc_r+0x16>
 800dfaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfae:	4611      	mov	r1, r2
 800dfb0:	f7ff bafc 	b.w	800d5ac <_malloc_r>
 800dfb4:	b92a      	cbnz	r2, 800dfc2 <_realloc_r+0x24>
 800dfb6:	f000 f9ed 	bl	800e394 <_free_r>
 800dfba:	4625      	mov	r5, r4
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc2:	f000 fa45 	bl	800e450 <_malloc_usable_size_r>
 800dfc6:	4284      	cmp	r4, r0
 800dfc8:	4607      	mov	r7, r0
 800dfca:	d802      	bhi.n	800dfd2 <_realloc_r+0x34>
 800dfcc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfd0:	d812      	bhi.n	800dff8 <_realloc_r+0x5a>
 800dfd2:	4621      	mov	r1, r4
 800dfd4:	4640      	mov	r0, r8
 800dfd6:	f7ff fae9 	bl	800d5ac <_malloc_r>
 800dfda:	4605      	mov	r5, r0
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d0ed      	beq.n	800dfbc <_realloc_r+0x1e>
 800dfe0:	42bc      	cmp	r4, r7
 800dfe2:	4622      	mov	r2, r4
 800dfe4:	4631      	mov	r1, r6
 800dfe6:	bf28      	it	cs
 800dfe8:	463a      	movcs	r2, r7
 800dfea:	f000 f991 	bl	800e310 <memcpy>
 800dfee:	4631      	mov	r1, r6
 800dff0:	4640      	mov	r0, r8
 800dff2:	f000 f9cf 	bl	800e394 <_free_r>
 800dff6:	e7e1      	b.n	800dfbc <_realloc_r+0x1e>
 800dff8:	4635      	mov	r5, r6
 800dffa:	e7df      	b.n	800dfbc <_realloc_r+0x1e>

0800dffc <__swbuf_r>:
 800dffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dffe:	460e      	mov	r6, r1
 800e000:	4614      	mov	r4, r2
 800e002:	4605      	mov	r5, r0
 800e004:	b118      	cbz	r0, 800e00e <__swbuf_r+0x12>
 800e006:	6a03      	ldr	r3, [r0, #32]
 800e008:	b90b      	cbnz	r3, 800e00e <__swbuf_r+0x12>
 800e00a:	f7fe f8b3 	bl	800c174 <__sinit>
 800e00e:	69a3      	ldr	r3, [r4, #24]
 800e010:	60a3      	str	r3, [r4, #8]
 800e012:	89a3      	ldrh	r3, [r4, #12]
 800e014:	071a      	lsls	r2, r3, #28
 800e016:	d525      	bpl.n	800e064 <__swbuf_r+0x68>
 800e018:	6923      	ldr	r3, [r4, #16]
 800e01a:	b31b      	cbz	r3, 800e064 <__swbuf_r+0x68>
 800e01c:	6823      	ldr	r3, [r4, #0]
 800e01e:	6922      	ldr	r2, [r4, #16]
 800e020:	1a98      	subs	r0, r3, r2
 800e022:	6963      	ldr	r3, [r4, #20]
 800e024:	b2f6      	uxtb	r6, r6
 800e026:	4283      	cmp	r3, r0
 800e028:	4637      	mov	r7, r6
 800e02a:	dc04      	bgt.n	800e036 <__swbuf_r+0x3a>
 800e02c:	4621      	mov	r1, r4
 800e02e:	4628      	mov	r0, r5
 800e030:	f7ff fbc2 	bl	800d7b8 <_fflush_r>
 800e034:	b9e0      	cbnz	r0, 800e070 <__swbuf_r+0x74>
 800e036:	68a3      	ldr	r3, [r4, #8]
 800e038:	3b01      	subs	r3, #1
 800e03a:	60a3      	str	r3, [r4, #8]
 800e03c:	6823      	ldr	r3, [r4, #0]
 800e03e:	1c5a      	adds	r2, r3, #1
 800e040:	6022      	str	r2, [r4, #0]
 800e042:	701e      	strb	r6, [r3, #0]
 800e044:	6962      	ldr	r2, [r4, #20]
 800e046:	1c43      	adds	r3, r0, #1
 800e048:	429a      	cmp	r2, r3
 800e04a:	d004      	beq.n	800e056 <__swbuf_r+0x5a>
 800e04c:	89a3      	ldrh	r3, [r4, #12]
 800e04e:	07db      	lsls	r3, r3, #31
 800e050:	d506      	bpl.n	800e060 <__swbuf_r+0x64>
 800e052:	2e0a      	cmp	r6, #10
 800e054:	d104      	bne.n	800e060 <__swbuf_r+0x64>
 800e056:	4621      	mov	r1, r4
 800e058:	4628      	mov	r0, r5
 800e05a:	f7ff fbad 	bl	800d7b8 <_fflush_r>
 800e05e:	b938      	cbnz	r0, 800e070 <__swbuf_r+0x74>
 800e060:	4638      	mov	r0, r7
 800e062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e064:	4621      	mov	r1, r4
 800e066:	4628      	mov	r0, r5
 800e068:	f000 f806 	bl	800e078 <__swsetup_r>
 800e06c:	2800      	cmp	r0, #0
 800e06e:	d0d5      	beq.n	800e01c <__swbuf_r+0x20>
 800e070:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e074:	e7f4      	b.n	800e060 <__swbuf_r+0x64>
	...

0800e078 <__swsetup_r>:
 800e078:	b538      	push	{r3, r4, r5, lr}
 800e07a:	4b2a      	ldr	r3, [pc, #168]	; (800e124 <__swsetup_r+0xac>)
 800e07c:	4605      	mov	r5, r0
 800e07e:	6818      	ldr	r0, [r3, #0]
 800e080:	460c      	mov	r4, r1
 800e082:	b118      	cbz	r0, 800e08c <__swsetup_r+0x14>
 800e084:	6a03      	ldr	r3, [r0, #32]
 800e086:	b90b      	cbnz	r3, 800e08c <__swsetup_r+0x14>
 800e088:	f7fe f874 	bl	800c174 <__sinit>
 800e08c:	89a3      	ldrh	r3, [r4, #12]
 800e08e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e092:	0718      	lsls	r0, r3, #28
 800e094:	d422      	bmi.n	800e0dc <__swsetup_r+0x64>
 800e096:	06d9      	lsls	r1, r3, #27
 800e098:	d407      	bmi.n	800e0aa <__swsetup_r+0x32>
 800e09a:	2309      	movs	r3, #9
 800e09c:	602b      	str	r3, [r5, #0]
 800e09e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e0a2:	81a3      	strh	r3, [r4, #12]
 800e0a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0a8:	e034      	b.n	800e114 <__swsetup_r+0x9c>
 800e0aa:	0758      	lsls	r0, r3, #29
 800e0ac:	d512      	bpl.n	800e0d4 <__swsetup_r+0x5c>
 800e0ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0b0:	b141      	cbz	r1, 800e0c4 <__swsetup_r+0x4c>
 800e0b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0b6:	4299      	cmp	r1, r3
 800e0b8:	d002      	beq.n	800e0c0 <__swsetup_r+0x48>
 800e0ba:	4628      	mov	r0, r5
 800e0bc:	f000 f96a 	bl	800e394 <_free_r>
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	6363      	str	r3, [r4, #52]	; 0x34
 800e0c4:	89a3      	ldrh	r3, [r4, #12]
 800e0c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0ca:	81a3      	strh	r3, [r4, #12]
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	6063      	str	r3, [r4, #4]
 800e0d0:	6923      	ldr	r3, [r4, #16]
 800e0d2:	6023      	str	r3, [r4, #0]
 800e0d4:	89a3      	ldrh	r3, [r4, #12]
 800e0d6:	f043 0308 	orr.w	r3, r3, #8
 800e0da:	81a3      	strh	r3, [r4, #12]
 800e0dc:	6923      	ldr	r3, [r4, #16]
 800e0de:	b94b      	cbnz	r3, 800e0f4 <__swsetup_r+0x7c>
 800e0e0:	89a3      	ldrh	r3, [r4, #12]
 800e0e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0ea:	d003      	beq.n	800e0f4 <__swsetup_r+0x7c>
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	f000 f840 	bl	800e174 <__smakebuf_r>
 800e0f4:	89a0      	ldrh	r0, [r4, #12]
 800e0f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0fa:	f010 0301 	ands.w	r3, r0, #1
 800e0fe:	d00a      	beq.n	800e116 <__swsetup_r+0x9e>
 800e100:	2300      	movs	r3, #0
 800e102:	60a3      	str	r3, [r4, #8]
 800e104:	6963      	ldr	r3, [r4, #20]
 800e106:	425b      	negs	r3, r3
 800e108:	61a3      	str	r3, [r4, #24]
 800e10a:	6923      	ldr	r3, [r4, #16]
 800e10c:	b943      	cbnz	r3, 800e120 <__swsetup_r+0xa8>
 800e10e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e112:	d1c4      	bne.n	800e09e <__swsetup_r+0x26>
 800e114:	bd38      	pop	{r3, r4, r5, pc}
 800e116:	0781      	lsls	r1, r0, #30
 800e118:	bf58      	it	pl
 800e11a:	6963      	ldrpl	r3, [r4, #20]
 800e11c:	60a3      	str	r3, [r4, #8]
 800e11e:	e7f4      	b.n	800e10a <__swsetup_r+0x92>
 800e120:	2000      	movs	r0, #0
 800e122:	e7f7      	b.n	800e114 <__swsetup_r+0x9c>
 800e124:	20000080 	.word	0x20000080

0800e128 <__swhatbuf_r>:
 800e128:	b570      	push	{r4, r5, r6, lr}
 800e12a:	460c      	mov	r4, r1
 800e12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e130:	2900      	cmp	r1, #0
 800e132:	b096      	sub	sp, #88	; 0x58
 800e134:	4615      	mov	r5, r2
 800e136:	461e      	mov	r6, r3
 800e138:	da0d      	bge.n	800e156 <__swhatbuf_r+0x2e>
 800e13a:	89a3      	ldrh	r3, [r4, #12]
 800e13c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e140:	f04f 0100 	mov.w	r1, #0
 800e144:	bf0c      	ite	eq
 800e146:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e14a:	2340      	movne	r3, #64	; 0x40
 800e14c:	2000      	movs	r0, #0
 800e14e:	6031      	str	r1, [r6, #0]
 800e150:	602b      	str	r3, [r5, #0]
 800e152:	b016      	add	sp, #88	; 0x58
 800e154:	bd70      	pop	{r4, r5, r6, pc}
 800e156:	466a      	mov	r2, sp
 800e158:	f000 f872 	bl	800e240 <_fstat_r>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	dbec      	blt.n	800e13a <__swhatbuf_r+0x12>
 800e160:	9901      	ldr	r1, [sp, #4]
 800e162:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e166:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e16a:	4259      	negs	r1, r3
 800e16c:	4159      	adcs	r1, r3
 800e16e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e172:	e7eb      	b.n	800e14c <__swhatbuf_r+0x24>

0800e174 <__smakebuf_r>:
 800e174:	898b      	ldrh	r3, [r1, #12]
 800e176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e178:	079d      	lsls	r5, r3, #30
 800e17a:	4606      	mov	r6, r0
 800e17c:	460c      	mov	r4, r1
 800e17e:	d507      	bpl.n	800e190 <__smakebuf_r+0x1c>
 800e180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	6123      	str	r3, [r4, #16]
 800e188:	2301      	movs	r3, #1
 800e18a:	6163      	str	r3, [r4, #20]
 800e18c:	b002      	add	sp, #8
 800e18e:	bd70      	pop	{r4, r5, r6, pc}
 800e190:	ab01      	add	r3, sp, #4
 800e192:	466a      	mov	r2, sp
 800e194:	f7ff ffc8 	bl	800e128 <__swhatbuf_r>
 800e198:	9900      	ldr	r1, [sp, #0]
 800e19a:	4605      	mov	r5, r0
 800e19c:	4630      	mov	r0, r6
 800e19e:	f7ff fa05 	bl	800d5ac <_malloc_r>
 800e1a2:	b948      	cbnz	r0, 800e1b8 <__smakebuf_r+0x44>
 800e1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a8:	059a      	lsls	r2, r3, #22
 800e1aa:	d4ef      	bmi.n	800e18c <__smakebuf_r+0x18>
 800e1ac:	f023 0303 	bic.w	r3, r3, #3
 800e1b0:	f043 0302 	orr.w	r3, r3, #2
 800e1b4:	81a3      	strh	r3, [r4, #12]
 800e1b6:	e7e3      	b.n	800e180 <__smakebuf_r+0xc>
 800e1b8:	89a3      	ldrh	r3, [r4, #12]
 800e1ba:	6020      	str	r0, [r4, #0]
 800e1bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1c0:	81a3      	strh	r3, [r4, #12]
 800e1c2:	9b00      	ldr	r3, [sp, #0]
 800e1c4:	6163      	str	r3, [r4, #20]
 800e1c6:	9b01      	ldr	r3, [sp, #4]
 800e1c8:	6120      	str	r0, [r4, #16]
 800e1ca:	b15b      	cbz	r3, 800e1e4 <__smakebuf_r+0x70>
 800e1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	f000 f847 	bl	800e264 <_isatty_r>
 800e1d6:	b128      	cbz	r0, 800e1e4 <__smakebuf_r+0x70>
 800e1d8:	89a3      	ldrh	r3, [r4, #12]
 800e1da:	f023 0303 	bic.w	r3, r3, #3
 800e1de:	f043 0301 	orr.w	r3, r3, #1
 800e1e2:	81a3      	strh	r3, [r4, #12]
 800e1e4:	89a3      	ldrh	r3, [r4, #12]
 800e1e6:	431d      	orrs	r5, r3
 800e1e8:	81a5      	strh	r5, [r4, #12]
 800e1ea:	e7cf      	b.n	800e18c <__smakebuf_r+0x18>

0800e1ec <memmove>:
 800e1ec:	4288      	cmp	r0, r1
 800e1ee:	b510      	push	{r4, lr}
 800e1f0:	eb01 0402 	add.w	r4, r1, r2
 800e1f4:	d902      	bls.n	800e1fc <memmove+0x10>
 800e1f6:	4284      	cmp	r4, r0
 800e1f8:	4623      	mov	r3, r4
 800e1fa:	d807      	bhi.n	800e20c <memmove+0x20>
 800e1fc:	1e43      	subs	r3, r0, #1
 800e1fe:	42a1      	cmp	r1, r4
 800e200:	d008      	beq.n	800e214 <memmove+0x28>
 800e202:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e206:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e20a:	e7f8      	b.n	800e1fe <memmove+0x12>
 800e20c:	4402      	add	r2, r0
 800e20e:	4601      	mov	r1, r0
 800e210:	428a      	cmp	r2, r1
 800e212:	d100      	bne.n	800e216 <memmove+0x2a>
 800e214:	bd10      	pop	{r4, pc}
 800e216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e21a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e21e:	e7f7      	b.n	800e210 <memmove+0x24>

0800e220 <_close_r>:
 800e220:	b538      	push	{r3, r4, r5, lr}
 800e222:	4d06      	ldr	r5, [pc, #24]	; (800e23c <_close_r+0x1c>)
 800e224:	2300      	movs	r3, #0
 800e226:	4604      	mov	r4, r0
 800e228:	4608      	mov	r0, r1
 800e22a:	602b      	str	r3, [r5, #0]
 800e22c:	f7f4 feb7 	bl	8002f9e <_close>
 800e230:	1c43      	adds	r3, r0, #1
 800e232:	d102      	bne.n	800e23a <_close_r+0x1a>
 800e234:	682b      	ldr	r3, [r5, #0]
 800e236:	b103      	cbz	r3, 800e23a <_close_r+0x1a>
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	bd38      	pop	{r3, r4, r5, pc}
 800e23c:	2000104c 	.word	0x2000104c

0800e240 <_fstat_r>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4d07      	ldr	r5, [pc, #28]	; (800e260 <_fstat_r+0x20>)
 800e244:	2300      	movs	r3, #0
 800e246:	4604      	mov	r4, r0
 800e248:	4608      	mov	r0, r1
 800e24a:	4611      	mov	r1, r2
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	f7f4 feb2 	bl	8002fb6 <_fstat>
 800e252:	1c43      	adds	r3, r0, #1
 800e254:	d102      	bne.n	800e25c <_fstat_r+0x1c>
 800e256:	682b      	ldr	r3, [r5, #0]
 800e258:	b103      	cbz	r3, 800e25c <_fstat_r+0x1c>
 800e25a:	6023      	str	r3, [r4, #0]
 800e25c:	bd38      	pop	{r3, r4, r5, pc}
 800e25e:	bf00      	nop
 800e260:	2000104c 	.word	0x2000104c

0800e264 <_isatty_r>:
 800e264:	b538      	push	{r3, r4, r5, lr}
 800e266:	4d06      	ldr	r5, [pc, #24]	; (800e280 <_isatty_r+0x1c>)
 800e268:	2300      	movs	r3, #0
 800e26a:	4604      	mov	r4, r0
 800e26c:	4608      	mov	r0, r1
 800e26e:	602b      	str	r3, [r5, #0]
 800e270:	f7f4 feb1 	bl	8002fd6 <_isatty>
 800e274:	1c43      	adds	r3, r0, #1
 800e276:	d102      	bne.n	800e27e <_isatty_r+0x1a>
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	b103      	cbz	r3, 800e27e <_isatty_r+0x1a>
 800e27c:	6023      	str	r3, [r4, #0]
 800e27e:	bd38      	pop	{r3, r4, r5, pc}
 800e280:	2000104c 	.word	0x2000104c

0800e284 <_lseek_r>:
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	4d07      	ldr	r5, [pc, #28]	; (800e2a4 <_lseek_r+0x20>)
 800e288:	4604      	mov	r4, r0
 800e28a:	4608      	mov	r0, r1
 800e28c:	4611      	mov	r1, r2
 800e28e:	2200      	movs	r2, #0
 800e290:	602a      	str	r2, [r5, #0]
 800e292:	461a      	mov	r2, r3
 800e294:	f7f4 feaa 	bl	8002fec <_lseek>
 800e298:	1c43      	adds	r3, r0, #1
 800e29a:	d102      	bne.n	800e2a2 <_lseek_r+0x1e>
 800e29c:	682b      	ldr	r3, [r5, #0]
 800e29e:	b103      	cbz	r3, 800e2a2 <_lseek_r+0x1e>
 800e2a0:	6023      	str	r3, [r4, #0]
 800e2a2:	bd38      	pop	{r3, r4, r5, pc}
 800e2a4:	2000104c 	.word	0x2000104c

0800e2a8 <_read_r>:
 800e2a8:	b538      	push	{r3, r4, r5, lr}
 800e2aa:	4d07      	ldr	r5, [pc, #28]	; (800e2c8 <_read_r+0x20>)
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	4608      	mov	r0, r1
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	602a      	str	r2, [r5, #0]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	f7f4 fe54 	bl	8002f64 <_read>
 800e2bc:	1c43      	adds	r3, r0, #1
 800e2be:	d102      	bne.n	800e2c6 <_read_r+0x1e>
 800e2c0:	682b      	ldr	r3, [r5, #0]
 800e2c2:	b103      	cbz	r3, 800e2c6 <_read_r+0x1e>
 800e2c4:	6023      	str	r3, [r4, #0]
 800e2c6:	bd38      	pop	{r3, r4, r5, pc}
 800e2c8:	2000104c 	.word	0x2000104c

0800e2cc <_sbrk_r>:
 800e2cc:	b538      	push	{r3, r4, r5, lr}
 800e2ce:	4d06      	ldr	r5, [pc, #24]	; (800e2e8 <_sbrk_r+0x1c>)
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	4608      	mov	r0, r1
 800e2d6:	602b      	str	r3, [r5, #0]
 800e2d8:	f7f4 fe96 	bl	8003008 <_sbrk>
 800e2dc:	1c43      	adds	r3, r0, #1
 800e2de:	d102      	bne.n	800e2e6 <_sbrk_r+0x1a>
 800e2e0:	682b      	ldr	r3, [r5, #0]
 800e2e2:	b103      	cbz	r3, 800e2e6 <_sbrk_r+0x1a>
 800e2e4:	6023      	str	r3, [r4, #0]
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	2000104c 	.word	0x2000104c

0800e2ec <_write_r>:
 800e2ec:	b538      	push	{r3, r4, r5, lr}
 800e2ee:	4d07      	ldr	r5, [pc, #28]	; (800e30c <_write_r+0x20>)
 800e2f0:	4604      	mov	r4, r0
 800e2f2:	4608      	mov	r0, r1
 800e2f4:	4611      	mov	r1, r2
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	602a      	str	r2, [r5, #0]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	f7f4 fc20 	bl	8002b40 <_write>
 800e300:	1c43      	adds	r3, r0, #1
 800e302:	d102      	bne.n	800e30a <_write_r+0x1e>
 800e304:	682b      	ldr	r3, [r5, #0]
 800e306:	b103      	cbz	r3, 800e30a <_write_r+0x1e>
 800e308:	6023      	str	r3, [r4, #0]
 800e30a:	bd38      	pop	{r3, r4, r5, pc}
 800e30c:	2000104c 	.word	0x2000104c

0800e310 <memcpy>:
 800e310:	440a      	add	r2, r1
 800e312:	4291      	cmp	r1, r2
 800e314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e318:	d100      	bne.n	800e31c <memcpy+0xc>
 800e31a:	4770      	bx	lr
 800e31c:	b510      	push	{r4, lr}
 800e31e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e322:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e326:	4291      	cmp	r1, r2
 800e328:	d1f9      	bne.n	800e31e <memcpy+0xe>
 800e32a:	bd10      	pop	{r4, pc}

0800e32c <__assert_func>:
 800e32c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e32e:	4614      	mov	r4, r2
 800e330:	461a      	mov	r2, r3
 800e332:	4b09      	ldr	r3, [pc, #36]	; (800e358 <__assert_func+0x2c>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4605      	mov	r5, r0
 800e338:	68d8      	ldr	r0, [r3, #12]
 800e33a:	b14c      	cbz	r4, 800e350 <__assert_func+0x24>
 800e33c:	4b07      	ldr	r3, [pc, #28]	; (800e35c <__assert_func+0x30>)
 800e33e:	9100      	str	r1, [sp, #0]
 800e340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e344:	4906      	ldr	r1, [pc, #24]	; (800e360 <__assert_func+0x34>)
 800e346:	462b      	mov	r3, r5
 800e348:	f000 f88a 	bl	800e460 <fiprintf>
 800e34c:	f000 f8a7 	bl	800e49e <abort>
 800e350:	4b04      	ldr	r3, [pc, #16]	; (800e364 <__assert_func+0x38>)
 800e352:	461c      	mov	r4, r3
 800e354:	e7f3      	b.n	800e33e <__assert_func+0x12>
 800e356:	bf00      	nop
 800e358:	20000080 	.word	0x20000080
 800e35c:	0800fd87 	.word	0x0800fd87
 800e360:	0800fd94 	.word	0x0800fd94
 800e364:	0800fdc2 	.word	0x0800fdc2

0800e368 <_calloc_r>:
 800e368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e36a:	fba1 2402 	umull	r2, r4, r1, r2
 800e36e:	b94c      	cbnz	r4, 800e384 <_calloc_r+0x1c>
 800e370:	4611      	mov	r1, r2
 800e372:	9201      	str	r2, [sp, #4]
 800e374:	f7ff f91a 	bl	800d5ac <_malloc_r>
 800e378:	9a01      	ldr	r2, [sp, #4]
 800e37a:	4605      	mov	r5, r0
 800e37c:	b930      	cbnz	r0, 800e38c <_calloc_r+0x24>
 800e37e:	4628      	mov	r0, r5
 800e380:	b003      	add	sp, #12
 800e382:	bd30      	pop	{r4, r5, pc}
 800e384:	220c      	movs	r2, #12
 800e386:	6002      	str	r2, [r0, #0]
 800e388:	2500      	movs	r5, #0
 800e38a:	e7f8      	b.n	800e37e <_calloc_r+0x16>
 800e38c:	4621      	mov	r1, r4
 800e38e:	f7fd ff95 	bl	800c2bc <memset>
 800e392:	e7f4      	b.n	800e37e <_calloc_r+0x16>

0800e394 <_free_r>:
 800e394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e396:	2900      	cmp	r1, #0
 800e398:	d044      	beq.n	800e424 <_free_r+0x90>
 800e39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e39e:	9001      	str	r0, [sp, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f1a1 0404 	sub.w	r4, r1, #4
 800e3a6:	bfb8      	it	lt
 800e3a8:	18e4      	addlt	r4, r4, r3
 800e3aa:	f7ff fa2d 	bl	800d808 <__malloc_lock>
 800e3ae:	4a1e      	ldr	r2, [pc, #120]	; (800e428 <_free_r+0x94>)
 800e3b0:	9801      	ldr	r0, [sp, #4]
 800e3b2:	6813      	ldr	r3, [r2, #0]
 800e3b4:	b933      	cbnz	r3, 800e3c4 <_free_r+0x30>
 800e3b6:	6063      	str	r3, [r4, #4]
 800e3b8:	6014      	str	r4, [r2, #0]
 800e3ba:	b003      	add	sp, #12
 800e3bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3c0:	f7ff ba28 	b.w	800d814 <__malloc_unlock>
 800e3c4:	42a3      	cmp	r3, r4
 800e3c6:	d908      	bls.n	800e3da <_free_r+0x46>
 800e3c8:	6825      	ldr	r5, [r4, #0]
 800e3ca:	1961      	adds	r1, r4, r5
 800e3cc:	428b      	cmp	r3, r1
 800e3ce:	bf01      	itttt	eq
 800e3d0:	6819      	ldreq	r1, [r3, #0]
 800e3d2:	685b      	ldreq	r3, [r3, #4]
 800e3d4:	1949      	addeq	r1, r1, r5
 800e3d6:	6021      	streq	r1, [r4, #0]
 800e3d8:	e7ed      	b.n	800e3b6 <_free_r+0x22>
 800e3da:	461a      	mov	r2, r3
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	b10b      	cbz	r3, 800e3e4 <_free_r+0x50>
 800e3e0:	42a3      	cmp	r3, r4
 800e3e2:	d9fa      	bls.n	800e3da <_free_r+0x46>
 800e3e4:	6811      	ldr	r1, [r2, #0]
 800e3e6:	1855      	adds	r5, r2, r1
 800e3e8:	42a5      	cmp	r5, r4
 800e3ea:	d10b      	bne.n	800e404 <_free_r+0x70>
 800e3ec:	6824      	ldr	r4, [r4, #0]
 800e3ee:	4421      	add	r1, r4
 800e3f0:	1854      	adds	r4, r2, r1
 800e3f2:	42a3      	cmp	r3, r4
 800e3f4:	6011      	str	r1, [r2, #0]
 800e3f6:	d1e0      	bne.n	800e3ba <_free_r+0x26>
 800e3f8:	681c      	ldr	r4, [r3, #0]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	6053      	str	r3, [r2, #4]
 800e3fe:	440c      	add	r4, r1
 800e400:	6014      	str	r4, [r2, #0]
 800e402:	e7da      	b.n	800e3ba <_free_r+0x26>
 800e404:	d902      	bls.n	800e40c <_free_r+0x78>
 800e406:	230c      	movs	r3, #12
 800e408:	6003      	str	r3, [r0, #0]
 800e40a:	e7d6      	b.n	800e3ba <_free_r+0x26>
 800e40c:	6825      	ldr	r5, [r4, #0]
 800e40e:	1961      	adds	r1, r4, r5
 800e410:	428b      	cmp	r3, r1
 800e412:	bf04      	itt	eq
 800e414:	6819      	ldreq	r1, [r3, #0]
 800e416:	685b      	ldreq	r3, [r3, #4]
 800e418:	6063      	str	r3, [r4, #4]
 800e41a:	bf04      	itt	eq
 800e41c:	1949      	addeq	r1, r1, r5
 800e41e:	6021      	streq	r1, [r4, #0]
 800e420:	6054      	str	r4, [r2, #4]
 800e422:	e7ca      	b.n	800e3ba <_free_r+0x26>
 800e424:	b003      	add	sp, #12
 800e426:	bd30      	pop	{r4, r5, pc}
 800e428:	20001044 	.word	0x20001044

0800e42c <__ascii_mbtowc>:
 800e42c:	b082      	sub	sp, #8
 800e42e:	b901      	cbnz	r1, 800e432 <__ascii_mbtowc+0x6>
 800e430:	a901      	add	r1, sp, #4
 800e432:	b142      	cbz	r2, 800e446 <__ascii_mbtowc+0x1a>
 800e434:	b14b      	cbz	r3, 800e44a <__ascii_mbtowc+0x1e>
 800e436:	7813      	ldrb	r3, [r2, #0]
 800e438:	600b      	str	r3, [r1, #0]
 800e43a:	7812      	ldrb	r2, [r2, #0]
 800e43c:	1e10      	subs	r0, r2, #0
 800e43e:	bf18      	it	ne
 800e440:	2001      	movne	r0, #1
 800e442:	b002      	add	sp, #8
 800e444:	4770      	bx	lr
 800e446:	4610      	mov	r0, r2
 800e448:	e7fb      	b.n	800e442 <__ascii_mbtowc+0x16>
 800e44a:	f06f 0001 	mvn.w	r0, #1
 800e44e:	e7f8      	b.n	800e442 <__ascii_mbtowc+0x16>

0800e450 <_malloc_usable_size_r>:
 800e450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e454:	1f18      	subs	r0, r3, #4
 800e456:	2b00      	cmp	r3, #0
 800e458:	bfbc      	itt	lt
 800e45a:	580b      	ldrlt	r3, [r1, r0]
 800e45c:	18c0      	addlt	r0, r0, r3
 800e45e:	4770      	bx	lr

0800e460 <fiprintf>:
 800e460:	b40e      	push	{r1, r2, r3}
 800e462:	b503      	push	{r0, r1, lr}
 800e464:	4601      	mov	r1, r0
 800e466:	ab03      	add	r3, sp, #12
 800e468:	4805      	ldr	r0, [pc, #20]	; (800e480 <fiprintf+0x20>)
 800e46a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e46e:	6800      	ldr	r0, [r0, #0]
 800e470:	9301      	str	r3, [sp, #4]
 800e472:	f7fe ff59 	bl	800d328 <_vfiprintf_r>
 800e476:	b002      	add	sp, #8
 800e478:	f85d eb04 	ldr.w	lr, [sp], #4
 800e47c:	b003      	add	sp, #12
 800e47e:	4770      	bx	lr
 800e480:	20000080 	.word	0x20000080

0800e484 <__ascii_wctomb>:
 800e484:	b149      	cbz	r1, 800e49a <__ascii_wctomb+0x16>
 800e486:	2aff      	cmp	r2, #255	; 0xff
 800e488:	bf85      	ittet	hi
 800e48a:	238a      	movhi	r3, #138	; 0x8a
 800e48c:	6003      	strhi	r3, [r0, #0]
 800e48e:	700a      	strbls	r2, [r1, #0]
 800e490:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e494:	bf98      	it	ls
 800e496:	2001      	movls	r0, #1
 800e498:	4770      	bx	lr
 800e49a:	4608      	mov	r0, r1
 800e49c:	4770      	bx	lr

0800e49e <abort>:
 800e49e:	b508      	push	{r3, lr}
 800e4a0:	2006      	movs	r0, #6
 800e4a2:	f000 f82b 	bl	800e4fc <raise>
 800e4a6:	2001      	movs	r0, #1
 800e4a8:	f7f4 fd52 	bl	8002f50 <_exit>

0800e4ac <_raise_r>:
 800e4ac:	291f      	cmp	r1, #31
 800e4ae:	b538      	push	{r3, r4, r5, lr}
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	460d      	mov	r5, r1
 800e4b4:	d904      	bls.n	800e4c0 <_raise_r+0x14>
 800e4b6:	2316      	movs	r3, #22
 800e4b8:	6003      	str	r3, [r0, #0]
 800e4ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4be:	bd38      	pop	{r3, r4, r5, pc}
 800e4c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e4c2:	b112      	cbz	r2, 800e4ca <_raise_r+0x1e>
 800e4c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4c8:	b94b      	cbnz	r3, 800e4de <_raise_r+0x32>
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	f000 f830 	bl	800e530 <_getpid_r>
 800e4d0:	462a      	mov	r2, r5
 800e4d2:	4601      	mov	r1, r0
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4da:	f000 b817 	b.w	800e50c <_kill_r>
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d00a      	beq.n	800e4f8 <_raise_r+0x4c>
 800e4e2:	1c59      	adds	r1, r3, #1
 800e4e4:	d103      	bne.n	800e4ee <_raise_r+0x42>
 800e4e6:	2316      	movs	r3, #22
 800e4e8:	6003      	str	r3, [r0, #0]
 800e4ea:	2001      	movs	r0, #1
 800e4ec:	e7e7      	b.n	800e4be <_raise_r+0x12>
 800e4ee:	2400      	movs	r4, #0
 800e4f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	4798      	blx	r3
 800e4f8:	2000      	movs	r0, #0
 800e4fa:	e7e0      	b.n	800e4be <_raise_r+0x12>

0800e4fc <raise>:
 800e4fc:	4b02      	ldr	r3, [pc, #8]	; (800e508 <raise+0xc>)
 800e4fe:	4601      	mov	r1, r0
 800e500:	6818      	ldr	r0, [r3, #0]
 800e502:	f7ff bfd3 	b.w	800e4ac <_raise_r>
 800e506:	bf00      	nop
 800e508:	20000080 	.word	0x20000080

0800e50c <_kill_r>:
 800e50c:	b538      	push	{r3, r4, r5, lr}
 800e50e:	4d07      	ldr	r5, [pc, #28]	; (800e52c <_kill_r+0x20>)
 800e510:	2300      	movs	r3, #0
 800e512:	4604      	mov	r4, r0
 800e514:	4608      	mov	r0, r1
 800e516:	4611      	mov	r1, r2
 800e518:	602b      	str	r3, [r5, #0]
 800e51a:	f7f4 fd09 	bl	8002f30 <_kill>
 800e51e:	1c43      	adds	r3, r0, #1
 800e520:	d102      	bne.n	800e528 <_kill_r+0x1c>
 800e522:	682b      	ldr	r3, [r5, #0]
 800e524:	b103      	cbz	r3, 800e528 <_kill_r+0x1c>
 800e526:	6023      	str	r3, [r4, #0]
 800e528:	bd38      	pop	{r3, r4, r5, pc}
 800e52a:	bf00      	nop
 800e52c:	2000104c 	.word	0x2000104c

0800e530 <_getpid_r>:
 800e530:	f7f4 bcf6 	b.w	8002f20 <_getpid>

0800e534 <pow>:
 800e534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e536:	ed2d 8b02 	vpush	{d8}
 800e53a:	eeb0 8a40 	vmov.f32	s16, s0
 800e53e:	eef0 8a60 	vmov.f32	s17, s1
 800e542:	ec55 4b11 	vmov	r4, r5, d1
 800e546:	f000 f873 	bl	800e630 <__ieee754_pow>
 800e54a:	4622      	mov	r2, r4
 800e54c:	462b      	mov	r3, r5
 800e54e:	4620      	mov	r0, r4
 800e550:	4629      	mov	r1, r5
 800e552:	ec57 6b10 	vmov	r6, r7, d0
 800e556:	f7f2 fae9 	bl	8000b2c <__aeabi_dcmpun>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	d13b      	bne.n	800e5d6 <pow+0xa2>
 800e55e:	ec51 0b18 	vmov	r0, r1, d8
 800e562:	2200      	movs	r2, #0
 800e564:	2300      	movs	r3, #0
 800e566:	f7f2 faaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800e56a:	b1b8      	cbz	r0, 800e59c <pow+0x68>
 800e56c:	2200      	movs	r2, #0
 800e56e:	2300      	movs	r3, #0
 800e570:	4620      	mov	r0, r4
 800e572:	4629      	mov	r1, r5
 800e574:	f7f2 faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 800e578:	2800      	cmp	r0, #0
 800e57a:	d146      	bne.n	800e60a <pow+0xd6>
 800e57c:	ec45 4b10 	vmov	d0, r4, r5
 800e580:	f000 f848 	bl	800e614 <finite>
 800e584:	b338      	cbz	r0, 800e5d6 <pow+0xa2>
 800e586:	2200      	movs	r2, #0
 800e588:	2300      	movs	r3, #0
 800e58a:	4620      	mov	r0, r4
 800e58c:	4629      	mov	r1, r5
 800e58e:	f7f2 faa5 	bl	8000adc <__aeabi_dcmplt>
 800e592:	b300      	cbz	r0, 800e5d6 <pow+0xa2>
 800e594:	f7fd fe9e 	bl	800c2d4 <__errno>
 800e598:	2322      	movs	r3, #34	; 0x22
 800e59a:	e01b      	b.n	800e5d4 <pow+0xa0>
 800e59c:	ec47 6b10 	vmov	d0, r6, r7
 800e5a0:	f000 f838 	bl	800e614 <finite>
 800e5a4:	b9e0      	cbnz	r0, 800e5e0 <pow+0xac>
 800e5a6:	eeb0 0a48 	vmov.f32	s0, s16
 800e5aa:	eef0 0a68 	vmov.f32	s1, s17
 800e5ae:	f000 f831 	bl	800e614 <finite>
 800e5b2:	b1a8      	cbz	r0, 800e5e0 <pow+0xac>
 800e5b4:	ec45 4b10 	vmov	d0, r4, r5
 800e5b8:	f000 f82c 	bl	800e614 <finite>
 800e5bc:	b180      	cbz	r0, 800e5e0 <pow+0xac>
 800e5be:	4632      	mov	r2, r6
 800e5c0:	463b      	mov	r3, r7
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	4639      	mov	r1, r7
 800e5c6:	f7f2 fab1 	bl	8000b2c <__aeabi_dcmpun>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d0e2      	beq.n	800e594 <pow+0x60>
 800e5ce:	f7fd fe81 	bl	800c2d4 <__errno>
 800e5d2:	2321      	movs	r3, #33	; 0x21
 800e5d4:	6003      	str	r3, [r0, #0]
 800e5d6:	ecbd 8b02 	vpop	{d8}
 800e5da:	ec47 6b10 	vmov	d0, r6, r7
 800e5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	4639      	mov	r1, r7
 800e5e8:	f7f2 fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d0f2      	beq.n	800e5d6 <pow+0xa2>
 800e5f0:	eeb0 0a48 	vmov.f32	s0, s16
 800e5f4:	eef0 0a68 	vmov.f32	s1, s17
 800e5f8:	f000 f80c 	bl	800e614 <finite>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d0ea      	beq.n	800e5d6 <pow+0xa2>
 800e600:	ec45 4b10 	vmov	d0, r4, r5
 800e604:	f000 f806 	bl	800e614 <finite>
 800e608:	e7c3      	b.n	800e592 <pow+0x5e>
 800e60a:	4f01      	ldr	r7, [pc, #4]	; (800e610 <pow+0xdc>)
 800e60c:	2600      	movs	r6, #0
 800e60e:	e7e2      	b.n	800e5d6 <pow+0xa2>
 800e610:	3ff00000 	.word	0x3ff00000

0800e614 <finite>:
 800e614:	b082      	sub	sp, #8
 800e616:	ed8d 0b00 	vstr	d0, [sp]
 800e61a:	9801      	ldr	r0, [sp, #4]
 800e61c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e620:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e624:	0fc0      	lsrs	r0, r0, #31
 800e626:	b002      	add	sp, #8
 800e628:	4770      	bx	lr
 800e62a:	0000      	movs	r0, r0
 800e62c:	0000      	movs	r0, r0
	...

0800e630 <__ieee754_pow>:
 800e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	ed2d 8b06 	vpush	{d8-d10}
 800e638:	b089      	sub	sp, #36	; 0x24
 800e63a:	ed8d 1b00 	vstr	d1, [sp]
 800e63e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e642:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e646:	ea58 0102 	orrs.w	r1, r8, r2
 800e64a:	ec57 6b10 	vmov	r6, r7, d0
 800e64e:	d115      	bne.n	800e67c <__ieee754_pow+0x4c>
 800e650:	19b3      	adds	r3, r6, r6
 800e652:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e656:	4152      	adcs	r2, r2
 800e658:	4299      	cmp	r1, r3
 800e65a:	4b89      	ldr	r3, [pc, #548]	; (800e880 <__ieee754_pow+0x250>)
 800e65c:	4193      	sbcs	r3, r2
 800e65e:	f080 84d1 	bcs.w	800f004 <__ieee754_pow+0x9d4>
 800e662:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e666:	4630      	mov	r0, r6
 800e668:	4639      	mov	r1, r7
 800e66a:	f7f1 fe0f 	bl	800028c <__adddf3>
 800e66e:	ec41 0b10 	vmov	d0, r0, r1
 800e672:	b009      	add	sp, #36	; 0x24
 800e674:	ecbd 8b06 	vpop	{d8-d10}
 800e678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e67c:	4b81      	ldr	r3, [pc, #516]	; (800e884 <__ieee754_pow+0x254>)
 800e67e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e682:	429c      	cmp	r4, r3
 800e684:	ee10 aa10 	vmov	sl, s0
 800e688:	463d      	mov	r5, r7
 800e68a:	dc06      	bgt.n	800e69a <__ieee754_pow+0x6a>
 800e68c:	d101      	bne.n	800e692 <__ieee754_pow+0x62>
 800e68e:	2e00      	cmp	r6, #0
 800e690:	d1e7      	bne.n	800e662 <__ieee754_pow+0x32>
 800e692:	4598      	cmp	r8, r3
 800e694:	dc01      	bgt.n	800e69a <__ieee754_pow+0x6a>
 800e696:	d10f      	bne.n	800e6b8 <__ieee754_pow+0x88>
 800e698:	b172      	cbz	r2, 800e6b8 <__ieee754_pow+0x88>
 800e69a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e69e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e6a2:	ea55 050a 	orrs.w	r5, r5, sl
 800e6a6:	d1dc      	bne.n	800e662 <__ieee754_pow+0x32>
 800e6a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e6ac:	18db      	adds	r3, r3, r3
 800e6ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e6b2:	4152      	adcs	r2, r2
 800e6b4:	429d      	cmp	r5, r3
 800e6b6:	e7d0      	b.n	800e65a <__ieee754_pow+0x2a>
 800e6b8:	2d00      	cmp	r5, #0
 800e6ba:	da3b      	bge.n	800e734 <__ieee754_pow+0x104>
 800e6bc:	4b72      	ldr	r3, [pc, #456]	; (800e888 <__ieee754_pow+0x258>)
 800e6be:	4598      	cmp	r8, r3
 800e6c0:	dc51      	bgt.n	800e766 <__ieee754_pow+0x136>
 800e6c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e6c6:	4598      	cmp	r8, r3
 800e6c8:	f340 84ab 	ble.w	800f022 <__ieee754_pow+0x9f2>
 800e6cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e6d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e6d4:	2b14      	cmp	r3, #20
 800e6d6:	dd0f      	ble.n	800e6f8 <__ieee754_pow+0xc8>
 800e6d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e6dc:	fa22 f103 	lsr.w	r1, r2, r3
 800e6e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	f040 849c 	bne.w	800f022 <__ieee754_pow+0x9f2>
 800e6ea:	f001 0101 	and.w	r1, r1, #1
 800e6ee:	f1c1 0302 	rsb	r3, r1, #2
 800e6f2:	9304      	str	r3, [sp, #16]
 800e6f4:	b182      	cbz	r2, 800e718 <__ieee754_pow+0xe8>
 800e6f6:	e05f      	b.n	800e7b8 <__ieee754_pow+0x188>
 800e6f8:	2a00      	cmp	r2, #0
 800e6fa:	d15b      	bne.n	800e7b4 <__ieee754_pow+0x184>
 800e6fc:	f1c3 0314 	rsb	r3, r3, #20
 800e700:	fa48 f103 	asr.w	r1, r8, r3
 800e704:	fa01 f303 	lsl.w	r3, r1, r3
 800e708:	4543      	cmp	r3, r8
 800e70a:	f040 8487 	bne.w	800f01c <__ieee754_pow+0x9ec>
 800e70e:	f001 0101 	and.w	r1, r1, #1
 800e712:	f1c1 0302 	rsb	r3, r1, #2
 800e716:	9304      	str	r3, [sp, #16]
 800e718:	4b5c      	ldr	r3, [pc, #368]	; (800e88c <__ieee754_pow+0x25c>)
 800e71a:	4598      	cmp	r8, r3
 800e71c:	d132      	bne.n	800e784 <__ieee754_pow+0x154>
 800e71e:	f1b9 0f00 	cmp.w	r9, #0
 800e722:	f280 8477 	bge.w	800f014 <__ieee754_pow+0x9e4>
 800e726:	4959      	ldr	r1, [pc, #356]	; (800e88c <__ieee754_pow+0x25c>)
 800e728:	4632      	mov	r2, r6
 800e72a:	463b      	mov	r3, r7
 800e72c:	2000      	movs	r0, #0
 800e72e:	f7f2 f88d 	bl	800084c <__aeabi_ddiv>
 800e732:	e79c      	b.n	800e66e <__ieee754_pow+0x3e>
 800e734:	2300      	movs	r3, #0
 800e736:	9304      	str	r3, [sp, #16]
 800e738:	2a00      	cmp	r2, #0
 800e73a:	d13d      	bne.n	800e7b8 <__ieee754_pow+0x188>
 800e73c:	4b51      	ldr	r3, [pc, #324]	; (800e884 <__ieee754_pow+0x254>)
 800e73e:	4598      	cmp	r8, r3
 800e740:	d1ea      	bne.n	800e718 <__ieee754_pow+0xe8>
 800e742:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e746:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e74a:	ea53 030a 	orrs.w	r3, r3, sl
 800e74e:	f000 8459 	beq.w	800f004 <__ieee754_pow+0x9d4>
 800e752:	4b4f      	ldr	r3, [pc, #316]	; (800e890 <__ieee754_pow+0x260>)
 800e754:	429c      	cmp	r4, r3
 800e756:	dd08      	ble.n	800e76a <__ieee754_pow+0x13a>
 800e758:	f1b9 0f00 	cmp.w	r9, #0
 800e75c:	f2c0 8456 	blt.w	800f00c <__ieee754_pow+0x9dc>
 800e760:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e764:	e783      	b.n	800e66e <__ieee754_pow+0x3e>
 800e766:	2302      	movs	r3, #2
 800e768:	e7e5      	b.n	800e736 <__ieee754_pow+0x106>
 800e76a:	f1b9 0f00 	cmp.w	r9, #0
 800e76e:	f04f 0000 	mov.w	r0, #0
 800e772:	f04f 0100 	mov.w	r1, #0
 800e776:	f6bf af7a 	bge.w	800e66e <__ieee754_pow+0x3e>
 800e77a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e77e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e782:	e774      	b.n	800e66e <__ieee754_pow+0x3e>
 800e784:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e788:	d106      	bne.n	800e798 <__ieee754_pow+0x168>
 800e78a:	4632      	mov	r2, r6
 800e78c:	463b      	mov	r3, r7
 800e78e:	4630      	mov	r0, r6
 800e790:	4639      	mov	r1, r7
 800e792:	f7f1 ff31 	bl	80005f8 <__aeabi_dmul>
 800e796:	e76a      	b.n	800e66e <__ieee754_pow+0x3e>
 800e798:	4b3e      	ldr	r3, [pc, #248]	; (800e894 <__ieee754_pow+0x264>)
 800e79a:	4599      	cmp	r9, r3
 800e79c:	d10c      	bne.n	800e7b8 <__ieee754_pow+0x188>
 800e79e:	2d00      	cmp	r5, #0
 800e7a0:	db0a      	blt.n	800e7b8 <__ieee754_pow+0x188>
 800e7a2:	ec47 6b10 	vmov	d0, r6, r7
 800e7a6:	b009      	add	sp, #36	; 0x24
 800e7a8:	ecbd 8b06 	vpop	{d8-d10}
 800e7ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b0:	f000 bd20 	b.w	800f1f4 <__ieee754_sqrt>
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	9304      	str	r3, [sp, #16]
 800e7b8:	ec47 6b10 	vmov	d0, r6, r7
 800e7bc:	f000 fc92 	bl	800f0e4 <fabs>
 800e7c0:	ec51 0b10 	vmov	r0, r1, d0
 800e7c4:	f1ba 0f00 	cmp.w	sl, #0
 800e7c8:	d129      	bne.n	800e81e <__ieee754_pow+0x1ee>
 800e7ca:	b124      	cbz	r4, 800e7d6 <__ieee754_pow+0x1a6>
 800e7cc:	4b2f      	ldr	r3, [pc, #188]	; (800e88c <__ieee754_pow+0x25c>)
 800e7ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d123      	bne.n	800e81e <__ieee754_pow+0x1ee>
 800e7d6:	f1b9 0f00 	cmp.w	r9, #0
 800e7da:	da05      	bge.n	800e7e8 <__ieee754_pow+0x1b8>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	460b      	mov	r3, r1
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	492a      	ldr	r1, [pc, #168]	; (800e88c <__ieee754_pow+0x25c>)
 800e7e4:	f7f2 f832 	bl	800084c <__aeabi_ddiv>
 800e7e8:	2d00      	cmp	r5, #0
 800e7ea:	f6bf af40 	bge.w	800e66e <__ieee754_pow+0x3e>
 800e7ee:	9b04      	ldr	r3, [sp, #16]
 800e7f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e7f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e7f8:	431c      	orrs	r4, r3
 800e7fa:	d108      	bne.n	800e80e <__ieee754_pow+0x1de>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	460b      	mov	r3, r1
 800e800:	4610      	mov	r0, r2
 800e802:	4619      	mov	r1, r3
 800e804:	f7f1 fd40 	bl	8000288 <__aeabi_dsub>
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	e78f      	b.n	800e72e <__ieee754_pow+0xfe>
 800e80e:	9b04      	ldr	r3, [sp, #16]
 800e810:	2b01      	cmp	r3, #1
 800e812:	f47f af2c 	bne.w	800e66e <__ieee754_pow+0x3e>
 800e816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e81a:	4619      	mov	r1, r3
 800e81c:	e727      	b.n	800e66e <__ieee754_pow+0x3e>
 800e81e:	0feb      	lsrs	r3, r5, #31
 800e820:	3b01      	subs	r3, #1
 800e822:	9306      	str	r3, [sp, #24]
 800e824:	9a06      	ldr	r2, [sp, #24]
 800e826:	9b04      	ldr	r3, [sp, #16]
 800e828:	4313      	orrs	r3, r2
 800e82a:	d102      	bne.n	800e832 <__ieee754_pow+0x202>
 800e82c:	4632      	mov	r2, r6
 800e82e:	463b      	mov	r3, r7
 800e830:	e7e6      	b.n	800e800 <__ieee754_pow+0x1d0>
 800e832:	4b19      	ldr	r3, [pc, #100]	; (800e898 <__ieee754_pow+0x268>)
 800e834:	4598      	cmp	r8, r3
 800e836:	f340 80fb 	ble.w	800ea30 <__ieee754_pow+0x400>
 800e83a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e83e:	4598      	cmp	r8, r3
 800e840:	4b13      	ldr	r3, [pc, #76]	; (800e890 <__ieee754_pow+0x260>)
 800e842:	dd0c      	ble.n	800e85e <__ieee754_pow+0x22e>
 800e844:	429c      	cmp	r4, r3
 800e846:	dc0f      	bgt.n	800e868 <__ieee754_pow+0x238>
 800e848:	f1b9 0f00 	cmp.w	r9, #0
 800e84c:	da0f      	bge.n	800e86e <__ieee754_pow+0x23e>
 800e84e:	2000      	movs	r0, #0
 800e850:	b009      	add	sp, #36	; 0x24
 800e852:	ecbd 8b06 	vpop	{d8-d10}
 800e856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85a:	f000 bc3a 	b.w	800f0d2 <__math_oflow>
 800e85e:	429c      	cmp	r4, r3
 800e860:	dbf2      	blt.n	800e848 <__ieee754_pow+0x218>
 800e862:	4b0a      	ldr	r3, [pc, #40]	; (800e88c <__ieee754_pow+0x25c>)
 800e864:	429c      	cmp	r4, r3
 800e866:	dd19      	ble.n	800e89c <__ieee754_pow+0x26c>
 800e868:	f1b9 0f00 	cmp.w	r9, #0
 800e86c:	dcef      	bgt.n	800e84e <__ieee754_pow+0x21e>
 800e86e:	2000      	movs	r0, #0
 800e870:	b009      	add	sp, #36	; 0x24
 800e872:	ecbd 8b06 	vpop	{d8-d10}
 800e876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e87a:	f000 bc21 	b.w	800f0c0 <__math_uflow>
 800e87e:	bf00      	nop
 800e880:	fff00000 	.word	0xfff00000
 800e884:	7ff00000 	.word	0x7ff00000
 800e888:	433fffff 	.word	0x433fffff
 800e88c:	3ff00000 	.word	0x3ff00000
 800e890:	3fefffff 	.word	0x3fefffff
 800e894:	3fe00000 	.word	0x3fe00000
 800e898:	41e00000 	.word	0x41e00000
 800e89c:	4b60      	ldr	r3, [pc, #384]	; (800ea20 <__ieee754_pow+0x3f0>)
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f7f1 fcf2 	bl	8000288 <__aeabi_dsub>
 800e8a4:	a354      	add	r3, pc, #336	; (adr r3, 800e9f8 <__ieee754_pow+0x3c8>)
 800e8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	460d      	mov	r5, r1
 800e8ae:	f7f1 fea3 	bl	80005f8 <__aeabi_dmul>
 800e8b2:	a353      	add	r3, pc, #332	; (adr r3, 800ea00 <__ieee754_pow+0x3d0>)
 800e8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b8:	4606      	mov	r6, r0
 800e8ba:	460f      	mov	r7, r1
 800e8bc:	4620      	mov	r0, r4
 800e8be:	4629      	mov	r1, r5
 800e8c0:	f7f1 fe9a 	bl	80005f8 <__aeabi_dmul>
 800e8c4:	4b57      	ldr	r3, [pc, #348]	; (800ea24 <__ieee754_pow+0x3f4>)
 800e8c6:	4682      	mov	sl, r0
 800e8c8:	468b      	mov	fp, r1
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	f7f1 fe92 	bl	80005f8 <__aeabi_dmul>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	460b      	mov	r3, r1
 800e8d8:	a14b      	add	r1, pc, #300	; (adr r1, 800ea08 <__ieee754_pow+0x3d8>)
 800e8da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8de:	f7f1 fcd3 	bl	8000288 <__aeabi_dsub>
 800e8e2:	4622      	mov	r2, r4
 800e8e4:	462b      	mov	r3, r5
 800e8e6:	f7f1 fe87 	bl	80005f8 <__aeabi_dmul>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	494d      	ldr	r1, [pc, #308]	; (800ea28 <__ieee754_pow+0x3f8>)
 800e8f2:	f7f1 fcc9 	bl	8000288 <__aeabi_dsub>
 800e8f6:	4622      	mov	r2, r4
 800e8f8:	4680      	mov	r8, r0
 800e8fa:	4689      	mov	r9, r1
 800e8fc:	462b      	mov	r3, r5
 800e8fe:	4620      	mov	r0, r4
 800e900:	4629      	mov	r1, r5
 800e902:	f7f1 fe79 	bl	80005f8 <__aeabi_dmul>
 800e906:	4602      	mov	r2, r0
 800e908:	460b      	mov	r3, r1
 800e90a:	4640      	mov	r0, r8
 800e90c:	4649      	mov	r1, r9
 800e90e:	f7f1 fe73 	bl	80005f8 <__aeabi_dmul>
 800e912:	a33f      	add	r3, pc, #252	; (adr r3, 800ea10 <__ieee754_pow+0x3e0>)
 800e914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e918:	f7f1 fe6e 	bl	80005f8 <__aeabi_dmul>
 800e91c:	4602      	mov	r2, r0
 800e91e:	460b      	mov	r3, r1
 800e920:	4650      	mov	r0, sl
 800e922:	4659      	mov	r1, fp
 800e924:	f7f1 fcb0 	bl	8000288 <__aeabi_dsub>
 800e928:	4602      	mov	r2, r0
 800e92a:	460b      	mov	r3, r1
 800e92c:	4680      	mov	r8, r0
 800e92e:	4689      	mov	r9, r1
 800e930:	4630      	mov	r0, r6
 800e932:	4639      	mov	r1, r7
 800e934:	f7f1 fcaa 	bl	800028c <__adddf3>
 800e938:	2000      	movs	r0, #0
 800e93a:	4632      	mov	r2, r6
 800e93c:	463b      	mov	r3, r7
 800e93e:	4604      	mov	r4, r0
 800e940:	460d      	mov	r5, r1
 800e942:	f7f1 fca1 	bl	8000288 <__aeabi_dsub>
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	4640      	mov	r0, r8
 800e94c:	4649      	mov	r1, r9
 800e94e:	f7f1 fc9b 	bl	8000288 <__aeabi_dsub>
 800e952:	9b04      	ldr	r3, [sp, #16]
 800e954:	9a06      	ldr	r2, [sp, #24]
 800e956:	3b01      	subs	r3, #1
 800e958:	4313      	orrs	r3, r2
 800e95a:	4682      	mov	sl, r0
 800e95c:	468b      	mov	fp, r1
 800e95e:	f040 81e7 	bne.w	800ed30 <__ieee754_pow+0x700>
 800e962:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ea18 <__ieee754_pow+0x3e8>
 800e966:	eeb0 8a47 	vmov.f32	s16, s14
 800e96a:	eef0 8a67 	vmov.f32	s17, s15
 800e96e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e972:	2600      	movs	r6, #0
 800e974:	4632      	mov	r2, r6
 800e976:	463b      	mov	r3, r7
 800e978:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e97c:	f7f1 fc84 	bl	8000288 <__aeabi_dsub>
 800e980:	4622      	mov	r2, r4
 800e982:	462b      	mov	r3, r5
 800e984:	f7f1 fe38 	bl	80005f8 <__aeabi_dmul>
 800e988:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e98c:	4680      	mov	r8, r0
 800e98e:	4689      	mov	r9, r1
 800e990:	4650      	mov	r0, sl
 800e992:	4659      	mov	r1, fp
 800e994:	f7f1 fe30 	bl	80005f8 <__aeabi_dmul>
 800e998:	4602      	mov	r2, r0
 800e99a:	460b      	mov	r3, r1
 800e99c:	4640      	mov	r0, r8
 800e99e:	4649      	mov	r1, r9
 800e9a0:	f7f1 fc74 	bl	800028c <__adddf3>
 800e9a4:	4632      	mov	r2, r6
 800e9a6:	463b      	mov	r3, r7
 800e9a8:	4680      	mov	r8, r0
 800e9aa:	4689      	mov	r9, r1
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	f7f1 fe22 	bl	80005f8 <__aeabi_dmul>
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	460d      	mov	r5, r1
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	4649      	mov	r1, r9
 800e9be:	4640      	mov	r0, r8
 800e9c0:	f7f1 fc64 	bl	800028c <__adddf3>
 800e9c4:	4b19      	ldr	r3, [pc, #100]	; (800ea2c <__ieee754_pow+0x3fc>)
 800e9c6:	4299      	cmp	r1, r3
 800e9c8:	ec45 4b19 	vmov	d9, r4, r5
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	460f      	mov	r7, r1
 800e9d0:	468b      	mov	fp, r1
 800e9d2:	f340 82f0 	ble.w	800efb6 <__ieee754_pow+0x986>
 800e9d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e9da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e9de:	4303      	orrs	r3, r0
 800e9e0:	f000 81e4 	beq.w	800edac <__ieee754_pow+0x77c>
 800e9e4:	ec51 0b18 	vmov	r0, r1, d8
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	f7f2 f876 	bl	8000adc <__aeabi_dcmplt>
 800e9f0:	3800      	subs	r0, #0
 800e9f2:	bf18      	it	ne
 800e9f4:	2001      	movne	r0, #1
 800e9f6:	e72b      	b.n	800e850 <__ieee754_pow+0x220>
 800e9f8:	60000000 	.word	0x60000000
 800e9fc:	3ff71547 	.word	0x3ff71547
 800ea00:	f85ddf44 	.word	0xf85ddf44
 800ea04:	3e54ae0b 	.word	0x3e54ae0b
 800ea08:	55555555 	.word	0x55555555
 800ea0c:	3fd55555 	.word	0x3fd55555
 800ea10:	652b82fe 	.word	0x652b82fe
 800ea14:	3ff71547 	.word	0x3ff71547
 800ea18:	00000000 	.word	0x00000000
 800ea1c:	bff00000 	.word	0xbff00000
 800ea20:	3ff00000 	.word	0x3ff00000
 800ea24:	3fd00000 	.word	0x3fd00000
 800ea28:	3fe00000 	.word	0x3fe00000
 800ea2c:	408fffff 	.word	0x408fffff
 800ea30:	4bd5      	ldr	r3, [pc, #852]	; (800ed88 <__ieee754_pow+0x758>)
 800ea32:	402b      	ands	r3, r5
 800ea34:	2200      	movs	r2, #0
 800ea36:	b92b      	cbnz	r3, 800ea44 <__ieee754_pow+0x414>
 800ea38:	4bd4      	ldr	r3, [pc, #848]	; (800ed8c <__ieee754_pow+0x75c>)
 800ea3a:	f7f1 fddd 	bl	80005f8 <__aeabi_dmul>
 800ea3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ea42:	460c      	mov	r4, r1
 800ea44:	1523      	asrs	r3, r4, #20
 800ea46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ea4a:	4413      	add	r3, r2
 800ea4c:	9305      	str	r3, [sp, #20]
 800ea4e:	4bd0      	ldr	r3, [pc, #832]	; (800ed90 <__ieee754_pow+0x760>)
 800ea50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ea54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ea58:	429c      	cmp	r4, r3
 800ea5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ea5e:	dd08      	ble.n	800ea72 <__ieee754_pow+0x442>
 800ea60:	4bcc      	ldr	r3, [pc, #816]	; (800ed94 <__ieee754_pow+0x764>)
 800ea62:	429c      	cmp	r4, r3
 800ea64:	f340 8162 	ble.w	800ed2c <__ieee754_pow+0x6fc>
 800ea68:	9b05      	ldr	r3, [sp, #20]
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	9305      	str	r3, [sp, #20]
 800ea6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ea72:	2400      	movs	r4, #0
 800ea74:	00e3      	lsls	r3, r4, #3
 800ea76:	9307      	str	r3, [sp, #28]
 800ea78:	4bc7      	ldr	r3, [pc, #796]	; (800ed98 <__ieee754_pow+0x768>)
 800ea7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea7e:	ed93 7b00 	vldr	d7, [r3]
 800ea82:	4629      	mov	r1, r5
 800ea84:	ec53 2b17 	vmov	r2, r3, d7
 800ea88:	eeb0 9a47 	vmov.f32	s18, s14
 800ea8c:	eef0 9a67 	vmov.f32	s19, s15
 800ea90:	4682      	mov	sl, r0
 800ea92:	f7f1 fbf9 	bl	8000288 <__aeabi_dsub>
 800ea96:	4652      	mov	r2, sl
 800ea98:	4606      	mov	r6, r0
 800ea9a:	460f      	mov	r7, r1
 800ea9c:	462b      	mov	r3, r5
 800ea9e:	ec51 0b19 	vmov	r0, r1, d9
 800eaa2:	f7f1 fbf3 	bl	800028c <__adddf3>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	2000      	movs	r0, #0
 800eaac:	49bb      	ldr	r1, [pc, #748]	; (800ed9c <__ieee754_pow+0x76c>)
 800eaae:	f7f1 fecd 	bl	800084c <__aeabi_ddiv>
 800eab2:	ec41 0b1a 	vmov	d10, r0, r1
 800eab6:	4602      	mov	r2, r0
 800eab8:	460b      	mov	r3, r1
 800eaba:	4630      	mov	r0, r6
 800eabc:	4639      	mov	r1, r7
 800eabe:	f7f1 fd9b 	bl	80005f8 <__aeabi_dmul>
 800eac2:	2300      	movs	r3, #0
 800eac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eac8:	9302      	str	r3, [sp, #8]
 800eaca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800eace:	46ab      	mov	fp, r5
 800ead0:	106d      	asrs	r5, r5, #1
 800ead2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ead6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800eada:	ec41 0b18 	vmov	d8, r0, r1
 800eade:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800eae2:	2200      	movs	r2, #0
 800eae4:	4640      	mov	r0, r8
 800eae6:	4649      	mov	r1, r9
 800eae8:	4614      	mov	r4, r2
 800eaea:	461d      	mov	r5, r3
 800eaec:	f7f1 fd84 	bl	80005f8 <__aeabi_dmul>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	4639      	mov	r1, r7
 800eaf8:	f7f1 fbc6 	bl	8000288 <__aeabi_dsub>
 800eafc:	ec53 2b19 	vmov	r2, r3, d9
 800eb00:	4606      	mov	r6, r0
 800eb02:	460f      	mov	r7, r1
 800eb04:	4620      	mov	r0, r4
 800eb06:	4629      	mov	r1, r5
 800eb08:	f7f1 fbbe 	bl	8000288 <__aeabi_dsub>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	460b      	mov	r3, r1
 800eb10:	4650      	mov	r0, sl
 800eb12:	4659      	mov	r1, fp
 800eb14:	f7f1 fbb8 	bl	8000288 <__aeabi_dsub>
 800eb18:	4642      	mov	r2, r8
 800eb1a:	464b      	mov	r3, r9
 800eb1c:	f7f1 fd6c 	bl	80005f8 <__aeabi_dmul>
 800eb20:	4602      	mov	r2, r0
 800eb22:	460b      	mov	r3, r1
 800eb24:	4630      	mov	r0, r6
 800eb26:	4639      	mov	r1, r7
 800eb28:	f7f1 fbae 	bl	8000288 <__aeabi_dsub>
 800eb2c:	ec53 2b1a 	vmov	r2, r3, d10
 800eb30:	f7f1 fd62 	bl	80005f8 <__aeabi_dmul>
 800eb34:	ec53 2b18 	vmov	r2, r3, d8
 800eb38:	ec41 0b19 	vmov	d9, r0, r1
 800eb3c:	ec51 0b18 	vmov	r0, r1, d8
 800eb40:	f7f1 fd5a 	bl	80005f8 <__aeabi_dmul>
 800eb44:	a37c      	add	r3, pc, #496	; (adr r3, 800ed38 <__ieee754_pow+0x708>)
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	460d      	mov	r5, r1
 800eb4e:	f7f1 fd53 	bl	80005f8 <__aeabi_dmul>
 800eb52:	a37b      	add	r3, pc, #492	; (adr r3, 800ed40 <__ieee754_pow+0x710>)
 800eb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb58:	f7f1 fb98 	bl	800028c <__adddf3>
 800eb5c:	4622      	mov	r2, r4
 800eb5e:	462b      	mov	r3, r5
 800eb60:	f7f1 fd4a 	bl	80005f8 <__aeabi_dmul>
 800eb64:	a378      	add	r3, pc, #480	; (adr r3, 800ed48 <__ieee754_pow+0x718>)
 800eb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6a:	f7f1 fb8f 	bl	800028c <__adddf3>
 800eb6e:	4622      	mov	r2, r4
 800eb70:	462b      	mov	r3, r5
 800eb72:	f7f1 fd41 	bl	80005f8 <__aeabi_dmul>
 800eb76:	a376      	add	r3, pc, #472	; (adr r3, 800ed50 <__ieee754_pow+0x720>)
 800eb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7c:	f7f1 fb86 	bl	800028c <__adddf3>
 800eb80:	4622      	mov	r2, r4
 800eb82:	462b      	mov	r3, r5
 800eb84:	f7f1 fd38 	bl	80005f8 <__aeabi_dmul>
 800eb88:	a373      	add	r3, pc, #460	; (adr r3, 800ed58 <__ieee754_pow+0x728>)
 800eb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8e:	f7f1 fb7d 	bl	800028c <__adddf3>
 800eb92:	4622      	mov	r2, r4
 800eb94:	462b      	mov	r3, r5
 800eb96:	f7f1 fd2f 	bl	80005f8 <__aeabi_dmul>
 800eb9a:	a371      	add	r3, pc, #452	; (adr r3, 800ed60 <__ieee754_pow+0x730>)
 800eb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba0:	f7f1 fb74 	bl	800028c <__adddf3>
 800eba4:	4622      	mov	r2, r4
 800eba6:	4606      	mov	r6, r0
 800eba8:	460f      	mov	r7, r1
 800ebaa:	462b      	mov	r3, r5
 800ebac:	4620      	mov	r0, r4
 800ebae:	4629      	mov	r1, r5
 800ebb0:	f7f1 fd22 	bl	80005f8 <__aeabi_dmul>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	4630      	mov	r0, r6
 800ebba:	4639      	mov	r1, r7
 800ebbc:	f7f1 fd1c 	bl	80005f8 <__aeabi_dmul>
 800ebc0:	4642      	mov	r2, r8
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	460d      	mov	r5, r1
 800ebc6:	464b      	mov	r3, r9
 800ebc8:	ec51 0b18 	vmov	r0, r1, d8
 800ebcc:	f7f1 fb5e 	bl	800028c <__adddf3>
 800ebd0:	ec53 2b19 	vmov	r2, r3, d9
 800ebd4:	f7f1 fd10 	bl	80005f8 <__aeabi_dmul>
 800ebd8:	4622      	mov	r2, r4
 800ebda:	462b      	mov	r3, r5
 800ebdc:	f7f1 fb56 	bl	800028c <__adddf3>
 800ebe0:	4642      	mov	r2, r8
 800ebe2:	4682      	mov	sl, r0
 800ebe4:	468b      	mov	fp, r1
 800ebe6:	464b      	mov	r3, r9
 800ebe8:	4640      	mov	r0, r8
 800ebea:	4649      	mov	r1, r9
 800ebec:	f7f1 fd04 	bl	80005f8 <__aeabi_dmul>
 800ebf0:	4b6b      	ldr	r3, [pc, #428]	; (800eda0 <__ieee754_pow+0x770>)
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	4606      	mov	r6, r0
 800ebf6:	460f      	mov	r7, r1
 800ebf8:	f7f1 fb48 	bl	800028c <__adddf3>
 800ebfc:	4652      	mov	r2, sl
 800ebfe:	465b      	mov	r3, fp
 800ec00:	f7f1 fb44 	bl	800028c <__adddf3>
 800ec04:	2000      	movs	r0, #0
 800ec06:	4604      	mov	r4, r0
 800ec08:	460d      	mov	r5, r1
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	4640      	mov	r0, r8
 800ec10:	4649      	mov	r1, r9
 800ec12:	f7f1 fcf1 	bl	80005f8 <__aeabi_dmul>
 800ec16:	4b62      	ldr	r3, [pc, #392]	; (800eda0 <__ieee754_pow+0x770>)
 800ec18:	4680      	mov	r8, r0
 800ec1a:	4689      	mov	r9, r1
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	4620      	mov	r0, r4
 800ec20:	4629      	mov	r1, r5
 800ec22:	f7f1 fb31 	bl	8000288 <__aeabi_dsub>
 800ec26:	4632      	mov	r2, r6
 800ec28:	463b      	mov	r3, r7
 800ec2a:	f7f1 fb2d 	bl	8000288 <__aeabi_dsub>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	460b      	mov	r3, r1
 800ec32:	4650      	mov	r0, sl
 800ec34:	4659      	mov	r1, fp
 800ec36:	f7f1 fb27 	bl	8000288 <__aeabi_dsub>
 800ec3a:	ec53 2b18 	vmov	r2, r3, d8
 800ec3e:	f7f1 fcdb 	bl	80005f8 <__aeabi_dmul>
 800ec42:	4622      	mov	r2, r4
 800ec44:	4606      	mov	r6, r0
 800ec46:	460f      	mov	r7, r1
 800ec48:	462b      	mov	r3, r5
 800ec4a:	ec51 0b19 	vmov	r0, r1, d9
 800ec4e:	f7f1 fcd3 	bl	80005f8 <__aeabi_dmul>
 800ec52:	4602      	mov	r2, r0
 800ec54:	460b      	mov	r3, r1
 800ec56:	4630      	mov	r0, r6
 800ec58:	4639      	mov	r1, r7
 800ec5a:	f7f1 fb17 	bl	800028c <__adddf3>
 800ec5e:	4606      	mov	r6, r0
 800ec60:	460f      	mov	r7, r1
 800ec62:	4602      	mov	r2, r0
 800ec64:	460b      	mov	r3, r1
 800ec66:	4640      	mov	r0, r8
 800ec68:	4649      	mov	r1, r9
 800ec6a:	f7f1 fb0f 	bl	800028c <__adddf3>
 800ec6e:	a33e      	add	r3, pc, #248	; (adr r3, 800ed68 <__ieee754_pow+0x738>)
 800ec70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec74:	2000      	movs	r0, #0
 800ec76:	4604      	mov	r4, r0
 800ec78:	460d      	mov	r5, r1
 800ec7a:	f7f1 fcbd 	bl	80005f8 <__aeabi_dmul>
 800ec7e:	4642      	mov	r2, r8
 800ec80:	ec41 0b18 	vmov	d8, r0, r1
 800ec84:	464b      	mov	r3, r9
 800ec86:	4620      	mov	r0, r4
 800ec88:	4629      	mov	r1, r5
 800ec8a:	f7f1 fafd 	bl	8000288 <__aeabi_dsub>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	460b      	mov	r3, r1
 800ec92:	4630      	mov	r0, r6
 800ec94:	4639      	mov	r1, r7
 800ec96:	f7f1 faf7 	bl	8000288 <__aeabi_dsub>
 800ec9a:	a335      	add	r3, pc, #212	; (adr r3, 800ed70 <__ieee754_pow+0x740>)
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	f7f1 fcaa 	bl	80005f8 <__aeabi_dmul>
 800eca4:	a334      	add	r3, pc, #208	; (adr r3, 800ed78 <__ieee754_pow+0x748>)
 800eca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecaa:	4606      	mov	r6, r0
 800ecac:	460f      	mov	r7, r1
 800ecae:	4620      	mov	r0, r4
 800ecb0:	4629      	mov	r1, r5
 800ecb2:	f7f1 fca1 	bl	80005f8 <__aeabi_dmul>
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	460b      	mov	r3, r1
 800ecba:	4630      	mov	r0, r6
 800ecbc:	4639      	mov	r1, r7
 800ecbe:	f7f1 fae5 	bl	800028c <__adddf3>
 800ecc2:	9a07      	ldr	r2, [sp, #28]
 800ecc4:	4b37      	ldr	r3, [pc, #220]	; (800eda4 <__ieee754_pow+0x774>)
 800ecc6:	4413      	add	r3, r2
 800ecc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eccc:	f7f1 fade 	bl	800028c <__adddf3>
 800ecd0:	4682      	mov	sl, r0
 800ecd2:	9805      	ldr	r0, [sp, #20]
 800ecd4:	468b      	mov	fp, r1
 800ecd6:	f7f1 fc25 	bl	8000524 <__aeabi_i2d>
 800ecda:	9a07      	ldr	r2, [sp, #28]
 800ecdc:	4b32      	ldr	r3, [pc, #200]	; (800eda8 <__ieee754_pow+0x778>)
 800ecde:	4413      	add	r3, r2
 800ece0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ece4:	4606      	mov	r6, r0
 800ece6:	460f      	mov	r7, r1
 800ece8:	4652      	mov	r2, sl
 800ecea:	465b      	mov	r3, fp
 800ecec:	ec51 0b18 	vmov	r0, r1, d8
 800ecf0:	f7f1 facc 	bl	800028c <__adddf3>
 800ecf4:	4642      	mov	r2, r8
 800ecf6:	464b      	mov	r3, r9
 800ecf8:	f7f1 fac8 	bl	800028c <__adddf3>
 800ecfc:	4632      	mov	r2, r6
 800ecfe:	463b      	mov	r3, r7
 800ed00:	f7f1 fac4 	bl	800028c <__adddf3>
 800ed04:	2000      	movs	r0, #0
 800ed06:	4632      	mov	r2, r6
 800ed08:	463b      	mov	r3, r7
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	460d      	mov	r5, r1
 800ed0e:	f7f1 fabb 	bl	8000288 <__aeabi_dsub>
 800ed12:	4642      	mov	r2, r8
 800ed14:	464b      	mov	r3, r9
 800ed16:	f7f1 fab7 	bl	8000288 <__aeabi_dsub>
 800ed1a:	ec53 2b18 	vmov	r2, r3, d8
 800ed1e:	f7f1 fab3 	bl	8000288 <__aeabi_dsub>
 800ed22:	4602      	mov	r2, r0
 800ed24:	460b      	mov	r3, r1
 800ed26:	4650      	mov	r0, sl
 800ed28:	4659      	mov	r1, fp
 800ed2a:	e610      	b.n	800e94e <__ieee754_pow+0x31e>
 800ed2c:	2401      	movs	r4, #1
 800ed2e:	e6a1      	b.n	800ea74 <__ieee754_pow+0x444>
 800ed30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ed80 <__ieee754_pow+0x750>
 800ed34:	e617      	b.n	800e966 <__ieee754_pow+0x336>
 800ed36:	bf00      	nop
 800ed38:	4a454eef 	.word	0x4a454eef
 800ed3c:	3fca7e28 	.word	0x3fca7e28
 800ed40:	93c9db65 	.word	0x93c9db65
 800ed44:	3fcd864a 	.word	0x3fcd864a
 800ed48:	a91d4101 	.word	0xa91d4101
 800ed4c:	3fd17460 	.word	0x3fd17460
 800ed50:	518f264d 	.word	0x518f264d
 800ed54:	3fd55555 	.word	0x3fd55555
 800ed58:	db6fabff 	.word	0xdb6fabff
 800ed5c:	3fdb6db6 	.word	0x3fdb6db6
 800ed60:	33333303 	.word	0x33333303
 800ed64:	3fe33333 	.word	0x3fe33333
 800ed68:	e0000000 	.word	0xe0000000
 800ed6c:	3feec709 	.word	0x3feec709
 800ed70:	dc3a03fd 	.word	0xdc3a03fd
 800ed74:	3feec709 	.word	0x3feec709
 800ed78:	145b01f5 	.word	0x145b01f5
 800ed7c:	be3e2fe0 	.word	0xbe3e2fe0
 800ed80:	00000000 	.word	0x00000000
 800ed84:	3ff00000 	.word	0x3ff00000
 800ed88:	7ff00000 	.word	0x7ff00000
 800ed8c:	43400000 	.word	0x43400000
 800ed90:	0003988e 	.word	0x0003988e
 800ed94:	000bb679 	.word	0x000bb679
 800ed98:	0800fdc8 	.word	0x0800fdc8
 800ed9c:	3ff00000 	.word	0x3ff00000
 800eda0:	40080000 	.word	0x40080000
 800eda4:	0800fde8 	.word	0x0800fde8
 800eda8:	0800fdd8 	.word	0x0800fdd8
 800edac:	a3b3      	add	r3, pc, #716	; (adr r3, 800f07c <__ieee754_pow+0xa4c>)
 800edae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb2:	4640      	mov	r0, r8
 800edb4:	4649      	mov	r1, r9
 800edb6:	f7f1 fa69 	bl	800028c <__adddf3>
 800edba:	4622      	mov	r2, r4
 800edbc:	ec41 0b1a 	vmov	d10, r0, r1
 800edc0:	462b      	mov	r3, r5
 800edc2:	4630      	mov	r0, r6
 800edc4:	4639      	mov	r1, r7
 800edc6:	f7f1 fa5f 	bl	8000288 <__aeabi_dsub>
 800edca:	4602      	mov	r2, r0
 800edcc:	460b      	mov	r3, r1
 800edce:	ec51 0b1a 	vmov	r0, r1, d10
 800edd2:	f7f1 fea1 	bl	8000b18 <__aeabi_dcmpgt>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	f47f ae04 	bne.w	800e9e4 <__ieee754_pow+0x3b4>
 800eddc:	4aa2      	ldr	r2, [pc, #648]	; (800f068 <__ieee754_pow+0xa38>)
 800edde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ede2:	4293      	cmp	r3, r2
 800ede4:	f340 8107 	ble.w	800eff6 <__ieee754_pow+0x9c6>
 800ede8:	151b      	asrs	r3, r3, #20
 800edea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800edee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800edf2:	fa4a fa03 	asr.w	sl, sl, r3
 800edf6:	44da      	add	sl, fp
 800edf8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800edfc:	489b      	ldr	r0, [pc, #620]	; (800f06c <__ieee754_pow+0xa3c>)
 800edfe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ee02:	4108      	asrs	r0, r1
 800ee04:	ea00 030a 	and.w	r3, r0, sl
 800ee08:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ee0c:	f1c1 0114 	rsb	r1, r1, #20
 800ee10:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ee14:	fa4a fa01 	asr.w	sl, sl, r1
 800ee18:	f1bb 0f00 	cmp.w	fp, #0
 800ee1c:	f04f 0200 	mov.w	r2, #0
 800ee20:	4620      	mov	r0, r4
 800ee22:	4629      	mov	r1, r5
 800ee24:	bfb8      	it	lt
 800ee26:	f1ca 0a00 	rsblt	sl, sl, #0
 800ee2a:	f7f1 fa2d 	bl	8000288 <__aeabi_dsub>
 800ee2e:	ec41 0b19 	vmov	d9, r0, r1
 800ee32:	4642      	mov	r2, r8
 800ee34:	464b      	mov	r3, r9
 800ee36:	ec51 0b19 	vmov	r0, r1, d9
 800ee3a:	f7f1 fa27 	bl	800028c <__adddf3>
 800ee3e:	a37a      	add	r3, pc, #488	; (adr r3, 800f028 <__ieee754_pow+0x9f8>)
 800ee40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee44:	2000      	movs	r0, #0
 800ee46:	4604      	mov	r4, r0
 800ee48:	460d      	mov	r5, r1
 800ee4a:	f7f1 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ee4e:	ec53 2b19 	vmov	r2, r3, d9
 800ee52:	4606      	mov	r6, r0
 800ee54:	460f      	mov	r7, r1
 800ee56:	4620      	mov	r0, r4
 800ee58:	4629      	mov	r1, r5
 800ee5a:	f7f1 fa15 	bl	8000288 <__aeabi_dsub>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	460b      	mov	r3, r1
 800ee62:	4640      	mov	r0, r8
 800ee64:	4649      	mov	r1, r9
 800ee66:	f7f1 fa0f 	bl	8000288 <__aeabi_dsub>
 800ee6a:	a371      	add	r3, pc, #452	; (adr r3, 800f030 <__ieee754_pow+0xa00>)
 800ee6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee70:	f7f1 fbc2 	bl	80005f8 <__aeabi_dmul>
 800ee74:	a370      	add	r3, pc, #448	; (adr r3, 800f038 <__ieee754_pow+0xa08>)
 800ee76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7a:	4680      	mov	r8, r0
 800ee7c:	4689      	mov	r9, r1
 800ee7e:	4620      	mov	r0, r4
 800ee80:	4629      	mov	r1, r5
 800ee82:	f7f1 fbb9 	bl	80005f8 <__aeabi_dmul>
 800ee86:	4602      	mov	r2, r0
 800ee88:	460b      	mov	r3, r1
 800ee8a:	4640      	mov	r0, r8
 800ee8c:	4649      	mov	r1, r9
 800ee8e:	f7f1 f9fd 	bl	800028c <__adddf3>
 800ee92:	4604      	mov	r4, r0
 800ee94:	460d      	mov	r5, r1
 800ee96:	4602      	mov	r2, r0
 800ee98:	460b      	mov	r3, r1
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	4639      	mov	r1, r7
 800ee9e:	f7f1 f9f5 	bl	800028c <__adddf3>
 800eea2:	4632      	mov	r2, r6
 800eea4:	463b      	mov	r3, r7
 800eea6:	4680      	mov	r8, r0
 800eea8:	4689      	mov	r9, r1
 800eeaa:	f7f1 f9ed 	bl	8000288 <__aeabi_dsub>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	f7f1 f9e7 	bl	8000288 <__aeabi_dsub>
 800eeba:	4642      	mov	r2, r8
 800eebc:	4606      	mov	r6, r0
 800eebe:	460f      	mov	r7, r1
 800eec0:	464b      	mov	r3, r9
 800eec2:	4640      	mov	r0, r8
 800eec4:	4649      	mov	r1, r9
 800eec6:	f7f1 fb97 	bl	80005f8 <__aeabi_dmul>
 800eeca:	a35d      	add	r3, pc, #372	; (adr r3, 800f040 <__ieee754_pow+0xa10>)
 800eecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed0:	4604      	mov	r4, r0
 800eed2:	460d      	mov	r5, r1
 800eed4:	f7f1 fb90 	bl	80005f8 <__aeabi_dmul>
 800eed8:	a35b      	add	r3, pc, #364	; (adr r3, 800f048 <__ieee754_pow+0xa18>)
 800eeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eede:	f7f1 f9d3 	bl	8000288 <__aeabi_dsub>
 800eee2:	4622      	mov	r2, r4
 800eee4:	462b      	mov	r3, r5
 800eee6:	f7f1 fb87 	bl	80005f8 <__aeabi_dmul>
 800eeea:	a359      	add	r3, pc, #356	; (adr r3, 800f050 <__ieee754_pow+0xa20>)
 800eeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef0:	f7f1 f9cc 	bl	800028c <__adddf3>
 800eef4:	4622      	mov	r2, r4
 800eef6:	462b      	mov	r3, r5
 800eef8:	f7f1 fb7e 	bl	80005f8 <__aeabi_dmul>
 800eefc:	a356      	add	r3, pc, #344	; (adr r3, 800f058 <__ieee754_pow+0xa28>)
 800eefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef02:	f7f1 f9c1 	bl	8000288 <__aeabi_dsub>
 800ef06:	4622      	mov	r2, r4
 800ef08:	462b      	mov	r3, r5
 800ef0a:	f7f1 fb75 	bl	80005f8 <__aeabi_dmul>
 800ef0e:	a354      	add	r3, pc, #336	; (adr r3, 800f060 <__ieee754_pow+0xa30>)
 800ef10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef14:	f7f1 f9ba 	bl	800028c <__adddf3>
 800ef18:	4622      	mov	r2, r4
 800ef1a:	462b      	mov	r3, r5
 800ef1c:	f7f1 fb6c 	bl	80005f8 <__aeabi_dmul>
 800ef20:	4602      	mov	r2, r0
 800ef22:	460b      	mov	r3, r1
 800ef24:	4640      	mov	r0, r8
 800ef26:	4649      	mov	r1, r9
 800ef28:	f7f1 f9ae 	bl	8000288 <__aeabi_dsub>
 800ef2c:	4604      	mov	r4, r0
 800ef2e:	460d      	mov	r5, r1
 800ef30:	4602      	mov	r2, r0
 800ef32:	460b      	mov	r3, r1
 800ef34:	4640      	mov	r0, r8
 800ef36:	4649      	mov	r1, r9
 800ef38:	f7f1 fb5e 	bl	80005f8 <__aeabi_dmul>
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	ec41 0b19 	vmov	d9, r0, r1
 800ef42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ef46:	4620      	mov	r0, r4
 800ef48:	4629      	mov	r1, r5
 800ef4a:	f7f1 f99d 	bl	8000288 <__aeabi_dsub>
 800ef4e:	4602      	mov	r2, r0
 800ef50:	460b      	mov	r3, r1
 800ef52:	ec51 0b19 	vmov	r0, r1, d9
 800ef56:	f7f1 fc79 	bl	800084c <__aeabi_ddiv>
 800ef5a:	4632      	mov	r2, r6
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	460d      	mov	r5, r1
 800ef60:	463b      	mov	r3, r7
 800ef62:	4640      	mov	r0, r8
 800ef64:	4649      	mov	r1, r9
 800ef66:	f7f1 fb47 	bl	80005f8 <__aeabi_dmul>
 800ef6a:	4632      	mov	r2, r6
 800ef6c:	463b      	mov	r3, r7
 800ef6e:	f7f1 f98d 	bl	800028c <__adddf3>
 800ef72:	4602      	mov	r2, r0
 800ef74:	460b      	mov	r3, r1
 800ef76:	4620      	mov	r0, r4
 800ef78:	4629      	mov	r1, r5
 800ef7a:	f7f1 f985 	bl	8000288 <__aeabi_dsub>
 800ef7e:	4642      	mov	r2, r8
 800ef80:	464b      	mov	r3, r9
 800ef82:	f7f1 f981 	bl	8000288 <__aeabi_dsub>
 800ef86:	460b      	mov	r3, r1
 800ef88:	4602      	mov	r2, r0
 800ef8a:	4939      	ldr	r1, [pc, #228]	; (800f070 <__ieee754_pow+0xa40>)
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	f7f1 f97b 	bl	8000288 <__aeabi_dsub>
 800ef92:	ec41 0b10 	vmov	d0, r0, r1
 800ef96:	ee10 3a90 	vmov	r3, s1
 800ef9a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ef9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800efa2:	da2b      	bge.n	800effc <__ieee754_pow+0x9cc>
 800efa4:	4650      	mov	r0, sl
 800efa6:	f000 f8a7 	bl	800f0f8 <scalbn>
 800efaa:	ec51 0b10 	vmov	r0, r1, d0
 800efae:	ec53 2b18 	vmov	r2, r3, d8
 800efb2:	f7ff bbee 	b.w	800e792 <__ieee754_pow+0x162>
 800efb6:	4b2f      	ldr	r3, [pc, #188]	; (800f074 <__ieee754_pow+0xa44>)
 800efb8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800efbc:	429e      	cmp	r6, r3
 800efbe:	f77f af0d 	ble.w	800eddc <__ieee754_pow+0x7ac>
 800efc2:	4b2d      	ldr	r3, [pc, #180]	; (800f078 <__ieee754_pow+0xa48>)
 800efc4:	440b      	add	r3, r1
 800efc6:	4303      	orrs	r3, r0
 800efc8:	d009      	beq.n	800efde <__ieee754_pow+0x9ae>
 800efca:	ec51 0b18 	vmov	r0, r1, d8
 800efce:	2200      	movs	r2, #0
 800efd0:	2300      	movs	r3, #0
 800efd2:	f7f1 fd83 	bl	8000adc <__aeabi_dcmplt>
 800efd6:	3800      	subs	r0, #0
 800efd8:	bf18      	it	ne
 800efda:	2001      	movne	r0, #1
 800efdc:	e448      	b.n	800e870 <__ieee754_pow+0x240>
 800efde:	4622      	mov	r2, r4
 800efe0:	462b      	mov	r3, r5
 800efe2:	f7f1 f951 	bl	8000288 <__aeabi_dsub>
 800efe6:	4642      	mov	r2, r8
 800efe8:	464b      	mov	r3, r9
 800efea:	f7f1 fd8b 	bl	8000b04 <__aeabi_dcmpge>
 800efee:	2800      	cmp	r0, #0
 800eff0:	f43f aef4 	beq.w	800eddc <__ieee754_pow+0x7ac>
 800eff4:	e7e9      	b.n	800efca <__ieee754_pow+0x99a>
 800eff6:	f04f 0a00 	mov.w	sl, #0
 800effa:	e71a      	b.n	800ee32 <__ieee754_pow+0x802>
 800effc:	ec51 0b10 	vmov	r0, r1, d0
 800f000:	4619      	mov	r1, r3
 800f002:	e7d4      	b.n	800efae <__ieee754_pow+0x97e>
 800f004:	491a      	ldr	r1, [pc, #104]	; (800f070 <__ieee754_pow+0xa40>)
 800f006:	2000      	movs	r0, #0
 800f008:	f7ff bb31 	b.w	800e66e <__ieee754_pow+0x3e>
 800f00c:	2000      	movs	r0, #0
 800f00e:	2100      	movs	r1, #0
 800f010:	f7ff bb2d 	b.w	800e66e <__ieee754_pow+0x3e>
 800f014:	4630      	mov	r0, r6
 800f016:	4639      	mov	r1, r7
 800f018:	f7ff bb29 	b.w	800e66e <__ieee754_pow+0x3e>
 800f01c:	9204      	str	r2, [sp, #16]
 800f01e:	f7ff bb7b 	b.w	800e718 <__ieee754_pow+0xe8>
 800f022:	2300      	movs	r3, #0
 800f024:	f7ff bb65 	b.w	800e6f2 <__ieee754_pow+0xc2>
 800f028:	00000000 	.word	0x00000000
 800f02c:	3fe62e43 	.word	0x3fe62e43
 800f030:	fefa39ef 	.word	0xfefa39ef
 800f034:	3fe62e42 	.word	0x3fe62e42
 800f038:	0ca86c39 	.word	0x0ca86c39
 800f03c:	be205c61 	.word	0xbe205c61
 800f040:	72bea4d0 	.word	0x72bea4d0
 800f044:	3e663769 	.word	0x3e663769
 800f048:	c5d26bf1 	.word	0xc5d26bf1
 800f04c:	3ebbbd41 	.word	0x3ebbbd41
 800f050:	af25de2c 	.word	0xaf25de2c
 800f054:	3f11566a 	.word	0x3f11566a
 800f058:	16bebd93 	.word	0x16bebd93
 800f05c:	3f66c16c 	.word	0x3f66c16c
 800f060:	5555553e 	.word	0x5555553e
 800f064:	3fc55555 	.word	0x3fc55555
 800f068:	3fe00000 	.word	0x3fe00000
 800f06c:	fff00000 	.word	0xfff00000
 800f070:	3ff00000 	.word	0x3ff00000
 800f074:	4090cbff 	.word	0x4090cbff
 800f078:	3f6f3400 	.word	0x3f6f3400
 800f07c:	652b82fe 	.word	0x652b82fe
 800f080:	3c971547 	.word	0x3c971547

0800f084 <with_errno>:
 800f084:	b570      	push	{r4, r5, r6, lr}
 800f086:	4604      	mov	r4, r0
 800f088:	460d      	mov	r5, r1
 800f08a:	4616      	mov	r6, r2
 800f08c:	f7fd f922 	bl	800c2d4 <__errno>
 800f090:	4629      	mov	r1, r5
 800f092:	6006      	str	r6, [r0, #0]
 800f094:	4620      	mov	r0, r4
 800f096:	bd70      	pop	{r4, r5, r6, pc}

0800f098 <xflow>:
 800f098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f09a:	4614      	mov	r4, r2
 800f09c:	461d      	mov	r5, r3
 800f09e:	b108      	cbz	r0, 800f0a4 <xflow+0xc>
 800f0a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f0a4:	e9cd 2300 	strd	r2, r3, [sp]
 800f0a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	4629      	mov	r1, r5
 800f0b0:	f7f1 faa2 	bl	80005f8 <__aeabi_dmul>
 800f0b4:	2222      	movs	r2, #34	; 0x22
 800f0b6:	b003      	add	sp, #12
 800f0b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0bc:	f7ff bfe2 	b.w	800f084 <with_errno>

0800f0c0 <__math_uflow>:
 800f0c0:	b508      	push	{r3, lr}
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f0c8:	f7ff ffe6 	bl	800f098 <xflow>
 800f0cc:	ec41 0b10 	vmov	d0, r0, r1
 800f0d0:	bd08      	pop	{r3, pc}

0800f0d2 <__math_oflow>:
 800f0d2:	b508      	push	{r3, lr}
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f0da:	f7ff ffdd 	bl	800f098 <xflow>
 800f0de:	ec41 0b10 	vmov	d0, r0, r1
 800f0e2:	bd08      	pop	{r3, pc}

0800f0e4 <fabs>:
 800f0e4:	ec51 0b10 	vmov	r0, r1, d0
 800f0e8:	ee10 2a10 	vmov	r2, s0
 800f0ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f0f0:	ec43 2b10 	vmov	d0, r2, r3
 800f0f4:	4770      	bx	lr
	...

0800f0f8 <scalbn>:
 800f0f8:	b570      	push	{r4, r5, r6, lr}
 800f0fa:	ec55 4b10 	vmov	r4, r5, d0
 800f0fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f102:	4606      	mov	r6, r0
 800f104:	462b      	mov	r3, r5
 800f106:	b999      	cbnz	r1, 800f130 <scalbn+0x38>
 800f108:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f10c:	4323      	orrs	r3, r4
 800f10e:	d03f      	beq.n	800f190 <scalbn+0x98>
 800f110:	4b35      	ldr	r3, [pc, #212]	; (800f1e8 <scalbn+0xf0>)
 800f112:	4629      	mov	r1, r5
 800f114:	ee10 0a10 	vmov	r0, s0
 800f118:	2200      	movs	r2, #0
 800f11a:	f7f1 fa6d 	bl	80005f8 <__aeabi_dmul>
 800f11e:	4b33      	ldr	r3, [pc, #204]	; (800f1ec <scalbn+0xf4>)
 800f120:	429e      	cmp	r6, r3
 800f122:	4604      	mov	r4, r0
 800f124:	460d      	mov	r5, r1
 800f126:	da10      	bge.n	800f14a <scalbn+0x52>
 800f128:	a327      	add	r3, pc, #156	; (adr r3, 800f1c8 <scalbn+0xd0>)
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	e01f      	b.n	800f170 <scalbn+0x78>
 800f130:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f134:	4291      	cmp	r1, r2
 800f136:	d10c      	bne.n	800f152 <scalbn+0x5a>
 800f138:	ee10 2a10 	vmov	r2, s0
 800f13c:	4620      	mov	r0, r4
 800f13e:	4629      	mov	r1, r5
 800f140:	f7f1 f8a4 	bl	800028c <__adddf3>
 800f144:	4604      	mov	r4, r0
 800f146:	460d      	mov	r5, r1
 800f148:	e022      	b.n	800f190 <scalbn+0x98>
 800f14a:	460b      	mov	r3, r1
 800f14c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f150:	3936      	subs	r1, #54	; 0x36
 800f152:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f156:	4296      	cmp	r6, r2
 800f158:	dd0d      	ble.n	800f176 <scalbn+0x7e>
 800f15a:	2d00      	cmp	r5, #0
 800f15c:	a11c      	add	r1, pc, #112	; (adr r1, 800f1d0 <scalbn+0xd8>)
 800f15e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f162:	da02      	bge.n	800f16a <scalbn+0x72>
 800f164:	a11c      	add	r1, pc, #112	; (adr r1, 800f1d8 <scalbn+0xe0>)
 800f166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f16a:	a319      	add	r3, pc, #100	; (adr r3, 800f1d0 <scalbn+0xd8>)
 800f16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f170:	f7f1 fa42 	bl	80005f8 <__aeabi_dmul>
 800f174:	e7e6      	b.n	800f144 <scalbn+0x4c>
 800f176:	1872      	adds	r2, r6, r1
 800f178:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f17c:	428a      	cmp	r2, r1
 800f17e:	dcec      	bgt.n	800f15a <scalbn+0x62>
 800f180:	2a00      	cmp	r2, #0
 800f182:	dd08      	ble.n	800f196 <scalbn+0x9e>
 800f184:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f188:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f18c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f190:	ec45 4b10 	vmov	d0, r4, r5
 800f194:	bd70      	pop	{r4, r5, r6, pc}
 800f196:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f19a:	da08      	bge.n	800f1ae <scalbn+0xb6>
 800f19c:	2d00      	cmp	r5, #0
 800f19e:	a10a      	add	r1, pc, #40	; (adr r1, 800f1c8 <scalbn+0xd0>)
 800f1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1a4:	dac0      	bge.n	800f128 <scalbn+0x30>
 800f1a6:	a10e      	add	r1, pc, #56	; (adr r1, 800f1e0 <scalbn+0xe8>)
 800f1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1ac:	e7bc      	b.n	800f128 <scalbn+0x30>
 800f1ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1b2:	3236      	adds	r2, #54	; 0x36
 800f1b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f1bc:	4620      	mov	r0, r4
 800f1be:	4b0c      	ldr	r3, [pc, #48]	; (800f1f0 <scalbn+0xf8>)
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	e7d5      	b.n	800f170 <scalbn+0x78>
 800f1c4:	f3af 8000 	nop.w
 800f1c8:	c2f8f359 	.word	0xc2f8f359
 800f1cc:	01a56e1f 	.word	0x01a56e1f
 800f1d0:	8800759c 	.word	0x8800759c
 800f1d4:	7e37e43c 	.word	0x7e37e43c
 800f1d8:	8800759c 	.word	0x8800759c
 800f1dc:	fe37e43c 	.word	0xfe37e43c
 800f1e0:	c2f8f359 	.word	0xc2f8f359
 800f1e4:	81a56e1f 	.word	0x81a56e1f
 800f1e8:	43500000 	.word	0x43500000
 800f1ec:	ffff3cb0 	.word	0xffff3cb0
 800f1f0:	3c900000 	.word	0x3c900000

0800f1f4 <__ieee754_sqrt>:
 800f1f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f8:	ec55 4b10 	vmov	r4, r5, d0
 800f1fc:	4e67      	ldr	r6, [pc, #412]	; (800f39c <__ieee754_sqrt+0x1a8>)
 800f1fe:	43ae      	bics	r6, r5
 800f200:	ee10 0a10 	vmov	r0, s0
 800f204:	ee10 2a10 	vmov	r2, s0
 800f208:	4629      	mov	r1, r5
 800f20a:	462b      	mov	r3, r5
 800f20c:	d10d      	bne.n	800f22a <__ieee754_sqrt+0x36>
 800f20e:	f7f1 f9f3 	bl	80005f8 <__aeabi_dmul>
 800f212:	4602      	mov	r2, r0
 800f214:	460b      	mov	r3, r1
 800f216:	4620      	mov	r0, r4
 800f218:	4629      	mov	r1, r5
 800f21a:	f7f1 f837 	bl	800028c <__adddf3>
 800f21e:	4604      	mov	r4, r0
 800f220:	460d      	mov	r5, r1
 800f222:	ec45 4b10 	vmov	d0, r4, r5
 800f226:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f22a:	2d00      	cmp	r5, #0
 800f22c:	dc0b      	bgt.n	800f246 <__ieee754_sqrt+0x52>
 800f22e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f232:	4326      	orrs	r6, r4
 800f234:	d0f5      	beq.n	800f222 <__ieee754_sqrt+0x2e>
 800f236:	b135      	cbz	r5, 800f246 <__ieee754_sqrt+0x52>
 800f238:	f7f1 f826 	bl	8000288 <__aeabi_dsub>
 800f23c:	4602      	mov	r2, r0
 800f23e:	460b      	mov	r3, r1
 800f240:	f7f1 fb04 	bl	800084c <__aeabi_ddiv>
 800f244:	e7eb      	b.n	800f21e <__ieee754_sqrt+0x2a>
 800f246:	1509      	asrs	r1, r1, #20
 800f248:	f000 808d 	beq.w	800f366 <__ieee754_sqrt+0x172>
 800f24c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f250:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f258:	07c9      	lsls	r1, r1, #31
 800f25a:	bf5c      	itt	pl
 800f25c:	005b      	lslpl	r3, r3, #1
 800f25e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f262:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f266:	bf58      	it	pl
 800f268:	0052      	lslpl	r2, r2, #1
 800f26a:	2500      	movs	r5, #0
 800f26c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f270:	1076      	asrs	r6, r6, #1
 800f272:	0052      	lsls	r2, r2, #1
 800f274:	f04f 0e16 	mov.w	lr, #22
 800f278:	46ac      	mov	ip, r5
 800f27a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f27e:	eb0c 0001 	add.w	r0, ip, r1
 800f282:	4298      	cmp	r0, r3
 800f284:	bfde      	ittt	le
 800f286:	1a1b      	suble	r3, r3, r0
 800f288:	eb00 0c01 	addle.w	ip, r0, r1
 800f28c:	186d      	addle	r5, r5, r1
 800f28e:	005b      	lsls	r3, r3, #1
 800f290:	f1be 0e01 	subs.w	lr, lr, #1
 800f294:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f298:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f29c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f2a0:	d1ed      	bne.n	800f27e <__ieee754_sqrt+0x8a>
 800f2a2:	4674      	mov	r4, lr
 800f2a4:	2720      	movs	r7, #32
 800f2a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f2aa:	4563      	cmp	r3, ip
 800f2ac:	eb01 000e 	add.w	r0, r1, lr
 800f2b0:	dc02      	bgt.n	800f2b8 <__ieee754_sqrt+0xc4>
 800f2b2:	d113      	bne.n	800f2dc <__ieee754_sqrt+0xe8>
 800f2b4:	4290      	cmp	r0, r2
 800f2b6:	d811      	bhi.n	800f2dc <__ieee754_sqrt+0xe8>
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	eb00 0e01 	add.w	lr, r0, r1
 800f2be:	da57      	bge.n	800f370 <__ieee754_sqrt+0x17c>
 800f2c0:	f1be 0f00 	cmp.w	lr, #0
 800f2c4:	db54      	blt.n	800f370 <__ieee754_sqrt+0x17c>
 800f2c6:	f10c 0801 	add.w	r8, ip, #1
 800f2ca:	eba3 030c 	sub.w	r3, r3, ip
 800f2ce:	4290      	cmp	r0, r2
 800f2d0:	bf88      	it	hi
 800f2d2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800f2d6:	1a12      	subs	r2, r2, r0
 800f2d8:	440c      	add	r4, r1
 800f2da:	46c4      	mov	ip, r8
 800f2dc:	005b      	lsls	r3, r3, #1
 800f2de:	3f01      	subs	r7, #1
 800f2e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f2e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f2e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f2ec:	d1dd      	bne.n	800f2aa <__ieee754_sqrt+0xb6>
 800f2ee:	4313      	orrs	r3, r2
 800f2f0:	d01b      	beq.n	800f32a <__ieee754_sqrt+0x136>
 800f2f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f3a0 <__ieee754_sqrt+0x1ac>
 800f2f6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f3a4 <__ieee754_sqrt+0x1b0>
 800f2fa:	e9da 0100 	ldrd	r0, r1, [sl]
 800f2fe:	e9db 2300 	ldrd	r2, r3, [fp]
 800f302:	f7f0 ffc1 	bl	8000288 <__aeabi_dsub>
 800f306:	e9da 8900 	ldrd	r8, r9, [sl]
 800f30a:	4602      	mov	r2, r0
 800f30c:	460b      	mov	r3, r1
 800f30e:	4640      	mov	r0, r8
 800f310:	4649      	mov	r1, r9
 800f312:	f7f1 fbed 	bl	8000af0 <__aeabi_dcmple>
 800f316:	b140      	cbz	r0, 800f32a <__ieee754_sqrt+0x136>
 800f318:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800f31c:	e9da 0100 	ldrd	r0, r1, [sl]
 800f320:	e9db 2300 	ldrd	r2, r3, [fp]
 800f324:	d126      	bne.n	800f374 <__ieee754_sqrt+0x180>
 800f326:	3501      	adds	r5, #1
 800f328:	463c      	mov	r4, r7
 800f32a:	106a      	asrs	r2, r5, #1
 800f32c:	0863      	lsrs	r3, r4, #1
 800f32e:	07e9      	lsls	r1, r5, #31
 800f330:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f334:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f338:	bf48      	it	mi
 800f33a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f33e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f342:	461c      	mov	r4, r3
 800f344:	e76d      	b.n	800f222 <__ieee754_sqrt+0x2e>
 800f346:	0ad3      	lsrs	r3, r2, #11
 800f348:	3815      	subs	r0, #21
 800f34a:	0552      	lsls	r2, r2, #21
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d0fa      	beq.n	800f346 <__ieee754_sqrt+0x152>
 800f350:	02dc      	lsls	r4, r3, #11
 800f352:	d50a      	bpl.n	800f36a <__ieee754_sqrt+0x176>
 800f354:	f1c1 0420 	rsb	r4, r1, #32
 800f358:	fa22 f404 	lsr.w	r4, r2, r4
 800f35c:	1e4d      	subs	r5, r1, #1
 800f35e:	408a      	lsls	r2, r1
 800f360:	4323      	orrs	r3, r4
 800f362:	1b41      	subs	r1, r0, r5
 800f364:	e772      	b.n	800f24c <__ieee754_sqrt+0x58>
 800f366:	4608      	mov	r0, r1
 800f368:	e7f0      	b.n	800f34c <__ieee754_sqrt+0x158>
 800f36a:	005b      	lsls	r3, r3, #1
 800f36c:	3101      	adds	r1, #1
 800f36e:	e7ef      	b.n	800f350 <__ieee754_sqrt+0x15c>
 800f370:	46e0      	mov	r8, ip
 800f372:	e7aa      	b.n	800f2ca <__ieee754_sqrt+0xd6>
 800f374:	f7f0 ff8a 	bl	800028c <__adddf3>
 800f378:	e9da 8900 	ldrd	r8, r9, [sl]
 800f37c:	4602      	mov	r2, r0
 800f37e:	460b      	mov	r3, r1
 800f380:	4640      	mov	r0, r8
 800f382:	4649      	mov	r1, r9
 800f384:	f7f1 fbaa 	bl	8000adc <__aeabi_dcmplt>
 800f388:	b120      	cbz	r0, 800f394 <__ieee754_sqrt+0x1a0>
 800f38a:	1ca0      	adds	r0, r4, #2
 800f38c:	bf08      	it	eq
 800f38e:	3501      	addeq	r5, #1
 800f390:	3402      	adds	r4, #2
 800f392:	e7ca      	b.n	800f32a <__ieee754_sqrt+0x136>
 800f394:	3401      	adds	r4, #1
 800f396:	f024 0401 	bic.w	r4, r4, #1
 800f39a:	e7c6      	b.n	800f32a <__ieee754_sqrt+0x136>
 800f39c:	7ff00000 	.word	0x7ff00000
 800f3a0:	200001f0 	.word	0x200001f0
 800f3a4:	200001f8 	.word	0x200001f8

0800f3a8 <_init>:
 800f3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3aa:	bf00      	nop
 800f3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ae:	bc08      	pop	{r3}
 800f3b0:	469e      	mov	lr, r3
 800f3b2:	4770      	bx	lr

0800f3b4 <_fini>:
 800f3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b6:	bf00      	nop
 800f3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ba:	bc08      	pop	{r3}
 800f3bc:	469e      	mov	lr, r3
 800f3be:	4770      	bx	lr
