
RocketController_ISE.ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08009230  08009230  00019230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096c8  080096c8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  080096c8  080096c8  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096c8  080096c8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096c8  080096c8  000196c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096cc  080096cc  000196cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080096d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000390  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000580  20000580  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d9b2  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000214f  00000000  00000000  0002dc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e10  00000000  00000000  0002fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ae7  00000000  00000000  00030b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c183  00000000  00000000  0003165f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010fef  00000000  00000000  0004d7e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a387b  00000000  00000000  0005e7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e94  00000000  00000000  0010204c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00106ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009218 	.word	0x08009218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009218 	.word	0x08009218

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <bmpRead8>:
// 標準気圧に対する温度の勾配
#define TEMPERATURE_GRADIENT 0.0065
// 標準気圧に対する重力加速度
#define GRAVITY 9.80665

uint8_t bmpRead8(uint8_t a) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	uint8_t r;
	HAL_I2C_Master_Transmit(bmpPort, BMP180_ADDR, &a, 1, HAL_MAX_DELAY);
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <bmpRead8+0x44>)
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	23ee      	movs	r3, #238	; 0xee
 8000c58:	b299      	uxth	r1, r3
 8000c5a:	1dfa      	adds	r2, r7, #7
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	f001 fdec 	bl	8002840 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(bmpPort, BMP180_ADDR, &r, 1, HAL_MAX_DELAY);
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <bmpRead8+0x44>)
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	23ee      	movs	r3, #238	; 0xee
 8000c6e:	b299      	uxth	r1, r3
 8000c70:	f107 020f 	add.w	r2, r7, #15
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f001 fed4 	bl	8002a28 <HAL_I2C_Master_Receive>
	return r;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000020c 	.word	0x2000020c

08000c90 <bmpRead16>:
uint16_t bmpRead16(uint8_t a) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	uint8_t retbuf[2];
	uint16_t r;
	HAL_I2C_Master_Transmit(bmpPort, BMP180_ADDR, &a, 1, HAL_MAX_DELAY);
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <bmpRead16+0x54>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	23ee      	movs	r3, #238	; 0xee
 8000ca0:	b299      	uxth	r1, r3
 8000ca2:	1dfa      	adds	r2, r7, #7
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	f001 fdc8 	bl	8002840 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(bmpPort, BMP180_ADDR, retbuf, 2, HAL_MAX_DELAY);
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <bmpRead16+0x54>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	23ee      	movs	r3, #238	; 0xee
 8000cb6:	b299      	uxth	r1, r3
 8000cb8:	f107 020c 	add.w	r2, r7, #12
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	f001 feb0 	bl	8002a28 <HAL_I2C_Master_Receive>
	r = retbuf[1] | (retbuf[0] << 8);
 8000cc8:	7b7b      	ldrb	r3, [r7, #13]
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	7b3b      	ldrb	r3, [r7, #12]
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81fb      	strh	r3, [r7, #14]
	return r;
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000020c 	.word	0x2000020c

08000ce8 <bmpWrite8>:
void bmpWrite8(uint8_t a, uint8_t d) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	71bb      	strb	r3, [r7, #6]
	uint8_t tBuf[2];
	tBuf[0] = a;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	733b      	strb	r3, [r7, #12]
	tBuf[1] = d;
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(bmpPort, BMP180_ADDR, tBuf, 2, HAL_MAX_DELAY);
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <bmpWrite8+0x38>)
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	23ee      	movs	r3, #238	; 0xee
 8000d06:	b299      	uxth	r1, r3
 8000d08:	f107 020c 	add.w	r2, r7, #12
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2302      	movs	r3, #2
 8000d14:	f001 fd94 	bl	8002840 <HAL_I2C_Master_Transmit>
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000020c 	.word	0x2000020c

08000d24 <bmpBegin>:
uint8_t bmpBegin(uint8_t mode, I2C_HandleTypeDef *i2cdev) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
	bmpPort = i2cdev;
 8000d30:	4a32      	ldr	r2, [pc, #200]	; (8000dfc <bmpBegin+0xd8>)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	6013      	str	r3, [r2, #0]
	if (mode > BMP180_ULTRAHIGHRES)
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d901      	bls.n	8000d40 <bmpBegin+0x1c>
		mode = BMP180_ULTRAHIGHRES;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	71fb      	strb	r3, [r7, #7]
	oversampling = mode;
 8000d40:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <bmpBegin+0xdc>)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	7013      	strb	r3, [r2, #0]
	if (bmpRead8(0xD0) != 0x55)
 8000d46:	20d0      	movs	r0, #208	; 0xd0
 8000d48:	f7ff ff7e 	bl	8000c48 <bmpRead8>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b55      	cmp	r3, #85	; 0x55
 8000d50:	d001      	beq.n	8000d56 <bmpBegin+0x32>
		return 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e04d      	b.n	8000df2 <bmpBegin+0xce>
	/* read calibration data */
	ac1 = bmpRead16(BMP180_CAL_AC1);
 8000d56:	20aa      	movs	r0, #170	; 0xaa
 8000d58:	f7ff ff9a 	bl	8000c90 <bmpRead16>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <bmpBegin+0xe0>)
 8000d62:	801a      	strh	r2, [r3, #0]
	ac2 = bmpRead16(BMP180_CAL_AC2);
 8000d64:	20ac      	movs	r0, #172	; 0xac
 8000d66:	f7ff ff93 	bl	8000c90 <bmpRead16>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <bmpBegin+0xe4>)
 8000d70:	801a      	strh	r2, [r3, #0]
	ac3 = bmpRead16(BMP180_CAL_AC3);
 8000d72:	20ae      	movs	r0, #174	; 0xae
 8000d74:	f7ff ff8c 	bl	8000c90 <bmpRead16>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <bmpBegin+0xe8>)
 8000d7e:	801a      	strh	r2, [r3, #0]
	ac4 = bmpRead16(BMP180_CAL_AC4);
 8000d80:	20b0      	movs	r0, #176	; 0xb0
 8000d82:	f7ff ff85 	bl	8000c90 <bmpRead16>
 8000d86:	4603      	mov	r3, r0
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <bmpBegin+0xec>)
 8000d8c:	801a      	strh	r2, [r3, #0]
	ac5 = bmpRead16(BMP180_CAL_AC5);
 8000d8e:	20b2      	movs	r0, #178	; 0xb2
 8000d90:	f7ff ff7e 	bl	8000c90 <bmpRead16>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <bmpBegin+0xf0>)
 8000d9a:	801a      	strh	r2, [r3, #0]
	ac6 = bmpRead16(BMP180_CAL_AC6);
 8000d9c:	20b4      	movs	r0, #180	; 0xb4
 8000d9e:	f7ff ff77 	bl	8000c90 <bmpRead16>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <bmpBegin+0xf4>)
 8000da8:	801a      	strh	r2, [r3, #0]
	b1 = bmpRead16(BMP180_CAL_B1);
 8000daa:	20b6      	movs	r0, #182	; 0xb6
 8000dac:	f7ff ff70 	bl	8000c90 <bmpRead16>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <bmpBegin+0xf8>)
 8000db6:	801a      	strh	r2, [r3, #0]
	b2 = bmpRead16(BMP180_CAL_B2);
 8000db8:	20b8      	movs	r0, #184	; 0xb8
 8000dba:	f7ff ff69 	bl	8000c90 <bmpRead16>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <bmpBegin+0xfc>)
 8000dc4:	801a      	strh	r2, [r3, #0]
	mb = bmpRead16(BMP180_CAL_MB);
 8000dc6:	20ba      	movs	r0, #186	; 0xba
 8000dc8:	f7ff ff62 	bl	8000c90 <bmpRead16>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <bmpBegin+0x100>)
 8000dd2:	801a      	strh	r2, [r3, #0]
	mc = bmpRead16(BMP180_CAL_MC);
 8000dd4:	20bc      	movs	r0, #188	; 0xbc
 8000dd6:	f7ff ff5b 	bl	8000c90 <bmpRead16>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <bmpBegin+0x104>)
 8000de0:	801a      	strh	r2, [r3, #0]
	md = bmpRead16(BMP180_CAL_MD);
 8000de2:	20be      	movs	r0, #190	; 0xbe
 8000de4:	f7ff ff54 	bl	8000c90 <bmpRead16>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <bmpBegin+0x108>)
 8000dee:	801a      	strh	r2, [r3, #0]
	return 1;
 8000df0:	2301      	movs	r3, #1
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000020c 	.word	0x2000020c
 8000e00:	20000210 	.word	0x20000210
 8000e04:	20000212 	.word	0x20000212
 8000e08:	20000214 	.word	0x20000214
 8000e0c:	20000216 	.word	0x20000216
 8000e10:	20000222 	.word	0x20000222
 8000e14:	20000224 	.word	0x20000224
 8000e18:	20000226 	.word	0x20000226
 8000e1c:	20000218 	.word	0x20000218
 8000e20:	2000021a 	.word	0x2000021a
 8000e24:	2000021c 	.word	0x2000021c
 8000e28:	2000021e 	.word	0x2000021e
 8000e2c:	20000220 	.word	0x20000220

08000e30 <computeB5>:
// Sensor read functions
int32_t computeB5(int32_t UT) {
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	int32_t X1 = (UT - (int32_t) ac6) * ((int32_t) ac5) >> 15;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <computeB5+0x4c>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <computeB5+0x50>)
 8000e44:	8812      	ldrh	r2, [r2, #0]
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	13db      	asrs	r3, r3, #15
 8000e4c:	60fb      	str	r3, [r7, #12]
	int32_t X2 = ((int32_t) mc << 11) / (X1 + (int32_t) md);
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <computeB5+0x54>)
 8000e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e54:	02da      	lsls	r2, r3, #11
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <computeB5+0x58>)
 8000e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	440b      	add	r3, r1
 8000e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e66:	60bb      	str	r3, [r7, #8]
	return X1 + X2;
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	4413      	add	r3, r2
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000226 	.word	0x20000226
 8000e80:	20000224 	.word	0x20000224
 8000e84:	2000021e 	.word	0x2000021e
 8000e88:	20000220 	.word	0x20000220

08000e8c <readBMPRawTemperature>:
uint16_t readBMPRawTemperature(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	bmpWrite8(BMP180_CONTROL, BMP180_READTEMPCMD);
 8000e90:	212e      	movs	r1, #46	; 0x2e
 8000e92:	20f4      	movs	r0, #244	; 0xf4
 8000e94:	f7ff ff28 	bl	8000ce8 <bmpWrite8>
	HAL_Delay(5);
 8000e98:	2005      	movs	r0, #5
 8000e9a:	f001 f995 	bl	80021c8 <HAL_Delay>
	return bmpRead16(BMP180_TEMPDATA);
 8000e9e:	20f6      	movs	r0, #246	; 0xf6
 8000ea0:	f7ff fef6 	bl	8000c90 <bmpRead16>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <readBMPRawPressure>:
uint32_t readBMPRawPressure(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	uint32_t raw;
	bmpWrite8(BMP180_CONTROL, BMP180_READPRESSURECMD + (oversampling << 6));
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	019b      	lsls	r3, r3, #6
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3334      	adds	r3, #52	; 0x34
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	20f4      	movs	r0, #244	; 0xf4
 8000ec2:	f7ff ff11 	bl	8000ce8 <bmpWrite8>
	if (oversampling == BMP180_ULTRALOWPOWER)
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <readBMPRawPressure+0x2a>
		HAL_Delay(5);
 8000ece:	2005      	movs	r0, #5
 8000ed0:	f001 f97a 	bl	80021c8 <HAL_Delay>
 8000ed4:	e012      	b.n	8000efc <readBMPRawPressure+0x50>
	else if (oversampling == BMP180_STANDARD)
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d103      	bne.n	8000ee6 <readBMPRawPressure+0x3a>
		HAL_Delay(8);
 8000ede:	2008      	movs	r0, #8
 8000ee0:	f001 f972 	bl	80021c8 <HAL_Delay>
 8000ee4:	e00a      	b.n	8000efc <readBMPRawPressure+0x50>
	else if (oversampling == BMP180_HIGHRES)
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d103      	bne.n	8000ef6 <readBMPRawPressure+0x4a>
		HAL_Delay(14);
 8000eee:	200e      	movs	r0, #14
 8000ef0:	f001 f96a 	bl	80021c8 <HAL_Delay>
 8000ef4:	e002      	b.n	8000efc <readBMPRawPressure+0x50>
	else
		HAL_Delay(26);
 8000ef6:	201a      	movs	r0, #26
 8000ef8:	f001 f966 	bl	80021c8 <HAL_Delay>
	raw = bmpRead16(BMP180_PRESSUREDATA);
 8000efc:	20f6      	movs	r0, #246	; 0xf6
 8000efe:	f7ff fec7 	bl	8000c90 <bmpRead16>
 8000f02:	4603      	mov	r3, r0
 8000f04:	607b      	str	r3, [r7, #4]
	raw <<= 8;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	607b      	str	r3, [r7, #4]
	raw |= bmpRead8(BMP180_PRESSUREDATA + 2);
 8000f0c:	20f8      	movs	r0, #248	; 0xf8
 8000f0e:	f7ff fe9b 	bl	8000c48 <bmpRead8>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	607b      	str	r3, [r7, #4]
	raw >>= (8 - oversampling);
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <readBMPRawPressure+0x8c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	f1c3 0308 	rsb	r3, r3, #8
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2a:	607b      	str	r3, [r7, #4]
	return raw;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000210 	.word	0x20000210

08000f3c <readBMPTemperature>:
float readBMPTemperature(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
	int32_t UT, B5; // following ds convention
	float temp;
	UT = readBMPRawTemperature();
 8000f42:	f7ff ffa3 	bl	8000e8c <readBMPRawTemperature>
 8000f46:	4603      	mov	r3, r0
 8000f48:	60fb      	str	r3, [r7, #12]
	B5 = computeB5(UT);
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff ff70 	bl	8000e30 <computeB5>
 8000f50:	60b8      	str	r0, [r7, #8]
	temp = (B5 + 8) >> 4;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	3308      	adds	r3, #8
 8000f56:	111b      	asrs	r3, r3, #4
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f60:	edc7 7a01 	vstr	s15, [r7, #4]
	temp /= 10;
 8000f64:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f68:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f70:	edc7 7a01 	vstr	s15, [r7, #4]
	return temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	ee07 3a90 	vmov	s15, r3
}
 8000f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <readBMPPressure>:
int32_t readBMPPressure(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
	int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
	uint32_t B4, B7;
	UT = readBMPRawTemperature();
 8000f8a:	f7ff ff7f 	bl	8000e8c <readBMPRawTemperature>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
	UP = readBMPRawPressure();
 8000f92:	f7ff ff8b 	bl	8000eac <readBMPRawPressure>
 8000f96:	4603      	mov	r3, r0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
	B5 = computeB5(UT);
 8000f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f9c:	f7ff ff48 	bl	8000e30 <computeB5>
 8000fa0:	6238      	str	r0, [r7, #32]
	// do pressure calcs
	B6 = B5 - 4000;
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000fa8:	61fb      	str	r3, [r7, #28]
	X1 = ((int32_t) b2 * ((B6 * B6) >> 12)) >> 11;
 8000faa:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <readBMPPressure+0x13c>)
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fb03 f303 	mul.w	r3, r3, r3
 8000fb8:	131b      	asrs	r3, r3, #12
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	12db      	asrs	r3, r3, #11
 8000fc0:	61bb      	str	r3, [r7, #24]
	X2 = ((int32_t) ac2 * B6) >> 11;
 8000fc2:	4b40      	ldr	r3, [pc, #256]	; (80010c4 <readBMPPressure+0x140>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fb02 f303 	mul.w	r3, r2, r3
 8000fd0:	12db      	asrs	r3, r3, #11
 8000fd2:	617b      	str	r3, [r7, #20]
	X3 = X1 + X2;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	4413      	add	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
	B3 = ((((int32_t) ac1 * 4 + X3) << oversampling) + 2) / 4;
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <readBMPPressure+0x144>)
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	009a      	lsls	r2, r3, #2
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a38      	ldr	r2, [pc, #224]	; (80010cc <readBMPPressure+0x148>)
 8000fea:	7812      	ldrb	r2, [r2, #0]
 8000fec:	4093      	lsls	r3, r2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da00      	bge.n	8000ff6 <readBMPPressure+0x72>
 8000ff4:	3303      	adds	r3, #3
 8000ff6:	109b      	asrs	r3, r3, #2
 8000ff8:	60fb      	str	r3, [r7, #12]
	X1 = ((int32_t) ac3 * B6) >> 13;
 8000ffa:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <readBMPPressure+0x14c>)
 8000ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001000:	461a      	mov	r2, r3
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	135b      	asrs	r3, r3, #13
 800100a:	61bb      	str	r3, [r7, #24]
	X2 = ((int32_t) b1 * ((B6 * B6) >> 12)) >> 16;
 800100c:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <readBMPPressure+0x150>)
 800100e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001012:	461a      	mov	r2, r3
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	fb03 f303 	mul.w	r3, r3, r3
 800101a:	131b      	asrs	r3, r3, #12
 800101c:	fb02 f303 	mul.w	r3, r2, r3
 8001020:	141b      	asrs	r3, r3, #16
 8001022:	617b      	str	r3, [r7, #20]
	X3 = ((X1 + X2) + 2) >> 2;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	4413      	add	r3, r2
 800102a:	3302      	adds	r3, #2
 800102c:	109b      	asrs	r3, r3, #2
 800102e:	613b      	str	r3, [r7, #16]
	B4 = ((uint32_t) ac4 * (uint32_t) (X3 + 32768)) >> 15;
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <readBMPPressure+0x154>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800103c:	fb02 f303 	mul.w	r3, r2, r3
 8001040:	0bdb      	lsrs	r3, r3, #15
 8001042:	60bb      	str	r3, [r7, #8]
	B7 = ((uint32_t) UP - B3) * (uint32_t) (50000UL >> oversampling);
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4a20      	ldr	r2, [pc, #128]	; (80010cc <readBMPPressure+0x148>)
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	4611      	mov	r1, r2
 8001050:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001054:	40ca      	lsrs	r2, r1
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	607b      	str	r3, [r7, #4]
	if (B7 < 0x80000000) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db06      	blt.n	8001070 <readBMPPressure+0xec>
		p = (B7 * 2) / B4;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	005a      	lsls	r2, r3, #1
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	fbb2 f3f3 	udiv	r3, r2, r3
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800106e:	e005      	b.n	800107c <readBMPPressure+0xf8>
	} else {
		p = (B7 / B4) * 2;
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	X1 = (p >> 8) * (p >> 8);
 800107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107e:	121b      	asrs	r3, r3, #8
 8001080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001082:	1212      	asrs	r2, r2, #8
 8001084:	fb02 f303 	mul.w	r3, r2, r3
 8001088:	61bb      	str	r3, [r7, #24]
	X1 = (X1 * 3038) >> 16;
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	f640 32de 	movw	r2, #3038	; 0xbde
 8001090:	fb02 f303 	mul.w	r3, r2, r3
 8001094:	141b      	asrs	r3, r3, #16
 8001096:	61bb      	str	r3, [r7, #24]
	X2 = (-7357 * p) >> 16;
 8001098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <readBMPPressure+0x158>)
 800109c:	fb02 f303 	mul.w	r3, r2, r3
 80010a0:	141b      	asrs	r3, r3, #16
 80010a2:	617b      	str	r3, [r7, #20]
	p = p + ((X1 + X2 + (int32_t) 3791) >> 4);
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	4413      	add	r3, r2
 80010aa:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80010ae:	111b      	asrs	r3, r3, #4
 80010b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010b2:	4413      	add	r3, r2
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 80010b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3730      	adds	r7, #48	; 0x30
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000021a 	.word	0x2000021a
 80010c4:	20000214 	.word	0x20000214
 80010c8:	20000212 	.word	0x20000212
 80010cc:	20000210 	.word	0x20000210
 80010d0:	20000216 	.word	0x20000216
 80010d4:	20000218 	.word	0x20000218
 80010d8:	20000222 	.word	0x20000222
 80010dc:	ffffe343 	.word	0xffffe343

080010e0 <calculateAltitude>:

double calculateAltitude(int32_t pressure, float temp) {
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	ed87 0a00 	vstr	s0, [r7]
    double pressureRatio = SEA_LEVEL_PRESSURE / pressure;
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fa19 	bl	8000524 <__aeabi_i2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	a127      	add	r1, pc, #156	; (adr r1, 8001194 <calculateAltitude+0xb4>)
 80010f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010fc:	f7ff fba6 	bl	800084c <__aeabi_ddiv>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double altitude = (pow(pressureRatio, 1.0 / 5.257) - 1.0) * (temp + 273.15) / 0.0065;
 8001108:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8001178 <calculateAltitude+0x98>
 800110c:	ed97 0b04 	vldr	d0, [r7, #16]
 8001110:	f007 f94a 	bl	80083a8 <pow>
 8001114:	ec51 0b10 	vmov	r0, r1, d0
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <calculateAltitude+0xb0>)
 800111e:	f7ff f8b3 	bl	8000288 <__aeabi_dsub>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4614      	mov	r4, r2
 8001128:	461d      	mov	r5, r3
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_f2d>
 8001130:	a313      	add	r3, pc, #76	; (adr r3, 8001180 <calculateAltitude+0xa0>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff f8a9 	bl	800028c <__adddf3>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4620      	mov	r0, r4
 8001140:	4629      	mov	r1, r5
 8001142:	f7ff fa59 	bl	80005f8 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	a30e      	add	r3, pc, #56	; (adr r3, 8001188 <calculateAltitude+0xa8>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fb7a 	bl	800084c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return altitude;
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	ec43 2b17 	vmov	d7, r2, r3
}
 8001168:	eeb0 0a47 	vmov.f32	s0, s14
 800116c:	eef0 0a67 	vmov.f32	s1, s15
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bdb0      	pop	{r4, r5, r7, pc}
 8001176:	bf00      	nop
 8001178:	7dee2d4a 	.word	0x7dee2d4a
 800117c:	3fc85936 	.word	0x3fc85936
 8001180:	66666666 	.word	0x66666666
 8001184:	40711266 	.word	0x40711266
 8001188:	76c8b439 	.word	0x76c8b439
 800118c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001190:	3ff00000 	.word	0x3ff00000
 8001194:	00000000 	.word	0x00000000
 8001198:	40f8bcd0 	.word	0x40f8bcd0

0800119c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80011bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00b      	beq.n	80011dc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011c4:	e000      	b.n	80011c8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f9      	beq.n	80011c6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011d2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b5b0      	push	{r4, r5, r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f000 ff83 	bl	80020fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f951 	bl	800149c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fa:	f000 faad 	bl	8001758 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011fe:	f000 f9a5 	bl	800154c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001202:	f000 f9e3 	bl	80015cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001206:	f000 fa59 	bl	80016bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //ServoMotor
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800120a:	2100      	movs	r1, #0
 800120c:	4890      	ldr	r0, [pc, #576]	; (8001450 <main+0x264>)
 800120e:	f003 fc8b 	bl	8004b28 <HAL_TIM_PWM_Start>
  //servoTest(80,60,2);

  //bmp180
  int initBMP180 = bmpBegin(1, &hi2c1);
 8001212:	4990      	ldr	r1, [pc, #576]	; (8001454 <main+0x268>)
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fd85 	bl	8000d24 <bmpBegin>
 800121a:	4603      	mov	r3, r0
 800121c:	607b      	str	r3, [r7, #4]

  	if (initBMP180 == 1) {
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d138      	bne.n	8001296 <main+0xaa>
  		printf("successfully initialized BMP180\n");
 8001224:	488c      	ldr	r0, [pc, #560]	; (8001458 <main+0x26c>)
 8001226:	f005 f923 	bl	8006470 <puts>
  		HAL_Delay(20);
 800122a:	2014      	movs	r0, #20
 800122c:	f000 ffcc 	bl	80021c8 <HAL_Delay>
  		initializeAltitudeArray(getRawAltitude());
 8001230:	f000 fbc2 	bl	80019b8 <getRawAltitude>
 8001234:	eeb0 7a40 	vmov.f32	s14, s0
 8001238:	eef0 7a60 	vmov.f32	s15, s1
 800123c:	eeb0 0a47 	vmov.f32	s0, s14
 8001240:	eef0 0a67 	vmov.f32	s1, s15
 8001244:	f000 fb98 	bl	8001978 <initializeAltitudeArray>
  		SEALEVEL_ALTITUDE = getFilteredAltitude(getRawAltitude());
 8001248:	f000 fbb6 	bl	80019b8 <getRawAltitude>
 800124c:	eeb0 7a40 	vmov.f32	s14, s0
 8001250:	eef0 7a60 	vmov.f32	s15, s1
 8001254:	eeb0 0a47 	vmov.f32	s0, s14
 8001258:	eef0 0a67 	vmov.f32	s1, s15
 800125c:	f000 fbe0 	bl	8001a20 <getFilteredAltitude>
 8001260:	eeb0 7a40 	vmov.f32	s14, s0
 8001264:	eef0 7a60 	vmov.f32	s15, s1
 8001268:	4b7c      	ldr	r3, [pc, #496]	; (800145c <main+0x270>)
 800126a:	ed83 7b00 	vstr	d7, [r3]
  		initializeAltitudeArray(getRawAltitude() - SEALEVEL_ALTITUDE);
 800126e:	f000 fba3 	bl	80019b8 <getRawAltitude>
 8001272:	ec51 0b10 	vmov	r0, r1, d0
 8001276:	4b79      	ldr	r3, [pc, #484]	; (800145c <main+0x270>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff f804 	bl	8000288 <__aeabi_dsub>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	ec43 2b17 	vmov	d7, r2, r3
 8001288:	eeb0 0a47 	vmov.f32	s0, s14
 800128c:	eef0 0a67 	vmov.f32	s1, s15
 8001290:	f000 fb72 	bl	8001978 <initializeAltitudeArray>
 8001294:	e002      	b.n	800129c <main+0xb0>

  	} else {
  		printf("initializing BMP180 failed\n");
 8001296:	4872      	ldr	r0, [pc, #456]	; (8001460 <main+0x274>)
 8001298:	f005 f8ea 	bl	8006470 <puts>
  	}

  //fpState
  fpState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800129c:	2110      	movs	r1, #16
 800129e:	4871      	ldr	r0, [pc, #452]	; (8001464 <main+0x278>)
 80012a0:	f001 fa0e 	bl	80026c0 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b6f      	ldr	r3, [pc, #444]	; (8001468 <main+0x27c>)
 80012aa:	601a      	str	r2, [r3, #0]
  initializeFpStateArray(fpState);
 80012ac:	4b6e      	ldr	r3, [pc, #440]	; (8001468 <main+0x27c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fb45 	bl	8001940 <initializeFpStateArray>



	  //update Altitude

	  if (initBMP180) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d040      	beq.n	800133e <main+0x152>
	  			altitude = getRawAltitude() - SEALEVEL_ALTITUDE;
 80012bc:	f000 fb7c 	bl	80019b8 <getRawAltitude>
 80012c0:	ec51 0b10 	vmov	r0, r1, d0
 80012c4:	4b65      	ldr	r3, [pc, #404]	; (800145c <main+0x270>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	f7fe ffdd 	bl	8000288 <__aeabi_dsub>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4966      	ldr	r1, [pc, #408]	; (800146c <main+0x280>)
 80012d4:	e9c1 2300 	strd	r2, r3, [r1]
	  			filteredAltitude = getFilteredAltitude(altitude);
 80012d8:	4b64      	ldr	r3, [pc, #400]	; (800146c <main+0x280>)
 80012da:	ed93 7b00 	vldr	d7, [r3]
 80012de:	eeb0 0a47 	vmov.f32	s0, s14
 80012e2:	eef0 0a67 	vmov.f32	s1, s15
 80012e6:	f000 fb9b 	bl	8001a20 <getFilteredAltitude>
 80012ea:	eeb0 7a40 	vmov.f32	s14, s0
 80012ee:	eef0 7a60 	vmov.f32	s15, s1
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <main+0x284>)
 80012f4:	ed83 7b00 	vstr	d7, [r3]

	  			if (filteredAltitude > maxAltitude) {
 80012f8:	4b5d      	ldr	r3, [pc, #372]	; (8001470 <main+0x284>)
 80012fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fe:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <main+0x288>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff fc08 	bl	8000b18 <__aeabi_dcmpgt>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <main+0x12e>
	  				maxAltitude = filteredAltitude;
 800130e:	4b58      	ldr	r3, [pc, #352]	; (8001470 <main+0x284>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	4957      	ldr	r1, [pc, #348]	; (8001474 <main+0x288>)
 8001316:	e9c1 2300 	strd	r2, r3, [r1]
	  			}

	  			printf("rawAltiude= %f, fileteredAltitude = %f, maxAltitude = %f\n",
 800131a:	4b54      	ldr	r3, [pc, #336]	; (800146c <main+0x280>)
 800131c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <main+0x284>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	4953      	ldr	r1, [pc, #332]	; (8001474 <main+0x288>)
 8001328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800132c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001330:	e9cd 2300 	strd	r2, r3, [sp]
 8001334:	4622      	mov	r2, r4
 8001336:	462b      	mov	r3, r5
 8001338:	484f      	ldr	r0, [pc, #316]	; (8001478 <main+0x28c>)
 800133a:	f005 f833 	bl	80063a4 <iprintf>
	  					altitude, filteredAltitude, maxAltitude);
	  		}


	  //update Flight Pin Value
	  		fpState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800133e:	2110      	movs	r1, #16
 8001340:	4848      	ldr	r0, [pc, #288]	; (8001464 <main+0x278>)
 8001342:	f001 f9bd 	bl	80026c0 <HAL_GPIO_ReadPin>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <main+0x27c>)
 800134c:	601a      	str	r2, [r3, #0]
	  		printf("mode = %d, FlightPin = %d\n", mode, fpState);
 800134e:	4b4b      	ldr	r3, [pc, #300]	; (800147c <main+0x290>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a45      	ldr	r2, [pc, #276]	; (8001468 <main+0x27c>)
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	4849      	ldr	r0, [pc, #292]	; (8001480 <main+0x294>)
 800135a:	f005 f823 	bl	80063a4 <iprintf>

	  		//update LED state
	  		indicateMode(mode);
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <main+0x290>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fc94 	bl	8001c90 <indicateMode>

	  		if (mode != 0) {
 8001368:	4b44      	ldr	r3, [pc, #272]	; (800147c <main+0x290>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00a      	beq.n	8001386 <main+0x19a>
	  			if (!isLaunched(fpState)) {
 8001370:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <main+0x27c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fa7b 	bl	8001870 <isLaunched>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <main+0x19a>
	  				mode = 0;
 8001380:	4b3e      	ldr	r3, [pc, #248]	; (800147c <main+0x290>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
	  				//servoWrite(closeAngle);
	  			}
	  		}

	  		switch (mode) {
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <main+0x290>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d04f      	beq.n	800142e <main+0x242>
 800138e:	2b02      	cmp	r3, #2
 8001390:	dc91      	bgt.n	80012b6 <main+0xca>
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <main+0x1b0>
 8001396:	2b01      	cmp	r3, #1
 8001398:	d01a      	beq.n	80013d0 <main+0x1e4>
 800139a:	e057      	b.n	800144c <main+0x260>
	  		//mode0: standby, mode1:launched, mode2: paraOpen, mode3: lowPower
	  		case 0:
	  			if (isLaunched(fpState)) {
 800139c:	4b32      	ldr	r3, [pc, #200]	; (8001468 <main+0x27c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 fa65 	bl	8001870 <isLaunched>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d04a      	beq.n	8001442 <main+0x256>
	  				HAL_TIM_Base_Start_IT(&htim3);
 80013ac:	4835      	ldr	r0, [pc, #212]	; (8001484 <main+0x298>)
 80013ae:	f003 fafd 	bl	80049ac <HAL_TIM_Base_Start_IT>
	  				startTime = HAL_GetTick();
 80013b2:	f000 fefd 	bl	80021b0 <HAL_GetTick>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b33      	ldr	r3, [pc, #204]	; (8001488 <main+0x29c>)
 80013bc:	601a      	str	r2, [r3, #0]
	  				printf("launched\n");
 80013be:	4833      	ldr	r0, [pc, #204]	; (800148c <main+0x2a0>)
 80013c0:	f005 f856 	bl	8006470 <puts>
	  				mode++;
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <main+0x290>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a2c      	ldr	r2, [pc, #176]	; (800147c <main+0x290>)
 80013cc:	6013      	str	r3, [r2, #0]
	  			}
	  			break;
 80013ce:	e038      	b.n	8001442 <main+0x256>
	  		case 1:
	  			timeFromLaunch = HAL_GetTick() - startTime;
 80013d0:	f000 feee 	bl	80021b0 <HAL_GetTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a2c      	ldr	r2, [pc, #176]	; (8001488 <main+0x29c>)
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	1a9b      	subs	r3, r3, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <main+0x2a4>)
 80013e0:	601a      	str	r2, [r3, #0]
	  			printf("timeFromLaunch = %d\n", timeFromLaunch);
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <main+0x2a4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4619      	mov	r1, r3
 80013e8:	482a      	ldr	r0, [pc, #168]	; (8001494 <main+0x2a8>)
 80013ea:	f004 ffdb 	bl	80063a4 <iprintf>

	  			if (isTopReached(timeFromLaunch, altitude, maxAltitude)) {
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <main+0x2a4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1e      	ldr	r2, [pc, #120]	; (800146c <main+0x280>)
 80013f4:	ed92 7b00 	vldr	d7, [r2]
 80013f8:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <main+0x288>)
 80013fa:	ed92 6b00 	vldr	d6, [r2]
 80013fe:	eeb0 1a46 	vmov.f32	s2, s12
 8001402:	eef0 1a66 	vmov.f32	s3, s13
 8001406:	eeb0 0a47 	vmov.f32	s0, s14
 800140a:	eef0 0a67 	vmov.f32	s1, s15
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fa62 	bl	80018d8 <isTopReached>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d015      	beq.n	8001446 <main+0x25a>
	  				servoWrite(openAngle);
 800141a:	2323      	movs	r3, #35	; 0x23
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fa01 	bl	8001824 <servoWrite>
	  				mode++;
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <main+0x290>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <main+0x290>)
 800142a:	6013      	str	r3, [r2, #0]
	  			}
	  			break;
 800142c:	e00b      	b.n	8001446 <main+0x25a>
	  		case 2:
	  			if (timeFromLaunch > 100 * 60) {
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <main+0x2a4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f241 7270 	movw	r2, #6000	; 0x1770
 8001436:	4293      	cmp	r3, r2
 8001438:	dd07      	ble.n	800144a <main+0x25e>
	  				//servoWrite(closeAngle);
	  				printf("servoclose\n");
 800143a:	4817      	ldr	r0, [pc, #92]	; (8001498 <main+0x2ac>)
 800143c:	f005 f818 	bl	8006470 <puts>
	  				//break;
	  			}
	  			break;
 8001440:	e003      	b.n	800144a <main+0x25e>
	  			break;
 8001442:	bf00      	nop
 8001444:	e737      	b.n	80012b6 <main+0xca>
	  			break;
 8001446:	bf00      	nop
 8001448:	e735      	b.n	80012b6 <main+0xca>
	  			break;
 800144a:	bf00      	nop
	  if (initBMP180) {
 800144c:	e733      	b.n	80012b6 <main+0xca>
 800144e:	bf00      	nop
 8001450:	20000394 	.word	0x20000394
 8001454:	20000340 	.word	0x20000340
 8001458:	08009230 	.word	0x08009230
 800145c:	20000288 	.word	0x20000288
 8001460:	08009250 	.word	0x08009250
 8001464:	48000400 	.word	0x48000400
 8001468:	2000027c 	.word	0x2000027c
 800146c:	20000290 	.word	0x20000290
 8001470:	20000298 	.word	0x20000298
 8001474:	20000000 	.word	0x20000000
 8001478:	0800926c 	.word	0x0800926c
 800147c:	20000228 	.word	0x20000228
 8001480:	080092a8 	.word	0x080092a8
 8001484:	200003e0 	.word	0x200003e0
 8001488:	20000280 	.word	0x20000280
 800148c:	080092c4 	.word	0x080092c4
 8001490:	20000284 	.word	0x20000284
 8001494:	080092d0 	.word	0x080092d0
 8001498:	080092e8 	.word	0x080092e8

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b096      	sub	sp, #88	; 0x58
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a6:	2228      	movs	r2, #40	; 0x28
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 ffe8 	bl	8006480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	2301      	movs	r3, #1
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d8:	2310      	movs	r3, #16
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014dc:	2302      	movs	r3, #2
 80014de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e0:	2300      	movs	r3, #0
 80014e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80014e4:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80014e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 feba 	bl	8003268 <HAL_RCC_OscConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0x62>
  {
    Error_Handler();
 80014fa:	f000 fbfd 	bl	8001cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fe:	230f      	movs	r3, #15
 8001500:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001502:	2302      	movs	r3, #2
 8001504:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800150a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2101      	movs	r1, #1
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fee2 	bl	80042e4 <HAL_RCC_ClockConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001526:	f000 fbe7 	bl	8001cf8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800152a:	2320      	movs	r3, #32
 800152c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	4618      	mov	r0, r3
 8001536:	f003 f8bb 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001540:	f000 fbda 	bl	8001cf8 <Error_Handler>
  }
}
 8001544:	bf00      	nop
 8001546:	3758      	adds	r7, #88	; 0x58
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001552:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <MX_I2C1_Init+0x78>)
 8001554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001558:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <MX_I2C1_Init+0x7c>)
 800155a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001564:	2201      	movs	r2, #1
 8001566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <MX_I2C1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_I2C1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001586:	480e      	ldr	r0, [pc, #56]	; (80015c0 <MX_I2C1_Init+0x74>)
 8001588:	f001 f8ca 	bl	8002720 <HAL_I2C_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001592:	f000 fbb1 	bl	8001cf8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001596:	2100      	movs	r1, #0
 8001598:	4809      	ldr	r0, [pc, #36]	; (80015c0 <MX_I2C1_Init+0x74>)
 800159a:	f001 fdcd 	bl	8003138 <HAL_I2CEx_ConfigAnalogFilter>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015a4:	f000 fba8 	bl	8001cf8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015a8:	2100      	movs	r1, #0
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_I2C1_Init+0x74>)
 80015ac:	f001 fe0f 	bl	80031ce <HAL_I2CEx_ConfigDigitalFilter>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015b6:	f000 fb9f 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000340 	.word	0x20000340
 80015c4:	40005400 	.word	0x40005400
 80015c8:	2000090e 	.word	0x2000090e

080015cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ec:	463b      	mov	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <MX_TIM2_Init+0xec>)
 8001600:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001604:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 8001606:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <MX_TIM2_Init+0xec>)
 8001608:	f44f 7252 	mov.w	r2, #840	; 0x348
 800160c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <MX_TIM2_Init+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1048;
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <MX_TIM2_Init+0xec>)
 8001616:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800161a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <MX_TIM2_Init+0xec>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <MX_TIM2_Init+0xec>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001628:	4823      	ldr	r0, [pc, #140]	; (80016b8 <MX_TIM2_Init+0xec>)
 800162a:	f003 f967 	bl	80048fc <HAL_TIM_Base_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001634:	f000 fb60 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800163e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001642:	4619      	mov	r1, r3
 8001644:	481c      	ldr	r0, [pc, #112]	; (80016b8 <MX_TIM2_Init+0xec>)
 8001646:	f003 fc6f 	bl	8004f28 <HAL_TIM_ConfigClockSource>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001650:	f000 fb52 	bl	8001cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001654:	4818      	ldr	r0, [pc, #96]	; (80016b8 <MX_TIM2_Init+0xec>)
 8001656:	f003 fa05 	bl	8004a64 <HAL_TIM_PWM_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001660:	f000 fb4a 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	4811      	ldr	r0, [pc, #68]	; (80016b8 <MX_TIM2_Init+0xec>)
 8001674:	f004 f900 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800167e:	f000 fb3b 	bl	8001cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001682:	2360      	movs	r3, #96	; 0x60
 8001684:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	4619      	mov	r1, r3
 8001698:	4807      	ldr	r0, [pc, #28]	; (80016b8 <MX_TIM2_Init+0xec>)
 800169a:	f003 fb31 	bl	8004d00 <HAL_TIM_PWM_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80016a4:	f000 fb28 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016a8:	4803      	ldr	r0, [pc, #12]	; (80016b8 <MX_TIM2_Init+0xec>)
 80016aa:	f000 fbe3 	bl	8001e74 <HAL_TIM_MspPostInit>

}
 80016ae:	bf00      	nop
 80016b0:	3738      	adds	r7, #56	; 0x38
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000394 	.word	0x20000394

080016bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <MX_TIM3_Init+0x94>)
 80016dc:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <MX_TIM3_Init+0x98>)
 80016de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_TIM3_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_TIM3_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <MX_TIM3_Init+0x94>)
 80016ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_TIM3_Init+0x94>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <MX_TIM3_Init+0x94>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <MX_TIM3_Init+0x94>)
 8001702:	f003 f8fb 	bl	80048fc <HAL_TIM_Base_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800170c:	f000 faf4 	bl	8001cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001714:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_TIM3_Init+0x94>)
 800171e:	f003 fc03 	bl	8004f28 <HAL_TIM_ConfigClockSource>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001728:	f000 fae6 	bl	8001cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_TIM3_Init+0x94>)
 800173a:	f004 f89d 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001744:	f000 fad8 	bl	8001cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200003e0 	.word	0x200003e0
 8001754:	40000400 	.word	0x40000400

08001758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_GPIO_Init+0x8c>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <MX_GPIO_Init+0x8c>)
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	6153      	str	r3, [r2, #20]
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_GPIO_Init+0x8c>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <MX_GPIO_Init+0x8c>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <MX_GPIO_Init+0x8c>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6153      	str	r3, [r2, #20]
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_GPIO_Init+0x8c>)
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2103      	movs	r1, #3
 80017a2:	4811      	ldr	r0, [pc, #68]	; (80017e8 <MX_GPIO_Init+0x90>)
 80017a4:	f000 ffa4 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017a8:	2303      	movs	r3, #3
 80017aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4619      	mov	r1, r3
 80017be:	480a      	ldr	r0, [pc, #40]	; (80017e8 <MX_GPIO_Init+0x90>)
 80017c0:	f000 fe0c 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017c4:	2310      	movs	r3, #16
 80017c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_GPIO_Init+0x90>)
 80017d8:	f000 fe00 	bl	80023dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48000400 	.word	0x48000400

080017ec <_write>:

/* USER CODE BEGIN 4 */

//printf
int _write(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e009      	b.n	8001812 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	60ba      	str	r2, [r7, #8]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fcc8 	bl	800119c <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	429a      	cmp	r2, r3
 8001818:	dbf1      	blt.n	80017fe <_write+0x12>
  }
  return len;
 800181a:	687b      	ldr	r3, [r7, #4]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <servoWrite>:

//servo
void servoWrite(int angle) {
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	// Calculate pulse value based on the angle
	int pulseValue = 25 + angle * (120 - 25) / 180;
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <servoWrite+0x44>)
 800183a:	fb82 1203 	smull	r1, r2, r2, r3
 800183e:	441a      	add	r2, r3
 8001840:	11d2      	asrs	r2, r2, #7
 8001842:	17db      	asrs	r3, r3, #31
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	3319      	adds	r3, #25
 8001848:	60fb      	str	r3, [r7, #12]

	// Ensure pulseValue is within valid range
	if (pulseValue > 120) {
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b78      	cmp	r3, #120	; 0x78
 800184e:	dd01      	ble.n	8001854 <servoWrite+0x30>
		pulseValue = 120;
 8001850:	2378      	movs	r3, #120	; 0x78
 8001852:	60fb      	str	r3, [r7, #12]
	}

	// Set the pulse width using TIM2 and specified channel
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulseValue);
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <servoWrite+0x48>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	b60b60b7 	.word	0xb60b60b7
 800186c:	20000394 	.word	0x20000394

08001870 <isLaunched>:
}

//FpState


int isLaunched(int FlighPinState) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

	fpStateArray[0] = FlighPinState;
 8001878:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <isLaunched+0x60>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]

	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 800187e:	2313      	movs	r3, #19
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e00b      	b.n	800189c <isLaunched+0x2c>
		fpStateArray[i] = fpStateArray[i - 1];
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3b01      	subs	r3, #1
 8001888:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <isLaunched+0x60>)
 800188a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800188e:	4910      	ldr	r1, [pc, #64]	; (80018d0 <isLaunched+0x60>)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3b01      	subs	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	dcf0      	bgt.n	8001884 <isLaunched+0x14>
	}

	if (calcMedian(fpStateArray, SAMPLENUM, 0) == 1) { //launched
 80018a2:	2200      	movs	r2, #0
 80018a4:	2114      	movs	r1, #20
 80018a6:	480a      	ldr	r0, [pc, #40]	; (80018d0 <isLaunched+0x60>)
 80018a8:	f000 f8ee 	bl	8001a88 <calcMedian>
 80018ac:	ec51 0b10 	vmov	r0, r1, d0
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <isLaunched+0x64>)
 80018b6:	f7ff f907 	bl	8000ac8 <__aeabi_dcmpeq>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <isLaunched+0x54>
		return 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <isLaunched+0x56>
	} else {
		return 0;
 80018c4:	2300      	movs	r3, #0
	}

}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000022c 	.word	0x2000022c
 80018d4:	3ff00000 	.word	0x3ff00000

080018d8 <isTopReached>:

int isTopReached(int time, double currentHeight, double maxHeight) {
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6178      	str	r0, [r7, #20]
 80018e0:	ed87 0b02 	vstr	d0, [r7, #8]
 80018e4:	ed87 1b00 	vstr	d1, [r7]
	if (time > topReachTime) {
 80018e8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	4293      	cmp	r3, r2
 80018f0:	dd01      	ble.n	80018f6 <isTopReached+0x1e>
		return 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e01e      	b.n	8001934 <isTopReached+0x5c>
	}else if (maxHeight - currentHeight > refHeightDelta&& time > engineBurnTime) {
 80018f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018fe:	f7fe fcc3 	bl	8000288 <__aeabi_dsub>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4614      	mov	r4, r2
 8001908:	461d      	mov	r5, r3
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <isTopReached+0x64>)
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe1b 	bl	8000548 <__aeabi_f2d>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4620      	mov	r0, r4
 8001918:	4629      	mov	r1, r5
 800191a:	f7ff f8fd 	bl	8000b18 <__aeabi_dcmpgt>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <isTopReached+0x5a>
 8001924:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	4293      	cmp	r3, r2
 800192c:	dd01      	ble.n	8001932 <isTopReached+0x5a>
		return 1;
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <isTopReached+0x5c>
	} else {
		return 0;
 8001932:	2300      	movs	r3, #0
	}
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bdb0      	pop	{r4, r5, r7, pc}
 800193c:	41200000 	.word	0x41200000

08001940 <initializeFpStateArray>:

void initializeFpStateArray(int FlightPinState) {
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e007      	b.n	800195e <initializeFpStateArray+0x1e>
		fpStateArray[i] = FlightPinState;
 800194e:	4909      	ldr	r1, [pc, #36]	; (8001974 <initializeFpStateArray+0x34>)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3301      	adds	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b13      	cmp	r3, #19
 8001962:	ddf4      	ble.n	800194e <initializeFpStateArray+0xe>
	}
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000022c 	.word	0x2000022c

08001978 <initializeAltitudeArray>:

//Altitude

void initializeAltitudeArray(double _altitude) {
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	ed87 0b00 	vstr	d0, [r7]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e00a      	b.n	800199e <initializeAltitudeArray+0x26>
		altitudeArray[i] = _altitude;
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <initializeAltitudeArray+0x3c>)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	18d1      	adds	r1, r2, r3
 8001990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001994:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < SAMPLENUM; i++) {
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3301      	adds	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b13      	cmp	r3, #19
 80019a2:	ddf1      	ble.n	8001988 <initializeAltitudeArray+0x10>
	}
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200002a0 	.word	0x200002a0

080019b8 <getRawAltitude>:

double getRawAltitude() {
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
	double pressure = readBMPPressure();
 80019be:	f7ff fae1 	bl	8000f84 <readBMPPressure>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fdad 	bl	8000524 <__aeabi_i2d>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double temperature = readBMPTemperature();
 80019d2:	f7ff fab3 	bl	8000f3c <readBMPTemperature>
 80019d6:	ee10 3a10 	vmov	r3, s0
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdb4 	bl	8000548 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double _altitude = calculateAltitude(pressure, temperature);
 80019e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019ec:	f7ff f8b4 	bl	8000b58 <__aeabi_d2iz>
 80019f0:	4604      	mov	r4, r0
 80019f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019f6:	f7ff f8d7 	bl	8000ba8 <__aeabi_d2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	ee00 3a10 	vmov	s0, r3
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7ff fb6d 	bl	80010e0 <calculateAltitude>
 8001a06:	ed87 0b00 	vstr	d0, [r7]

	return _altitude;
 8001a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a12:	eeb0 0a47 	vmov.f32	s0, s14
 8001a16:	eef0 0a67 	vmov.f32	s1, s15
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd90      	pop	{r4, r7, pc}

08001a20 <getFilteredAltitude>:

double getFilteredAltitude(double rawAltitude) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	ed87 0b00 	vstr	d0, [r7]
	altitudeArray[0] = rawAltitude;
 8001a2a:	4916      	ldr	r1, [pc, #88]	; (8001a84 <getFilteredAltitude+0x64>)
 8001a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a30:	e9c1 2300 	strd	r2, r3, [r1]

	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 8001a34:	2313      	movs	r3, #19
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00f      	b.n	8001a5a <getFilteredAltitude+0x3a>
		altitudeArray[i] = altitudeArray[i - 1];
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <getFilteredAltitude+0x64>)
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4413      	add	r3, r2
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	480e      	ldr	r0, [pc, #56]	; (8001a84 <getFilteredAltitude+0x64>)
 8001a4a:	6979      	ldr	r1, [r7, #20]
 8001a4c:	00c9      	lsls	r1, r1, #3
 8001a4e:	4401      	add	r1, r0
 8001a50:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = (SAMPLENUM - 1); i > 0; i--) {
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	dcec      	bgt.n	8001a3a <getFilteredAltitude+0x1a>
	}

	double filteredAltitude = calcMedian(altitudeArray, SAMPLENUM, 1);
 8001a60:	2201      	movs	r2, #1
 8001a62:	2114      	movs	r1, #20
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <getFilteredAltitude+0x64>)
 8001a66:	f000 f80f 	bl	8001a88 <calcMedian>
 8001a6a:	ed87 0b02 	vstr	d0, [r7, #8]

	return filteredAltitude;
 8001a6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a72:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a76:	eeb0 0a47 	vmov.f32	s0, s14
 8001a7a:	eef0 0a67 	vmov.f32	s1, s15
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200002a0 	.word	0x200002a0

08001a88 <calcMedian>:

//Median
double calcMedian(void *array, int n, int type) {
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b08d      	sub	sp, #52	; 0x34
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
	if (type == 0) { // If data type is int
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d16b      	bne.n	8001b72 <calcMedian+0xea>
		int *intArray = (int*) array;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	617b      	str	r3, [r7, #20]

		for (int i = 0; i < n; i++) {
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa2:	e02f      	b.n	8001b04 <calcMedian+0x7c>
			for (int j = i + 1; j < n; j++) {
 8001aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aaa:	e024      	b.n	8001af6 <calcMedian+0x6e>
				if (intArray[i] > intArray[j]) {
 8001aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	6979      	ldr	r1, [r7, #20]
 8001abc:	440b      	add	r3, r1
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dd15      	ble.n	8001af0 <calcMedian+0x68>
					int changer = intArray[j];
 8001ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	4413      	add	r3, r2
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
					intArray[j] = intArray[i];
 8001ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	441a      	add	r2, r3
 8001ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	6979      	ldr	r1, [r7, #20]
 8001ade:	440b      	add	r3, r1
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	601a      	str	r2, [r3, #0]
					intArray[i] = changer;
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	4413      	add	r3, r2
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	601a      	str	r2, [r3, #0]
			for (int j = i + 1; j < n; j++) {
 8001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af2:	3301      	adds	r3, #1
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	dbd6      	blt.n	8001aac <calcMedian+0x24>
		for (int i = 0; i < n; i++) {
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	3301      	adds	r3, #1
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbcb      	blt.n	8001aa4 <calcMedian+0x1c>
				}
			}
		}

		if (n % 2 == 0) {
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d11f      	bne.n	8001b56 <calcMedian+0xce>
			return (double) (intArray[n / 2] + intArray[n / 2 - 1]) / 2;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	0fda      	lsrs	r2, r3, #31
 8001b1a:	4413      	add	r3, r2
 8001b1c:	105b      	asrs	r3, r3, #1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4413      	add	r3, r2
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	0fd9      	lsrs	r1, r3, #31
 8001b2a:	440b      	add	r3, r1
 8001b2c:	105b      	asrs	r3, r3, #1
 8001b2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b32:	3b01      	subs	r3, #1
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	6979      	ldr	r1, [r7, #20]
 8001b38:	440b      	add	r3, r1
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fcf0 	bl	8000524 <__aeabi_i2d>
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b4c:	f7fe fe7e 	bl	800084c <__aeabi_ddiv>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e092      	b.n	8001c7c <calcMedian+0x1f4>
		} else {
			return (double) intArray[n / 2];
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	0fda      	lsrs	r2, r3, #31
 8001b5a:	4413      	add	r3, r2
 8001b5c:	105b      	asrs	r3, r3, #1
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4413      	add	r3, r2
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcdc 	bl	8000524 <__aeabi_i2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e084      	b.n	8001c7c <calcMedian+0x1f4>
		}
	} else if (type == 1) { // If data type is float
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d17d      	bne.n	8001c74 <calcMedian+0x1ec>
		double *doubleArray = (double*) array;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	61fb      	str	r3, [r7, #28]

		for (int i = 0; i < n; i++) {
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	e041      	b.n	8001c06 <calcMedian+0x17e>
			for (int j = i + 1; j < n; j++) {
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	3301      	adds	r3, #1
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	e036      	b.n	8001bf8 <calcMedian+0x170>
				if (doubleArray[i] > doubleArray[j]) {
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	4413      	add	r3, r2
 8001b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe ffb9 	bl	8000b18 <__aeabi_dcmpgt>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d022      	beq.n	8001bf2 <calcMedian+0x16a>
					float changer = doubleArray[j];
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7fe fff4 	bl	8000ba8 <__aeabi_d2f>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	61bb      	str	r3, [r7, #24]
					doubleArray[j] = doubleArray[i];
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	4413      	add	r3, r2
 8001bcc:	6a3a      	ldr	r2, [r7, #32]
 8001bce:	00d2      	lsls	r2, r2, #3
 8001bd0:	69f9      	ldr	r1, [r7, #28]
 8001bd2:	4411      	add	r1, r2
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	e9c1 2300 	strd	r2, r3, [r1]
					doubleArray[i] = changer;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	18d4      	adds	r4, r2, r3
 8001be4:	69b8      	ldr	r0, [r7, #24]
 8001be6:	f7fe fcaf 	bl	8000548 <__aeabi_f2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	e9c4 2300 	strd	r2, r3, [r4]
			for (int j = i + 1; j < n; j++) {
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	6a3a      	ldr	r2, [r7, #32]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbc4      	blt.n	8001b8a <calcMedian+0x102>
		for (int i = 0; i < n; i++) {
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	3301      	adds	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
 8001c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	dbb9      	blt.n	8001b82 <calcMedian+0xfa>
				}
			}
		}

		if (n % 2 == 0) {
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d123      	bne.n	8001c60 <calcMedian+0x1d8>
			return (doubleArray[n / 2] + doubleArray[n / 2 - 1]) / 2;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	0fda      	lsrs	r2, r3, #31
 8001c1c:	4413      	add	r3, r2
 8001c1e:	105b      	asrs	r3, r3, #1
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	4413      	add	r3, r2
 8001c26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	0fda      	lsrs	r2, r3, #31
 8001c2e:	4413      	add	r3, r2
 8001c30:	105b      	asrs	r3, r3, #1
 8001c32:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001c36:	3b01      	subs	r3, #1
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fb23 	bl	800028c <__adddf3>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c56:	f7fe fdf9 	bl	800084c <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	e00d      	b.n	8001c7c <calcMedian+0x1f4>
		} else {
			return doubleArray[n / 2];
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	0fda      	lsrs	r2, r3, #31
 8001c64:	4413      	add	r3, r2
 8001c66:	105b      	asrs	r3, r3, #1
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	e003      	b.n	8001c7c <calcMedian+0x1f4>
		}
	} else {
		// Error or unknown data type
		return 0.0;
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
	}
}
 8001c7c:	ec43 2b17 	vmov	d7, r2, r3
 8001c80:	eeb0 0a47 	vmov.f32	s0, s14
 8001c84:	eef0 0a67 	vmov.f32	s1, s15
 8001c88:	3734      	adds	r7, #52	; 0x34
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}
	...

08001c90 <indicateMode>:


//ModeLed
void indicateMode(int _mode) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	if (_mode == 0) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10a      	bne.n	8001cb4 <indicateMode+0x24>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4814      	ldr	r0, [pc, #80]	; (8001cf4 <indicateMode+0x64>)
 8001ca4:	f000 fd24 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2102      	movs	r1, #2
 8001cac:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <indicateMode+0x64>)
 8001cae:	f000 fd1f 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	} else if (_mode == 2) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	}
}
 8001cb2:	e01a      	b.n	8001cea <indicateMode+0x5a>
	} else if (_mode == 1) {
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10a      	bne.n	8001cd0 <indicateMode+0x40>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <indicateMode+0x64>)
 8001cc0:	f000 fd16 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <indicateMode+0x64>)
 8001cca:	f000 fd11 	bl	80026f0 <HAL_GPIO_WritePin>
}
 8001cce:	e00c      	b.n	8001cea <indicateMode+0x5a>
	} else if (_mode == 2) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d109      	bne.n	8001cea <indicateMode+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <indicateMode+0x64>)
 8001cdc:	f000 fd08 	bl	80026f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <indicateMode+0x64>)
 8001ce6:	f000 fd03 	bl	80026f0 <HAL_GPIO_WritePin>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	48000400 	.word	0x48000400

08001cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
}
 8001cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <Error_Handler+0x8>
	...

08001d04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_MspInit+0x44>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_MspInit+0x44>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6193      	str	r3, [r2, #24]
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_MspInit+0x44>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_MspInit+0x44>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_MspInit+0x44>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_MspInit+0x44>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <HAL_I2C_MspInit+0xb8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d145      	bne.n	8001dfa <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_I2C_MspInit+0xbc>)
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <HAL_I2C_MspInit+0xbc>)
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	6153      	str	r3, [r2, #20]
 8001d7a:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_I2C_MspInit+0xbc>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_I2C_MspInit+0xbc>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_I2C_MspInit+0xbc>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d90:	6153      	str	r3, [r2, #20]
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_I2C_MspInit+0xbc>)
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da4:	2312      	movs	r3, #18
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da8:	2301      	movs	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db0:	2304      	movs	r3, #4
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbe:	f000 fb0d 	bl	80023dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc6:	2312      	movs	r3, #18
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480b      	ldr	r0, [pc, #44]	; (8001e0c <HAL_I2C_MspInit+0xc0>)
 8001dde:	f000 fafd 	bl	80023dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_I2C_MspInit+0xbc>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_I2C_MspInit+0xbc>)
 8001de8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_I2C_MspInit+0xbc>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3728      	adds	r7, #40	; 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40005400 	.word	0x40005400
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	48000400 	.word	0x48000400

08001e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d10c      	bne.n	8001e3c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_TIM_Base_MspInit+0x5c>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a11      	ldr	r2, [pc, #68]	; (8001e6c <HAL_TIM_Base_MspInit+0x5c>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_TIM_Base_MspInit+0x5c>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e3a:	e010      	b.n	8001e5e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <HAL_TIM_Base_MspInit+0x60>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10b      	bne.n	8001e5e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_TIM_Base_MspInit+0x5c>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <HAL_TIM_Base_MspInit+0x5c>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	61d3      	str	r3, [r2, #28]
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_TIM_Base_MspInit+0x5c>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40000400 	.word	0x40000400

08001e74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e94:	d11c      	bne.n	8001ed0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_TIM_MspPostInit+0x64>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_TIM_MspPostInit+0x64>)
 8001e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea0:	6153      	str	r3, [r2, #20]
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_TIM_MspPostInit+0x64>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ecc:	f000 fa86 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000

08001edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <NMI_Handler+0x4>

08001ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <HardFault_Handler+0x4>

08001ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <MemManage_Handler+0x4>

08001eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <BusFault_Handler+0x4>

08001ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <UsageFault_Handler+0x4>

08001efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f28:	f000 f92e 	bl	8002188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_kill>:

int _kill(int pid, int sig)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f4a:	f004 faa5 	bl	8006498 <__errno>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2216      	movs	r2, #22
 8001f52:	601a      	str	r2, [r3, #0]
  return -1;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_exit>:

void _exit (int status)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ffe7 	bl	8001f40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f72:	e7fe      	b.n	8001f72 <_exit+0x12>

08001f74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	e00a      	b.n	8001f9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f86:	f3af 8000 	nop.w
 8001f8a:	4601      	mov	r1, r0
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	60ba      	str	r2, [r7, #8]
 8001f92:	b2ca      	uxtb	r2, r1
 8001f94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dbf0      	blt.n	8001f86 <_read+0x12>
  }

  return len;
 8001fa4:	687b      	ldr	r3, [r7, #4]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_isatty>:

int _isatty(int file)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <_sbrk+0x5c>)
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <_sbrk+0x60>)
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <_sbrk+0x64>)
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <_sbrk+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d207      	bcs.n	8002058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002048:	f004 fa26 	bl	8006498 <__errno>
 800204c:	4603      	mov	r3, r0
 800204e:	220c      	movs	r2, #12
 8002050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002056:	e009      	b.n	800206c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <_sbrk+0x64>)
 8002068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20003000 	.word	0x20003000
 8002078:	00000400 	.word	0x00000400
 800207c:	2000042c 	.word	0x2000042c
 8002080:	20000580 	.word	0x20000580

08002084 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <SystemInit+0x20>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <SystemInit+0x20>)
 8002090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020ac:	f7ff ffea 	bl	8002084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b0:	480c      	ldr	r0, [pc, #48]	; (80020e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80020b2:	490d      	ldr	r1, [pc, #52]	; (80020e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <LoopForever+0xe>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020c8:	4c0a      	ldr	r4, [pc, #40]	; (80020f4 <LoopForever+0x16>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d6:	f004 f9e5 	bl	80064a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020da:	f7ff f887 	bl	80011ec <main>

080020de <LoopForever>:

LoopForever:
    b LoopForever
 80020de:	e7fe      	b.n	80020de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020e0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80020ec:	080096d0 	.word	0x080096d0
  ldr r2, =_sbss
 80020f0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80020f4:	20000580 	.word	0x20000580

080020f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC1_2_IRQHandler>
	...

080020fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_Init+0x28>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <HAL_Init+0x28>)
 8002106:	f043 0310 	orr.w	r3, r3, #16
 800210a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210c:	2003      	movs	r0, #3
 800210e:	f000 f931 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002112:	200f      	movs	r0, #15
 8002114:	f000 f808 	bl	8002128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002118:	f7ff fdf4 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000

08002128 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_InitTick+0x54>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_InitTick+0x58>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f93b 	bl	80023c2 <HAL_SYSTICK_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e00e      	b.n	8002174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0f      	cmp	r3, #15
 800215a:	d80a      	bhi.n	8002172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215c:	2200      	movs	r2, #0
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002164:	f000 f911 	bl	800238a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <HAL_InitTick+0x5c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000008 	.word	0x20000008
 8002180:	20000010 	.word	0x20000010
 8002184:	2000000c 	.word	0x2000000c

08002188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_IncTick+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_IncTick+0x24>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_IncTick+0x24>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000010 	.word	0x20000010
 80021ac:	20000430 	.word	0x20000430

080021b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000430 	.word	0x20000430

080021c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff ffee 	bl	80021b0 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e0:	d005      	beq.n	80021ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_Delay+0x44>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021ee:	bf00      	nop
 80021f0:	f7ff ffde 	bl	80021b0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d8f7      	bhi.n	80021f0 <HAL_Delay+0x28>
  {
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000010 	.word	0x20000010

08002210 <__NVIC_SetPriorityGrouping>:
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_SetPriority>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db0a      	blt.n	800229e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	490c      	ldr	r1, [pc, #48]	; (80022c0 <__NVIC_SetPriority+0x4c>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	440b      	add	r3, r1
 8002298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800229c:	e00a      	b.n	80022b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <__NVIC_SetPriority+0x50>)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	3b04      	subs	r3, #4
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	761a      	strb	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <NVIC_EncodePriority>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f1c3 0307 	rsb	r3, r3, #7
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	bf28      	it	cs
 80022e6:	2304      	movcs	r3, #4
 80022e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d902      	bls.n	80022f8 <NVIC_EncodePriority+0x30>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b03      	subs	r3, #3
 80022f6:	e000      	b.n	80022fa <NVIC_EncodePriority+0x32>
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	43d9      	mvns	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	4313      	orrs	r3, r2
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	; 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <SysTick_Config>:
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3b01      	subs	r3, #1
 800233c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002340:	d301      	bcc.n	8002346 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002342:	2301      	movs	r3, #1
 8002344:	e00f      	b.n	8002366 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002346:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <SysTick_Config+0x40>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3b01      	subs	r3, #1
 800234c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234e:	210f      	movs	r1, #15
 8002350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002354:	f7ff ff8e 	bl	8002274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <SysTick_Config+0x40>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <SysTick_Config+0x40>)
 8002360:	2207      	movs	r2, #7
 8002362:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	e000e010 	.word	0xe000e010

08002374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff47 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b086      	sub	sp, #24
 800238e:	af00      	add	r7, sp, #0
 8002390:	4603      	mov	r3, r0
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800239c:	f7ff ff5c 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff ff8e 	bl	80022c8 <NVIC_EncodePriority>
 80023ac:	4602      	mov	r2, r0
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff5d 	bl	8002274 <__NVIC_SetPriority>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffb0 	bl	8002330 <SysTick_Config>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ea:	e14e      	b.n	800268a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa01 f303 	lsl.w	r3, r1, r3
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8140 	beq.w	8002684 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d005      	beq.n	800241c <HAL_GPIO_Init+0x40>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d130      	bne.n	800247e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002452:	2201      	movs	r2, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	f003 0201 	and.w	r2, r3, #1
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b03      	cmp	r3, #3
 8002488:	d017      	beq.n	80024ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d123      	bne.n	800250e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	6939      	ldr	r1, [r7, #16]
 800250a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2203      	movs	r2, #3
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0203 	and.w	r2, r3, #3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 809a 	beq.w	8002684 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002550:	4b55      	ldr	r3, [pc, #340]	; (80026a8 <HAL_GPIO_Init+0x2cc>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4a54      	ldr	r2, [pc, #336]	; (80026a8 <HAL_GPIO_Init+0x2cc>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b52      	ldr	r3, [pc, #328]	; (80026a8 <HAL_GPIO_Init+0x2cc>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002568:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_GPIO_Init+0x2d0>)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	3302      	adds	r3, #2
 8002570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	220f      	movs	r2, #15
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002592:	d013      	beq.n	80025bc <HAL_GPIO_Init+0x1e0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a46      	ldr	r2, [pc, #280]	; (80026b0 <HAL_GPIO_Init+0x2d4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00d      	beq.n	80025b8 <HAL_GPIO_Init+0x1dc>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a45      	ldr	r2, [pc, #276]	; (80026b4 <HAL_GPIO_Init+0x2d8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d007      	beq.n	80025b4 <HAL_GPIO_Init+0x1d8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a44      	ldr	r2, [pc, #272]	; (80026b8 <HAL_GPIO_Init+0x2dc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d101      	bne.n	80025b0 <HAL_GPIO_Init+0x1d4>
 80025ac:	2303      	movs	r3, #3
 80025ae:	e006      	b.n	80025be <HAL_GPIO_Init+0x1e2>
 80025b0:	2305      	movs	r3, #5
 80025b2:	e004      	b.n	80025be <HAL_GPIO_Init+0x1e2>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e002      	b.n	80025be <HAL_GPIO_Init+0x1e2>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_GPIO_Init+0x1e2>
 80025bc:	2300      	movs	r3, #0
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	f002 0203 	and.w	r2, r2, #3
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	4093      	lsls	r3, r2
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ce:	4937      	ldr	r1, [pc, #220]	; (80026ac <HAL_GPIO_Init+0x2d0>)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025dc:	4b37      	ldr	r3, [pc, #220]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002600:	4a2e      	ldr	r2, [pc, #184]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800262a:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002654:	4a19      	ldr	r2, [pc, #100]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800267e:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3301      	adds	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f47f aea9 	bne.w	80023ec <HAL_GPIO_Init+0x10>
  }
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010000 	.word	0x40010000
 80026b0:	48000400 	.word	0x48000400
 80026b4:	48000800 	.word	0x48000800
 80026b8:	48000c00 	.word	0x48000c00
 80026bc:	40010400 	.word	0x40010400

080026c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e001      	b.n	80026e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800270c:	e002      	b.n	8002714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e081      	b.n	8002836 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fb00 	bl	8001d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	; 0x24
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d107      	bne.n	800279a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e006      	b.n	80027a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d104      	bne.n	80027ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69d9      	ldr	r1, [r3, #28]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1a      	ldr	r2, [r3, #32]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	461a      	mov	r2, r3
 800284c:	460b      	mov	r3, r1
 800284e:	817b      	strh	r3, [r7, #10]
 8002850:	4613      	mov	r3, r2
 8002852:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	f040 80da 	bne.w	8002a16 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_I2C_Master_Transmit+0x30>
 800286c:	2302      	movs	r3, #2
 800286e:	e0d3      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002878:	f7ff fc9a 	bl	80021b0 <HAL_GetTick>
 800287c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2319      	movs	r3, #25
 8002884:	2201      	movs	r2, #1
 8002886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f9e6 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0be      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2221      	movs	r2, #33	; 0x21
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2210      	movs	r2, #16
 80028a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	893a      	ldrh	r2, [r7, #8]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2bff      	cmp	r3, #255	; 0xff
 80028ca:	d90e      	bls.n	80028ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	22ff      	movs	r2, #255	; 0xff
 80028d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	8979      	ldrh	r1, [r7, #10]
 80028da:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <HAL_I2C_Master_Transmit+0x1e0>)
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fbf6 	bl	80030d4 <I2C_TransferConfig>
 80028e8:	e06c      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	8979      	ldrh	r1, [r7, #10]
 80028fc:	4b48      	ldr	r3, [pc, #288]	; (8002a20 <HAL_I2C_Master_Transmit+0x1e0>)
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fbe5 	bl	80030d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800290a:	e05b      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	6a39      	ldr	r1, [r7, #32]
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f9f2 	bl	8002cfa <I2C_WaitOnTXISFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e07b      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d034      	beq.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	2b00      	cmp	r3, #0
 8002960:	d130      	bne.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2200      	movs	r2, #0
 800296a:	2180      	movs	r1, #128	; 0x80
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f975 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04d      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d90e      	bls.n	80029a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	22ff      	movs	r2, #255	; 0xff
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	b2da      	uxtb	r2, r3
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	2300      	movs	r3, #0
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fb99 	bl	80030d4 <I2C_TransferConfig>
 80029a2:	e00f      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	8979      	ldrh	r1, [r7, #10]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fb88 	bl	80030d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d19e      	bne.n	800290c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	6a39      	ldr	r1, [r7, #32]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 f9d8 	bl	8002d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e01a      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2220      	movs	r2, #32
 80029e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_I2C_Master_Transmit+0x1e4>)
 80029f6:	400b      	ands	r3, r1
 80029f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
  }
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	80002000 	.word	0x80002000
 8002a24:	fe00e800 	.word	0xfe00e800

08002a28 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	460b      	mov	r3, r1
 8002a36:	817b      	strh	r3, [r7, #10]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b20      	cmp	r3, #32
 8002a46:	f040 80db 	bne.w	8002c00 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_I2C_Master_Receive+0x30>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e0d4      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a60:	f7ff fba6 	bl	80021b0 <HAL_GetTick>
 8002a64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2319      	movs	r3, #25
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f8f2 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0bf      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2222      	movs	r2, #34	; 0x22
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	893a      	ldrh	r2, [r7, #8]
 8002aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2bff      	cmp	r3, #255	; 0xff
 8002ab2:	d90e      	bls.n	8002ad2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	22ff      	movs	r2, #255	; 0xff
 8002ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	8979      	ldrh	r1, [r7, #10]
 8002ac2:	4b52      	ldr	r3, [pc, #328]	; (8002c0c <HAL_I2C_Master_Receive+0x1e4>)
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fb02 	bl	80030d4 <I2C_TransferConfig>
 8002ad0:	e06d      	b.n	8002bae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	8979      	ldrh	r1, [r7, #10]
 8002ae4:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <HAL_I2C_Master_Receive+0x1e4>)
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 faf1 	bl	80030d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002af2:	e05c      	b.n	8002bae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	6a39      	ldr	r1, [r7, #32]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f989 	bl	8002e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e07c      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d034      	beq.n	8002bae <HAL_I2C_Master_Receive+0x186>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d130      	bne.n	8002bae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	2200      	movs	r2, #0
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f880 	bl	8002c5c <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e04d      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2bff      	cmp	r3, #255	; 0xff
 8002b6e:	d90e      	bls.n	8002b8e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	22ff      	movs	r2, #255	; 0xff
 8002b74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	8979      	ldrh	r1, [r7, #10]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 faa4 	bl	80030d4 <I2C_TransferConfig>
 8002b8c:	e00f      	b.n	8002bae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	8979      	ldrh	r1, [r7, #10]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fa93 	bl	80030d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d19d      	bne.n	8002af4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6a39      	ldr	r1, [r7, #32]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f8e3 	bl	8002d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e01a      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <HAL_I2C_Master_Receive+0x1e8>)
 8002be0:	400b      	ands	r3, r1
 8002be2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	80002400 	.word	0x80002400
 8002c10:	fe00e800 	.word	0xfe00e800

08002c14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d103      	bne.n	8002c32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d007      	beq.n	8002c50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	619a      	str	r2, [r3, #24]
  }
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c6c:	e031      	b.n	8002cd2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c74:	d02d      	beq.n	8002cd2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c76:	f7ff fa9b 	bl	80021b0 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d302      	bcc.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d122      	bne.n	8002cd2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d113      	bne.n	8002cd2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f043 0220 	orr.w	r2, r3, #32
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00f      	b.n	8002cf2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699a      	ldr	r2, [r3, #24]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d0be      	beq.n	8002c6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d06:	e033      	b.n	8002d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f901 	bl	8002f14 <I2C_IsErrorOccurred>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e031      	b.n	8002d80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d22:	d025      	beq.n	8002d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d24:	f7ff fa44 	bl	80021b0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d302      	bcc.n	8002d3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d11a      	bne.n	8002d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d013      	beq.n	8002d70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	f043 0220 	orr.w	r2, r3, #32
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e007      	b.n	8002d80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d1c4      	bne.n	8002d08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d94:	e02f      	b.n	8002df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f8ba 	bl	8002f14 <I2C_IsErrorOccurred>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e02d      	b.n	8002e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7ff fa01 	bl	80021b0 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d11a      	bne.n	8002df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d013      	beq.n	8002df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f043 0220 	orr.w	r2, r3, #32
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e007      	b.n	8002e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d1c8      	bne.n	8002d96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e1c:	e06b      	b.n	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f876 	bl	8002f14 <I2C_IsErrorOccurred>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e069      	b.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d138      	bne.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d105      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e055      	b.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d107      	bne.n	8002e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2204      	movs	r2, #4
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
 8002e76:	e002      	b.n	8002e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2220      	movs	r2, #32
 8002e84:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002e92:	400b      	ands	r3, r1
 8002e94:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e029      	b.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb2:	f7ff f97d 	bl	80021b0 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d116      	bne.n	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d00f      	beq.n	8002ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f043 0220 	orr.w	r2, r3, #32
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e007      	b.n	8002f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d18c      	bne.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	fe00e800 	.word	0xfe00e800

08002f14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d068      	beq.n	8003012 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f48:	e049      	b.n	8002fde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f50:	d045      	beq.n	8002fde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	f7ff f92d 	bl	80021b0 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <I2C_IsErrorOccurred+0x54>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d13a      	bne.n	8002fde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f8a:	d121      	bne.n	8002fd0 <I2C_IsErrorOccurred+0xbc>
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f92:	d01d      	beq.n	8002fd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d01a      	beq.n	8002fd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fa8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002faa:	f7ff f901 	bl	80021b0 <HAL_GetTick>
 8002fae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb0:	e00e      	b.n	8002fd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fb2:	f7ff f8fd 	bl	80021b0 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b19      	cmp	r3, #25
 8002fbe:	d907      	bls.n	8002fd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	f043 0320 	orr.w	r3, r3, #32
 8002fc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002fce:	e006      	b.n	8002fde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d1e9      	bne.n	8002fb2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d003      	beq.n	8002ff4 <I2C_IsErrorOccurred+0xe0>
 8002fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0aa      	beq.n	8002f4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2220      	movs	r2, #32
 8003002:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003034:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	f043 0308 	orr.w	r3, r3, #8
 800304c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003056:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	f043 0302 	orr.w	r3, r3, #2
 800306e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003078:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01c      	beq.n	80030c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f7ff fdc3 	bl	8002c14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <I2C_IsErrorOccurred+0x1bc>)
 800309a:	400b      	ands	r3, r1
 800309c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3728      	adds	r7, #40	; 0x28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	fe00e800 	.word	0xfe00e800

080030d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	460b      	mov	r3, r1
 80030e0:	817b      	strh	r3, [r7, #10]
 80030e2:	4613      	mov	r3, r2
 80030e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030ec:	7a7b      	ldrb	r3, [r7, #9]
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003102:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	0d5b      	lsrs	r3, r3, #21
 800310e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <I2C_TransferConfig+0x60>)
 8003114:	430b      	orrs	r3, r1
 8003116:	43db      	mvns	r3, r3
 8003118:	ea02 0103 	and.w	r1, r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	03ff63ff 	.word	0x03ff63ff

08003138 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	d138      	bne.n	80031c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003158:	2302      	movs	r3, #2
 800315a:	e032      	b.n	80031c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800318a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6819      	ldr	r1, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d139      	bne.n	8003258 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e033      	b.n	800325a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2224      	movs	r2, #36	; 0x24
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003220:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	e000      	b.n	800325a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800326e:	af00      	add	r7, sp, #0
 8003270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003274:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003278:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f001 b823 	b.w	80042d4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 817d 	beq.w	800359e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032a4:	4bbc      	ldr	r3, [pc, #752]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d00c      	beq.n	80032ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b0:	4bb9      	ldr	r3, [pc, #740]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d15c      	bne.n	8003376 <HAL_RCC_OscConfig+0x10e>
 80032bc:	4bb6      	ldr	r3, [pc, #728]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d155      	bne.n	8003376 <HAL_RCC_OscConfig+0x10e>
 80032ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d102      	bne.n	80032fc <HAL_RCC_OscConfig+0x94>
 80032f6:	4ba8      	ldr	r3, [pc, #672]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	e015      	b.n	8003328 <HAL_RCC_OscConfig+0xc0>
 80032fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003300:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003314:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003318:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003324:	4b9c      	ldr	r3, [pc, #624]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800332c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003330:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003334:	fa92 f2a2 	rbit	r2, r2
 8003338:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800333c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003340:	fab2 f282 	clz	r2, r2
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f042 0220 	orr.w	r2, r2, #32
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	f002 021f 	and.w	r2, r2, #31
 8003350:	2101      	movs	r1, #1
 8003352:	fa01 f202 	lsl.w	r2, r1, r2
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 811f 	beq.w	800359c <HAL_RCC_OscConfig+0x334>
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 8116 	bne.w	800359c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f000 bfaf 	b.w	80042d4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x12e>
 8003388:	4b83      	ldr	r3, [pc, #524]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a82      	ldr	r2, [pc, #520]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 800338e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	e036      	b.n	8003404 <HAL_RCC_OscConfig+0x19c>
 8003396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x158>
 80033a6:	4b7c      	ldr	r3, [pc, #496]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7b      	ldr	r2, [pc, #492]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b79      	ldr	r3, [pc, #484]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a78      	ldr	r2, [pc, #480]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e021      	b.n	8003404 <HAL_RCC_OscConfig+0x19c>
 80033c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x184>
 80033d2:	4b71      	ldr	r3, [pc, #452]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a70      	ldr	r2, [pc, #448]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b6e      	ldr	r3, [pc, #440]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6d      	ldr	r2, [pc, #436]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0x19c>
 80033ec:	4b6a      	ldr	r3, [pc, #424]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a69      	ldr	r2, [pc, #420]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b67      	ldr	r3, [pc, #412]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a66      	ldr	r2, [pc, #408]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003402:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003404:	4b64      	ldr	r3, [pc, #400]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	f023 020f 	bic.w	r2, r3, #15
 800340c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003410:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	495f      	ldr	r1, [pc, #380]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 800341a:	4313      	orrs	r3, r2
 800341c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d059      	beq.n	80034e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7fe febf 	bl	80021b0 <HAL_GetTick>
 8003432:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe feba 	bl	80021b0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b64      	cmp	r3, #100	; 0x64
 8003446:	d902      	bls.n	800344e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	f000 bf43 	b.w	80042d4 <HAL_RCC_OscConfig+0x106c>
 800344e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003452:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003462:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_RCC_OscConfig+0x218>
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	e015      	b.n	80034ac <HAL_RCC_OscConfig+0x244>
 8003480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003484:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003498:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800349c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80034a8:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80034b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034b8:	fa92 f2a2 	rbit	r2, r2
 80034bc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80034c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80034c4:	fab2 f282 	clz	r2, r2
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	f042 0220 	orr.w	r2, r2, #32
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f002 021f 	and.w	r2, r2, #31
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f202 	lsl.w	r2, r1, r2
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ab      	beq.n	8003438 <HAL_RCC_OscConfig+0x1d0>
 80034e0:	e05d      	b.n	800359e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fe fe65 	bl	80021b0 <HAL_GetTick>
 80034e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fe fe60 	bl	80021b0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	; 0x64
 80034fa:	d902      	bls.n	8003502 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	f000 bee9 	b.w	80042d4 <HAL_RCC_OscConfig+0x106c>
 8003502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003506:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003516:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d102      	bne.n	8003534 <HAL_RCC_OscConfig+0x2cc>
 800352e:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	e015      	b.n	8003560 <HAL_RCC_OscConfig+0x2f8>
 8003534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003538:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800354c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003550:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800355c:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <HAL_RCC_OscConfig+0x330>)
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003564:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003568:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800356c:	fa92 f2a2 	rbit	r2, r2
 8003570:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003574:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003578:	fab2 f282 	clz	r2, r2
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	f042 0220 	orr.w	r2, r2, #32
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	f002 021f 	and.w	r2, r2, #31
 8003588:	2101      	movs	r1, #1
 800358a:	fa01 f202 	lsl.w	r2, r1, r2
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1ab      	bne.n	80034ec <HAL_RCC_OscConfig+0x284>
 8003594:	e003      	b.n	800359e <HAL_RCC_OscConfig+0x336>
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 817d 	beq.w	80038ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035b4:	4ba6      	ldr	r3, [pc, #664]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00b      	beq.n	80035d8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035c0:	4ba3      	ldr	r3, [pc, #652]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d172      	bne.n	80036b2 <HAL_RCC_OscConfig+0x44a>
 80035cc:	4ba0      	ldr	r3, [pc, #640]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d16c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x44a>
 80035d8:	2302      	movs	r3, #2
 80035da:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d102      	bne.n	8003608 <HAL_RCC_OscConfig+0x3a0>
 8003602:	4b93      	ldr	r3, [pc, #588]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	e013      	b.n	8003630 <HAL_RCC_OscConfig+0x3c8>
 8003608:	2302      	movs	r3, #2
 800360a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800361a:	2302      	movs	r3, #2
 800361c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003620:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800362c:	4b88      	ldr	r3, [pc, #544]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2202      	movs	r2, #2
 8003632:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003636:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800363a:	fa92 f2a2 	rbit	r2, r2
 800363e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003642:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003646:	fab2 f282 	clz	r2, r2
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f042 0220 	orr.w	r2, r2, #32
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	f002 021f 	and.w	r2, r2, #31
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f202 	lsl.w	r2, r1, r2
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCC_OscConfig+0x410>
 8003662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d002      	beq.n	8003678 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f000 be2e 	b.w	80042d4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b75      	ldr	r3, [pc, #468]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003684:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	21f8      	movs	r1, #248	; 0xf8
 800368e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003696:	fa91 f1a1 	rbit	r1, r1
 800369a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800369e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80036a2:	fab1 f181 	clz	r1, r1
 80036a6:	b2c9      	uxtb	r1, r1
 80036a8:	408b      	lsls	r3, r1
 80036aa:	4969      	ldr	r1, [pc, #420]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b0:	e0fd      	b.n	80038ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8088 	beq.w	80037d4 <HAL_RCC_OscConfig+0x56c>
 80036c4:	2301      	movs	r3, #1
 80036c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80036d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	461a      	mov	r2, r3
 80036ec:	2301      	movs	r3, #1
 80036ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe fd5e 	bl	80021b0 <HAL_GetTick>
 80036f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fe fd59 	bl	80021b0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d902      	bls.n	8003710 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	f000 bde2 	b.w	80042d4 <HAL_RCC_OscConfig+0x106c>
 8003710:	2302      	movs	r3, #2
 8003712:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003722:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b01      	cmp	r3, #1
 8003738:	d102      	bne.n	8003740 <HAL_RCC_OscConfig+0x4d8>
 800373a:	4b45      	ldr	r3, [pc, #276]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	e013      	b.n	8003768 <HAL_RCC_OscConfig+0x500>
 8003740:	2302      	movs	r3, #2
 8003742:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003752:	2302      	movs	r3, #2
 8003754:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003758:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003764:	4b3a      	ldr	r3, [pc, #232]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2202      	movs	r2, #2
 800376a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800376e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003772:	fa92 f2a2 	rbit	r2, r2
 8003776:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800377a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800377e:	fab2 f282 	clz	r2, r2
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	f042 0220 	orr.w	r2, r2, #32
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	f002 021f 	and.w	r2, r2, #31
 800378e:	2101      	movs	r1, #1
 8003790:	fa01 f202 	lsl.w	r2, r1, r2
 8003794:	4013      	ands	r3, r2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0af      	beq.n	80036fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	4b2d      	ldr	r3, [pc, #180]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	21f8      	movs	r1, #248	; 0xf8
 80037b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037b8:	fa91 f1a1 	rbit	r1, r1
 80037bc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80037c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80037c4:	fab1 f181 	clz	r1, r1
 80037c8:	b2c9      	uxtb	r1, r1
 80037ca:	408b      	lsls	r3, r1
 80037cc:	4920      	ldr	r1, [pc, #128]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
 80037d2:	e06c      	b.n	80038ae <HAL_RCC_OscConfig+0x646>
 80037d4:	2301      	movs	r3, #1
 80037d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80037e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	461a      	mov	r2, r3
 80037fc:	2300      	movs	r3, #0
 80037fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe fcd6 	bl	80021b0 <HAL_GetTick>
 8003804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380a:	f7fe fcd1 	bl	80021b0 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d902      	bls.n	8003820 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	f000 bd5a 	b.w	80042d4 <HAL_RCC_OscConfig+0x106c>
 8003820:	2302      	movs	r3, #2
 8003822:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d104      	bne.n	8003854 <HAL_RCC_OscConfig+0x5ec>
 800384a:	4b01      	ldr	r3, [pc, #4]	; (8003850 <HAL_RCC_OscConfig+0x5e8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	e015      	b.n	800387c <HAL_RCC_OscConfig+0x614>
 8003850:	40021000 	.word	0x40021000
 8003854:	2302      	movs	r3, #2
 8003856:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003866:	2302      	movs	r3, #2
 8003868:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800386c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003878:	4bc8      	ldr	r3, [pc, #800]	; (8003b9c <HAL_RCC_OscConfig+0x934>)
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	2202      	movs	r2, #2
 800387e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003882:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003886:	fa92 f2a2 	rbit	r2, r2
 800388a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800388e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003892:	fab2 f282 	clz	r2, r2
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	f042 0220 	orr.w	r2, r2, #32
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	f002 021f 	and.w	r2, r2, #31
 80038a2:	2101      	movs	r1, #1
 80038a4:	fa01 f202 	lsl.w	r2, r1, r2
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ad      	bne.n	800380a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8110 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d079      	beq.n	80039c8 <HAL_RCC_OscConfig+0x760>
 80038d4:	2301      	movs	r3, #1
 80038d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80038e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	4bab      	ldr	r3, [pc, #684]	; (8003ba0 <HAL_RCC_OscConfig+0x938>)
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	461a      	mov	r2, r3
 80038fa:	2301      	movs	r3, #1
 80038fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fe:	f7fe fc57 	bl	80021b0 <HAL_GetTick>
 8003902:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003906:	e00a      	b.n	800391e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003908:	f7fe fc52 	bl	80021b0 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d902      	bls.n	800391e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	f000 bcdb 	b.w	80042d4 <HAL_RCC_OscConfig+0x106c>
 800391e:	2302      	movs	r3, #2
 8003920:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003924:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003934:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003938:	2202      	movs	r2, #2
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	fa93 f2a3 	rbit	r2, r3
 800394a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800395c:	2202      	movs	r2, #2
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	fa93 f2a3 	rbit	r2, r3
 800396e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003972:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003976:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003978:	4b88      	ldr	r3, [pc, #544]	; (8003b9c <HAL_RCC_OscConfig+0x934>)
 800397a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800397c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003980:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003984:	2102      	movs	r1, #2
 8003986:	6019      	str	r1, [r3, #0]
 8003988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	fa93 f1a3 	rbit	r1, r3
 8003996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800399e:	6019      	str	r1, [r3, #0]
  return result;
 80039a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2101      	movs	r1, #1
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0a0      	beq.n	8003908 <HAL_RCC_OscConfig+0x6a0>
 80039c6:	e08d      	b.n	8003ae4 <HAL_RCC_OscConfig+0x87c>
 80039c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039d0:	2201      	movs	r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	fa93 f2a3 	rbit	r2, r3
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039ea:	601a      	str	r2, [r3, #0]
  return result;
 80039ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	4b68      	ldr	r3, [pc, #416]	; (8003ba0 <HAL_RCC_OscConfig+0x938>)
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	461a      	mov	r2, r3
 8003a06:	2300      	movs	r3, #0
 8003a08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7fe fbd1 	bl	80021b0 <HAL_GetTick>
 8003a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a14:	f7fe fbcc 	bl	80021b0 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d902      	bls.n	8003a2a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	f000 bc55 	b.w	80042d4 <HAL_RCC_OscConfig+0x106c>
 8003a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a32:	2202      	movs	r2, #2
 8003a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	fa93 f2a3 	rbit	r2, r3
 8003a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a56:	2202      	movs	r2, #2
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	fa93 f2a3 	rbit	r2, r3
 8003a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	fa93 f2a3 	rbit	r2, r3
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <HAL_RCC_OscConfig+0x934>)
 8003a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003aa2:	2102      	movs	r1, #2
 8003aa4:	6019      	str	r1, [r3, #0]
 8003aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aaa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	fa93 f1a3 	rbit	r1, r3
 8003ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003abc:	6019      	str	r1, [r3, #0]
  return result;
 8003abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	fab3 f383 	clz	r3, r3
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	2101      	movs	r1, #1
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d197      	bne.n	8003a14 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 81a1 	beq.w	8003e3c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b00:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <HAL_RCC_OscConfig+0x934>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d116      	bne.n	8003b3a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <HAL_RCC_OscConfig+0x934>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <HAL_RCC_OscConfig+0x934>)
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b16:	61d3      	str	r3, [r2, #28]
 8003b18:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <HAL_RCC_OscConfig+0x934>)
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b24:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b32:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <HAL_RCC_OscConfig+0x93c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d11a      	bne.n	8003b7c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <HAL_RCC_OscConfig+0x93c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a16      	ldr	r2, [pc, #88]	; (8003ba4 <HAL_RCC_OscConfig+0x93c>)
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b52:	f7fe fb2d 	bl	80021b0 <HAL_GetTick>
 8003b56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	e009      	b.n	8003b70 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5c:	f7fe fb28 	bl	80021b0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b64      	cmp	r3, #100	; 0x64
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e3b1      	b.n	80042d4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_RCC_OscConfig+0x93c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0ef      	beq.n	8003b5c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d10d      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x940>
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_RCC_OscConfig+0x934>)
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	4a02      	ldr	r2, [pc, #8]	; (8003b9c <HAL_RCC_OscConfig+0x934>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6213      	str	r3, [r2, #32]
 8003b98:	e03c      	b.n	8003c14 <HAL_RCC_OscConfig+0x9ac>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	10908120 	.word	0x10908120
 8003ba4:	40007000 	.word	0x40007000
 8003ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x96a>
 8003bb8:	4bc1      	ldr	r3, [pc, #772]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	4ac0      	ldr	r2, [pc, #768]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	6213      	str	r3, [r2, #32]
 8003bc4:	4bbe      	ldr	r3, [pc, #760]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	4abd      	ldr	r2, [pc, #756]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003bca:	f023 0304 	bic.w	r3, r3, #4
 8003bce:	6213      	str	r3, [r2, #32]
 8003bd0:	e020      	b.n	8003c14 <HAL_RCC_OscConfig+0x9ac>
 8003bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x994>
 8003be2:	4bb7      	ldr	r3, [pc, #732]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4ab6      	ldr	r2, [pc, #728]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	6213      	str	r3, [r2, #32]
 8003bee:	4bb4      	ldr	r3, [pc, #720]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4ab3      	ldr	r2, [pc, #716]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6213      	str	r3, [r2, #32]
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCC_OscConfig+0x9ac>
 8003bfc:	4bb0      	ldr	r3, [pc, #704]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	4aaf      	ldr	r2, [pc, #700]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	6213      	str	r3, [r2, #32]
 8003c08:	4bad      	ldr	r3, [pc, #692]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4aac      	ldr	r2, [pc, #688]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003c0e:	f023 0304 	bic.w	r3, r3, #4
 8003c12:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8081 	beq.w	8003d28 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c26:	f7fe fac3 	bl	80021b0 <HAL_GetTick>
 8003c2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c30:	f7fe fabe 	bl	80021b0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e345      	b.n	80042d4 <HAL_RCC_OscConfig+0x106c>
 8003c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c50:	2202      	movs	r2, #2
 8003c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	fa93 f2a3 	rbit	r2, r3
 8003c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c66:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c74:	2202      	movs	r2, #2
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	fa93 f2a3 	rbit	r2, r3
 8003c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c8e:	601a      	str	r2, [r3, #0]
  return result;
 8003c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c94:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c98:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f043 0302 	orr.w	r3, r3, #2
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCC_OscConfig+0xa4c>
 8003cae:	4b84      	ldr	r3, [pc, #528]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	e013      	b.n	8003cdc <HAL_RCC_OscConfig+0xa74>
 8003cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	fa93 f2a3 	rbit	r2, r3
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	4b79      	ldr	r3, [pc, #484]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ce0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	6011      	str	r1, [r2, #0]
 8003ce8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	fa92 f1a2 	rbit	r1, r2
 8003cf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cfa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003cfe:	6011      	str	r1, [r2, #0]
  return result;
 8003d00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d04:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	fab2 f282 	clz	r2, r2
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	f002 021f 	and.w	r2, r2, #31
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d084      	beq.n	8003c30 <HAL_RCC_OscConfig+0x9c8>
 8003d26:	e07f      	b.n	8003e28 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d28:	f7fe fa42 	bl	80021b0 <HAL_GetTick>
 8003d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d30:	e00b      	b.n	8003d4a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fe fa3d 	bl	80021b0 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e2c4      	b.n	80042d4 <HAL_RCC_OscConfig+0x106c>
 8003d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d52:	2202      	movs	r2, #2
 8003d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	fa93 f2a3 	rbit	r2, r3
 8003d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d68:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d72:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d76:	2202      	movs	r2, #2
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	fa93 f2a3 	rbit	r2, r3
 8003d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d90:	601a      	str	r2, [r3, #0]
  return result;
 8003d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d96:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9c:	fab3 f383 	clz	r3, r3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f043 0302 	orr.w	r3, r3, #2
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d102      	bne.n	8003db6 <HAL_RCC_OscConfig+0xb4e>
 8003db0:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	e013      	b.n	8003dde <HAL_RCC_OscConfig+0xb76>
 8003db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	fa93 f2a3 	rbit	r2, r3
 8003dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003de2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003de6:	2102      	movs	r1, #2
 8003de8:	6011      	str	r1, [r2, #0]
 8003dea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	fa92 f1a2 	rbit	r1, r2
 8003df8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dfc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e00:	6011      	str	r1, [r2, #0]
  return result;
 8003e02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e06:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	fab2 f282 	clz	r2, r2
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	f002 021f 	and.w	r2, r2, #31
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d184      	bne.n	8003d32 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e28:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d105      	bne.n	8003e3c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	4a22      	ldr	r2, [pc, #136]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8242 	beq.w	80042d2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <HAL_RCC_OscConfig+0xc58>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	f000 8213 	beq.w	8004282 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	f040 8162 	bne.w	8004132 <HAL_RCC_OscConfig+0xeca>
 8003e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e72:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	fa93 f2a3 	rbit	r2, r3
 8003e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e92:	601a      	str	r2, [r3, #0]
  return result;
 8003e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e98:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e9c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ea8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe f97c 	bl	80021b0 <HAL_GetTick>
 8003eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ebc:	e00c      	b.n	8003ed8 <HAL_RCC_OscConfig+0xc70>
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fe f974 	bl	80021b0 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e1fd      	b.n	80042d4 <HAL_RCC_OscConfig+0x106c>
 8003ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003edc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ee0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	fa93 f2a3 	rbit	r2, r3
 8003ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003efc:	601a      	str	r2, [r3, #0]
  return result;
 8003efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f02:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d102      	bne.n	8003f22 <HAL_RCC_OscConfig+0xcba>
 8003f1c:	4bb0      	ldr	r3, [pc, #704]	; (80041e0 <HAL_RCC_OscConfig+0xf78>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	e027      	b.n	8003f72 <HAL_RCC_OscConfig+0xd0a>
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f34:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	fa93 f2a3 	rbit	r2, r3
 8003f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f42:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f5a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	fa93 f2a3 	rbit	r2, r3
 8003f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f68:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	4b9c      	ldr	r3, [pc, #624]	; (80041e0 <HAL_RCC_OscConfig+0xf78>)
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f76:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f7a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f7e:	6011      	str	r1, [r2, #0]
 8003f80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f84:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	fa92 f1a2 	rbit	r1, r2
 8003f8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f92:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f96:	6011      	str	r1, [r2, #0]
  return result;
 8003f98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f9c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	fab2 f282 	clz	r2, r2
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	f042 0220 	orr.w	r2, r2, #32
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	f002 021f 	and.w	r2, r2, #31
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d182      	bne.n	8003ec4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCC_OscConfig+0xf78>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	497f      	ldr	r1, [pc, #508]	; (80041e0 <HAL_RCC_OscConfig+0xf78>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
 8003fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003fee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ff2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	fa93 f2a3 	rbit	r2, r3
 8004002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004006:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800400a:	601a      	str	r2, [r3, #0]
  return result;
 800400c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004010:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004014:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004020:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	461a      	mov	r2, r3
 8004028:	2301      	movs	r3, #1
 800402a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fe f8c0 	bl	80021b0 <HAL_GetTick>
 8004030:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004034:	e009      	b.n	800404a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004036:	f7fe f8bb 	bl	80021b0 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e144      	b.n	80042d4 <HAL_RCC_OscConfig+0x106c>
 800404a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	fa93 f2a3 	rbit	r2, r3
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800406e:	601a      	str	r2, [r3, #0]
  return result;
 8004070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004074:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004078:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	d102      	bne.n	8004094 <HAL_RCC_OscConfig+0xe2c>
 800408e:	4b54      	ldr	r3, [pc, #336]	; (80041e0 <HAL_RCC_OscConfig+0xf78>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	e027      	b.n	80040e4 <HAL_RCC_OscConfig+0xe7c>
 8004094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004098:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800409c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fa93 f2a3 	rbit	r2, r3
 80040b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040be:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040cc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	fa93 f2a3 	rbit	r2, r3
 80040d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040da:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	4b3f      	ldr	r3, [pc, #252]	; (80041e0 <HAL_RCC_OscConfig+0xf78>)
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040e8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040f0:	6011      	str	r1, [r2, #0]
 80040f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040f6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	fa92 f1a2 	rbit	r1, r2
 8004100:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004104:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004108:	6011      	str	r1, [r2, #0]
  return result;
 800410a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800410e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	fab2 f282 	clz	r2, r2
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	f042 0220 	orr.w	r2, r2, #32
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	f002 021f 	and.w	r2, r2, #31
 8004124:	2101      	movs	r1, #1
 8004126:	fa01 f202 	lsl.w	r2, r1, r2
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d082      	beq.n	8004036 <HAL_RCC_OscConfig+0xdce>
 8004130:	e0cf      	b.n	80042d2 <HAL_RCC_OscConfig+0x106a>
 8004132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004136:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800413a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800413e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004144:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	fa93 f2a3 	rbit	r2, r3
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004156:	601a      	str	r2, [r3, #0]
  return result;
 8004158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004160:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800416c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	461a      	mov	r2, r3
 8004174:	2300      	movs	r3, #0
 8004176:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fe f81a 	bl	80021b0 <HAL_GetTick>
 800417c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004180:	e009      	b.n	8004196 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004182:	f7fe f815 	bl	80021b0 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e09e      	b.n	80042d4 <HAL_RCC_OscConfig+0x106c>
 8004196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800419e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	fa93 f2a3 	rbit	r2, r3
 80041b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041ba:	601a      	str	r2, [r3, #0]
  return result;
 80041bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d104      	bne.n	80041e4 <HAL_RCC_OscConfig+0xf7c>
 80041da:	4b01      	ldr	r3, [pc, #4]	; (80041e0 <HAL_RCC_OscConfig+0xf78>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	e029      	b.n	8004234 <HAL_RCC_OscConfig+0xfcc>
 80041e0:	40021000 	.word	0x40021000
 80041e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	fa93 f2a3 	rbit	r2, r3
 8004200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004204:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004212:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	fa93 f2a3 	rbit	r2, r3
 8004226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <HAL_RCC_OscConfig+0x1078>)
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004238:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800423c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004240:	6011      	str	r1, [r2, #0]
 8004242:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004246:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	fa92 f1a2 	rbit	r1, r2
 8004250:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004254:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004258:	6011      	str	r1, [r2, #0]
  return result;
 800425a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800425e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	fab2 f282 	clz	r2, r2
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	f042 0220 	orr.w	r2, r2, #32
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	f002 021f 	and.w	r2, r2, #31
 8004274:	2101      	movs	r1, #1
 8004276:	fa01 f202 	lsl.w	r2, r1, r2
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d180      	bne.n	8004182 <HAL_RCC_OscConfig+0xf1a>
 8004280:	e027      	b.n	80042d2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e01e      	b.n	80042d4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_RCC_OscConfig+0x1078>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800429e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042a2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d10b      	bne.n	80042ce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d001      	beq.n	80042d2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000

080042e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b09e      	sub	sp, #120	; 0x78
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e162      	b.n	80045c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042fc:	4b90      	ldr	r3, [pc, #576]	; (8004540 <HAL_RCC_ClockConfig+0x25c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d910      	bls.n	800432c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b8d      	ldr	r3, [pc, #564]	; (8004540 <HAL_RCC_ClockConfig+0x25c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 0207 	bic.w	r2, r3, #7
 8004312:	498b      	ldr	r1, [pc, #556]	; (8004540 <HAL_RCC_ClockConfig+0x25c>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b89      	ldr	r3, [pc, #548]	; (8004540 <HAL_RCC_ClockConfig+0x25c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e14a      	b.n	80045c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004338:	4b82      	ldr	r3, [pc, #520]	; (8004544 <HAL_RCC_ClockConfig+0x260>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	497f      	ldr	r1, [pc, #508]	; (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004346:	4313      	orrs	r3, r2
 8004348:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80dc 	beq.w	8004510 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d13c      	bne.n	80043da <HAL_RCC_ClockConfig+0xf6>
 8004360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004364:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800436e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004370:	fab3 f383 	clz	r3, r3
 8004374:	b2db      	uxtb	r3, r3
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	b2db      	uxtb	r3, r3
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d102      	bne.n	800438a <HAL_RCC_ClockConfig+0xa6>
 8004384:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	e00f      	b.n	80043aa <HAL_RCC_ClockConfig+0xc6>
 800438a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800438e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	667b      	str	r3, [r7, #100]	; 0x64
 8004398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800439c:	663b      	str	r3, [r7, #96]	; 0x60
 800439e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043a0:	fa93 f3a3 	rbit	r3, r3
 80043a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043a6:	4b67      	ldr	r3, [pc, #412]	; (8004544 <HAL_RCC_ClockConfig+0x260>)
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80043b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043b2:	fa92 f2a2 	rbit	r2, r2
 80043b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80043b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043ba:	fab2 f282 	clz	r2, r2
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	f042 0220 	orr.w	r2, r2, #32
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	f002 021f 	and.w	r2, r2, #31
 80043ca:	2101      	movs	r1, #1
 80043cc:	fa01 f202 	lsl.w	r2, r1, r2
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d17b      	bne.n	80044ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e0f3      	b.n	80045c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d13c      	bne.n	800445c <HAL_RCC_ClockConfig+0x178>
 80043e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ea:	fa93 f3a3 	rbit	r3, r3
 80043ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f2:	fab3 f383 	clz	r3, r3
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d102      	bne.n	800440c <HAL_RCC_ClockConfig+0x128>
 8004406:	4b4f      	ldr	r3, [pc, #316]	; (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	e00f      	b.n	800442c <HAL_RCC_ClockConfig+0x148>
 800440c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004410:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004414:	fa93 f3a3 	rbit	r3, r3
 8004418:	647b      	str	r3, [r7, #68]	; 0x44
 800441a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800441e:	643b      	str	r3, [r7, #64]	; 0x40
 8004420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004428:	4b46      	ldr	r3, [pc, #280]	; (8004544 <HAL_RCC_ClockConfig+0x260>)
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004430:	63ba      	str	r2, [r7, #56]	; 0x38
 8004432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004434:	fa92 f2a2 	rbit	r2, r2
 8004438:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800443a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800443c:	fab2 f282 	clz	r2, r2
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	f042 0220 	orr.w	r2, r2, #32
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	f002 021f 	and.w	r2, r2, #31
 800444c:	2101      	movs	r1, #1
 800444e:	fa01 f202 	lsl.w	r2, r1, r2
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d13a      	bne.n	80044ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0b2      	b.n	80045c2 <HAL_RCC_ClockConfig+0x2de>
 800445c:	2302      	movs	r3, #2
 800445e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446a:	fab3 f383 	clz	r3, r3
 800446e:	b2db      	uxtb	r3, r3
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d102      	bne.n	8004484 <HAL_RCC_ClockConfig+0x1a0>
 800447e:	4b31      	ldr	r3, [pc, #196]	; (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	e00d      	b.n	80044a0 <HAL_RCC_ClockConfig+0x1bc>
 8004484:	2302      	movs	r3, #2
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	fa93 f3a3 	rbit	r3, r3
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
 8004490:	2302      	movs	r3, #2
 8004492:	623b      	str	r3, [r7, #32]
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	fa93 f3a3 	rbit	r3, r3
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	4b29      	ldr	r3, [pc, #164]	; (8004544 <HAL_RCC_ClockConfig+0x260>)
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2202      	movs	r2, #2
 80044a2:	61ba      	str	r2, [r7, #24]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	fa92 f2a2 	rbit	r2, r2
 80044aa:	617a      	str	r2, [r7, #20]
  return result;
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	fab2 f282 	clz	r2, r2
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	f042 0220 	orr.w	r2, r2, #32
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	f002 021f 	and.w	r2, r2, #31
 80044be:	2101      	movs	r1, #1
 80044c0:	fa01 f202 	lsl.w	r2, r1, r2
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e079      	b.n	80045c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ce:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <HAL_RCC_ClockConfig+0x260>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f023 0203 	bic.w	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	491a      	ldr	r1, [pc, #104]	; (8004544 <HAL_RCC_ClockConfig+0x260>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e0:	f7fd fe66 	bl	80021b0 <HAL_GetTick>
 80044e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e8:	f7fd fe62 	bl	80021b0 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e061      	b.n	80045c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fe:	4b11      	ldr	r3, [pc, #68]	; (8004544 <HAL_RCC_ClockConfig+0x260>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 020c 	and.w	r2, r3, #12
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	429a      	cmp	r2, r3
 800450e:	d1eb      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_ClockConfig+0x25c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d214      	bcs.n	8004548 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_RCC_ClockConfig+0x25c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 0207 	bic.w	r2, r3, #7
 8004526:	4906      	ldr	r1, [pc, #24]	; (8004540 <HAL_RCC_ClockConfig+0x25c>)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	4313      	orrs	r3, r2
 800452c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b04      	ldr	r3, [pc, #16]	; (8004540 <HAL_RCC_ClockConfig+0x25c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e040      	b.n	80045c2 <HAL_RCC_ClockConfig+0x2de>
 8004540:	40022000 	.word	0x40022000
 8004544:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004554:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_RCC_ClockConfig+0x2e8>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	491a      	ldr	r1, [pc, #104]	; (80045cc <HAL_RCC_ClockConfig+0x2e8>)
 8004562:	4313      	orrs	r3, r2
 8004564:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004572:	4b16      	ldr	r3, [pc, #88]	; (80045cc <HAL_RCC_ClockConfig+0x2e8>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4912      	ldr	r1, [pc, #72]	; (80045cc <HAL_RCC_ClockConfig+0x2e8>)
 8004582:	4313      	orrs	r3, r2
 8004584:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004586:	f000 f829 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 800458a:	4601      	mov	r1, r0
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <HAL_RCC_ClockConfig+0x2e8>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004594:	22f0      	movs	r2, #240	; 0xf0
 8004596:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	fa92 f2a2 	rbit	r2, r2
 800459e:	60fa      	str	r2, [r7, #12]
  return result;
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	fab2 f282 	clz	r2, r2
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	40d3      	lsrs	r3, r2
 80045aa:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <HAL_RCC_ClockConfig+0x2ec>)
 80045ac:	5cd3      	ldrb	r3, [r2, r3]
 80045ae:	fa21 f303 	lsr.w	r3, r1, r3
 80045b2:	4a08      	ldr	r2, [pc, #32]	; (80045d4 <HAL_RCC_ClockConfig+0x2f0>)
 80045b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045b6:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <HAL_RCC_ClockConfig+0x2f4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fdb4 	bl	8002128 <HAL_InitTick>
  
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3778      	adds	r7, #120	; 0x78
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000
 80045d0:	080092f4 	.word	0x080092f4
 80045d4:	20000008 	.word	0x20000008
 80045d8:	2000000c 	.word	0x2000000c

080045dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	b08b      	sub	sp, #44	; 0x2c
 80045e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	2300      	movs	r3, #0
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80045f6:	4b29      	ldr	r3, [pc, #164]	; (800469c <HAL_RCC_GetSysClockFreq+0xc0>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	2b04      	cmp	r3, #4
 8004604:	d002      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0x30>
 8004606:	2b08      	cmp	r3, #8
 8004608:	d003      	beq.n	8004612 <HAL_RCC_GetSysClockFreq+0x36>
 800460a:	e03c      	b.n	8004686 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800460c:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800460e:	623b      	str	r3, [r7, #32]
      break;
 8004610:	e03c      	b.n	800468c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004618:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800461c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	fa92 f2a2 	rbit	r2, r2
 8004624:	607a      	str	r2, [r7, #4]
  return result;
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	fab2 f282 	clz	r2, r2
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	40d3      	lsrs	r3, r2
 8004630:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004632:	5cd3      	ldrb	r3, [r2, r3]
 8004634:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004636:	4b19      	ldr	r3, [pc, #100]	; (800469c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	220f      	movs	r2, #15
 8004640:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	fa92 f2a2 	rbit	r2, r2
 8004648:	60fa      	str	r2, [r7, #12]
  return result;
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	fab2 f282 	clz	r2, r2
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	40d3      	lsrs	r3, r2
 8004654:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004656:	5cd3      	ldrb	r3, [r2, r3]
 8004658:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004664:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	fbb2 f2f3 	udiv	r2, r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
 8004674:	e004      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	4a0c      	ldr	r2, [pc, #48]	; (80046ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	623b      	str	r3, [r7, #32]
      break;
 8004684:	e002      	b.n	800468c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004688:	623b      	str	r3, [r7, #32]
      break;
 800468a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800468c:	6a3b      	ldr	r3, [r7, #32]
}
 800468e:	4618      	mov	r0, r3
 8004690:	372c      	adds	r7, #44	; 0x2c
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	007a1200 	.word	0x007a1200
 80046a4:	08009304 	.word	0x08009304
 80046a8:	08009314 	.word	0x08009314
 80046ac:	003d0900 	.word	0x003d0900

080046b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b092      	sub	sp, #72	; 0x48
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046c0:	2300      	movs	r3, #0
 80046c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80cd 	beq.w	800486e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d4:	4b86      	ldr	r3, [pc, #536]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10e      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e0:	4b83      	ldr	r3, [pc, #524]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4a82      	ldr	r2, [pc, #520]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ea:	61d3      	str	r3, [r2, #28]
 80046ec:	4b80      	ldr	r3, [pc, #512]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fe:	4b7d      	ldr	r3, [pc, #500]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d118      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470a:	4b7a      	ldr	r3, [pc, #488]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a79      	ldr	r2, [pc, #484]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004716:	f7fd fd4b 	bl	80021b0 <HAL_GetTick>
 800471a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471c:	e008      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471e:	f7fd fd47 	bl	80021b0 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b64      	cmp	r3, #100	; 0x64
 800472a:	d901      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e0db      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004730:	4b70      	ldr	r3, [pc, #448]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800473c:	4b6c      	ldr	r3, [pc, #432]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d07d      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004756:	429a      	cmp	r2, r3
 8004758:	d076      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800475a:	4b65      	ldr	r3, [pc, #404]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004768:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	fa93 f3a3 	rbit	r3, r3
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004774:	fab3 f383 	clz	r3, r3
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	4b5e      	ldr	r3, [pc, #376]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	461a      	mov	r2, r3
 8004784:	2301      	movs	r3, #1
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800478c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	fa93 f3a3 	rbit	r3, r3
 8004794:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004798:	fab3 f383 	clz	r3, r3
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	4b55      	ldr	r3, [pc, #340]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	461a      	mov	r2, r3
 80047a8:	2300      	movs	r3, #0
 80047aa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047ac:	4a50      	ldr	r2, [pc, #320]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d045      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fd fcf8 	bl	80021b0 <HAL_GetTick>
 80047c0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c2:	e00a      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fd fcf4 	bl	80021b0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e086      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80047da:	2302      	movs	r3, #2
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	fa93 f3a3 	rbit	r3, r3
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
 80047e6:	2302      	movs	r3, #2
 80047e8:	623b      	str	r3, [r7, #32]
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	fa93 f3a3 	rbit	r3, r3
 80047f0:	61fb      	str	r3, [r7, #28]
  return result;
 80047f2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f4:	fab3 f383 	clz	r3, r3
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f043 0302 	orr.w	r3, r3, #2
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d102      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004808:	4b39      	ldr	r3, [pc, #228]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	e007      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800480e:	2302      	movs	r3, #2
 8004810:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	fa93 f3a3 	rbit	r3, r3
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	4b35      	ldr	r3, [pc, #212]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2202      	movs	r2, #2
 8004820:	613a      	str	r2, [r7, #16]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	fa92 f2a2 	rbit	r2, r2
 8004828:	60fa      	str	r2, [r7, #12]
  return result;
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	fab2 f282 	clz	r2, r2
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	f002 021f 	and.w	r2, r2, #31
 800483c:	2101      	movs	r1, #1
 800483e:	fa01 f202 	lsl.w	r2, r1, r2
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0bd      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004848:	4b29      	ldr	r3, [pc, #164]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4926      	ldr	r1, [pc, #152]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004856:	4313      	orrs	r3, r2
 8004858:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800485a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800485e:	2b01      	cmp	r3, #1
 8004860:	d105      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004862:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800487a:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	f023 0203 	bic.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	491a      	ldr	r1, [pc, #104]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004888:	4313      	orrs	r3, r2
 800488a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	f023 0210 	bic.w	r2, r3, #16
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4912      	ldr	r1, [pc, #72]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048b6:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	490b      	ldr	r1, [pc, #44]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048d4:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	4903      	ldr	r1, [pc, #12]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3748      	adds	r7, #72	; 0x48
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40007000 	.word	0x40007000
 80048f8:	10908100 	.word	0x10908100

080048fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e049      	b.n	80049a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fd fa74 	bl	8001e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f000 fbbe 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d001      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e040      	b.n	8004a46 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <HAL_TIM_Base_Start_IT+0xa8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x58>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ee:	d009      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x58>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <HAL_TIM_Base_Start_IT+0xac>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x58>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <HAL_TIM_Base_Start_IT+0xb0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d115      	bne.n	8004a30 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b06      	cmp	r3, #6
 8004a14:	d015      	beq.n	8004a42 <HAL_TIM_Base_Start_IT+0x96>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1c:	d011      	beq.n	8004a42 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	e008      	b.n	8004a42 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	e000      	b.n	8004a44 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	00010007 	.word	0x00010007

08004a64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e049      	b.n	8004b0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f841 	bl	8004b12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f000 fb0a 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_TIM_PWM_Start+0x24>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	bf14      	ite	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	2300      	moveq	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e03c      	b.n	8004bc6 <HAL_TIM_PWM_Start+0x9e>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d109      	bne.n	8004b66 <HAL_TIM_PWM_Start+0x3e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	bf14      	ite	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	2300      	moveq	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e02f      	b.n	8004bc6 <HAL_TIM_PWM_Start+0x9e>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d109      	bne.n	8004b80 <HAL_TIM_PWM_Start+0x58>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e022      	b.n	8004bc6 <HAL_TIM_PWM_Start+0x9e>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	d109      	bne.n	8004b9a <HAL_TIM_PWM_Start+0x72>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	bf14      	ite	ne
 8004b92:	2301      	movne	r3, #1
 8004b94:	2300      	moveq	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	e015      	b.n	8004bc6 <HAL_TIM_PWM_Start+0x9e>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d109      	bne.n	8004bb4 <HAL_TIM_PWM_Start+0x8c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	bf14      	ite	ne
 8004bac:	2301      	movne	r3, #1
 8004bae:	2300      	moveq	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	e008      	b.n	8004bc6 <HAL_TIM_PWM_Start+0x9e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	bf14      	ite	ne
 8004bc0:	2301      	movne	r3, #1
 8004bc2:	2300      	moveq	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e088      	b.n	8004ce0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d104      	bne.n	8004bde <HAL_TIM_PWM_Start+0xb6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bdc:	e023      	b.n	8004c26 <HAL_TIM_PWM_Start+0xfe>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_PWM_Start+0xc6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bec:	e01b      	b.n	8004c26 <HAL_TIM_PWM_Start+0xfe>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_PWM_Start+0xd6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bfc:	e013      	b.n	8004c26 <HAL_TIM_PWM_Start+0xfe>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Start+0xe6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c0c:	e00b      	b.n	8004c26 <HAL_TIM_PWM_Start+0xfe>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_PWM_Start+0xf6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c1c:	e003      	b.n	8004c26 <HAL_TIM_PWM_Start+0xfe>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	6839      	ldr	r1, [r7, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fdfc 	bl	800582c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2b      	ldr	r2, [pc, #172]	; (8004ce8 <HAL_TIM_PWM_Start+0x1c0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_TIM_PWM_Start+0x134>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <HAL_TIM_PWM_Start+0x1c4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_TIM_PWM_Start+0x134>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a28      	ldr	r2, [pc, #160]	; (8004cf0 <HAL_TIM_PWM_Start+0x1c8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_TIM_PWM_Start+0x134>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a27      	ldr	r2, [pc, #156]	; (8004cf4 <HAL_TIM_PWM_Start+0x1cc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIM_PWM_Start+0x138>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <HAL_TIM_PWM_Start+0x13a>
 8004c60:	2300      	movs	r3, #0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <HAL_TIM_PWM_Start+0x1c0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x176>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c88:	d009      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x176>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1a      	ldr	r2, [pc, #104]	; (8004cf8 <HAL_TIM_PWM_Start+0x1d0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x176>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <HAL_TIM_PWM_Start+0x1c4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d115      	bne.n	8004cca <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <HAL_TIM_PWM_Start+0x1d4>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b06      	cmp	r3, #6
 8004cae:	d015      	beq.n	8004cdc <HAL_TIM_PWM_Start+0x1b4>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb6:	d011      	beq.n	8004cdc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc8:	e008      	b.n	8004cdc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	e000      	b.n	8004cde <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	00010007 	.word	0x00010007

08004d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e0ff      	b.n	8004f1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b14      	cmp	r3, #20
 8004d2a:	f200 80f0 	bhi.w	8004f0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d2e:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d89 	.word	0x08004d89
 8004d38:	08004f0f 	.word	0x08004f0f
 8004d3c:	08004f0f 	.word	0x08004f0f
 8004d40:	08004f0f 	.word	0x08004f0f
 8004d44:	08004dc9 	.word	0x08004dc9
 8004d48:	08004f0f 	.word	0x08004f0f
 8004d4c:	08004f0f 	.word	0x08004f0f
 8004d50:	08004f0f 	.word	0x08004f0f
 8004d54:	08004e0b 	.word	0x08004e0b
 8004d58:	08004f0f 	.word	0x08004f0f
 8004d5c:	08004f0f 	.word	0x08004f0f
 8004d60:	08004f0f 	.word	0x08004f0f
 8004d64:	08004e4b 	.word	0x08004e4b
 8004d68:	08004f0f 	.word	0x08004f0f
 8004d6c:	08004f0f 	.word	0x08004f0f
 8004d70:	08004f0f 	.word	0x08004f0f
 8004d74:	08004e8d 	.word	0x08004e8d
 8004d78:	08004f0f 	.word	0x08004f0f
 8004d7c:	08004f0f 	.word	0x08004f0f
 8004d80:	08004f0f 	.word	0x08004f0f
 8004d84:	08004ecd 	.word	0x08004ecd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fa0c 	bl	80051ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0208 	orr.w	r2, r2, #8
 8004da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0204 	bic.w	r2, r2, #4
 8004db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6999      	ldr	r1, [r3, #24]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	619a      	str	r2, [r3, #24]
      break;
 8004dc6:	e0a5      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fa72 	bl	80052b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6999      	ldr	r1, [r3, #24]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	021a      	lsls	r2, r3, #8
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	619a      	str	r2, [r3, #24]
      break;
 8004e08:	e084      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fad1 	bl	80053b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0208 	orr.w	r2, r2, #8
 8004e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0204 	bic.w	r2, r2, #4
 8004e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69d9      	ldr	r1, [r3, #28]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	61da      	str	r2, [r3, #28]
      break;
 8004e48:	e064      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fb2f 	bl	80054b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69d9      	ldr	r1, [r3, #28]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	021a      	lsls	r2, r3, #8
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	61da      	str	r2, [r3, #28]
      break;
 8004e8a:	e043      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fb72 	bl	800557c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0208 	orr.w	r2, r2, #8
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0204 	bic.w	r2, r2, #4
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004eca:	e023      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fbb0 	bl	8005638 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	021a      	lsls	r2, r3, #8
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f0c:	e002      	b.n	8004f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
      break;
 8004f12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop

08004f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_TIM_ConfigClockSource+0x1c>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e0b6      	b.n	80050b2 <HAL_TIM_ConfigClockSource+0x18a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f80:	d03e      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0xd8>
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	f200 8087 	bhi.w	8005098 <HAL_TIM_ConfigClockSource+0x170>
 8004f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8e:	f000 8086 	beq.w	800509e <HAL_TIM_ConfigClockSource+0x176>
 8004f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f96:	d87f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x170>
 8004f98:	2b70      	cmp	r3, #112	; 0x70
 8004f9a:	d01a      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0xaa>
 8004f9c:	2b70      	cmp	r3, #112	; 0x70
 8004f9e:	d87b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x170>
 8004fa0:	2b60      	cmp	r3, #96	; 0x60
 8004fa2:	d050      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x11e>
 8004fa4:	2b60      	cmp	r3, #96	; 0x60
 8004fa6:	d877      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x170>
 8004fa8:	2b50      	cmp	r3, #80	; 0x50
 8004faa:	d03c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0xfe>
 8004fac:	2b50      	cmp	r3, #80	; 0x50
 8004fae:	d873      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x170>
 8004fb0:	2b40      	cmp	r3, #64	; 0x40
 8004fb2:	d058      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x13e>
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d86f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x170>
 8004fb8:	2b30      	cmp	r3, #48	; 0x30
 8004fba:	d064      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15e>
 8004fbc:	2b30      	cmp	r3, #48	; 0x30
 8004fbe:	d86b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x170>
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d060      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15e>
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d867      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x170>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05c      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15e>
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d05a      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x15e>
 8004fd0:	e062      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fe2:	f000 fc03 	bl	80057ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	609a      	str	r2, [r3, #8]
      break;
 8004ffe:	e04f      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005010:	f000 fbec 	bl	80057ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005022:	609a      	str	r2, [r3, #8]
      break;
 8005024:	e03c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005032:	461a      	mov	r2, r3
 8005034:	f000 fb60 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2150      	movs	r1, #80	; 0x50
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fbb9 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8005044:	e02c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005052:	461a      	mov	r2, r3
 8005054:	f000 fb7f 	bl	8005756 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2160      	movs	r1, #96	; 0x60
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fba9 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8005064:	e01c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	461a      	mov	r2, r3
 8005074:	f000 fb40 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2140      	movs	r1, #64	; 0x40
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fb99 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8005084:	e00c      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f000 fb90 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8005096:	e003      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
      break;
 800509c:	e000      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800509e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a32      	ldr	r2, [pc, #200]	; (8005198 <TIM_Base_SetConfig+0xdc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d007      	beq.n	80050e4 <TIM_Base_SetConfig+0x28>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d003      	beq.n	80050e4 <TIM_Base_SetConfig+0x28>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a2f      	ldr	r2, [pc, #188]	; (800519c <TIM_Base_SetConfig+0xe0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d108      	bne.n	80050f6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a27      	ldr	r2, [pc, #156]	; (8005198 <TIM_Base_SetConfig+0xdc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <TIM_Base_SetConfig+0x6a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005104:	d00f      	beq.n	8005126 <TIM_Base_SetConfig+0x6a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a24      	ldr	r2, [pc, #144]	; (800519c <TIM_Base_SetConfig+0xe0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00b      	beq.n	8005126 <TIM_Base_SetConfig+0x6a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <TIM_Base_SetConfig+0xe4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <TIM_Base_SetConfig+0x6a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <TIM_Base_SetConfig+0xe8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_Base_SetConfig+0x6a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <TIM_Base_SetConfig+0xec>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d108      	bne.n	8005138 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a0e      	ldr	r2, [pc, #56]	; (8005198 <TIM_Base_SetConfig+0xdc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_Base_SetConfig+0xc0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a0e      	ldr	r2, [pc, #56]	; (80051a0 <TIM_Base_SetConfig+0xe4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d007      	beq.n	800517c <TIM_Base_SetConfig+0xc0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0d      	ldr	r2, [pc, #52]	; (80051a4 <TIM_Base_SetConfig+0xe8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_Base_SetConfig+0xc0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <TIM_Base_SetConfig+0xec>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d103      	bne.n	8005184 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	615a      	str	r2, [r3, #20]
}
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40000400 	.word	0x40000400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800

080051ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0201 	bic.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f023 0302 	bic.w	r3, r3, #2
 80051f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a28      	ldr	r2, [pc, #160]	; (80052a8 <TIM_OC1_SetConfig+0xfc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00b      	beq.n	8005224 <TIM_OC1_SetConfig+0x78>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a27      	ldr	r2, [pc, #156]	; (80052ac <TIM_OC1_SetConfig+0x100>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d007      	beq.n	8005224 <TIM_OC1_SetConfig+0x78>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a26      	ldr	r2, [pc, #152]	; (80052b0 <TIM_OC1_SetConfig+0x104>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_OC1_SetConfig+0x78>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a25      	ldr	r2, [pc, #148]	; (80052b4 <TIM_OC1_SetConfig+0x108>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d10c      	bne.n	800523e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0308 	bic.w	r3, r3, #8
 800522a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f023 0304 	bic.w	r3, r3, #4
 800523c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <TIM_OC1_SetConfig+0xfc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_OC1_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a18      	ldr	r2, [pc, #96]	; (80052ac <TIM_OC1_SetConfig+0x100>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_OC1_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <TIM_OC1_SetConfig+0x104>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_OC1_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a16      	ldr	r2, [pc, #88]	; (80052b4 <TIM_OC1_SetConfig+0x108>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d111      	bne.n	8005282 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800526c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	621a      	str	r2, [r3, #32]
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40014400 	.word	0x40014400
 80052b4:	40014800 	.word	0x40014800

080052b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	f023 0210 	bic.w	r2, r3, #16
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 0320 	bic.w	r3, r3, #32
 8005306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a24      	ldr	r2, [pc, #144]	; (80053a8 <TIM_OC2_SetConfig+0xf0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d10d      	bne.n	8005338 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <TIM_OC2_SetConfig+0xf0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00b      	beq.n	8005358 <TIM_OC2_SetConfig+0xa0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a1a      	ldr	r2, [pc, #104]	; (80053ac <TIM_OC2_SetConfig+0xf4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d007      	beq.n	8005358 <TIM_OC2_SetConfig+0xa0>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <TIM_OC2_SetConfig+0xf8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_OC2_SetConfig+0xa0>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <TIM_OC2_SetConfig+0xfc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d113      	bne.n	8005380 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800535e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005366:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800

080053b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a23      	ldr	r2, [pc, #140]	; (80054a4 <TIM_OC3_SetConfig+0xec>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10d      	bne.n	8005436 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005434:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <TIM_OC3_SetConfig+0xec>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00b      	beq.n	8005456 <TIM_OC3_SetConfig+0x9e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a19      	ldr	r2, [pc, #100]	; (80054a8 <TIM_OC3_SetConfig+0xf0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d007      	beq.n	8005456 <TIM_OC3_SetConfig+0x9e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a18      	ldr	r2, [pc, #96]	; (80054ac <TIM_OC3_SetConfig+0xf4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d003      	beq.n	8005456 <TIM_OC3_SetConfig+0x9e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a17      	ldr	r2, [pc, #92]	; (80054b0 <TIM_OC3_SetConfig+0xf8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d113      	bne.n	800547e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	621a      	str	r2, [r3, #32]
}
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400
 80054b0:	40014800 	.word	0x40014800

080054b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	031b      	lsls	r3, r3, #12
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a16      	ldr	r2, [pc, #88]	; (800556c <TIM_OC4_SetConfig+0xb8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00b      	beq.n	8005530 <TIM_OC4_SetConfig+0x7c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <TIM_OC4_SetConfig+0xbc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d007      	beq.n	8005530 <TIM_OC4_SetConfig+0x7c>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a14      	ldr	r2, [pc, #80]	; (8005574 <TIM_OC4_SetConfig+0xc0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_OC4_SetConfig+0x7c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a13      	ldr	r2, [pc, #76]	; (8005578 <TIM_OC4_SetConfig+0xc4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d109      	bne.n	8005544 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	019b      	lsls	r3, r3, #6
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40014000 	.word	0x40014000
 8005574:	40014400 	.word	0x40014400
 8005578:	40014800 	.word	0x40014800

0800557c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	041b      	lsls	r3, r3, #16
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a15      	ldr	r2, [pc, #84]	; (8005628 <TIM_OC5_SetConfig+0xac>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00b      	beq.n	80055ee <TIM_OC5_SetConfig+0x72>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a14      	ldr	r2, [pc, #80]	; (800562c <TIM_OC5_SetConfig+0xb0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d007      	beq.n	80055ee <TIM_OC5_SetConfig+0x72>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a13      	ldr	r2, [pc, #76]	; (8005630 <TIM_OC5_SetConfig+0xb4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_OC5_SetConfig+0x72>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a12      	ldr	r2, [pc, #72]	; (8005634 <TIM_OC5_SetConfig+0xb8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d109      	bne.n	8005602 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	621a      	str	r2, [r3, #32]
}
 800561c:	bf00      	nop
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	40012c00 	.word	0x40012c00
 800562c:	40014000 	.word	0x40014000
 8005630:	40014400 	.word	0x40014400
 8005634:	40014800 	.word	0x40014800

08005638 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800567e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	051b      	lsls	r3, r3, #20
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <TIM_OC6_SetConfig+0xb0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00b      	beq.n	80056ac <TIM_OC6_SetConfig+0x74>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a15      	ldr	r2, [pc, #84]	; (80056ec <TIM_OC6_SetConfig+0xb4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d007      	beq.n	80056ac <TIM_OC6_SetConfig+0x74>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a14      	ldr	r2, [pc, #80]	; (80056f0 <TIM_OC6_SetConfig+0xb8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_OC6_SetConfig+0x74>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <TIM_OC6_SetConfig+0xbc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d109      	bne.n	80056c0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	029b      	lsls	r3, r3, #10
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40014400 	.word	0x40014400
 80056f4:	40014800 	.word	0x40014800

080056f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f023 0201 	bic.w	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 030a 	bic.w	r3, r3, #10
 8005734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f023 0210 	bic.w	r2, r3, #16
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005792:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f043 0307 	orr.w	r3, r3, #7
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	609a      	str	r2, [r3, #8]
}
 80057e0:	bf00      	nop
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	021a      	lsls	r2, r3, #8
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	431a      	orrs	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4313      	orrs	r3, r2
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	609a      	str	r2, [r3, #8]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	2201      	movs	r2, #1
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a1a      	ldr	r2, [r3, #32]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	43db      	mvns	r3, r3
 800584e:	401a      	ands	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a1a      	ldr	r2, [r3, #32]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 031f 	and.w	r3, r3, #31
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	fa01 f303 	lsl.w	r3, r1, r3
 8005864:	431a      	orrs	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
	...

08005878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800588c:	2302      	movs	r3, #2
 800588e:	e054      	b.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a24      	ldr	r2, [pc, #144]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d108      	bne.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a17      	ldr	r2, [pc, #92]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f8:	d009      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a13      	ldr	r2, [pc, #76]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a11      	ldr	r2, [pc, #68]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10c      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	4313      	orrs	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40012c00 	.word	0x40012c00
 800594c:	40000400 	.word	0x40000400
 8005950:	40014000 	.word	0x40014000

08005954 <__cvt>:
 8005954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	ec55 4b10 	vmov	r4, r5, d0
 800595c:	2d00      	cmp	r5, #0
 800595e:	460e      	mov	r6, r1
 8005960:	4619      	mov	r1, r3
 8005962:	462b      	mov	r3, r5
 8005964:	bfbb      	ittet	lt
 8005966:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800596a:	461d      	movlt	r5, r3
 800596c:	2300      	movge	r3, #0
 800596e:	232d      	movlt	r3, #45	; 0x2d
 8005970:	700b      	strb	r3, [r1, #0]
 8005972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005974:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005978:	4691      	mov	r9, r2
 800597a:	f023 0820 	bic.w	r8, r3, #32
 800597e:	bfbc      	itt	lt
 8005980:	4622      	movlt	r2, r4
 8005982:	4614      	movlt	r4, r2
 8005984:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005988:	d005      	beq.n	8005996 <__cvt+0x42>
 800598a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800598e:	d100      	bne.n	8005992 <__cvt+0x3e>
 8005990:	3601      	adds	r6, #1
 8005992:	2102      	movs	r1, #2
 8005994:	e000      	b.n	8005998 <__cvt+0x44>
 8005996:	2103      	movs	r1, #3
 8005998:	ab03      	add	r3, sp, #12
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	ab02      	add	r3, sp, #8
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	ec45 4b10 	vmov	d0, r4, r5
 80059a4:	4653      	mov	r3, sl
 80059a6:	4632      	mov	r2, r6
 80059a8:	f000 fe2e 	bl	8006608 <_dtoa_r>
 80059ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059b0:	4607      	mov	r7, r0
 80059b2:	d102      	bne.n	80059ba <__cvt+0x66>
 80059b4:	f019 0f01 	tst.w	r9, #1
 80059b8:	d022      	beq.n	8005a00 <__cvt+0xac>
 80059ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059be:	eb07 0906 	add.w	r9, r7, r6
 80059c2:	d110      	bne.n	80059e6 <__cvt+0x92>
 80059c4:	783b      	ldrb	r3, [r7, #0]
 80059c6:	2b30      	cmp	r3, #48	; 0x30
 80059c8:	d10a      	bne.n	80059e0 <__cvt+0x8c>
 80059ca:	2200      	movs	r2, #0
 80059cc:	2300      	movs	r3, #0
 80059ce:	4620      	mov	r0, r4
 80059d0:	4629      	mov	r1, r5
 80059d2:	f7fb f879 	bl	8000ac8 <__aeabi_dcmpeq>
 80059d6:	b918      	cbnz	r0, 80059e0 <__cvt+0x8c>
 80059d8:	f1c6 0601 	rsb	r6, r6, #1
 80059dc:	f8ca 6000 	str.w	r6, [sl]
 80059e0:	f8da 3000 	ldr.w	r3, [sl]
 80059e4:	4499      	add	r9, r3
 80059e6:	2200      	movs	r2, #0
 80059e8:	2300      	movs	r3, #0
 80059ea:	4620      	mov	r0, r4
 80059ec:	4629      	mov	r1, r5
 80059ee:	f7fb f86b 	bl	8000ac8 <__aeabi_dcmpeq>
 80059f2:	b108      	cbz	r0, 80059f8 <__cvt+0xa4>
 80059f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80059f8:	2230      	movs	r2, #48	; 0x30
 80059fa:	9b03      	ldr	r3, [sp, #12]
 80059fc:	454b      	cmp	r3, r9
 80059fe:	d307      	bcc.n	8005a10 <__cvt+0xbc>
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a04:	1bdb      	subs	r3, r3, r7
 8005a06:	4638      	mov	r0, r7
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	b004      	add	sp, #16
 8005a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a10:	1c59      	adds	r1, r3, #1
 8005a12:	9103      	str	r1, [sp, #12]
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e7f0      	b.n	80059fa <__cvt+0xa6>

08005a18 <__exponent>:
 8005a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2900      	cmp	r1, #0
 8005a1e:	bfb8      	it	lt
 8005a20:	4249      	neglt	r1, r1
 8005a22:	f803 2b02 	strb.w	r2, [r3], #2
 8005a26:	bfb4      	ite	lt
 8005a28:	222d      	movlt	r2, #45	; 0x2d
 8005a2a:	222b      	movge	r2, #43	; 0x2b
 8005a2c:	2909      	cmp	r1, #9
 8005a2e:	7042      	strb	r2, [r0, #1]
 8005a30:	dd2a      	ble.n	8005a88 <__exponent+0x70>
 8005a32:	f10d 0207 	add.w	r2, sp, #7
 8005a36:	4617      	mov	r7, r2
 8005a38:	260a      	movs	r6, #10
 8005a3a:	4694      	mov	ip, r2
 8005a3c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005a40:	fb06 1415 	mls	r4, r6, r5, r1
 8005a44:	3430      	adds	r4, #48	; 0x30
 8005a46:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	2c63      	cmp	r4, #99	; 0x63
 8005a4e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005a52:	4629      	mov	r1, r5
 8005a54:	dcf1      	bgt.n	8005a3a <__exponent+0x22>
 8005a56:	3130      	adds	r1, #48	; 0x30
 8005a58:	f1ac 0402 	sub.w	r4, ip, #2
 8005a5c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005a60:	1c41      	adds	r1, r0, #1
 8005a62:	4622      	mov	r2, r4
 8005a64:	42ba      	cmp	r2, r7
 8005a66:	d30a      	bcc.n	8005a7e <__exponent+0x66>
 8005a68:	f10d 0209 	add.w	r2, sp, #9
 8005a6c:	eba2 020c 	sub.w	r2, r2, ip
 8005a70:	42bc      	cmp	r4, r7
 8005a72:	bf88      	it	hi
 8005a74:	2200      	movhi	r2, #0
 8005a76:	4413      	add	r3, r2
 8005a78:	1a18      	subs	r0, r3, r0
 8005a7a:	b003      	add	sp, #12
 8005a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a7e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005a82:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005a86:	e7ed      	b.n	8005a64 <__exponent+0x4c>
 8005a88:	2330      	movs	r3, #48	; 0x30
 8005a8a:	3130      	adds	r1, #48	; 0x30
 8005a8c:	7083      	strb	r3, [r0, #2]
 8005a8e:	70c1      	strb	r1, [r0, #3]
 8005a90:	1d03      	adds	r3, r0, #4
 8005a92:	e7f1      	b.n	8005a78 <__exponent+0x60>

08005a94 <_printf_float>:
 8005a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a98:	ed2d 8b02 	vpush	{d8}
 8005a9c:	b08d      	sub	sp, #52	; 0x34
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005aa4:	4616      	mov	r6, r2
 8005aa6:	461f      	mov	r7, r3
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	f000 fcf1 	bl	8006490 <_localeconv_r>
 8005aae:	f8d0 a000 	ldr.w	sl, [r0]
 8005ab2:	4650      	mov	r0, sl
 8005ab4:	f7fa fbdc 	bl	8000270 <strlen>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	930a      	str	r3, [sp, #40]	; 0x28
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	9305      	str	r3, [sp, #20]
 8005ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ac8:	3307      	adds	r3, #7
 8005aca:	f023 0307 	bic.w	r3, r3, #7
 8005ace:	f103 0208 	add.w	r2, r3, #8
 8005ad2:	f8c8 2000 	str.w	r2, [r8]
 8005ad6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ada:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ade:	9307      	str	r3, [sp, #28]
 8005ae0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ae4:	ee08 0a10 	vmov	s16, r0
 8005ae8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005aec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005af0:	4b9e      	ldr	r3, [pc, #632]	; (8005d6c <_printf_float+0x2d8>)
 8005af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005af6:	f7fb f819 	bl	8000b2c <__aeabi_dcmpun>
 8005afa:	bb88      	cbnz	r0, 8005b60 <_printf_float+0xcc>
 8005afc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b00:	4b9a      	ldr	r3, [pc, #616]	; (8005d6c <_printf_float+0x2d8>)
 8005b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b06:	f7fa fff3 	bl	8000af0 <__aeabi_dcmple>
 8005b0a:	bb48      	cbnz	r0, 8005b60 <_printf_float+0xcc>
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2300      	movs	r3, #0
 8005b10:	4640      	mov	r0, r8
 8005b12:	4649      	mov	r1, r9
 8005b14:	f7fa ffe2 	bl	8000adc <__aeabi_dcmplt>
 8005b18:	b110      	cbz	r0, 8005b20 <_printf_float+0x8c>
 8005b1a:	232d      	movs	r3, #45	; 0x2d
 8005b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b20:	4a93      	ldr	r2, [pc, #588]	; (8005d70 <_printf_float+0x2dc>)
 8005b22:	4b94      	ldr	r3, [pc, #592]	; (8005d74 <_printf_float+0x2e0>)
 8005b24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b28:	bf94      	ite	ls
 8005b2a:	4690      	movls	r8, r2
 8005b2c:	4698      	movhi	r8, r3
 8005b2e:	2303      	movs	r3, #3
 8005b30:	6123      	str	r3, [r4, #16]
 8005b32:	9b05      	ldr	r3, [sp, #20]
 8005b34:	f023 0304 	bic.w	r3, r3, #4
 8005b38:	6023      	str	r3, [r4, #0]
 8005b3a:	f04f 0900 	mov.w	r9, #0
 8005b3e:	9700      	str	r7, [sp, #0]
 8005b40:	4633      	mov	r3, r6
 8005b42:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b44:	4621      	mov	r1, r4
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 f9da 	bl	8005f00 <_printf_common>
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	f040 8090 	bne.w	8005c72 <_printf_float+0x1de>
 8005b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b56:	b00d      	add	sp, #52	; 0x34
 8005b58:	ecbd 8b02 	vpop	{d8}
 8005b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b60:	4642      	mov	r2, r8
 8005b62:	464b      	mov	r3, r9
 8005b64:	4640      	mov	r0, r8
 8005b66:	4649      	mov	r1, r9
 8005b68:	f7fa ffe0 	bl	8000b2c <__aeabi_dcmpun>
 8005b6c:	b140      	cbz	r0, 8005b80 <_printf_float+0xec>
 8005b6e:	464b      	mov	r3, r9
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bfbc      	itt	lt
 8005b74:	232d      	movlt	r3, #45	; 0x2d
 8005b76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b7a:	4a7f      	ldr	r2, [pc, #508]	; (8005d78 <_printf_float+0x2e4>)
 8005b7c:	4b7f      	ldr	r3, [pc, #508]	; (8005d7c <_printf_float+0x2e8>)
 8005b7e:	e7d1      	b.n	8005b24 <_printf_float+0x90>
 8005b80:	6863      	ldr	r3, [r4, #4]
 8005b82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b86:	9206      	str	r2, [sp, #24]
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	d13f      	bne.n	8005c0c <_printf_float+0x178>
 8005b8c:	2306      	movs	r3, #6
 8005b8e:	6063      	str	r3, [r4, #4]
 8005b90:	9b05      	ldr	r3, [sp, #20]
 8005b92:	6861      	ldr	r1, [r4, #4]
 8005b94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9303      	str	r3, [sp, #12]
 8005b9c:	ab0a      	add	r3, sp, #40	; 0x28
 8005b9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ba2:	ab09      	add	r3, sp, #36	; 0x24
 8005ba4:	ec49 8b10 	vmov	d0, r8, r9
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	6022      	str	r2, [r4, #0]
 8005bac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	f7ff fecf 	bl	8005954 <__cvt>
 8005bb6:	9b06      	ldr	r3, [sp, #24]
 8005bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bba:	2b47      	cmp	r3, #71	; 0x47
 8005bbc:	4680      	mov	r8, r0
 8005bbe:	d108      	bne.n	8005bd2 <_printf_float+0x13e>
 8005bc0:	1cc8      	adds	r0, r1, #3
 8005bc2:	db02      	blt.n	8005bca <_printf_float+0x136>
 8005bc4:	6863      	ldr	r3, [r4, #4]
 8005bc6:	4299      	cmp	r1, r3
 8005bc8:	dd41      	ble.n	8005c4e <_printf_float+0x1ba>
 8005bca:	f1ab 0302 	sub.w	r3, fp, #2
 8005bce:	fa5f fb83 	uxtb.w	fp, r3
 8005bd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bd6:	d820      	bhi.n	8005c1a <_printf_float+0x186>
 8005bd8:	3901      	subs	r1, #1
 8005bda:	465a      	mov	r2, fp
 8005bdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005be0:	9109      	str	r1, [sp, #36]	; 0x24
 8005be2:	f7ff ff19 	bl	8005a18 <__exponent>
 8005be6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005be8:	1813      	adds	r3, r2, r0
 8005bea:	2a01      	cmp	r2, #1
 8005bec:	4681      	mov	r9, r0
 8005bee:	6123      	str	r3, [r4, #16]
 8005bf0:	dc02      	bgt.n	8005bf8 <_printf_float+0x164>
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	07d2      	lsls	r2, r2, #31
 8005bf6:	d501      	bpl.n	8005bfc <_printf_float+0x168>
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d09c      	beq.n	8005b3e <_printf_float+0xaa>
 8005c04:	232d      	movs	r3, #45	; 0x2d
 8005c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c0a:	e798      	b.n	8005b3e <_printf_float+0xaa>
 8005c0c:	9a06      	ldr	r2, [sp, #24]
 8005c0e:	2a47      	cmp	r2, #71	; 0x47
 8005c10:	d1be      	bne.n	8005b90 <_printf_float+0xfc>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1bc      	bne.n	8005b90 <_printf_float+0xfc>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e7b9      	b.n	8005b8e <_printf_float+0xfa>
 8005c1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c1e:	d118      	bne.n	8005c52 <_printf_float+0x1be>
 8005c20:	2900      	cmp	r1, #0
 8005c22:	6863      	ldr	r3, [r4, #4]
 8005c24:	dd0b      	ble.n	8005c3e <_printf_float+0x1aa>
 8005c26:	6121      	str	r1, [r4, #16]
 8005c28:	b913      	cbnz	r3, 8005c30 <_printf_float+0x19c>
 8005c2a:	6822      	ldr	r2, [r4, #0]
 8005c2c:	07d0      	lsls	r0, r2, #31
 8005c2e:	d502      	bpl.n	8005c36 <_printf_float+0x1a2>
 8005c30:	3301      	adds	r3, #1
 8005c32:	440b      	add	r3, r1
 8005c34:	6123      	str	r3, [r4, #16]
 8005c36:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c38:	f04f 0900 	mov.w	r9, #0
 8005c3c:	e7de      	b.n	8005bfc <_printf_float+0x168>
 8005c3e:	b913      	cbnz	r3, 8005c46 <_printf_float+0x1b2>
 8005c40:	6822      	ldr	r2, [r4, #0]
 8005c42:	07d2      	lsls	r2, r2, #31
 8005c44:	d501      	bpl.n	8005c4a <_printf_float+0x1b6>
 8005c46:	3302      	adds	r3, #2
 8005c48:	e7f4      	b.n	8005c34 <_printf_float+0x1a0>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e7f2      	b.n	8005c34 <_printf_float+0x1a0>
 8005c4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c54:	4299      	cmp	r1, r3
 8005c56:	db05      	blt.n	8005c64 <_printf_float+0x1d0>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	6121      	str	r1, [r4, #16]
 8005c5c:	07d8      	lsls	r0, r3, #31
 8005c5e:	d5ea      	bpl.n	8005c36 <_printf_float+0x1a2>
 8005c60:	1c4b      	adds	r3, r1, #1
 8005c62:	e7e7      	b.n	8005c34 <_printf_float+0x1a0>
 8005c64:	2900      	cmp	r1, #0
 8005c66:	bfd4      	ite	le
 8005c68:	f1c1 0202 	rsble	r2, r1, #2
 8005c6c:	2201      	movgt	r2, #1
 8005c6e:	4413      	add	r3, r2
 8005c70:	e7e0      	b.n	8005c34 <_printf_float+0x1a0>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	055a      	lsls	r2, r3, #21
 8005c76:	d407      	bmi.n	8005c88 <_printf_float+0x1f4>
 8005c78:	6923      	ldr	r3, [r4, #16]
 8005c7a:	4642      	mov	r2, r8
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	d12c      	bne.n	8005ce0 <_printf_float+0x24c>
 8005c86:	e764      	b.n	8005b52 <_printf_float+0xbe>
 8005c88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c8c:	f240 80e0 	bls.w	8005e50 <_printf_float+0x3bc>
 8005c90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c94:	2200      	movs	r2, #0
 8005c96:	2300      	movs	r3, #0
 8005c98:	f7fa ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d034      	beq.n	8005d0a <_printf_float+0x276>
 8005ca0:	4a37      	ldr	r2, [pc, #220]	; (8005d80 <_printf_float+0x2ec>)
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	f43f af51 	beq.w	8005b52 <_printf_float+0xbe>
 8005cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	db02      	blt.n	8005cbe <_printf_float+0x22a>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	07d8      	lsls	r0, r3, #31
 8005cbc:	d510      	bpl.n	8005ce0 <_printf_float+0x24c>
 8005cbe:	ee18 3a10 	vmov	r3, s16
 8005cc2:	4652      	mov	r2, sl
 8005cc4:	4631      	mov	r1, r6
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	47b8      	blx	r7
 8005cca:	3001      	adds	r0, #1
 8005ccc:	f43f af41 	beq.w	8005b52 <_printf_float+0xbe>
 8005cd0:	f04f 0800 	mov.w	r8, #0
 8005cd4:	f104 091a 	add.w	r9, r4, #26
 8005cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	4543      	cmp	r3, r8
 8005cde:	dc09      	bgt.n	8005cf4 <_printf_float+0x260>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	079b      	lsls	r3, r3, #30
 8005ce4:	f100 8107 	bmi.w	8005ef6 <_printf_float+0x462>
 8005ce8:	68e0      	ldr	r0, [r4, #12]
 8005cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cec:	4298      	cmp	r0, r3
 8005cee:	bfb8      	it	lt
 8005cf0:	4618      	movlt	r0, r3
 8005cf2:	e730      	b.n	8005b56 <_printf_float+0xc2>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	464a      	mov	r2, r9
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	47b8      	blx	r7
 8005cfe:	3001      	adds	r0, #1
 8005d00:	f43f af27 	beq.w	8005b52 <_printf_float+0xbe>
 8005d04:	f108 0801 	add.w	r8, r8, #1
 8005d08:	e7e6      	b.n	8005cd8 <_printf_float+0x244>
 8005d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	dc39      	bgt.n	8005d84 <_printf_float+0x2f0>
 8005d10:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <_printf_float+0x2ec>)
 8005d12:	2301      	movs	r3, #1
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f43f af19 	beq.w	8005b52 <_printf_float+0xbe>
 8005d20:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d24:	4313      	orrs	r3, r2
 8005d26:	d102      	bne.n	8005d2e <_printf_float+0x29a>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	07d9      	lsls	r1, r3, #31
 8005d2c:	d5d8      	bpl.n	8005ce0 <_printf_float+0x24c>
 8005d2e:	ee18 3a10 	vmov	r3, s16
 8005d32:	4652      	mov	r2, sl
 8005d34:	4631      	mov	r1, r6
 8005d36:	4628      	mov	r0, r5
 8005d38:	47b8      	blx	r7
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	f43f af09 	beq.w	8005b52 <_printf_float+0xbe>
 8005d40:	f04f 0900 	mov.w	r9, #0
 8005d44:	f104 0a1a 	add.w	sl, r4, #26
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	425b      	negs	r3, r3
 8005d4c:	454b      	cmp	r3, r9
 8005d4e:	dc01      	bgt.n	8005d54 <_printf_float+0x2c0>
 8005d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d52:	e792      	b.n	8005c7a <_printf_float+0x1e6>
 8005d54:	2301      	movs	r3, #1
 8005d56:	4652      	mov	r2, sl
 8005d58:	4631      	mov	r1, r6
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	47b8      	blx	r7
 8005d5e:	3001      	adds	r0, #1
 8005d60:	f43f aef7 	beq.w	8005b52 <_printf_float+0xbe>
 8005d64:	f109 0901 	add.w	r9, r9, #1
 8005d68:	e7ee      	b.n	8005d48 <_printf_float+0x2b4>
 8005d6a:	bf00      	nop
 8005d6c:	7fefffff 	.word	0x7fefffff
 8005d70:	08009324 	.word	0x08009324
 8005d74:	08009328 	.word	0x08009328
 8005d78:	0800932c 	.word	0x0800932c
 8005d7c:	08009330 	.word	0x08009330
 8005d80:	08009334 	.word	0x08009334
 8005d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	bfa8      	it	ge
 8005d8c:	461a      	movge	r2, r3
 8005d8e:	2a00      	cmp	r2, #0
 8005d90:	4691      	mov	r9, r2
 8005d92:	dc37      	bgt.n	8005e04 <_printf_float+0x370>
 8005d94:	f04f 0b00 	mov.w	fp, #0
 8005d98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d9c:	f104 021a 	add.w	r2, r4, #26
 8005da0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005da2:	9305      	str	r3, [sp, #20]
 8005da4:	eba3 0309 	sub.w	r3, r3, r9
 8005da8:	455b      	cmp	r3, fp
 8005daa:	dc33      	bgt.n	8005e14 <_printf_float+0x380>
 8005dac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005db0:	429a      	cmp	r2, r3
 8005db2:	db3b      	blt.n	8005e2c <_printf_float+0x398>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	07da      	lsls	r2, r3, #31
 8005db8:	d438      	bmi.n	8005e2c <_printf_float+0x398>
 8005dba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005dbe:	eba2 0903 	sub.w	r9, r2, r3
 8005dc2:	9b05      	ldr	r3, [sp, #20]
 8005dc4:	1ad2      	subs	r2, r2, r3
 8005dc6:	4591      	cmp	r9, r2
 8005dc8:	bfa8      	it	ge
 8005dca:	4691      	movge	r9, r2
 8005dcc:	f1b9 0f00 	cmp.w	r9, #0
 8005dd0:	dc35      	bgt.n	8005e3e <_printf_float+0x3aa>
 8005dd2:	f04f 0800 	mov.w	r8, #0
 8005dd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dda:	f104 0a1a 	add.w	sl, r4, #26
 8005dde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	eba3 0309 	sub.w	r3, r3, r9
 8005de8:	4543      	cmp	r3, r8
 8005dea:	f77f af79 	ble.w	8005ce0 <_printf_float+0x24c>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4652      	mov	r2, sl
 8005df2:	4631      	mov	r1, r6
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b8      	blx	r7
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f43f aeaa 	beq.w	8005b52 <_printf_float+0xbe>
 8005dfe:	f108 0801 	add.w	r8, r8, #1
 8005e02:	e7ec      	b.n	8005dde <_printf_float+0x34a>
 8005e04:	4613      	mov	r3, r2
 8005e06:	4631      	mov	r1, r6
 8005e08:	4642      	mov	r2, r8
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d1c0      	bne.n	8005d94 <_printf_float+0x300>
 8005e12:	e69e      	b.n	8005b52 <_printf_float+0xbe>
 8005e14:	2301      	movs	r3, #1
 8005e16:	4631      	mov	r1, r6
 8005e18:	4628      	mov	r0, r5
 8005e1a:	9205      	str	r2, [sp, #20]
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f ae97 	beq.w	8005b52 <_printf_float+0xbe>
 8005e24:	9a05      	ldr	r2, [sp, #20]
 8005e26:	f10b 0b01 	add.w	fp, fp, #1
 8005e2a:	e7b9      	b.n	8005da0 <_printf_float+0x30c>
 8005e2c:	ee18 3a10 	vmov	r3, s16
 8005e30:	4652      	mov	r2, sl
 8005e32:	4631      	mov	r1, r6
 8005e34:	4628      	mov	r0, r5
 8005e36:	47b8      	blx	r7
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d1be      	bne.n	8005dba <_printf_float+0x326>
 8005e3c:	e689      	b.n	8005b52 <_printf_float+0xbe>
 8005e3e:	9a05      	ldr	r2, [sp, #20]
 8005e40:	464b      	mov	r3, r9
 8005e42:	4442      	add	r2, r8
 8005e44:	4631      	mov	r1, r6
 8005e46:	4628      	mov	r0, r5
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	d1c1      	bne.n	8005dd2 <_printf_float+0x33e>
 8005e4e:	e680      	b.n	8005b52 <_printf_float+0xbe>
 8005e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e52:	2a01      	cmp	r2, #1
 8005e54:	dc01      	bgt.n	8005e5a <_printf_float+0x3c6>
 8005e56:	07db      	lsls	r3, r3, #31
 8005e58:	d53a      	bpl.n	8005ed0 <_printf_float+0x43c>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	4631      	mov	r1, r6
 8005e60:	4628      	mov	r0, r5
 8005e62:	47b8      	blx	r7
 8005e64:	3001      	adds	r0, #1
 8005e66:	f43f ae74 	beq.w	8005b52 <_printf_float+0xbe>
 8005e6a:	ee18 3a10 	vmov	r3, s16
 8005e6e:	4652      	mov	r2, sl
 8005e70:	4631      	mov	r1, r6
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b8      	blx	r7
 8005e76:	3001      	adds	r0, #1
 8005e78:	f43f ae6b 	beq.w	8005b52 <_printf_float+0xbe>
 8005e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e80:	2200      	movs	r2, #0
 8005e82:	2300      	movs	r3, #0
 8005e84:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005e88:	f7fa fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e8c:	b9d8      	cbnz	r0, 8005ec6 <_printf_float+0x432>
 8005e8e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005e92:	f108 0201 	add.w	r2, r8, #1
 8005e96:	4631      	mov	r1, r6
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b8      	blx	r7
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d10e      	bne.n	8005ebe <_printf_float+0x42a>
 8005ea0:	e657      	b.n	8005b52 <_printf_float+0xbe>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4652      	mov	r2, sl
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	47b8      	blx	r7
 8005eac:	3001      	adds	r0, #1
 8005eae:	f43f ae50 	beq.w	8005b52 <_printf_float+0xbe>
 8005eb2:	f108 0801 	add.w	r8, r8, #1
 8005eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	4543      	cmp	r3, r8
 8005ebc:	dcf1      	bgt.n	8005ea2 <_printf_float+0x40e>
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ec4:	e6da      	b.n	8005c7c <_printf_float+0x1e8>
 8005ec6:	f04f 0800 	mov.w	r8, #0
 8005eca:	f104 0a1a 	add.w	sl, r4, #26
 8005ece:	e7f2      	b.n	8005eb6 <_printf_float+0x422>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	4642      	mov	r2, r8
 8005ed4:	e7df      	b.n	8005e96 <_printf_float+0x402>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	464a      	mov	r2, r9
 8005eda:	4631      	mov	r1, r6
 8005edc:	4628      	mov	r0, r5
 8005ede:	47b8      	blx	r7
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	f43f ae36 	beq.w	8005b52 <_printf_float+0xbe>
 8005ee6:	f108 0801 	add.w	r8, r8, #1
 8005eea:	68e3      	ldr	r3, [r4, #12]
 8005eec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005eee:	1a5b      	subs	r3, r3, r1
 8005ef0:	4543      	cmp	r3, r8
 8005ef2:	dcf0      	bgt.n	8005ed6 <_printf_float+0x442>
 8005ef4:	e6f8      	b.n	8005ce8 <_printf_float+0x254>
 8005ef6:	f04f 0800 	mov.w	r8, #0
 8005efa:	f104 0919 	add.w	r9, r4, #25
 8005efe:	e7f4      	b.n	8005eea <_printf_float+0x456>

08005f00 <_printf_common>:
 8005f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f04:	4616      	mov	r6, r2
 8005f06:	4699      	mov	r9, r3
 8005f08:	688a      	ldr	r2, [r1, #8]
 8005f0a:	690b      	ldr	r3, [r1, #16]
 8005f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f10:	4293      	cmp	r3, r2
 8005f12:	bfb8      	it	lt
 8005f14:	4613      	movlt	r3, r2
 8005f16:	6033      	str	r3, [r6, #0]
 8005f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	b10a      	cbz	r2, 8005f26 <_printf_common+0x26>
 8005f22:	3301      	adds	r3, #1
 8005f24:	6033      	str	r3, [r6, #0]
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	0699      	lsls	r1, r3, #26
 8005f2a:	bf42      	ittt	mi
 8005f2c:	6833      	ldrmi	r3, [r6, #0]
 8005f2e:	3302      	addmi	r3, #2
 8005f30:	6033      	strmi	r3, [r6, #0]
 8005f32:	6825      	ldr	r5, [r4, #0]
 8005f34:	f015 0506 	ands.w	r5, r5, #6
 8005f38:	d106      	bne.n	8005f48 <_printf_common+0x48>
 8005f3a:	f104 0a19 	add.w	sl, r4, #25
 8005f3e:	68e3      	ldr	r3, [r4, #12]
 8005f40:	6832      	ldr	r2, [r6, #0]
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	42ab      	cmp	r3, r5
 8005f46:	dc26      	bgt.n	8005f96 <_printf_common+0x96>
 8005f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f4c:	1e13      	subs	r3, r2, #0
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	bf18      	it	ne
 8005f52:	2301      	movne	r3, #1
 8005f54:	0692      	lsls	r2, r2, #26
 8005f56:	d42b      	bmi.n	8005fb0 <_printf_common+0xb0>
 8005f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	4638      	mov	r0, r7
 8005f60:	47c0      	blx	r8
 8005f62:	3001      	adds	r0, #1
 8005f64:	d01e      	beq.n	8005fa4 <_printf_common+0xa4>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	6922      	ldr	r2, [r4, #16]
 8005f6a:	f003 0306 	and.w	r3, r3, #6
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	bf02      	ittt	eq
 8005f72:	68e5      	ldreq	r5, [r4, #12]
 8005f74:	6833      	ldreq	r3, [r6, #0]
 8005f76:	1aed      	subeq	r5, r5, r3
 8005f78:	68a3      	ldr	r3, [r4, #8]
 8005f7a:	bf0c      	ite	eq
 8005f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f80:	2500      	movne	r5, #0
 8005f82:	4293      	cmp	r3, r2
 8005f84:	bfc4      	itt	gt
 8005f86:	1a9b      	subgt	r3, r3, r2
 8005f88:	18ed      	addgt	r5, r5, r3
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	341a      	adds	r4, #26
 8005f8e:	42b5      	cmp	r5, r6
 8005f90:	d11a      	bne.n	8005fc8 <_printf_common+0xc8>
 8005f92:	2000      	movs	r0, #0
 8005f94:	e008      	b.n	8005fa8 <_printf_common+0xa8>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4652      	mov	r2, sl
 8005f9a:	4649      	mov	r1, r9
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	47c0      	blx	r8
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d103      	bne.n	8005fac <_printf_common+0xac>
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fac:	3501      	adds	r5, #1
 8005fae:	e7c6      	b.n	8005f3e <_printf_common+0x3e>
 8005fb0:	18e1      	adds	r1, r4, r3
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	2030      	movs	r0, #48	; 0x30
 8005fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fba:	4422      	add	r2, r4
 8005fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	e7c7      	b.n	8005f58 <_printf_common+0x58>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4622      	mov	r2, r4
 8005fcc:	4649      	mov	r1, r9
 8005fce:	4638      	mov	r0, r7
 8005fd0:	47c0      	blx	r8
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d0e6      	beq.n	8005fa4 <_printf_common+0xa4>
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7d9      	b.n	8005f8e <_printf_common+0x8e>
	...

08005fdc <_printf_i>:
 8005fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	7e0f      	ldrb	r7, [r1, #24]
 8005fe2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fe4:	2f78      	cmp	r7, #120	; 0x78
 8005fe6:	4691      	mov	r9, r2
 8005fe8:	4680      	mov	r8, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	469a      	mov	sl, r3
 8005fee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ff2:	d807      	bhi.n	8006004 <_printf_i+0x28>
 8005ff4:	2f62      	cmp	r7, #98	; 0x62
 8005ff6:	d80a      	bhi.n	800600e <_printf_i+0x32>
 8005ff8:	2f00      	cmp	r7, #0
 8005ffa:	f000 80d4 	beq.w	80061a6 <_printf_i+0x1ca>
 8005ffe:	2f58      	cmp	r7, #88	; 0x58
 8006000:	f000 80c0 	beq.w	8006184 <_printf_i+0x1a8>
 8006004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800600c:	e03a      	b.n	8006084 <_printf_i+0xa8>
 800600e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006012:	2b15      	cmp	r3, #21
 8006014:	d8f6      	bhi.n	8006004 <_printf_i+0x28>
 8006016:	a101      	add	r1, pc, #4	; (adr r1, 800601c <_printf_i+0x40>)
 8006018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800601c:	08006075 	.word	0x08006075
 8006020:	08006089 	.word	0x08006089
 8006024:	08006005 	.word	0x08006005
 8006028:	08006005 	.word	0x08006005
 800602c:	08006005 	.word	0x08006005
 8006030:	08006005 	.word	0x08006005
 8006034:	08006089 	.word	0x08006089
 8006038:	08006005 	.word	0x08006005
 800603c:	08006005 	.word	0x08006005
 8006040:	08006005 	.word	0x08006005
 8006044:	08006005 	.word	0x08006005
 8006048:	0800618d 	.word	0x0800618d
 800604c:	080060b5 	.word	0x080060b5
 8006050:	08006147 	.word	0x08006147
 8006054:	08006005 	.word	0x08006005
 8006058:	08006005 	.word	0x08006005
 800605c:	080061af 	.word	0x080061af
 8006060:	08006005 	.word	0x08006005
 8006064:	080060b5 	.word	0x080060b5
 8006068:	08006005 	.word	0x08006005
 800606c:	08006005 	.word	0x08006005
 8006070:	0800614f 	.word	0x0800614f
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	1d1a      	adds	r2, r3, #4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	602a      	str	r2, [r5, #0]
 800607c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006084:	2301      	movs	r3, #1
 8006086:	e09f      	b.n	80061c8 <_printf_i+0x1ec>
 8006088:	6820      	ldr	r0, [r4, #0]
 800608a:	682b      	ldr	r3, [r5, #0]
 800608c:	0607      	lsls	r7, r0, #24
 800608e:	f103 0104 	add.w	r1, r3, #4
 8006092:	6029      	str	r1, [r5, #0]
 8006094:	d501      	bpl.n	800609a <_printf_i+0xbe>
 8006096:	681e      	ldr	r6, [r3, #0]
 8006098:	e003      	b.n	80060a2 <_printf_i+0xc6>
 800609a:	0646      	lsls	r6, r0, #25
 800609c:	d5fb      	bpl.n	8006096 <_printf_i+0xba>
 800609e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80060a2:	2e00      	cmp	r6, #0
 80060a4:	da03      	bge.n	80060ae <_printf_i+0xd2>
 80060a6:	232d      	movs	r3, #45	; 0x2d
 80060a8:	4276      	negs	r6, r6
 80060aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ae:	485a      	ldr	r0, [pc, #360]	; (8006218 <_printf_i+0x23c>)
 80060b0:	230a      	movs	r3, #10
 80060b2:	e012      	b.n	80060da <_printf_i+0xfe>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	6820      	ldr	r0, [r4, #0]
 80060b8:	1d19      	adds	r1, r3, #4
 80060ba:	6029      	str	r1, [r5, #0]
 80060bc:	0605      	lsls	r5, r0, #24
 80060be:	d501      	bpl.n	80060c4 <_printf_i+0xe8>
 80060c0:	681e      	ldr	r6, [r3, #0]
 80060c2:	e002      	b.n	80060ca <_printf_i+0xee>
 80060c4:	0641      	lsls	r1, r0, #25
 80060c6:	d5fb      	bpl.n	80060c0 <_printf_i+0xe4>
 80060c8:	881e      	ldrh	r6, [r3, #0]
 80060ca:	4853      	ldr	r0, [pc, #332]	; (8006218 <_printf_i+0x23c>)
 80060cc:	2f6f      	cmp	r7, #111	; 0x6f
 80060ce:	bf0c      	ite	eq
 80060d0:	2308      	moveq	r3, #8
 80060d2:	230a      	movne	r3, #10
 80060d4:	2100      	movs	r1, #0
 80060d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060da:	6865      	ldr	r5, [r4, #4]
 80060dc:	60a5      	str	r5, [r4, #8]
 80060de:	2d00      	cmp	r5, #0
 80060e0:	bfa2      	ittt	ge
 80060e2:	6821      	ldrge	r1, [r4, #0]
 80060e4:	f021 0104 	bicge.w	r1, r1, #4
 80060e8:	6021      	strge	r1, [r4, #0]
 80060ea:	b90e      	cbnz	r6, 80060f0 <_printf_i+0x114>
 80060ec:	2d00      	cmp	r5, #0
 80060ee:	d04b      	beq.n	8006188 <_printf_i+0x1ac>
 80060f0:	4615      	mov	r5, r2
 80060f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80060f6:	fb03 6711 	mls	r7, r3, r1, r6
 80060fa:	5dc7      	ldrb	r7, [r0, r7]
 80060fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006100:	4637      	mov	r7, r6
 8006102:	42bb      	cmp	r3, r7
 8006104:	460e      	mov	r6, r1
 8006106:	d9f4      	bls.n	80060f2 <_printf_i+0x116>
 8006108:	2b08      	cmp	r3, #8
 800610a:	d10b      	bne.n	8006124 <_printf_i+0x148>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	07de      	lsls	r6, r3, #31
 8006110:	d508      	bpl.n	8006124 <_printf_i+0x148>
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	6861      	ldr	r1, [r4, #4]
 8006116:	4299      	cmp	r1, r3
 8006118:	bfde      	ittt	le
 800611a:	2330      	movle	r3, #48	; 0x30
 800611c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006120:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006124:	1b52      	subs	r2, r2, r5
 8006126:	6122      	str	r2, [r4, #16]
 8006128:	f8cd a000 	str.w	sl, [sp]
 800612c:	464b      	mov	r3, r9
 800612e:	aa03      	add	r2, sp, #12
 8006130:	4621      	mov	r1, r4
 8006132:	4640      	mov	r0, r8
 8006134:	f7ff fee4 	bl	8005f00 <_printf_common>
 8006138:	3001      	adds	r0, #1
 800613a:	d14a      	bne.n	80061d2 <_printf_i+0x1f6>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006140:	b004      	add	sp, #16
 8006142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	f043 0320 	orr.w	r3, r3, #32
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	4833      	ldr	r0, [pc, #204]	; (800621c <_printf_i+0x240>)
 8006150:	2778      	movs	r7, #120	; 0x78
 8006152:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	6829      	ldr	r1, [r5, #0]
 800615a:	061f      	lsls	r7, r3, #24
 800615c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006160:	d402      	bmi.n	8006168 <_printf_i+0x18c>
 8006162:	065f      	lsls	r7, r3, #25
 8006164:	bf48      	it	mi
 8006166:	b2b6      	uxthmi	r6, r6
 8006168:	07df      	lsls	r7, r3, #31
 800616a:	bf48      	it	mi
 800616c:	f043 0320 	orrmi.w	r3, r3, #32
 8006170:	6029      	str	r1, [r5, #0]
 8006172:	bf48      	it	mi
 8006174:	6023      	strmi	r3, [r4, #0]
 8006176:	b91e      	cbnz	r6, 8006180 <_printf_i+0x1a4>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	f023 0320 	bic.w	r3, r3, #32
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	2310      	movs	r3, #16
 8006182:	e7a7      	b.n	80060d4 <_printf_i+0xf8>
 8006184:	4824      	ldr	r0, [pc, #144]	; (8006218 <_printf_i+0x23c>)
 8006186:	e7e4      	b.n	8006152 <_printf_i+0x176>
 8006188:	4615      	mov	r5, r2
 800618a:	e7bd      	b.n	8006108 <_printf_i+0x12c>
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	6826      	ldr	r6, [r4, #0]
 8006190:	6961      	ldr	r1, [r4, #20]
 8006192:	1d18      	adds	r0, r3, #4
 8006194:	6028      	str	r0, [r5, #0]
 8006196:	0635      	lsls	r5, r6, #24
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	d501      	bpl.n	80061a0 <_printf_i+0x1c4>
 800619c:	6019      	str	r1, [r3, #0]
 800619e:	e002      	b.n	80061a6 <_printf_i+0x1ca>
 80061a0:	0670      	lsls	r0, r6, #25
 80061a2:	d5fb      	bpl.n	800619c <_printf_i+0x1c0>
 80061a4:	8019      	strh	r1, [r3, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	6123      	str	r3, [r4, #16]
 80061aa:	4615      	mov	r5, r2
 80061ac:	e7bc      	b.n	8006128 <_printf_i+0x14c>
 80061ae:	682b      	ldr	r3, [r5, #0]
 80061b0:	1d1a      	adds	r2, r3, #4
 80061b2:	602a      	str	r2, [r5, #0]
 80061b4:	681d      	ldr	r5, [r3, #0]
 80061b6:	6862      	ldr	r2, [r4, #4]
 80061b8:	2100      	movs	r1, #0
 80061ba:	4628      	mov	r0, r5
 80061bc:	f7fa f808 	bl	80001d0 <memchr>
 80061c0:	b108      	cbz	r0, 80061c6 <_printf_i+0x1ea>
 80061c2:	1b40      	subs	r0, r0, r5
 80061c4:	6060      	str	r0, [r4, #4]
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	6123      	str	r3, [r4, #16]
 80061ca:	2300      	movs	r3, #0
 80061cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d0:	e7aa      	b.n	8006128 <_printf_i+0x14c>
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	462a      	mov	r2, r5
 80061d6:	4649      	mov	r1, r9
 80061d8:	4640      	mov	r0, r8
 80061da:	47d0      	blx	sl
 80061dc:	3001      	adds	r0, #1
 80061de:	d0ad      	beq.n	800613c <_printf_i+0x160>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	079b      	lsls	r3, r3, #30
 80061e4:	d413      	bmi.n	800620e <_printf_i+0x232>
 80061e6:	68e0      	ldr	r0, [r4, #12]
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	4298      	cmp	r0, r3
 80061ec:	bfb8      	it	lt
 80061ee:	4618      	movlt	r0, r3
 80061f0:	e7a6      	b.n	8006140 <_printf_i+0x164>
 80061f2:	2301      	movs	r3, #1
 80061f4:	4632      	mov	r2, r6
 80061f6:	4649      	mov	r1, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	47d0      	blx	sl
 80061fc:	3001      	adds	r0, #1
 80061fe:	d09d      	beq.n	800613c <_printf_i+0x160>
 8006200:	3501      	adds	r5, #1
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	9903      	ldr	r1, [sp, #12]
 8006206:	1a5b      	subs	r3, r3, r1
 8006208:	42ab      	cmp	r3, r5
 800620a:	dcf2      	bgt.n	80061f2 <_printf_i+0x216>
 800620c:	e7eb      	b.n	80061e6 <_printf_i+0x20a>
 800620e:	2500      	movs	r5, #0
 8006210:	f104 0619 	add.w	r6, r4, #25
 8006214:	e7f5      	b.n	8006202 <_printf_i+0x226>
 8006216:	bf00      	nop
 8006218:	08009336 	.word	0x08009336
 800621c:	08009347 	.word	0x08009347

08006220 <std>:
 8006220:	2300      	movs	r3, #0
 8006222:	b510      	push	{r4, lr}
 8006224:	4604      	mov	r4, r0
 8006226:	e9c0 3300 	strd	r3, r3, [r0]
 800622a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800622e:	6083      	str	r3, [r0, #8]
 8006230:	8181      	strh	r1, [r0, #12]
 8006232:	6643      	str	r3, [r0, #100]	; 0x64
 8006234:	81c2      	strh	r2, [r0, #14]
 8006236:	6183      	str	r3, [r0, #24]
 8006238:	4619      	mov	r1, r3
 800623a:	2208      	movs	r2, #8
 800623c:	305c      	adds	r0, #92	; 0x5c
 800623e:	f000 f91f 	bl	8006480 <memset>
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <std+0x58>)
 8006244:	6263      	str	r3, [r4, #36]	; 0x24
 8006246:	4b0d      	ldr	r3, [pc, #52]	; (800627c <std+0x5c>)
 8006248:	62a3      	str	r3, [r4, #40]	; 0x28
 800624a:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <std+0x60>)
 800624c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800624e:	4b0d      	ldr	r3, [pc, #52]	; (8006284 <std+0x64>)
 8006250:	6323      	str	r3, [r4, #48]	; 0x30
 8006252:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <std+0x68>)
 8006254:	6224      	str	r4, [r4, #32]
 8006256:	429c      	cmp	r4, r3
 8006258:	d006      	beq.n	8006268 <std+0x48>
 800625a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800625e:	4294      	cmp	r4, r2
 8006260:	d002      	beq.n	8006268 <std+0x48>
 8006262:	33d0      	adds	r3, #208	; 0xd0
 8006264:	429c      	cmp	r4, r3
 8006266:	d105      	bne.n	8006274 <std+0x54>
 8006268:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800626c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006270:	f000 b93c 	b.w	80064ec <__retarget_lock_init_recursive>
 8006274:	bd10      	pop	{r4, pc}
 8006276:	bf00      	nop
 8006278:	08007e31 	.word	0x08007e31
 800627c:	08007e53 	.word	0x08007e53
 8006280:	08007e8b 	.word	0x08007e8b
 8006284:	08007eaf 	.word	0x08007eaf
 8006288:	20000434 	.word	0x20000434

0800628c <stdio_exit_handler>:
 800628c:	4a02      	ldr	r2, [pc, #8]	; (8006298 <stdio_exit_handler+0xc>)
 800628e:	4903      	ldr	r1, [pc, #12]	; (800629c <stdio_exit_handler+0x10>)
 8006290:	4803      	ldr	r0, [pc, #12]	; (80062a0 <stdio_exit_handler+0x14>)
 8006292:	f000 b869 	b.w	8006368 <_fwalk_sglue>
 8006296:	bf00      	nop
 8006298:	20000014 	.word	0x20000014
 800629c:	080076d1 	.word	0x080076d1
 80062a0:	20000020 	.word	0x20000020

080062a4 <cleanup_stdio>:
 80062a4:	6841      	ldr	r1, [r0, #4]
 80062a6:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <cleanup_stdio+0x34>)
 80062a8:	4299      	cmp	r1, r3
 80062aa:	b510      	push	{r4, lr}
 80062ac:	4604      	mov	r4, r0
 80062ae:	d001      	beq.n	80062b4 <cleanup_stdio+0x10>
 80062b0:	f001 fa0e 	bl	80076d0 <_fflush_r>
 80062b4:	68a1      	ldr	r1, [r4, #8]
 80062b6:	4b09      	ldr	r3, [pc, #36]	; (80062dc <cleanup_stdio+0x38>)
 80062b8:	4299      	cmp	r1, r3
 80062ba:	d002      	beq.n	80062c2 <cleanup_stdio+0x1e>
 80062bc:	4620      	mov	r0, r4
 80062be:	f001 fa07 	bl	80076d0 <_fflush_r>
 80062c2:	68e1      	ldr	r1, [r4, #12]
 80062c4:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <cleanup_stdio+0x3c>)
 80062c6:	4299      	cmp	r1, r3
 80062c8:	d004      	beq.n	80062d4 <cleanup_stdio+0x30>
 80062ca:	4620      	mov	r0, r4
 80062cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d0:	f001 b9fe 	b.w	80076d0 <_fflush_r>
 80062d4:	bd10      	pop	{r4, pc}
 80062d6:	bf00      	nop
 80062d8:	20000434 	.word	0x20000434
 80062dc:	2000049c 	.word	0x2000049c
 80062e0:	20000504 	.word	0x20000504

080062e4 <global_stdio_init.part.0>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <global_stdio_init.part.0+0x30>)
 80062e8:	4c0b      	ldr	r4, [pc, #44]	; (8006318 <global_stdio_init.part.0+0x34>)
 80062ea:	4a0c      	ldr	r2, [pc, #48]	; (800631c <global_stdio_init.part.0+0x38>)
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	4620      	mov	r0, r4
 80062f0:	2200      	movs	r2, #0
 80062f2:	2104      	movs	r1, #4
 80062f4:	f7ff ff94 	bl	8006220 <std>
 80062f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80062fc:	2201      	movs	r2, #1
 80062fe:	2109      	movs	r1, #9
 8006300:	f7ff ff8e 	bl	8006220 <std>
 8006304:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006308:	2202      	movs	r2, #2
 800630a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800630e:	2112      	movs	r1, #18
 8006310:	f7ff bf86 	b.w	8006220 <std>
 8006314:	2000056c 	.word	0x2000056c
 8006318:	20000434 	.word	0x20000434
 800631c:	0800628d 	.word	0x0800628d

08006320 <__sfp_lock_acquire>:
 8006320:	4801      	ldr	r0, [pc, #4]	; (8006328 <__sfp_lock_acquire+0x8>)
 8006322:	f000 b8e4 	b.w	80064ee <__retarget_lock_acquire_recursive>
 8006326:	bf00      	nop
 8006328:	20000571 	.word	0x20000571

0800632c <__sfp_lock_release>:
 800632c:	4801      	ldr	r0, [pc, #4]	; (8006334 <__sfp_lock_release+0x8>)
 800632e:	f000 b8df 	b.w	80064f0 <__retarget_lock_release_recursive>
 8006332:	bf00      	nop
 8006334:	20000571 	.word	0x20000571

08006338 <__sinit>:
 8006338:	b510      	push	{r4, lr}
 800633a:	4604      	mov	r4, r0
 800633c:	f7ff fff0 	bl	8006320 <__sfp_lock_acquire>
 8006340:	6a23      	ldr	r3, [r4, #32]
 8006342:	b11b      	cbz	r3, 800634c <__sinit+0x14>
 8006344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006348:	f7ff bff0 	b.w	800632c <__sfp_lock_release>
 800634c:	4b04      	ldr	r3, [pc, #16]	; (8006360 <__sinit+0x28>)
 800634e:	6223      	str	r3, [r4, #32]
 8006350:	4b04      	ldr	r3, [pc, #16]	; (8006364 <__sinit+0x2c>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f5      	bne.n	8006344 <__sinit+0xc>
 8006358:	f7ff ffc4 	bl	80062e4 <global_stdio_init.part.0>
 800635c:	e7f2      	b.n	8006344 <__sinit+0xc>
 800635e:	bf00      	nop
 8006360:	080062a5 	.word	0x080062a5
 8006364:	2000056c 	.word	0x2000056c

08006368 <_fwalk_sglue>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	4607      	mov	r7, r0
 800636e:	4688      	mov	r8, r1
 8006370:	4614      	mov	r4, r2
 8006372:	2600      	movs	r6, #0
 8006374:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006378:	f1b9 0901 	subs.w	r9, r9, #1
 800637c:	d505      	bpl.n	800638a <_fwalk_sglue+0x22>
 800637e:	6824      	ldr	r4, [r4, #0]
 8006380:	2c00      	cmp	r4, #0
 8006382:	d1f7      	bne.n	8006374 <_fwalk_sglue+0xc>
 8006384:	4630      	mov	r0, r6
 8006386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638a:	89ab      	ldrh	r3, [r5, #12]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d907      	bls.n	80063a0 <_fwalk_sglue+0x38>
 8006390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006394:	3301      	adds	r3, #1
 8006396:	d003      	beq.n	80063a0 <_fwalk_sglue+0x38>
 8006398:	4629      	mov	r1, r5
 800639a:	4638      	mov	r0, r7
 800639c:	47c0      	blx	r8
 800639e:	4306      	orrs	r6, r0
 80063a0:	3568      	adds	r5, #104	; 0x68
 80063a2:	e7e9      	b.n	8006378 <_fwalk_sglue+0x10>

080063a4 <iprintf>:
 80063a4:	b40f      	push	{r0, r1, r2, r3}
 80063a6:	b507      	push	{r0, r1, r2, lr}
 80063a8:	4906      	ldr	r1, [pc, #24]	; (80063c4 <iprintf+0x20>)
 80063aa:	ab04      	add	r3, sp, #16
 80063ac:	6808      	ldr	r0, [r1, #0]
 80063ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80063b2:	6881      	ldr	r1, [r0, #8]
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	f000 ff43 	bl	8007240 <_vfiprintf_r>
 80063ba:	b003      	add	sp, #12
 80063bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c0:	b004      	add	sp, #16
 80063c2:	4770      	bx	lr
 80063c4:	2000006c 	.word	0x2000006c

080063c8 <_puts_r>:
 80063c8:	6a03      	ldr	r3, [r0, #32]
 80063ca:	b570      	push	{r4, r5, r6, lr}
 80063cc:	6884      	ldr	r4, [r0, #8]
 80063ce:	4605      	mov	r5, r0
 80063d0:	460e      	mov	r6, r1
 80063d2:	b90b      	cbnz	r3, 80063d8 <_puts_r+0x10>
 80063d4:	f7ff ffb0 	bl	8006338 <__sinit>
 80063d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063da:	07db      	lsls	r3, r3, #31
 80063dc:	d405      	bmi.n	80063ea <_puts_r+0x22>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	0598      	lsls	r0, r3, #22
 80063e2:	d402      	bmi.n	80063ea <_puts_r+0x22>
 80063e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063e6:	f000 f882 	bl	80064ee <__retarget_lock_acquire_recursive>
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	0719      	lsls	r1, r3, #28
 80063ee:	d513      	bpl.n	8006418 <_puts_r+0x50>
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	b18b      	cbz	r3, 8006418 <_puts_r+0x50>
 80063f4:	3e01      	subs	r6, #1
 80063f6:	68a3      	ldr	r3, [r4, #8]
 80063f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063fc:	3b01      	subs	r3, #1
 80063fe:	60a3      	str	r3, [r4, #8]
 8006400:	b9e9      	cbnz	r1, 800643e <_puts_r+0x76>
 8006402:	2b00      	cmp	r3, #0
 8006404:	da2e      	bge.n	8006464 <_puts_r+0x9c>
 8006406:	4622      	mov	r2, r4
 8006408:	210a      	movs	r1, #10
 800640a:	4628      	mov	r0, r5
 800640c:	f001 fd53 	bl	8007eb6 <__swbuf_r>
 8006410:	3001      	adds	r0, #1
 8006412:	d007      	beq.n	8006424 <_puts_r+0x5c>
 8006414:	250a      	movs	r5, #10
 8006416:	e007      	b.n	8006428 <_puts_r+0x60>
 8006418:	4621      	mov	r1, r4
 800641a:	4628      	mov	r0, r5
 800641c:	f001 fd88 	bl	8007f30 <__swsetup_r>
 8006420:	2800      	cmp	r0, #0
 8006422:	d0e7      	beq.n	80063f4 <_puts_r+0x2c>
 8006424:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800642a:	07da      	lsls	r2, r3, #31
 800642c:	d405      	bmi.n	800643a <_puts_r+0x72>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	059b      	lsls	r3, r3, #22
 8006432:	d402      	bmi.n	800643a <_puts_r+0x72>
 8006434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006436:	f000 f85b 	bl	80064f0 <__retarget_lock_release_recursive>
 800643a:	4628      	mov	r0, r5
 800643c:	bd70      	pop	{r4, r5, r6, pc}
 800643e:	2b00      	cmp	r3, #0
 8006440:	da04      	bge.n	800644c <_puts_r+0x84>
 8006442:	69a2      	ldr	r2, [r4, #24]
 8006444:	429a      	cmp	r2, r3
 8006446:	dc06      	bgt.n	8006456 <_puts_r+0x8e>
 8006448:	290a      	cmp	r1, #10
 800644a:	d004      	beq.n	8006456 <_puts_r+0x8e>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	6022      	str	r2, [r4, #0]
 8006452:	7019      	strb	r1, [r3, #0]
 8006454:	e7cf      	b.n	80063f6 <_puts_r+0x2e>
 8006456:	4622      	mov	r2, r4
 8006458:	4628      	mov	r0, r5
 800645a:	f001 fd2c 	bl	8007eb6 <__swbuf_r>
 800645e:	3001      	adds	r0, #1
 8006460:	d1c9      	bne.n	80063f6 <_puts_r+0x2e>
 8006462:	e7df      	b.n	8006424 <_puts_r+0x5c>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	250a      	movs	r5, #10
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	701d      	strb	r5, [r3, #0]
 800646e:	e7db      	b.n	8006428 <_puts_r+0x60>

08006470 <puts>:
 8006470:	4b02      	ldr	r3, [pc, #8]	; (800647c <puts+0xc>)
 8006472:	4601      	mov	r1, r0
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	f7ff bfa7 	b.w	80063c8 <_puts_r>
 800647a:	bf00      	nop
 800647c:	2000006c 	.word	0x2000006c

08006480 <memset>:
 8006480:	4402      	add	r2, r0
 8006482:	4603      	mov	r3, r0
 8006484:	4293      	cmp	r3, r2
 8006486:	d100      	bne.n	800648a <memset+0xa>
 8006488:	4770      	bx	lr
 800648a:	f803 1b01 	strb.w	r1, [r3], #1
 800648e:	e7f9      	b.n	8006484 <memset+0x4>

08006490 <_localeconv_r>:
 8006490:	4800      	ldr	r0, [pc, #0]	; (8006494 <_localeconv_r+0x4>)
 8006492:	4770      	bx	lr
 8006494:	20000160 	.word	0x20000160

08006498 <__errno>:
 8006498:	4b01      	ldr	r3, [pc, #4]	; (80064a0 <__errno+0x8>)
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	2000006c 	.word	0x2000006c

080064a4 <__libc_init_array>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	4d0d      	ldr	r5, [pc, #52]	; (80064dc <__libc_init_array+0x38>)
 80064a8:	4c0d      	ldr	r4, [pc, #52]	; (80064e0 <__libc_init_array+0x3c>)
 80064aa:	1b64      	subs	r4, r4, r5
 80064ac:	10a4      	asrs	r4, r4, #2
 80064ae:	2600      	movs	r6, #0
 80064b0:	42a6      	cmp	r6, r4
 80064b2:	d109      	bne.n	80064c8 <__libc_init_array+0x24>
 80064b4:	4d0b      	ldr	r5, [pc, #44]	; (80064e4 <__libc_init_array+0x40>)
 80064b6:	4c0c      	ldr	r4, [pc, #48]	; (80064e8 <__libc_init_array+0x44>)
 80064b8:	f002 feae 	bl	8009218 <_init>
 80064bc:	1b64      	subs	r4, r4, r5
 80064be:	10a4      	asrs	r4, r4, #2
 80064c0:	2600      	movs	r6, #0
 80064c2:	42a6      	cmp	r6, r4
 80064c4:	d105      	bne.n	80064d2 <__libc_init_array+0x2e>
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064cc:	4798      	blx	r3
 80064ce:	3601      	adds	r6, #1
 80064d0:	e7ee      	b.n	80064b0 <__libc_init_array+0xc>
 80064d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d6:	4798      	blx	r3
 80064d8:	3601      	adds	r6, #1
 80064da:	e7f2      	b.n	80064c2 <__libc_init_array+0x1e>
 80064dc:	080096c8 	.word	0x080096c8
 80064e0:	080096c8 	.word	0x080096c8
 80064e4:	080096c8 	.word	0x080096c8
 80064e8:	080096cc 	.word	0x080096cc

080064ec <__retarget_lock_init_recursive>:
 80064ec:	4770      	bx	lr

080064ee <__retarget_lock_acquire_recursive>:
 80064ee:	4770      	bx	lr

080064f0 <__retarget_lock_release_recursive>:
 80064f0:	4770      	bx	lr

080064f2 <quorem>:
 80064f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f6:	6903      	ldr	r3, [r0, #16]
 80064f8:	690c      	ldr	r4, [r1, #16]
 80064fa:	42a3      	cmp	r3, r4
 80064fc:	4607      	mov	r7, r0
 80064fe:	db7e      	blt.n	80065fe <quorem+0x10c>
 8006500:	3c01      	subs	r4, #1
 8006502:	f101 0814 	add.w	r8, r1, #20
 8006506:	f100 0514 	add.w	r5, r0, #20
 800650a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006514:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006518:	3301      	adds	r3, #1
 800651a:	429a      	cmp	r2, r3
 800651c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006520:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006524:	fbb2 f6f3 	udiv	r6, r2, r3
 8006528:	d331      	bcc.n	800658e <quorem+0x9c>
 800652a:	f04f 0e00 	mov.w	lr, #0
 800652e:	4640      	mov	r0, r8
 8006530:	46ac      	mov	ip, r5
 8006532:	46f2      	mov	sl, lr
 8006534:	f850 2b04 	ldr.w	r2, [r0], #4
 8006538:	b293      	uxth	r3, r2
 800653a:	fb06 e303 	mla	r3, r6, r3, lr
 800653e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006542:	0c1a      	lsrs	r2, r3, #16
 8006544:	b29b      	uxth	r3, r3
 8006546:	ebaa 0303 	sub.w	r3, sl, r3
 800654a:	f8dc a000 	ldr.w	sl, [ip]
 800654e:	fa13 f38a 	uxtah	r3, r3, sl
 8006552:	fb06 220e 	mla	r2, r6, lr, r2
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	9b00      	ldr	r3, [sp, #0]
 800655a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800655e:	b292      	uxth	r2, r2
 8006560:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006568:	f8bd 3000 	ldrh.w	r3, [sp]
 800656c:	4581      	cmp	r9, r0
 800656e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006572:	f84c 3b04 	str.w	r3, [ip], #4
 8006576:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800657a:	d2db      	bcs.n	8006534 <quorem+0x42>
 800657c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006580:	b92b      	cbnz	r3, 800658e <quorem+0x9c>
 8006582:	9b01      	ldr	r3, [sp, #4]
 8006584:	3b04      	subs	r3, #4
 8006586:	429d      	cmp	r5, r3
 8006588:	461a      	mov	r2, r3
 800658a:	d32c      	bcc.n	80065e6 <quorem+0xf4>
 800658c:	613c      	str	r4, [r7, #16]
 800658e:	4638      	mov	r0, r7
 8006590:	f001 fb4e 	bl	8007c30 <__mcmp>
 8006594:	2800      	cmp	r0, #0
 8006596:	db22      	blt.n	80065de <quorem+0xec>
 8006598:	3601      	adds	r6, #1
 800659a:	4629      	mov	r1, r5
 800659c:	2000      	movs	r0, #0
 800659e:	f858 2b04 	ldr.w	r2, [r8], #4
 80065a2:	f8d1 c000 	ldr.w	ip, [r1]
 80065a6:	b293      	uxth	r3, r2
 80065a8:	1ac3      	subs	r3, r0, r3
 80065aa:	0c12      	lsrs	r2, r2, #16
 80065ac:	fa13 f38c 	uxtah	r3, r3, ip
 80065b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80065b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065be:	45c1      	cmp	r9, r8
 80065c0:	f841 3b04 	str.w	r3, [r1], #4
 80065c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065c8:	d2e9      	bcs.n	800659e <quorem+0xac>
 80065ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065d2:	b922      	cbnz	r2, 80065de <quorem+0xec>
 80065d4:	3b04      	subs	r3, #4
 80065d6:	429d      	cmp	r5, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	d30a      	bcc.n	80065f2 <quorem+0x100>
 80065dc:	613c      	str	r4, [r7, #16]
 80065de:	4630      	mov	r0, r6
 80065e0:	b003      	add	sp, #12
 80065e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e6:	6812      	ldr	r2, [r2, #0]
 80065e8:	3b04      	subs	r3, #4
 80065ea:	2a00      	cmp	r2, #0
 80065ec:	d1ce      	bne.n	800658c <quorem+0x9a>
 80065ee:	3c01      	subs	r4, #1
 80065f0:	e7c9      	b.n	8006586 <quorem+0x94>
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	3b04      	subs	r3, #4
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	d1f0      	bne.n	80065dc <quorem+0xea>
 80065fa:	3c01      	subs	r4, #1
 80065fc:	e7eb      	b.n	80065d6 <quorem+0xe4>
 80065fe:	2000      	movs	r0, #0
 8006600:	e7ee      	b.n	80065e0 <quorem+0xee>
 8006602:	0000      	movs	r0, r0
 8006604:	0000      	movs	r0, r0
	...

08006608 <_dtoa_r>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	ed2d 8b04 	vpush	{d8-d9}
 8006610:	69c5      	ldr	r5, [r0, #28]
 8006612:	b093      	sub	sp, #76	; 0x4c
 8006614:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006618:	ec57 6b10 	vmov	r6, r7, d0
 800661c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006620:	9107      	str	r1, [sp, #28]
 8006622:	4604      	mov	r4, r0
 8006624:	920a      	str	r2, [sp, #40]	; 0x28
 8006626:	930d      	str	r3, [sp, #52]	; 0x34
 8006628:	b975      	cbnz	r5, 8006648 <_dtoa_r+0x40>
 800662a:	2010      	movs	r0, #16
 800662c:	f000 ff22 	bl	8007474 <malloc>
 8006630:	4602      	mov	r2, r0
 8006632:	61e0      	str	r0, [r4, #28]
 8006634:	b920      	cbnz	r0, 8006640 <_dtoa_r+0x38>
 8006636:	4bae      	ldr	r3, [pc, #696]	; (80068f0 <_dtoa_r+0x2e8>)
 8006638:	21ef      	movs	r1, #239	; 0xef
 800663a:	48ae      	ldr	r0, [pc, #696]	; (80068f4 <_dtoa_r+0x2ec>)
 800663c:	f001 fdb8 	bl	80081b0 <__assert_func>
 8006640:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006644:	6005      	str	r5, [r0, #0]
 8006646:	60c5      	str	r5, [r0, #12]
 8006648:	69e3      	ldr	r3, [r4, #28]
 800664a:	6819      	ldr	r1, [r3, #0]
 800664c:	b151      	cbz	r1, 8006664 <_dtoa_r+0x5c>
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	604a      	str	r2, [r1, #4]
 8006652:	2301      	movs	r3, #1
 8006654:	4093      	lsls	r3, r2
 8006656:	608b      	str	r3, [r1, #8]
 8006658:	4620      	mov	r0, r4
 800665a:	f001 f8ad 	bl	80077b8 <_Bfree>
 800665e:	69e3      	ldr	r3, [r4, #28]
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	1e3b      	subs	r3, r7, #0
 8006666:	bfbb      	ittet	lt
 8006668:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800666c:	9303      	strlt	r3, [sp, #12]
 800666e:	2300      	movge	r3, #0
 8006670:	2201      	movlt	r2, #1
 8006672:	bfac      	ite	ge
 8006674:	f8c8 3000 	strge.w	r3, [r8]
 8006678:	f8c8 2000 	strlt.w	r2, [r8]
 800667c:	4b9e      	ldr	r3, [pc, #632]	; (80068f8 <_dtoa_r+0x2f0>)
 800667e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006682:	ea33 0308 	bics.w	r3, r3, r8
 8006686:	d11b      	bne.n	80066c0 <_dtoa_r+0xb8>
 8006688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800668a:	f242 730f 	movw	r3, #9999	; 0x270f
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006694:	4333      	orrs	r3, r6
 8006696:	f000 8593 	beq.w	80071c0 <_dtoa_r+0xbb8>
 800669a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800669c:	b963      	cbnz	r3, 80066b8 <_dtoa_r+0xb0>
 800669e:	4b97      	ldr	r3, [pc, #604]	; (80068fc <_dtoa_r+0x2f4>)
 80066a0:	e027      	b.n	80066f2 <_dtoa_r+0xea>
 80066a2:	4b97      	ldr	r3, [pc, #604]	; (8006900 <_dtoa_r+0x2f8>)
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	3308      	adds	r3, #8
 80066a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	9800      	ldr	r0, [sp, #0]
 80066ae:	b013      	add	sp, #76	; 0x4c
 80066b0:	ecbd 8b04 	vpop	{d8-d9}
 80066b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b8:	4b90      	ldr	r3, [pc, #576]	; (80068fc <_dtoa_r+0x2f4>)
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	3303      	adds	r3, #3
 80066be:	e7f3      	b.n	80066a8 <_dtoa_r+0xa0>
 80066c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066c4:	2200      	movs	r2, #0
 80066c6:	ec51 0b17 	vmov	r0, r1, d7
 80066ca:	eeb0 8a47 	vmov.f32	s16, s14
 80066ce:	eef0 8a67 	vmov.f32	s17, s15
 80066d2:	2300      	movs	r3, #0
 80066d4:	f7fa f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80066d8:	4681      	mov	r9, r0
 80066da:	b160      	cbz	r0, 80066f6 <_dtoa_r+0xee>
 80066dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066de:	2301      	movs	r3, #1
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8568 	beq.w	80071ba <_dtoa_r+0xbb2>
 80066ea:	4b86      	ldr	r3, [pc, #536]	; (8006904 <_dtoa_r+0x2fc>)
 80066ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	e7da      	b.n	80066ac <_dtoa_r+0xa4>
 80066f6:	aa10      	add	r2, sp, #64	; 0x40
 80066f8:	a911      	add	r1, sp, #68	; 0x44
 80066fa:	4620      	mov	r0, r4
 80066fc:	eeb0 0a48 	vmov.f32	s0, s16
 8006700:	eef0 0a68 	vmov.f32	s1, s17
 8006704:	f001 fb3a 	bl	8007d7c <__d2b>
 8006708:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800670c:	4682      	mov	sl, r0
 800670e:	2d00      	cmp	r5, #0
 8006710:	d07f      	beq.n	8006812 <_dtoa_r+0x20a>
 8006712:	ee18 3a90 	vmov	r3, s17
 8006716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800671a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800671e:	ec51 0b18 	vmov	r0, r1, d8
 8006722:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800672a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800672e:	4619      	mov	r1, r3
 8006730:	2200      	movs	r2, #0
 8006732:	4b75      	ldr	r3, [pc, #468]	; (8006908 <_dtoa_r+0x300>)
 8006734:	f7f9 fda8 	bl	8000288 <__aeabi_dsub>
 8006738:	a367      	add	r3, pc, #412	; (adr r3, 80068d8 <_dtoa_r+0x2d0>)
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f7f9 ff5b 	bl	80005f8 <__aeabi_dmul>
 8006742:	a367      	add	r3, pc, #412	; (adr r3, 80068e0 <_dtoa_r+0x2d8>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f7f9 fda0 	bl	800028c <__adddf3>
 800674c:	4606      	mov	r6, r0
 800674e:	4628      	mov	r0, r5
 8006750:	460f      	mov	r7, r1
 8006752:	f7f9 fee7 	bl	8000524 <__aeabi_i2d>
 8006756:	a364      	add	r3, pc, #400	; (adr r3, 80068e8 <_dtoa_r+0x2e0>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f7f9 ff4c 	bl	80005f8 <__aeabi_dmul>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4630      	mov	r0, r6
 8006766:	4639      	mov	r1, r7
 8006768:	f7f9 fd90 	bl	800028c <__adddf3>
 800676c:	4606      	mov	r6, r0
 800676e:	460f      	mov	r7, r1
 8006770:	f7fa f9f2 	bl	8000b58 <__aeabi_d2iz>
 8006774:	2200      	movs	r2, #0
 8006776:	4683      	mov	fp, r0
 8006778:	2300      	movs	r3, #0
 800677a:	4630      	mov	r0, r6
 800677c:	4639      	mov	r1, r7
 800677e:	f7fa f9ad 	bl	8000adc <__aeabi_dcmplt>
 8006782:	b148      	cbz	r0, 8006798 <_dtoa_r+0x190>
 8006784:	4658      	mov	r0, fp
 8006786:	f7f9 fecd 	bl	8000524 <__aeabi_i2d>
 800678a:	4632      	mov	r2, r6
 800678c:	463b      	mov	r3, r7
 800678e:	f7fa f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006792:	b908      	cbnz	r0, 8006798 <_dtoa_r+0x190>
 8006794:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006798:	f1bb 0f16 	cmp.w	fp, #22
 800679c:	d857      	bhi.n	800684e <_dtoa_r+0x246>
 800679e:	4b5b      	ldr	r3, [pc, #364]	; (800690c <_dtoa_r+0x304>)
 80067a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	ec51 0b18 	vmov	r0, r1, d8
 80067ac:	f7fa f996 	bl	8000adc <__aeabi_dcmplt>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d04e      	beq.n	8006852 <_dtoa_r+0x24a>
 80067b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80067b8:	2300      	movs	r3, #0
 80067ba:	930c      	str	r3, [sp, #48]	; 0x30
 80067bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067be:	1b5b      	subs	r3, r3, r5
 80067c0:	1e5a      	subs	r2, r3, #1
 80067c2:	bf45      	ittet	mi
 80067c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80067c8:	9305      	strmi	r3, [sp, #20]
 80067ca:	2300      	movpl	r3, #0
 80067cc:	2300      	movmi	r3, #0
 80067ce:	9206      	str	r2, [sp, #24]
 80067d0:	bf54      	ite	pl
 80067d2:	9305      	strpl	r3, [sp, #20]
 80067d4:	9306      	strmi	r3, [sp, #24]
 80067d6:	f1bb 0f00 	cmp.w	fp, #0
 80067da:	db3c      	blt.n	8006856 <_dtoa_r+0x24e>
 80067dc:	9b06      	ldr	r3, [sp, #24]
 80067de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80067e2:	445b      	add	r3, fp
 80067e4:	9306      	str	r3, [sp, #24]
 80067e6:	2300      	movs	r3, #0
 80067e8:	9308      	str	r3, [sp, #32]
 80067ea:	9b07      	ldr	r3, [sp, #28]
 80067ec:	2b09      	cmp	r3, #9
 80067ee:	d868      	bhi.n	80068c2 <_dtoa_r+0x2ba>
 80067f0:	2b05      	cmp	r3, #5
 80067f2:	bfc4      	itt	gt
 80067f4:	3b04      	subgt	r3, #4
 80067f6:	9307      	strgt	r3, [sp, #28]
 80067f8:	9b07      	ldr	r3, [sp, #28]
 80067fa:	f1a3 0302 	sub.w	r3, r3, #2
 80067fe:	bfcc      	ite	gt
 8006800:	2500      	movgt	r5, #0
 8006802:	2501      	movle	r5, #1
 8006804:	2b03      	cmp	r3, #3
 8006806:	f200 8085 	bhi.w	8006914 <_dtoa_r+0x30c>
 800680a:	e8df f003 	tbb	[pc, r3]
 800680e:	3b2e      	.short	0x3b2e
 8006810:	5839      	.short	0x5839
 8006812:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006816:	441d      	add	r5, r3
 8006818:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800681c:	2b20      	cmp	r3, #32
 800681e:	bfc1      	itttt	gt
 8006820:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006824:	fa08 f803 	lslgt.w	r8, r8, r3
 8006828:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800682c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006830:	bfd6      	itet	le
 8006832:	f1c3 0320 	rsble	r3, r3, #32
 8006836:	ea48 0003 	orrgt.w	r0, r8, r3
 800683a:	fa06 f003 	lslle.w	r0, r6, r3
 800683e:	f7f9 fe61 	bl	8000504 <__aeabi_ui2d>
 8006842:	2201      	movs	r2, #1
 8006844:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006848:	3d01      	subs	r5, #1
 800684a:	920e      	str	r2, [sp, #56]	; 0x38
 800684c:	e76f      	b.n	800672e <_dtoa_r+0x126>
 800684e:	2301      	movs	r3, #1
 8006850:	e7b3      	b.n	80067ba <_dtoa_r+0x1b2>
 8006852:	900c      	str	r0, [sp, #48]	; 0x30
 8006854:	e7b2      	b.n	80067bc <_dtoa_r+0x1b4>
 8006856:	9b05      	ldr	r3, [sp, #20]
 8006858:	eba3 030b 	sub.w	r3, r3, fp
 800685c:	9305      	str	r3, [sp, #20]
 800685e:	f1cb 0300 	rsb	r3, fp, #0
 8006862:	9308      	str	r3, [sp, #32]
 8006864:	2300      	movs	r3, #0
 8006866:	930b      	str	r3, [sp, #44]	; 0x2c
 8006868:	e7bf      	b.n	80067ea <_dtoa_r+0x1e2>
 800686a:	2300      	movs	r3, #0
 800686c:	9309      	str	r3, [sp, #36]	; 0x24
 800686e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006870:	2b00      	cmp	r3, #0
 8006872:	dc52      	bgt.n	800691a <_dtoa_r+0x312>
 8006874:	2301      	movs	r3, #1
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	9304      	str	r3, [sp, #16]
 800687a:	461a      	mov	r2, r3
 800687c:	920a      	str	r2, [sp, #40]	; 0x28
 800687e:	e00b      	b.n	8006898 <_dtoa_r+0x290>
 8006880:	2301      	movs	r3, #1
 8006882:	e7f3      	b.n	800686c <_dtoa_r+0x264>
 8006884:	2300      	movs	r3, #0
 8006886:	9309      	str	r3, [sp, #36]	; 0x24
 8006888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800688a:	445b      	add	r3, fp
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	3301      	adds	r3, #1
 8006890:	2b01      	cmp	r3, #1
 8006892:	9304      	str	r3, [sp, #16]
 8006894:	bfb8      	it	lt
 8006896:	2301      	movlt	r3, #1
 8006898:	69e0      	ldr	r0, [r4, #28]
 800689a:	2100      	movs	r1, #0
 800689c:	2204      	movs	r2, #4
 800689e:	f102 0614 	add.w	r6, r2, #20
 80068a2:	429e      	cmp	r6, r3
 80068a4:	d93d      	bls.n	8006922 <_dtoa_r+0x31a>
 80068a6:	6041      	str	r1, [r0, #4]
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 ff45 	bl	8007738 <_Balloc>
 80068ae:	9000      	str	r0, [sp, #0]
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d139      	bne.n	8006928 <_dtoa_r+0x320>
 80068b4:	4b16      	ldr	r3, [pc, #88]	; (8006910 <_dtoa_r+0x308>)
 80068b6:	4602      	mov	r2, r0
 80068b8:	f240 11af 	movw	r1, #431	; 0x1af
 80068bc:	e6bd      	b.n	800663a <_dtoa_r+0x32>
 80068be:	2301      	movs	r3, #1
 80068c0:	e7e1      	b.n	8006886 <_dtoa_r+0x27e>
 80068c2:	2501      	movs	r5, #1
 80068c4:	2300      	movs	r3, #0
 80068c6:	9307      	str	r3, [sp, #28]
 80068c8:	9509      	str	r5, [sp, #36]	; 0x24
 80068ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	9304      	str	r3, [sp, #16]
 80068d2:	2200      	movs	r2, #0
 80068d4:	2312      	movs	r3, #18
 80068d6:	e7d1      	b.n	800687c <_dtoa_r+0x274>
 80068d8:	636f4361 	.word	0x636f4361
 80068dc:	3fd287a7 	.word	0x3fd287a7
 80068e0:	8b60c8b3 	.word	0x8b60c8b3
 80068e4:	3fc68a28 	.word	0x3fc68a28
 80068e8:	509f79fb 	.word	0x509f79fb
 80068ec:	3fd34413 	.word	0x3fd34413
 80068f0:	08009365 	.word	0x08009365
 80068f4:	0800937c 	.word	0x0800937c
 80068f8:	7ff00000 	.word	0x7ff00000
 80068fc:	08009361 	.word	0x08009361
 8006900:	08009358 	.word	0x08009358
 8006904:	08009335 	.word	0x08009335
 8006908:	3ff80000 	.word	0x3ff80000
 800690c:	08009478 	.word	0x08009478
 8006910:	080093d4 	.word	0x080093d4
 8006914:	2301      	movs	r3, #1
 8006916:	9309      	str	r3, [sp, #36]	; 0x24
 8006918:	e7d7      	b.n	80068ca <_dtoa_r+0x2c2>
 800691a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	9304      	str	r3, [sp, #16]
 8006920:	e7ba      	b.n	8006898 <_dtoa_r+0x290>
 8006922:	3101      	adds	r1, #1
 8006924:	0052      	lsls	r2, r2, #1
 8006926:	e7ba      	b.n	800689e <_dtoa_r+0x296>
 8006928:	69e3      	ldr	r3, [r4, #28]
 800692a:	9a00      	ldr	r2, [sp, #0]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	9b04      	ldr	r3, [sp, #16]
 8006930:	2b0e      	cmp	r3, #14
 8006932:	f200 80a8 	bhi.w	8006a86 <_dtoa_r+0x47e>
 8006936:	2d00      	cmp	r5, #0
 8006938:	f000 80a5 	beq.w	8006a86 <_dtoa_r+0x47e>
 800693c:	f1bb 0f00 	cmp.w	fp, #0
 8006940:	dd38      	ble.n	80069b4 <_dtoa_r+0x3ac>
 8006942:	4bc0      	ldr	r3, [pc, #768]	; (8006c44 <_dtoa_r+0x63c>)
 8006944:	f00b 020f 	and.w	r2, fp, #15
 8006948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800694c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006950:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006954:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006958:	d019      	beq.n	800698e <_dtoa_r+0x386>
 800695a:	4bbb      	ldr	r3, [pc, #748]	; (8006c48 <_dtoa_r+0x640>)
 800695c:	ec51 0b18 	vmov	r0, r1, d8
 8006960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006964:	f7f9 ff72 	bl	800084c <__aeabi_ddiv>
 8006968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800696c:	f008 080f 	and.w	r8, r8, #15
 8006970:	2503      	movs	r5, #3
 8006972:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006c48 <_dtoa_r+0x640>
 8006976:	f1b8 0f00 	cmp.w	r8, #0
 800697a:	d10a      	bne.n	8006992 <_dtoa_r+0x38a>
 800697c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006980:	4632      	mov	r2, r6
 8006982:	463b      	mov	r3, r7
 8006984:	f7f9 ff62 	bl	800084c <__aeabi_ddiv>
 8006988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800698c:	e02b      	b.n	80069e6 <_dtoa_r+0x3de>
 800698e:	2502      	movs	r5, #2
 8006990:	e7ef      	b.n	8006972 <_dtoa_r+0x36a>
 8006992:	f018 0f01 	tst.w	r8, #1
 8006996:	d008      	beq.n	80069aa <_dtoa_r+0x3a2>
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80069a0:	f7f9 fe2a 	bl	80005f8 <__aeabi_dmul>
 80069a4:	3501      	adds	r5, #1
 80069a6:	4606      	mov	r6, r0
 80069a8:	460f      	mov	r7, r1
 80069aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069ae:	f109 0908 	add.w	r9, r9, #8
 80069b2:	e7e0      	b.n	8006976 <_dtoa_r+0x36e>
 80069b4:	f000 809f 	beq.w	8006af6 <_dtoa_r+0x4ee>
 80069b8:	f1cb 0600 	rsb	r6, fp, #0
 80069bc:	4ba1      	ldr	r3, [pc, #644]	; (8006c44 <_dtoa_r+0x63c>)
 80069be:	4fa2      	ldr	r7, [pc, #648]	; (8006c48 <_dtoa_r+0x640>)
 80069c0:	f006 020f 	and.w	r2, r6, #15
 80069c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	ec51 0b18 	vmov	r0, r1, d8
 80069d0:	f7f9 fe12 	bl	80005f8 <__aeabi_dmul>
 80069d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069d8:	1136      	asrs	r6, r6, #4
 80069da:	2300      	movs	r3, #0
 80069dc:	2502      	movs	r5, #2
 80069de:	2e00      	cmp	r6, #0
 80069e0:	d17e      	bne.n	8006ae0 <_dtoa_r+0x4d8>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1d0      	bne.n	8006988 <_dtoa_r+0x380>
 80069e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 8084 	beq.w	8006afa <_dtoa_r+0x4f2>
 80069f2:	4b96      	ldr	r3, [pc, #600]	; (8006c4c <_dtoa_r+0x644>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	4640      	mov	r0, r8
 80069f8:	4649      	mov	r1, r9
 80069fa:	f7fa f86f 	bl	8000adc <__aeabi_dcmplt>
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d07b      	beq.n	8006afa <_dtoa_r+0x4f2>
 8006a02:	9b04      	ldr	r3, [sp, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d078      	beq.n	8006afa <_dtoa_r+0x4f2>
 8006a08:	9b01      	ldr	r3, [sp, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dd39      	ble.n	8006a82 <_dtoa_r+0x47a>
 8006a0e:	4b90      	ldr	r3, [pc, #576]	; (8006c50 <_dtoa_r+0x648>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	4640      	mov	r0, r8
 8006a14:	4649      	mov	r1, r9
 8006a16:	f7f9 fdef 	bl	80005f8 <__aeabi_dmul>
 8006a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a1e:	9e01      	ldr	r6, [sp, #4]
 8006a20:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006a24:	3501      	adds	r5, #1
 8006a26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7f9 fd7a 	bl	8000524 <__aeabi_i2d>
 8006a30:	4642      	mov	r2, r8
 8006a32:	464b      	mov	r3, r9
 8006a34:	f7f9 fde0 	bl	80005f8 <__aeabi_dmul>
 8006a38:	4b86      	ldr	r3, [pc, #536]	; (8006c54 <_dtoa_r+0x64c>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f7f9 fc26 	bl	800028c <__adddf3>
 8006a40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a48:	9303      	str	r3, [sp, #12]
 8006a4a:	2e00      	cmp	r6, #0
 8006a4c:	d158      	bne.n	8006b00 <_dtoa_r+0x4f8>
 8006a4e:	4b82      	ldr	r3, [pc, #520]	; (8006c58 <_dtoa_r+0x650>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	4640      	mov	r0, r8
 8006a54:	4649      	mov	r1, r9
 8006a56:	f7f9 fc17 	bl	8000288 <__aeabi_dsub>
 8006a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a5e:	4680      	mov	r8, r0
 8006a60:	4689      	mov	r9, r1
 8006a62:	f7fa f859 	bl	8000b18 <__aeabi_dcmpgt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f040 8296 	bne.w	8006f98 <_dtoa_r+0x990>
 8006a6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a70:	4640      	mov	r0, r8
 8006a72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a76:	4649      	mov	r1, r9
 8006a78:	f7fa f830 	bl	8000adc <__aeabi_dcmplt>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	f040 8289 	bne.w	8006f94 <_dtoa_r+0x98c>
 8006a82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f2c0 814e 	blt.w	8006d2a <_dtoa_r+0x722>
 8006a8e:	f1bb 0f0e 	cmp.w	fp, #14
 8006a92:	f300 814a 	bgt.w	8006d2a <_dtoa_r+0x722>
 8006a96:	4b6b      	ldr	r3, [pc, #428]	; (8006c44 <_dtoa_r+0x63c>)
 8006a98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f280 80dc 	bge.w	8006c60 <_dtoa_r+0x658>
 8006aa8:	9b04      	ldr	r3, [sp, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f300 80d8 	bgt.w	8006c60 <_dtoa_r+0x658>
 8006ab0:	f040 826f 	bne.w	8006f92 <_dtoa_r+0x98a>
 8006ab4:	4b68      	ldr	r3, [pc, #416]	; (8006c58 <_dtoa_r+0x650>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4649      	mov	r1, r9
 8006abc:	f7f9 fd9c 	bl	80005f8 <__aeabi_dmul>
 8006ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ac4:	f7fa f81e 	bl	8000b04 <__aeabi_dcmpge>
 8006ac8:	9e04      	ldr	r6, [sp, #16]
 8006aca:	4637      	mov	r7, r6
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f040 8245 	bne.w	8006f5c <_dtoa_r+0x954>
 8006ad2:	9d00      	ldr	r5, [sp, #0]
 8006ad4:	2331      	movs	r3, #49	; 0x31
 8006ad6:	f805 3b01 	strb.w	r3, [r5], #1
 8006ada:	f10b 0b01 	add.w	fp, fp, #1
 8006ade:	e241      	b.n	8006f64 <_dtoa_r+0x95c>
 8006ae0:	07f2      	lsls	r2, r6, #31
 8006ae2:	d505      	bpl.n	8006af0 <_dtoa_r+0x4e8>
 8006ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae8:	f7f9 fd86 	bl	80005f8 <__aeabi_dmul>
 8006aec:	3501      	adds	r5, #1
 8006aee:	2301      	movs	r3, #1
 8006af0:	1076      	asrs	r6, r6, #1
 8006af2:	3708      	adds	r7, #8
 8006af4:	e773      	b.n	80069de <_dtoa_r+0x3d6>
 8006af6:	2502      	movs	r5, #2
 8006af8:	e775      	b.n	80069e6 <_dtoa_r+0x3de>
 8006afa:	9e04      	ldr	r6, [sp, #16]
 8006afc:	465f      	mov	r7, fp
 8006afe:	e792      	b.n	8006a26 <_dtoa_r+0x41e>
 8006b00:	9900      	ldr	r1, [sp, #0]
 8006b02:	4b50      	ldr	r3, [pc, #320]	; (8006c44 <_dtoa_r+0x63c>)
 8006b04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b08:	4431      	add	r1, r6
 8006b0a:	9102      	str	r1, [sp, #8]
 8006b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b0e:	eeb0 9a47 	vmov.f32	s18, s14
 8006b12:	eef0 9a67 	vmov.f32	s19, s15
 8006b16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b1e:	2900      	cmp	r1, #0
 8006b20:	d044      	beq.n	8006bac <_dtoa_r+0x5a4>
 8006b22:	494e      	ldr	r1, [pc, #312]	; (8006c5c <_dtoa_r+0x654>)
 8006b24:	2000      	movs	r0, #0
 8006b26:	f7f9 fe91 	bl	800084c <__aeabi_ddiv>
 8006b2a:	ec53 2b19 	vmov	r2, r3, d9
 8006b2e:	f7f9 fbab 	bl	8000288 <__aeabi_dsub>
 8006b32:	9d00      	ldr	r5, [sp, #0]
 8006b34:	ec41 0b19 	vmov	d9, r0, r1
 8006b38:	4649      	mov	r1, r9
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	f7fa f80c 	bl	8000b58 <__aeabi_d2iz>
 8006b40:	4606      	mov	r6, r0
 8006b42:	f7f9 fcef 	bl	8000524 <__aeabi_i2d>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	f7f9 fb9b 	bl	8000288 <__aeabi_dsub>
 8006b52:	3630      	adds	r6, #48	; 0x30
 8006b54:	f805 6b01 	strb.w	r6, [r5], #1
 8006b58:	ec53 2b19 	vmov	r2, r3, d9
 8006b5c:	4680      	mov	r8, r0
 8006b5e:	4689      	mov	r9, r1
 8006b60:	f7f9 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d164      	bne.n	8006c32 <_dtoa_r+0x62a>
 8006b68:	4642      	mov	r2, r8
 8006b6a:	464b      	mov	r3, r9
 8006b6c:	4937      	ldr	r1, [pc, #220]	; (8006c4c <_dtoa_r+0x644>)
 8006b6e:	2000      	movs	r0, #0
 8006b70:	f7f9 fb8a 	bl	8000288 <__aeabi_dsub>
 8006b74:	ec53 2b19 	vmov	r2, r3, d9
 8006b78:	f7f9 ffb0 	bl	8000adc <__aeabi_dcmplt>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	f040 80b6 	bne.w	8006cee <_dtoa_r+0x6e6>
 8006b82:	9b02      	ldr	r3, [sp, #8]
 8006b84:	429d      	cmp	r5, r3
 8006b86:	f43f af7c 	beq.w	8006a82 <_dtoa_r+0x47a>
 8006b8a:	4b31      	ldr	r3, [pc, #196]	; (8006c50 <_dtoa_r+0x648>)
 8006b8c:	ec51 0b19 	vmov	r0, r1, d9
 8006b90:	2200      	movs	r2, #0
 8006b92:	f7f9 fd31 	bl	80005f8 <__aeabi_dmul>
 8006b96:	4b2e      	ldr	r3, [pc, #184]	; (8006c50 <_dtoa_r+0x648>)
 8006b98:	ec41 0b19 	vmov	d9, r0, r1
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	f7f9 fd29 	bl	80005f8 <__aeabi_dmul>
 8006ba6:	4680      	mov	r8, r0
 8006ba8:	4689      	mov	r9, r1
 8006baa:	e7c5      	b.n	8006b38 <_dtoa_r+0x530>
 8006bac:	ec51 0b17 	vmov	r0, r1, d7
 8006bb0:	f7f9 fd22 	bl	80005f8 <__aeabi_dmul>
 8006bb4:	9b02      	ldr	r3, [sp, #8]
 8006bb6:	9d00      	ldr	r5, [sp, #0]
 8006bb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bba:	ec41 0b19 	vmov	d9, r0, r1
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	f7f9 ffc9 	bl	8000b58 <__aeabi_d2iz>
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	f7f9 fcac 	bl	8000524 <__aeabi_i2d>
 8006bcc:	3630      	adds	r6, #48	; 0x30
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4640      	mov	r0, r8
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	f7f9 fb57 	bl	8000288 <__aeabi_dsub>
 8006bda:	f805 6b01 	strb.w	r6, [r5], #1
 8006bde:	9b02      	ldr	r3, [sp, #8]
 8006be0:	429d      	cmp	r5, r3
 8006be2:	4680      	mov	r8, r0
 8006be4:	4689      	mov	r9, r1
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	d124      	bne.n	8006c36 <_dtoa_r+0x62e>
 8006bec:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <_dtoa_r+0x654>)
 8006bee:	ec51 0b19 	vmov	r0, r1, d9
 8006bf2:	f7f9 fb4b 	bl	800028c <__adddf3>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4640      	mov	r0, r8
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	f7f9 ff8b 	bl	8000b18 <__aeabi_dcmpgt>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d173      	bne.n	8006cee <_dtoa_r+0x6e6>
 8006c06:	ec53 2b19 	vmov	r2, r3, d9
 8006c0a:	4914      	ldr	r1, [pc, #80]	; (8006c5c <_dtoa_r+0x654>)
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	f7f9 fb3b 	bl	8000288 <__aeabi_dsub>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4640      	mov	r0, r8
 8006c18:	4649      	mov	r1, r9
 8006c1a:	f7f9 ff5f 	bl	8000adc <__aeabi_dcmplt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f43f af2f 	beq.w	8006a82 <_dtoa_r+0x47a>
 8006c24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c26:	1e6b      	subs	r3, r5, #1
 8006c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c2e:	2b30      	cmp	r3, #48	; 0x30
 8006c30:	d0f8      	beq.n	8006c24 <_dtoa_r+0x61c>
 8006c32:	46bb      	mov	fp, r7
 8006c34:	e04a      	b.n	8006ccc <_dtoa_r+0x6c4>
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <_dtoa_r+0x648>)
 8006c38:	f7f9 fcde 	bl	80005f8 <__aeabi_dmul>
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	4689      	mov	r9, r1
 8006c40:	e7bd      	b.n	8006bbe <_dtoa_r+0x5b6>
 8006c42:	bf00      	nop
 8006c44:	08009478 	.word	0x08009478
 8006c48:	08009450 	.word	0x08009450
 8006c4c:	3ff00000 	.word	0x3ff00000
 8006c50:	40240000 	.word	0x40240000
 8006c54:	401c0000 	.word	0x401c0000
 8006c58:	40140000 	.word	0x40140000
 8006c5c:	3fe00000 	.word	0x3fe00000
 8006c60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c64:	9d00      	ldr	r5, [sp, #0]
 8006c66:	4642      	mov	r2, r8
 8006c68:	464b      	mov	r3, r9
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	f7f9 fded 	bl	800084c <__aeabi_ddiv>
 8006c72:	f7f9 ff71 	bl	8000b58 <__aeabi_d2iz>
 8006c76:	9001      	str	r0, [sp, #4]
 8006c78:	f7f9 fc54 	bl	8000524 <__aeabi_i2d>
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	f7f9 fcba 	bl	80005f8 <__aeabi_dmul>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4630      	mov	r0, r6
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	f7f9 fafc 	bl	8000288 <__aeabi_dsub>
 8006c90:	9e01      	ldr	r6, [sp, #4]
 8006c92:	9f04      	ldr	r7, [sp, #16]
 8006c94:	3630      	adds	r6, #48	; 0x30
 8006c96:	f805 6b01 	strb.w	r6, [r5], #1
 8006c9a:	9e00      	ldr	r6, [sp, #0]
 8006c9c:	1bae      	subs	r6, r5, r6
 8006c9e:	42b7      	cmp	r7, r6
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	d134      	bne.n	8006d10 <_dtoa_r+0x708>
 8006ca6:	f7f9 faf1 	bl	800028c <__adddf3>
 8006caa:	4642      	mov	r2, r8
 8006cac:	464b      	mov	r3, r9
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460f      	mov	r7, r1
 8006cb2:	f7f9 ff31 	bl	8000b18 <__aeabi_dcmpgt>
 8006cb6:	b9c8      	cbnz	r0, 8006cec <_dtoa_r+0x6e4>
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	f7f9 ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cc4:	b110      	cbz	r0, 8006ccc <_dtoa_r+0x6c4>
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	07db      	lsls	r3, r3, #31
 8006cca:	d40f      	bmi.n	8006cec <_dtoa_r+0x6e4>
 8006ccc:	4651      	mov	r1, sl
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f000 fd72 	bl	80077b8 <_Bfree>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cd8:	702b      	strb	r3, [r5, #0]
 8006cda:	f10b 0301 	add.w	r3, fp, #1
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f43f ace2 	beq.w	80066ac <_dtoa_r+0xa4>
 8006ce8:	601d      	str	r5, [r3, #0]
 8006cea:	e4df      	b.n	80066ac <_dtoa_r+0xa4>
 8006cec:	465f      	mov	r7, fp
 8006cee:	462b      	mov	r3, r5
 8006cf0:	461d      	mov	r5, r3
 8006cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cf6:	2a39      	cmp	r2, #57	; 0x39
 8006cf8:	d106      	bne.n	8006d08 <_dtoa_r+0x700>
 8006cfa:	9a00      	ldr	r2, [sp, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d1f7      	bne.n	8006cf0 <_dtoa_r+0x6e8>
 8006d00:	9900      	ldr	r1, [sp, #0]
 8006d02:	2230      	movs	r2, #48	; 0x30
 8006d04:	3701      	adds	r7, #1
 8006d06:	700a      	strb	r2, [r1, #0]
 8006d08:	781a      	ldrb	r2, [r3, #0]
 8006d0a:	3201      	adds	r2, #1
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	e790      	b.n	8006c32 <_dtoa_r+0x62a>
 8006d10:	4ba3      	ldr	r3, [pc, #652]	; (8006fa0 <_dtoa_r+0x998>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	f7f9 fc70 	bl	80005f8 <__aeabi_dmul>
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	f7f9 fed2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d09e      	beq.n	8006c66 <_dtoa_r+0x65e>
 8006d28:	e7d0      	b.n	8006ccc <_dtoa_r+0x6c4>
 8006d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d2c:	2a00      	cmp	r2, #0
 8006d2e:	f000 80ca 	beq.w	8006ec6 <_dtoa_r+0x8be>
 8006d32:	9a07      	ldr	r2, [sp, #28]
 8006d34:	2a01      	cmp	r2, #1
 8006d36:	f300 80ad 	bgt.w	8006e94 <_dtoa_r+0x88c>
 8006d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d3c:	2a00      	cmp	r2, #0
 8006d3e:	f000 80a5 	beq.w	8006e8c <_dtoa_r+0x884>
 8006d42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d46:	9e08      	ldr	r6, [sp, #32]
 8006d48:	9d05      	ldr	r5, [sp, #20]
 8006d4a:	9a05      	ldr	r2, [sp, #20]
 8006d4c:	441a      	add	r2, r3
 8006d4e:	9205      	str	r2, [sp, #20]
 8006d50:	9a06      	ldr	r2, [sp, #24]
 8006d52:	2101      	movs	r1, #1
 8006d54:	441a      	add	r2, r3
 8006d56:	4620      	mov	r0, r4
 8006d58:	9206      	str	r2, [sp, #24]
 8006d5a:	f000 fde3 	bl	8007924 <__i2b>
 8006d5e:	4607      	mov	r7, r0
 8006d60:	b165      	cbz	r5, 8006d7c <_dtoa_r+0x774>
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	dd09      	ble.n	8006d7c <_dtoa_r+0x774>
 8006d68:	42ab      	cmp	r3, r5
 8006d6a:	9a05      	ldr	r2, [sp, #20]
 8006d6c:	bfa8      	it	ge
 8006d6e:	462b      	movge	r3, r5
 8006d70:	1ad2      	subs	r2, r2, r3
 8006d72:	9205      	str	r2, [sp, #20]
 8006d74:	9a06      	ldr	r2, [sp, #24]
 8006d76:	1aed      	subs	r5, r5, r3
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	9306      	str	r3, [sp, #24]
 8006d7c:	9b08      	ldr	r3, [sp, #32]
 8006d7e:	b1f3      	cbz	r3, 8006dbe <_dtoa_r+0x7b6>
 8006d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 80a3 	beq.w	8006ece <_dtoa_r+0x8c6>
 8006d88:	2e00      	cmp	r6, #0
 8006d8a:	dd10      	ble.n	8006dae <_dtoa_r+0x7a6>
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	4632      	mov	r2, r6
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 fe87 	bl	8007aa4 <__pow5mult>
 8006d96:	4652      	mov	r2, sl
 8006d98:	4601      	mov	r1, r0
 8006d9a:	4607      	mov	r7, r0
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 fdd7 	bl	8007950 <__multiply>
 8006da2:	4651      	mov	r1, sl
 8006da4:	4680      	mov	r8, r0
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 fd06 	bl	80077b8 <_Bfree>
 8006dac:	46c2      	mov	sl, r8
 8006dae:	9b08      	ldr	r3, [sp, #32]
 8006db0:	1b9a      	subs	r2, r3, r6
 8006db2:	d004      	beq.n	8006dbe <_dtoa_r+0x7b6>
 8006db4:	4651      	mov	r1, sl
 8006db6:	4620      	mov	r0, r4
 8006db8:	f000 fe74 	bl	8007aa4 <__pow5mult>
 8006dbc:	4682      	mov	sl, r0
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 fdaf 	bl	8007924 <__i2b>
 8006dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	4606      	mov	r6, r0
 8006dcc:	f340 8081 	ble.w	8006ed2 <_dtoa_r+0x8ca>
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fe65 	bl	8007aa4 <__pow5mult>
 8006dda:	9b07      	ldr	r3, [sp, #28]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	4606      	mov	r6, r0
 8006de0:	dd7a      	ble.n	8006ed8 <_dtoa_r+0x8d0>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	6933      	ldr	r3, [r6, #16]
 8006de8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006dec:	6918      	ldr	r0, [r3, #16]
 8006dee:	f000 fd4b 	bl	8007888 <__hi0bits>
 8006df2:	f1c0 0020 	rsb	r0, r0, #32
 8006df6:	9b06      	ldr	r3, [sp, #24]
 8006df8:	4418      	add	r0, r3
 8006dfa:	f010 001f 	ands.w	r0, r0, #31
 8006dfe:	f000 8094 	beq.w	8006f2a <_dtoa_r+0x922>
 8006e02:	f1c0 0320 	rsb	r3, r0, #32
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	f340 8085 	ble.w	8006f16 <_dtoa_r+0x90e>
 8006e0c:	9b05      	ldr	r3, [sp, #20]
 8006e0e:	f1c0 001c 	rsb	r0, r0, #28
 8006e12:	4403      	add	r3, r0
 8006e14:	9305      	str	r3, [sp, #20]
 8006e16:	9b06      	ldr	r3, [sp, #24]
 8006e18:	4403      	add	r3, r0
 8006e1a:	4405      	add	r5, r0
 8006e1c:	9306      	str	r3, [sp, #24]
 8006e1e:	9b05      	ldr	r3, [sp, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	dd05      	ble.n	8006e30 <_dtoa_r+0x828>
 8006e24:	4651      	mov	r1, sl
 8006e26:	461a      	mov	r2, r3
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 fe95 	bl	8007b58 <__lshift>
 8006e2e:	4682      	mov	sl, r0
 8006e30:	9b06      	ldr	r3, [sp, #24]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dd05      	ble.n	8006e42 <_dtoa_r+0x83a>
 8006e36:	4631      	mov	r1, r6
 8006e38:	461a      	mov	r2, r3
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 fe8c 	bl	8007b58 <__lshift>
 8006e40:	4606      	mov	r6, r0
 8006e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d072      	beq.n	8006f2e <_dtoa_r+0x926>
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4650      	mov	r0, sl
 8006e4c:	f000 fef0 	bl	8007c30 <__mcmp>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	da6c      	bge.n	8006f2e <_dtoa_r+0x926>
 8006e54:	2300      	movs	r3, #0
 8006e56:	4651      	mov	r1, sl
 8006e58:	220a      	movs	r2, #10
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 fcce 	bl	80077fc <__multadd>
 8006e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e62:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006e66:	4682      	mov	sl, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 81b0 	beq.w	80071ce <_dtoa_r+0xbc6>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	4639      	mov	r1, r7
 8006e72:	220a      	movs	r2, #10
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fcc1 	bl	80077fc <__multadd>
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	4607      	mov	r7, r0
 8006e80:	f300 8096 	bgt.w	8006fb0 <_dtoa_r+0x9a8>
 8006e84:	9b07      	ldr	r3, [sp, #28]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	dc59      	bgt.n	8006f3e <_dtoa_r+0x936>
 8006e8a:	e091      	b.n	8006fb0 <_dtoa_r+0x9a8>
 8006e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e92:	e758      	b.n	8006d46 <_dtoa_r+0x73e>
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	1e5e      	subs	r6, r3, #1
 8006e98:	9b08      	ldr	r3, [sp, #32]
 8006e9a:	42b3      	cmp	r3, r6
 8006e9c:	bfbf      	itttt	lt
 8006e9e:	9b08      	ldrlt	r3, [sp, #32]
 8006ea0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006ea2:	9608      	strlt	r6, [sp, #32]
 8006ea4:	1af3      	sublt	r3, r6, r3
 8006ea6:	bfb4      	ite	lt
 8006ea8:	18d2      	addlt	r2, r2, r3
 8006eaa:	1b9e      	subge	r6, r3, r6
 8006eac:	9b04      	ldr	r3, [sp, #16]
 8006eae:	bfbc      	itt	lt
 8006eb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006eb2:	2600      	movlt	r6, #0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bfb7      	itett	lt
 8006eb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ebc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ec0:	1a9d      	sublt	r5, r3, r2
 8006ec2:	2300      	movlt	r3, #0
 8006ec4:	e741      	b.n	8006d4a <_dtoa_r+0x742>
 8006ec6:	9e08      	ldr	r6, [sp, #32]
 8006ec8:	9d05      	ldr	r5, [sp, #20]
 8006eca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006ecc:	e748      	b.n	8006d60 <_dtoa_r+0x758>
 8006ece:	9a08      	ldr	r2, [sp, #32]
 8006ed0:	e770      	b.n	8006db4 <_dtoa_r+0x7ac>
 8006ed2:	9b07      	ldr	r3, [sp, #28]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	dc19      	bgt.n	8006f0c <_dtoa_r+0x904>
 8006ed8:	9b02      	ldr	r3, [sp, #8]
 8006eda:	b9bb      	cbnz	r3, 8006f0c <_dtoa_r+0x904>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ee2:	b99b      	cbnz	r3, 8006f0c <_dtoa_r+0x904>
 8006ee4:	9b03      	ldr	r3, [sp, #12]
 8006ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eea:	0d1b      	lsrs	r3, r3, #20
 8006eec:	051b      	lsls	r3, r3, #20
 8006eee:	b183      	cbz	r3, 8006f12 <_dtoa_r+0x90a>
 8006ef0:	9b05      	ldr	r3, [sp, #20]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	9305      	str	r3, [sp, #20]
 8006ef6:	9b06      	ldr	r3, [sp, #24]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	9306      	str	r3, [sp, #24]
 8006efc:	f04f 0801 	mov.w	r8, #1
 8006f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f47f af6f 	bne.w	8006de6 <_dtoa_r+0x7de>
 8006f08:	2001      	movs	r0, #1
 8006f0a:	e774      	b.n	8006df6 <_dtoa_r+0x7ee>
 8006f0c:	f04f 0800 	mov.w	r8, #0
 8006f10:	e7f6      	b.n	8006f00 <_dtoa_r+0x8f8>
 8006f12:	4698      	mov	r8, r3
 8006f14:	e7f4      	b.n	8006f00 <_dtoa_r+0x8f8>
 8006f16:	d082      	beq.n	8006e1e <_dtoa_r+0x816>
 8006f18:	9a05      	ldr	r2, [sp, #20]
 8006f1a:	331c      	adds	r3, #28
 8006f1c:	441a      	add	r2, r3
 8006f1e:	9205      	str	r2, [sp, #20]
 8006f20:	9a06      	ldr	r2, [sp, #24]
 8006f22:	441a      	add	r2, r3
 8006f24:	441d      	add	r5, r3
 8006f26:	9206      	str	r2, [sp, #24]
 8006f28:	e779      	b.n	8006e1e <_dtoa_r+0x816>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	e7f4      	b.n	8006f18 <_dtoa_r+0x910>
 8006f2e:	9b04      	ldr	r3, [sp, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	dc37      	bgt.n	8006fa4 <_dtoa_r+0x99c>
 8006f34:	9b07      	ldr	r3, [sp, #28]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	dd34      	ble.n	8006fa4 <_dtoa_r+0x99c>
 8006f3a:	9b04      	ldr	r3, [sp, #16]
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	b963      	cbnz	r3, 8006f5c <_dtoa_r+0x954>
 8006f42:	4631      	mov	r1, r6
 8006f44:	2205      	movs	r2, #5
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 fc58 	bl	80077fc <__multadd>
 8006f4c:	4601      	mov	r1, r0
 8006f4e:	4606      	mov	r6, r0
 8006f50:	4650      	mov	r0, sl
 8006f52:	f000 fe6d 	bl	8007c30 <__mcmp>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f73f adbb 	bgt.w	8006ad2 <_dtoa_r+0x4ca>
 8006f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f5e:	9d00      	ldr	r5, [sp, #0]
 8006f60:	ea6f 0b03 	mvn.w	fp, r3
 8006f64:	f04f 0800 	mov.w	r8, #0
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 fc24 	bl	80077b8 <_Bfree>
 8006f70:	2f00      	cmp	r7, #0
 8006f72:	f43f aeab 	beq.w	8006ccc <_dtoa_r+0x6c4>
 8006f76:	f1b8 0f00 	cmp.w	r8, #0
 8006f7a:	d005      	beq.n	8006f88 <_dtoa_r+0x980>
 8006f7c:	45b8      	cmp	r8, r7
 8006f7e:	d003      	beq.n	8006f88 <_dtoa_r+0x980>
 8006f80:	4641      	mov	r1, r8
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 fc18 	bl	80077b8 <_Bfree>
 8006f88:	4639      	mov	r1, r7
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 fc14 	bl	80077b8 <_Bfree>
 8006f90:	e69c      	b.n	8006ccc <_dtoa_r+0x6c4>
 8006f92:	2600      	movs	r6, #0
 8006f94:	4637      	mov	r7, r6
 8006f96:	e7e1      	b.n	8006f5c <_dtoa_r+0x954>
 8006f98:	46bb      	mov	fp, r7
 8006f9a:	4637      	mov	r7, r6
 8006f9c:	e599      	b.n	8006ad2 <_dtoa_r+0x4ca>
 8006f9e:	bf00      	nop
 8006fa0:	40240000 	.word	0x40240000
 8006fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 80c8 	beq.w	800713c <_dtoa_r+0xb34>
 8006fac:	9b04      	ldr	r3, [sp, #16]
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	2d00      	cmp	r5, #0
 8006fb2:	dd05      	ble.n	8006fc0 <_dtoa_r+0x9b8>
 8006fb4:	4639      	mov	r1, r7
 8006fb6:	462a      	mov	r2, r5
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 fdcd 	bl	8007b58 <__lshift>
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	f1b8 0f00 	cmp.w	r8, #0
 8006fc4:	d05b      	beq.n	800707e <_dtoa_r+0xa76>
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 fbb5 	bl	8007738 <_Balloc>
 8006fce:	4605      	mov	r5, r0
 8006fd0:	b928      	cbnz	r0, 8006fde <_dtoa_r+0x9d6>
 8006fd2:	4b83      	ldr	r3, [pc, #524]	; (80071e0 <_dtoa_r+0xbd8>)
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006fda:	f7ff bb2e 	b.w	800663a <_dtoa_r+0x32>
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	3202      	adds	r2, #2
 8006fe2:	0092      	lsls	r2, r2, #2
 8006fe4:	f107 010c 	add.w	r1, r7, #12
 8006fe8:	300c      	adds	r0, #12
 8006fea:	f001 f8d3 	bl	8008194 <memcpy>
 8006fee:	2201      	movs	r2, #1
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 fdb0 	bl	8007b58 <__lshift>
 8006ff8:	9b00      	ldr	r3, [sp, #0]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	9304      	str	r3, [sp, #16]
 8006ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007002:	4413      	add	r3, r2
 8007004:	9308      	str	r3, [sp, #32]
 8007006:	9b02      	ldr	r3, [sp, #8]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	46b8      	mov	r8, r7
 800700e:	9306      	str	r3, [sp, #24]
 8007010:	4607      	mov	r7, r0
 8007012:	9b04      	ldr	r3, [sp, #16]
 8007014:	4631      	mov	r1, r6
 8007016:	3b01      	subs	r3, #1
 8007018:	4650      	mov	r0, sl
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	f7ff fa69 	bl	80064f2 <quorem>
 8007020:	4641      	mov	r1, r8
 8007022:	9002      	str	r0, [sp, #8]
 8007024:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007028:	4650      	mov	r0, sl
 800702a:	f000 fe01 	bl	8007c30 <__mcmp>
 800702e:	463a      	mov	r2, r7
 8007030:	9005      	str	r0, [sp, #20]
 8007032:	4631      	mov	r1, r6
 8007034:	4620      	mov	r0, r4
 8007036:	f000 fe17 	bl	8007c68 <__mdiff>
 800703a:	68c2      	ldr	r2, [r0, #12]
 800703c:	4605      	mov	r5, r0
 800703e:	bb02      	cbnz	r2, 8007082 <_dtoa_r+0xa7a>
 8007040:	4601      	mov	r1, r0
 8007042:	4650      	mov	r0, sl
 8007044:	f000 fdf4 	bl	8007c30 <__mcmp>
 8007048:	4602      	mov	r2, r0
 800704a:	4629      	mov	r1, r5
 800704c:	4620      	mov	r0, r4
 800704e:	9209      	str	r2, [sp, #36]	; 0x24
 8007050:	f000 fbb2 	bl	80077b8 <_Bfree>
 8007054:	9b07      	ldr	r3, [sp, #28]
 8007056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007058:	9d04      	ldr	r5, [sp, #16]
 800705a:	ea43 0102 	orr.w	r1, r3, r2
 800705e:	9b06      	ldr	r3, [sp, #24]
 8007060:	4319      	orrs	r1, r3
 8007062:	d110      	bne.n	8007086 <_dtoa_r+0xa7e>
 8007064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007068:	d029      	beq.n	80070be <_dtoa_r+0xab6>
 800706a:	9b05      	ldr	r3, [sp, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	dd02      	ble.n	8007076 <_dtoa_r+0xa6e>
 8007070:	9b02      	ldr	r3, [sp, #8]
 8007072:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	f883 9000 	strb.w	r9, [r3]
 800707c:	e774      	b.n	8006f68 <_dtoa_r+0x960>
 800707e:	4638      	mov	r0, r7
 8007080:	e7ba      	b.n	8006ff8 <_dtoa_r+0x9f0>
 8007082:	2201      	movs	r2, #1
 8007084:	e7e1      	b.n	800704a <_dtoa_r+0xa42>
 8007086:	9b05      	ldr	r3, [sp, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	db04      	blt.n	8007096 <_dtoa_r+0xa8e>
 800708c:	9907      	ldr	r1, [sp, #28]
 800708e:	430b      	orrs	r3, r1
 8007090:	9906      	ldr	r1, [sp, #24]
 8007092:	430b      	orrs	r3, r1
 8007094:	d120      	bne.n	80070d8 <_dtoa_r+0xad0>
 8007096:	2a00      	cmp	r2, #0
 8007098:	dded      	ble.n	8007076 <_dtoa_r+0xa6e>
 800709a:	4651      	mov	r1, sl
 800709c:	2201      	movs	r2, #1
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 fd5a 	bl	8007b58 <__lshift>
 80070a4:	4631      	mov	r1, r6
 80070a6:	4682      	mov	sl, r0
 80070a8:	f000 fdc2 	bl	8007c30 <__mcmp>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	dc03      	bgt.n	80070b8 <_dtoa_r+0xab0>
 80070b0:	d1e1      	bne.n	8007076 <_dtoa_r+0xa6e>
 80070b2:	f019 0f01 	tst.w	r9, #1
 80070b6:	d0de      	beq.n	8007076 <_dtoa_r+0xa6e>
 80070b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070bc:	d1d8      	bne.n	8007070 <_dtoa_r+0xa68>
 80070be:	9a01      	ldr	r2, [sp, #4]
 80070c0:	2339      	movs	r3, #57	; 0x39
 80070c2:	7013      	strb	r3, [r2, #0]
 80070c4:	462b      	mov	r3, r5
 80070c6:	461d      	mov	r5, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070ce:	2a39      	cmp	r2, #57	; 0x39
 80070d0:	d06c      	beq.n	80071ac <_dtoa_r+0xba4>
 80070d2:	3201      	adds	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e747      	b.n	8006f68 <_dtoa_r+0x960>
 80070d8:	2a00      	cmp	r2, #0
 80070da:	dd07      	ble.n	80070ec <_dtoa_r+0xae4>
 80070dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070e0:	d0ed      	beq.n	80070be <_dtoa_r+0xab6>
 80070e2:	9a01      	ldr	r2, [sp, #4]
 80070e4:	f109 0301 	add.w	r3, r9, #1
 80070e8:	7013      	strb	r3, [r2, #0]
 80070ea:	e73d      	b.n	8006f68 <_dtoa_r+0x960>
 80070ec:	9b04      	ldr	r3, [sp, #16]
 80070ee:	9a08      	ldr	r2, [sp, #32]
 80070f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d043      	beq.n	8007180 <_dtoa_r+0xb78>
 80070f8:	4651      	mov	r1, sl
 80070fa:	2300      	movs	r3, #0
 80070fc:	220a      	movs	r2, #10
 80070fe:	4620      	mov	r0, r4
 8007100:	f000 fb7c 	bl	80077fc <__multadd>
 8007104:	45b8      	cmp	r8, r7
 8007106:	4682      	mov	sl, r0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	f04f 020a 	mov.w	r2, #10
 8007110:	4641      	mov	r1, r8
 8007112:	4620      	mov	r0, r4
 8007114:	d107      	bne.n	8007126 <_dtoa_r+0xb1e>
 8007116:	f000 fb71 	bl	80077fc <__multadd>
 800711a:	4680      	mov	r8, r0
 800711c:	4607      	mov	r7, r0
 800711e:	9b04      	ldr	r3, [sp, #16]
 8007120:	3301      	adds	r3, #1
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	e775      	b.n	8007012 <_dtoa_r+0xa0a>
 8007126:	f000 fb69 	bl	80077fc <__multadd>
 800712a:	4639      	mov	r1, r7
 800712c:	4680      	mov	r8, r0
 800712e:	2300      	movs	r3, #0
 8007130:	220a      	movs	r2, #10
 8007132:	4620      	mov	r0, r4
 8007134:	f000 fb62 	bl	80077fc <__multadd>
 8007138:	4607      	mov	r7, r0
 800713a:	e7f0      	b.n	800711e <_dtoa_r+0xb16>
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	9d00      	ldr	r5, [sp, #0]
 8007142:	4631      	mov	r1, r6
 8007144:	4650      	mov	r0, sl
 8007146:	f7ff f9d4 	bl	80064f2 <quorem>
 800714a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800714e:	9b00      	ldr	r3, [sp, #0]
 8007150:	f805 9b01 	strb.w	r9, [r5], #1
 8007154:	1aea      	subs	r2, r5, r3
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	4293      	cmp	r3, r2
 800715a:	dd07      	ble.n	800716c <_dtoa_r+0xb64>
 800715c:	4651      	mov	r1, sl
 800715e:	2300      	movs	r3, #0
 8007160:	220a      	movs	r2, #10
 8007162:	4620      	mov	r0, r4
 8007164:	f000 fb4a 	bl	80077fc <__multadd>
 8007168:	4682      	mov	sl, r0
 800716a:	e7ea      	b.n	8007142 <_dtoa_r+0xb3a>
 800716c:	9b01      	ldr	r3, [sp, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	bfc8      	it	gt
 8007172:	461d      	movgt	r5, r3
 8007174:	9b00      	ldr	r3, [sp, #0]
 8007176:	bfd8      	it	le
 8007178:	2501      	movle	r5, #1
 800717a:	441d      	add	r5, r3
 800717c:	f04f 0800 	mov.w	r8, #0
 8007180:	4651      	mov	r1, sl
 8007182:	2201      	movs	r2, #1
 8007184:	4620      	mov	r0, r4
 8007186:	f000 fce7 	bl	8007b58 <__lshift>
 800718a:	4631      	mov	r1, r6
 800718c:	4682      	mov	sl, r0
 800718e:	f000 fd4f 	bl	8007c30 <__mcmp>
 8007192:	2800      	cmp	r0, #0
 8007194:	dc96      	bgt.n	80070c4 <_dtoa_r+0xabc>
 8007196:	d102      	bne.n	800719e <_dtoa_r+0xb96>
 8007198:	f019 0f01 	tst.w	r9, #1
 800719c:	d192      	bne.n	80070c4 <_dtoa_r+0xabc>
 800719e:	462b      	mov	r3, r5
 80071a0:	461d      	mov	r5, r3
 80071a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071a6:	2a30      	cmp	r2, #48	; 0x30
 80071a8:	d0fa      	beq.n	80071a0 <_dtoa_r+0xb98>
 80071aa:	e6dd      	b.n	8006f68 <_dtoa_r+0x960>
 80071ac:	9a00      	ldr	r2, [sp, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d189      	bne.n	80070c6 <_dtoa_r+0xabe>
 80071b2:	f10b 0b01 	add.w	fp, fp, #1
 80071b6:	2331      	movs	r3, #49	; 0x31
 80071b8:	e796      	b.n	80070e8 <_dtoa_r+0xae0>
 80071ba:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <_dtoa_r+0xbdc>)
 80071bc:	f7ff ba99 	b.w	80066f2 <_dtoa_r+0xea>
 80071c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f47f aa6d 	bne.w	80066a2 <_dtoa_r+0x9a>
 80071c8:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <_dtoa_r+0xbe0>)
 80071ca:	f7ff ba92 	b.w	80066f2 <_dtoa_r+0xea>
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	dcb5      	bgt.n	8007140 <_dtoa_r+0xb38>
 80071d4:	9b07      	ldr	r3, [sp, #28]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	f73f aeb1 	bgt.w	8006f3e <_dtoa_r+0x936>
 80071dc:	e7b0      	b.n	8007140 <_dtoa_r+0xb38>
 80071de:	bf00      	nop
 80071e0:	080093d4 	.word	0x080093d4
 80071e4:	08009334 	.word	0x08009334
 80071e8:	08009358 	.word	0x08009358

080071ec <__sfputc_r>:
 80071ec:	6893      	ldr	r3, [r2, #8]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	b410      	push	{r4}
 80071f4:	6093      	str	r3, [r2, #8]
 80071f6:	da08      	bge.n	800720a <__sfputc_r+0x1e>
 80071f8:	6994      	ldr	r4, [r2, #24]
 80071fa:	42a3      	cmp	r3, r4
 80071fc:	db01      	blt.n	8007202 <__sfputc_r+0x16>
 80071fe:	290a      	cmp	r1, #10
 8007200:	d103      	bne.n	800720a <__sfputc_r+0x1e>
 8007202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007206:	f000 be56 	b.w	8007eb6 <__swbuf_r>
 800720a:	6813      	ldr	r3, [r2, #0]
 800720c:	1c58      	adds	r0, r3, #1
 800720e:	6010      	str	r0, [r2, #0]
 8007210:	7019      	strb	r1, [r3, #0]
 8007212:	4608      	mov	r0, r1
 8007214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007218:	4770      	bx	lr

0800721a <__sfputs_r>:
 800721a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721c:	4606      	mov	r6, r0
 800721e:	460f      	mov	r7, r1
 8007220:	4614      	mov	r4, r2
 8007222:	18d5      	adds	r5, r2, r3
 8007224:	42ac      	cmp	r4, r5
 8007226:	d101      	bne.n	800722c <__sfputs_r+0x12>
 8007228:	2000      	movs	r0, #0
 800722a:	e007      	b.n	800723c <__sfputs_r+0x22>
 800722c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007230:	463a      	mov	r2, r7
 8007232:	4630      	mov	r0, r6
 8007234:	f7ff ffda 	bl	80071ec <__sfputc_r>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d1f3      	bne.n	8007224 <__sfputs_r+0xa>
 800723c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007240 <_vfiprintf_r>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	460d      	mov	r5, r1
 8007246:	b09d      	sub	sp, #116	; 0x74
 8007248:	4614      	mov	r4, r2
 800724a:	4698      	mov	r8, r3
 800724c:	4606      	mov	r6, r0
 800724e:	b118      	cbz	r0, 8007258 <_vfiprintf_r+0x18>
 8007250:	6a03      	ldr	r3, [r0, #32]
 8007252:	b90b      	cbnz	r3, 8007258 <_vfiprintf_r+0x18>
 8007254:	f7ff f870 	bl	8006338 <__sinit>
 8007258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800725a:	07d9      	lsls	r1, r3, #31
 800725c:	d405      	bmi.n	800726a <_vfiprintf_r+0x2a>
 800725e:	89ab      	ldrh	r3, [r5, #12]
 8007260:	059a      	lsls	r2, r3, #22
 8007262:	d402      	bmi.n	800726a <_vfiprintf_r+0x2a>
 8007264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007266:	f7ff f942 	bl	80064ee <__retarget_lock_acquire_recursive>
 800726a:	89ab      	ldrh	r3, [r5, #12]
 800726c:	071b      	lsls	r3, r3, #28
 800726e:	d501      	bpl.n	8007274 <_vfiprintf_r+0x34>
 8007270:	692b      	ldr	r3, [r5, #16]
 8007272:	b99b      	cbnz	r3, 800729c <_vfiprintf_r+0x5c>
 8007274:	4629      	mov	r1, r5
 8007276:	4630      	mov	r0, r6
 8007278:	f000 fe5a 	bl	8007f30 <__swsetup_r>
 800727c:	b170      	cbz	r0, 800729c <_vfiprintf_r+0x5c>
 800727e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007280:	07dc      	lsls	r4, r3, #31
 8007282:	d504      	bpl.n	800728e <_vfiprintf_r+0x4e>
 8007284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007288:	b01d      	add	sp, #116	; 0x74
 800728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728e:	89ab      	ldrh	r3, [r5, #12]
 8007290:	0598      	lsls	r0, r3, #22
 8007292:	d4f7      	bmi.n	8007284 <_vfiprintf_r+0x44>
 8007294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007296:	f7ff f92b 	bl	80064f0 <__retarget_lock_release_recursive>
 800729a:	e7f3      	b.n	8007284 <_vfiprintf_r+0x44>
 800729c:	2300      	movs	r3, #0
 800729e:	9309      	str	r3, [sp, #36]	; 0x24
 80072a0:	2320      	movs	r3, #32
 80072a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072aa:	2330      	movs	r3, #48	; 0x30
 80072ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007460 <_vfiprintf_r+0x220>
 80072b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072b4:	f04f 0901 	mov.w	r9, #1
 80072b8:	4623      	mov	r3, r4
 80072ba:	469a      	mov	sl, r3
 80072bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072c0:	b10a      	cbz	r2, 80072c6 <_vfiprintf_r+0x86>
 80072c2:	2a25      	cmp	r2, #37	; 0x25
 80072c4:	d1f9      	bne.n	80072ba <_vfiprintf_r+0x7a>
 80072c6:	ebba 0b04 	subs.w	fp, sl, r4
 80072ca:	d00b      	beq.n	80072e4 <_vfiprintf_r+0xa4>
 80072cc:	465b      	mov	r3, fp
 80072ce:	4622      	mov	r2, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7ff ffa1 	bl	800721a <__sfputs_r>
 80072d8:	3001      	adds	r0, #1
 80072da:	f000 80a9 	beq.w	8007430 <_vfiprintf_r+0x1f0>
 80072de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072e0:	445a      	add	r2, fp
 80072e2:	9209      	str	r2, [sp, #36]	; 0x24
 80072e4:	f89a 3000 	ldrb.w	r3, [sl]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 80a1 	beq.w	8007430 <_vfiprintf_r+0x1f0>
 80072ee:	2300      	movs	r3, #0
 80072f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072f8:	f10a 0a01 	add.w	sl, sl, #1
 80072fc:	9304      	str	r3, [sp, #16]
 80072fe:	9307      	str	r3, [sp, #28]
 8007300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007304:	931a      	str	r3, [sp, #104]	; 0x68
 8007306:	4654      	mov	r4, sl
 8007308:	2205      	movs	r2, #5
 800730a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800730e:	4854      	ldr	r0, [pc, #336]	; (8007460 <_vfiprintf_r+0x220>)
 8007310:	f7f8 ff5e 	bl	80001d0 <memchr>
 8007314:	9a04      	ldr	r2, [sp, #16]
 8007316:	b9d8      	cbnz	r0, 8007350 <_vfiprintf_r+0x110>
 8007318:	06d1      	lsls	r1, r2, #27
 800731a:	bf44      	itt	mi
 800731c:	2320      	movmi	r3, #32
 800731e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007322:	0713      	lsls	r3, r2, #28
 8007324:	bf44      	itt	mi
 8007326:	232b      	movmi	r3, #43	; 0x2b
 8007328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800732c:	f89a 3000 	ldrb.w	r3, [sl]
 8007330:	2b2a      	cmp	r3, #42	; 0x2a
 8007332:	d015      	beq.n	8007360 <_vfiprintf_r+0x120>
 8007334:	9a07      	ldr	r2, [sp, #28]
 8007336:	4654      	mov	r4, sl
 8007338:	2000      	movs	r0, #0
 800733a:	f04f 0c0a 	mov.w	ip, #10
 800733e:	4621      	mov	r1, r4
 8007340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007344:	3b30      	subs	r3, #48	; 0x30
 8007346:	2b09      	cmp	r3, #9
 8007348:	d94d      	bls.n	80073e6 <_vfiprintf_r+0x1a6>
 800734a:	b1b0      	cbz	r0, 800737a <_vfiprintf_r+0x13a>
 800734c:	9207      	str	r2, [sp, #28]
 800734e:	e014      	b.n	800737a <_vfiprintf_r+0x13a>
 8007350:	eba0 0308 	sub.w	r3, r0, r8
 8007354:	fa09 f303 	lsl.w	r3, r9, r3
 8007358:	4313      	orrs	r3, r2
 800735a:	9304      	str	r3, [sp, #16]
 800735c:	46a2      	mov	sl, r4
 800735e:	e7d2      	b.n	8007306 <_vfiprintf_r+0xc6>
 8007360:	9b03      	ldr	r3, [sp, #12]
 8007362:	1d19      	adds	r1, r3, #4
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	9103      	str	r1, [sp, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	bfbb      	ittet	lt
 800736c:	425b      	neglt	r3, r3
 800736e:	f042 0202 	orrlt.w	r2, r2, #2
 8007372:	9307      	strge	r3, [sp, #28]
 8007374:	9307      	strlt	r3, [sp, #28]
 8007376:	bfb8      	it	lt
 8007378:	9204      	strlt	r2, [sp, #16]
 800737a:	7823      	ldrb	r3, [r4, #0]
 800737c:	2b2e      	cmp	r3, #46	; 0x2e
 800737e:	d10c      	bne.n	800739a <_vfiprintf_r+0x15a>
 8007380:	7863      	ldrb	r3, [r4, #1]
 8007382:	2b2a      	cmp	r3, #42	; 0x2a
 8007384:	d134      	bne.n	80073f0 <_vfiprintf_r+0x1b0>
 8007386:	9b03      	ldr	r3, [sp, #12]
 8007388:	1d1a      	adds	r2, r3, #4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	9203      	str	r2, [sp, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	bfb8      	it	lt
 8007392:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007396:	3402      	adds	r4, #2
 8007398:	9305      	str	r3, [sp, #20]
 800739a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007470 <_vfiprintf_r+0x230>
 800739e:	7821      	ldrb	r1, [r4, #0]
 80073a0:	2203      	movs	r2, #3
 80073a2:	4650      	mov	r0, sl
 80073a4:	f7f8 ff14 	bl	80001d0 <memchr>
 80073a8:	b138      	cbz	r0, 80073ba <_vfiprintf_r+0x17a>
 80073aa:	9b04      	ldr	r3, [sp, #16]
 80073ac:	eba0 000a 	sub.w	r0, r0, sl
 80073b0:	2240      	movs	r2, #64	; 0x40
 80073b2:	4082      	lsls	r2, r0
 80073b4:	4313      	orrs	r3, r2
 80073b6:	3401      	adds	r4, #1
 80073b8:	9304      	str	r3, [sp, #16]
 80073ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073be:	4829      	ldr	r0, [pc, #164]	; (8007464 <_vfiprintf_r+0x224>)
 80073c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073c4:	2206      	movs	r2, #6
 80073c6:	f7f8 ff03 	bl	80001d0 <memchr>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d03f      	beq.n	800744e <_vfiprintf_r+0x20e>
 80073ce:	4b26      	ldr	r3, [pc, #152]	; (8007468 <_vfiprintf_r+0x228>)
 80073d0:	bb1b      	cbnz	r3, 800741a <_vfiprintf_r+0x1da>
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	3307      	adds	r3, #7
 80073d6:	f023 0307 	bic.w	r3, r3, #7
 80073da:	3308      	adds	r3, #8
 80073dc:	9303      	str	r3, [sp, #12]
 80073de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e0:	443b      	add	r3, r7
 80073e2:	9309      	str	r3, [sp, #36]	; 0x24
 80073e4:	e768      	b.n	80072b8 <_vfiprintf_r+0x78>
 80073e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ea:	460c      	mov	r4, r1
 80073ec:	2001      	movs	r0, #1
 80073ee:	e7a6      	b.n	800733e <_vfiprintf_r+0xfe>
 80073f0:	2300      	movs	r3, #0
 80073f2:	3401      	adds	r4, #1
 80073f4:	9305      	str	r3, [sp, #20]
 80073f6:	4619      	mov	r1, r3
 80073f8:	f04f 0c0a 	mov.w	ip, #10
 80073fc:	4620      	mov	r0, r4
 80073fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007402:	3a30      	subs	r2, #48	; 0x30
 8007404:	2a09      	cmp	r2, #9
 8007406:	d903      	bls.n	8007410 <_vfiprintf_r+0x1d0>
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0c6      	beq.n	800739a <_vfiprintf_r+0x15a>
 800740c:	9105      	str	r1, [sp, #20]
 800740e:	e7c4      	b.n	800739a <_vfiprintf_r+0x15a>
 8007410:	fb0c 2101 	mla	r1, ip, r1, r2
 8007414:	4604      	mov	r4, r0
 8007416:	2301      	movs	r3, #1
 8007418:	e7f0      	b.n	80073fc <_vfiprintf_r+0x1bc>
 800741a:	ab03      	add	r3, sp, #12
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	462a      	mov	r2, r5
 8007420:	4b12      	ldr	r3, [pc, #72]	; (800746c <_vfiprintf_r+0x22c>)
 8007422:	a904      	add	r1, sp, #16
 8007424:	4630      	mov	r0, r6
 8007426:	f7fe fb35 	bl	8005a94 <_printf_float>
 800742a:	4607      	mov	r7, r0
 800742c:	1c78      	adds	r0, r7, #1
 800742e:	d1d6      	bne.n	80073de <_vfiprintf_r+0x19e>
 8007430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007432:	07d9      	lsls	r1, r3, #31
 8007434:	d405      	bmi.n	8007442 <_vfiprintf_r+0x202>
 8007436:	89ab      	ldrh	r3, [r5, #12]
 8007438:	059a      	lsls	r2, r3, #22
 800743a:	d402      	bmi.n	8007442 <_vfiprintf_r+0x202>
 800743c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800743e:	f7ff f857 	bl	80064f0 <__retarget_lock_release_recursive>
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	065b      	lsls	r3, r3, #25
 8007446:	f53f af1d 	bmi.w	8007284 <_vfiprintf_r+0x44>
 800744a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800744c:	e71c      	b.n	8007288 <_vfiprintf_r+0x48>
 800744e:	ab03      	add	r3, sp, #12
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	462a      	mov	r2, r5
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <_vfiprintf_r+0x22c>)
 8007456:	a904      	add	r1, sp, #16
 8007458:	4630      	mov	r0, r6
 800745a:	f7fe fdbf 	bl	8005fdc <_printf_i>
 800745e:	e7e4      	b.n	800742a <_vfiprintf_r+0x1ea>
 8007460:	080093e5 	.word	0x080093e5
 8007464:	080093ef 	.word	0x080093ef
 8007468:	08005a95 	.word	0x08005a95
 800746c:	0800721b 	.word	0x0800721b
 8007470:	080093eb 	.word	0x080093eb

08007474 <malloc>:
 8007474:	4b02      	ldr	r3, [pc, #8]	; (8007480 <malloc+0xc>)
 8007476:	4601      	mov	r1, r0
 8007478:	6818      	ldr	r0, [r3, #0]
 800747a:	f000 b823 	b.w	80074c4 <_malloc_r>
 800747e:	bf00      	nop
 8007480:	2000006c 	.word	0x2000006c

08007484 <sbrk_aligned>:
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	4e0e      	ldr	r6, [pc, #56]	; (80074c0 <sbrk_aligned+0x3c>)
 8007488:	460c      	mov	r4, r1
 800748a:	6831      	ldr	r1, [r6, #0]
 800748c:	4605      	mov	r5, r0
 800748e:	b911      	cbnz	r1, 8007496 <sbrk_aligned+0x12>
 8007490:	f000 fe5e 	bl	8008150 <_sbrk_r>
 8007494:	6030      	str	r0, [r6, #0]
 8007496:	4621      	mov	r1, r4
 8007498:	4628      	mov	r0, r5
 800749a:	f000 fe59 	bl	8008150 <_sbrk_r>
 800749e:	1c43      	adds	r3, r0, #1
 80074a0:	d00a      	beq.n	80074b8 <sbrk_aligned+0x34>
 80074a2:	1cc4      	adds	r4, r0, #3
 80074a4:	f024 0403 	bic.w	r4, r4, #3
 80074a8:	42a0      	cmp	r0, r4
 80074aa:	d007      	beq.n	80074bc <sbrk_aligned+0x38>
 80074ac:	1a21      	subs	r1, r4, r0
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 fe4e 	bl	8008150 <_sbrk_r>
 80074b4:	3001      	adds	r0, #1
 80074b6:	d101      	bne.n	80074bc <sbrk_aligned+0x38>
 80074b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80074bc:	4620      	mov	r0, r4
 80074be:	bd70      	pop	{r4, r5, r6, pc}
 80074c0:	20000578 	.word	0x20000578

080074c4 <_malloc_r>:
 80074c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c8:	1ccd      	adds	r5, r1, #3
 80074ca:	f025 0503 	bic.w	r5, r5, #3
 80074ce:	3508      	adds	r5, #8
 80074d0:	2d0c      	cmp	r5, #12
 80074d2:	bf38      	it	cc
 80074d4:	250c      	movcc	r5, #12
 80074d6:	2d00      	cmp	r5, #0
 80074d8:	4607      	mov	r7, r0
 80074da:	db01      	blt.n	80074e0 <_malloc_r+0x1c>
 80074dc:	42a9      	cmp	r1, r5
 80074de:	d905      	bls.n	80074ec <_malloc_r+0x28>
 80074e0:	230c      	movs	r3, #12
 80074e2:	603b      	str	r3, [r7, #0]
 80074e4:	2600      	movs	r6, #0
 80074e6:	4630      	mov	r0, r6
 80074e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075c0 <_malloc_r+0xfc>
 80074f0:	f000 f916 	bl	8007720 <__malloc_lock>
 80074f4:	f8d8 3000 	ldr.w	r3, [r8]
 80074f8:	461c      	mov	r4, r3
 80074fa:	bb5c      	cbnz	r4, 8007554 <_malloc_r+0x90>
 80074fc:	4629      	mov	r1, r5
 80074fe:	4638      	mov	r0, r7
 8007500:	f7ff ffc0 	bl	8007484 <sbrk_aligned>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	4604      	mov	r4, r0
 8007508:	d155      	bne.n	80075b6 <_malloc_r+0xf2>
 800750a:	f8d8 4000 	ldr.w	r4, [r8]
 800750e:	4626      	mov	r6, r4
 8007510:	2e00      	cmp	r6, #0
 8007512:	d145      	bne.n	80075a0 <_malloc_r+0xdc>
 8007514:	2c00      	cmp	r4, #0
 8007516:	d048      	beq.n	80075aa <_malloc_r+0xe6>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	4631      	mov	r1, r6
 800751c:	4638      	mov	r0, r7
 800751e:	eb04 0903 	add.w	r9, r4, r3
 8007522:	f000 fe15 	bl	8008150 <_sbrk_r>
 8007526:	4581      	cmp	r9, r0
 8007528:	d13f      	bne.n	80075aa <_malloc_r+0xe6>
 800752a:	6821      	ldr	r1, [r4, #0]
 800752c:	1a6d      	subs	r5, r5, r1
 800752e:	4629      	mov	r1, r5
 8007530:	4638      	mov	r0, r7
 8007532:	f7ff ffa7 	bl	8007484 <sbrk_aligned>
 8007536:	3001      	adds	r0, #1
 8007538:	d037      	beq.n	80075aa <_malloc_r+0xe6>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	442b      	add	r3, r5
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	f8d8 3000 	ldr.w	r3, [r8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d038      	beq.n	80075ba <_malloc_r+0xf6>
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	42a2      	cmp	r2, r4
 800754c:	d12b      	bne.n	80075a6 <_malloc_r+0xe2>
 800754e:	2200      	movs	r2, #0
 8007550:	605a      	str	r2, [r3, #4]
 8007552:	e00f      	b.n	8007574 <_malloc_r+0xb0>
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	1b52      	subs	r2, r2, r5
 8007558:	d41f      	bmi.n	800759a <_malloc_r+0xd6>
 800755a:	2a0b      	cmp	r2, #11
 800755c:	d917      	bls.n	800758e <_malloc_r+0xca>
 800755e:	1961      	adds	r1, r4, r5
 8007560:	42a3      	cmp	r3, r4
 8007562:	6025      	str	r5, [r4, #0]
 8007564:	bf18      	it	ne
 8007566:	6059      	strne	r1, [r3, #4]
 8007568:	6863      	ldr	r3, [r4, #4]
 800756a:	bf08      	it	eq
 800756c:	f8c8 1000 	streq.w	r1, [r8]
 8007570:	5162      	str	r2, [r4, r5]
 8007572:	604b      	str	r3, [r1, #4]
 8007574:	4638      	mov	r0, r7
 8007576:	f104 060b 	add.w	r6, r4, #11
 800757a:	f000 f8d7 	bl	800772c <__malloc_unlock>
 800757e:	f026 0607 	bic.w	r6, r6, #7
 8007582:	1d23      	adds	r3, r4, #4
 8007584:	1af2      	subs	r2, r6, r3
 8007586:	d0ae      	beq.n	80074e6 <_malloc_r+0x22>
 8007588:	1b9b      	subs	r3, r3, r6
 800758a:	50a3      	str	r3, [r4, r2]
 800758c:	e7ab      	b.n	80074e6 <_malloc_r+0x22>
 800758e:	42a3      	cmp	r3, r4
 8007590:	6862      	ldr	r2, [r4, #4]
 8007592:	d1dd      	bne.n	8007550 <_malloc_r+0x8c>
 8007594:	f8c8 2000 	str.w	r2, [r8]
 8007598:	e7ec      	b.n	8007574 <_malloc_r+0xb0>
 800759a:	4623      	mov	r3, r4
 800759c:	6864      	ldr	r4, [r4, #4]
 800759e:	e7ac      	b.n	80074fa <_malloc_r+0x36>
 80075a0:	4634      	mov	r4, r6
 80075a2:	6876      	ldr	r6, [r6, #4]
 80075a4:	e7b4      	b.n	8007510 <_malloc_r+0x4c>
 80075a6:	4613      	mov	r3, r2
 80075a8:	e7cc      	b.n	8007544 <_malloc_r+0x80>
 80075aa:	230c      	movs	r3, #12
 80075ac:	603b      	str	r3, [r7, #0]
 80075ae:	4638      	mov	r0, r7
 80075b0:	f000 f8bc 	bl	800772c <__malloc_unlock>
 80075b4:	e797      	b.n	80074e6 <_malloc_r+0x22>
 80075b6:	6025      	str	r5, [r4, #0]
 80075b8:	e7dc      	b.n	8007574 <_malloc_r+0xb0>
 80075ba:	605b      	str	r3, [r3, #4]
 80075bc:	deff      	udf	#255	; 0xff
 80075be:	bf00      	nop
 80075c0:	20000574 	.word	0x20000574

080075c4 <__sflush_r>:
 80075c4:	898a      	ldrh	r2, [r1, #12]
 80075c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ca:	4605      	mov	r5, r0
 80075cc:	0710      	lsls	r0, r2, #28
 80075ce:	460c      	mov	r4, r1
 80075d0:	d458      	bmi.n	8007684 <__sflush_r+0xc0>
 80075d2:	684b      	ldr	r3, [r1, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dc05      	bgt.n	80075e4 <__sflush_r+0x20>
 80075d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dc02      	bgt.n	80075e4 <__sflush_r+0x20>
 80075de:	2000      	movs	r0, #0
 80075e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075e6:	2e00      	cmp	r6, #0
 80075e8:	d0f9      	beq.n	80075de <__sflush_r+0x1a>
 80075ea:	2300      	movs	r3, #0
 80075ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075f0:	682f      	ldr	r7, [r5, #0]
 80075f2:	6a21      	ldr	r1, [r4, #32]
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	d032      	beq.n	800765e <__sflush_r+0x9a>
 80075f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	075a      	lsls	r2, r3, #29
 80075fe:	d505      	bpl.n	800760c <__sflush_r+0x48>
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	1ac0      	subs	r0, r0, r3
 8007604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007606:	b10b      	cbz	r3, 800760c <__sflush_r+0x48>
 8007608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800760a:	1ac0      	subs	r0, r0, r3
 800760c:	2300      	movs	r3, #0
 800760e:	4602      	mov	r2, r0
 8007610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007612:	6a21      	ldr	r1, [r4, #32]
 8007614:	4628      	mov	r0, r5
 8007616:	47b0      	blx	r6
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	d106      	bne.n	800762c <__sflush_r+0x68>
 800761e:	6829      	ldr	r1, [r5, #0]
 8007620:	291d      	cmp	r1, #29
 8007622:	d82b      	bhi.n	800767c <__sflush_r+0xb8>
 8007624:	4a29      	ldr	r2, [pc, #164]	; (80076cc <__sflush_r+0x108>)
 8007626:	410a      	asrs	r2, r1
 8007628:	07d6      	lsls	r6, r2, #31
 800762a:	d427      	bmi.n	800767c <__sflush_r+0xb8>
 800762c:	2200      	movs	r2, #0
 800762e:	6062      	str	r2, [r4, #4]
 8007630:	04d9      	lsls	r1, r3, #19
 8007632:	6922      	ldr	r2, [r4, #16]
 8007634:	6022      	str	r2, [r4, #0]
 8007636:	d504      	bpl.n	8007642 <__sflush_r+0x7e>
 8007638:	1c42      	adds	r2, r0, #1
 800763a:	d101      	bne.n	8007640 <__sflush_r+0x7c>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	b903      	cbnz	r3, 8007642 <__sflush_r+0x7e>
 8007640:	6560      	str	r0, [r4, #84]	; 0x54
 8007642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007644:	602f      	str	r7, [r5, #0]
 8007646:	2900      	cmp	r1, #0
 8007648:	d0c9      	beq.n	80075de <__sflush_r+0x1a>
 800764a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800764e:	4299      	cmp	r1, r3
 8007650:	d002      	beq.n	8007658 <__sflush_r+0x94>
 8007652:	4628      	mov	r0, r5
 8007654:	f000 fde0 	bl	8008218 <_free_r>
 8007658:	2000      	movs	r0, #0
 800765a:	6360      	str	r0, [r4, #52]	; 0x34
 800765c:	e7c0      	b.n	80075e0 <__sflush_r+0x1c>
 800765e:	2301      	movs	r3, #1
 8007660:	4628      	mov	r0, r5
 8007662:	47b0      	blx	r6
 8007664:	1c41      	adds	r1, r0, #1
 8007666:	d1c8      	bne.n	80075fa <__sflush_r+0x36>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0c5      	beq.n	80075fa <__sflush_r+0x36>
 800766e:	2b1d      	cmp	r3, #29
 8007670:	d001      	beq.n	8007676 <__sflush_r+0xb2>
 8007672:	2b16      	cmp	r3, #22
 8007674:	d101      	bne.n	800767a <__sflush_r+0xb6>
 8007676:	602f      	str	r7, [r5, #0]
 8007678:	e7b1      	b.n	80075de <__sflush_r+0x1a>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	e7ad      	b.n	80075e0 <__sflush_r+0x1c>
 8007684:	690f      	ldr	r7, [r1, #16]
 8007686:	2f00      	cmp	r7, #0
 8007688:	d0a9      	beq.n	80075de <__sflush_r+0x1a>
 800768a:	0793      	lsls	r3, r2, #30
 800768c:	680e      	ldr	r6, [r1, #0]
 800768e:	bf08      	it	eq
 8007690:	694b      	ldreq	r3, [r1, #20]
 8007692:	600f      	str	r7, [r1, #0]
 8007694:	bf18      	it	ne
 8007696:	2300      	movne	r3, #0
 8007698:	eba6 0807 	sub.w	r8, r6, r7
 800769c:	608b      	str	r3, [r1, #8]
 800769e:	f1b8 0f00 	cmp.w	r8, #0
 80076a2:	dd9c      	ble.n	80075de <__sflush_r+0x1a>
 80076a4:	6a21      	ldr	r1, [r4, #32]
 80076a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076a8:	4643      	mov	r3, r8
 80076aa:	463a      	mov	r2, r7
 80076ac:	4628      	mov	r0, r5
 80076ae:	47b0      	blx	r6
 80076b0:	2800      	cmp	r0, #0
 80076b2:	dc06      	bgt.n	80076c2 <__sflush_r+0xfe>
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ba:	81a3      	strh	r3, [r4, #12]
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c0:	e78e      	b.n	80075e0 <__sflush_r+0x1c>
 80076c2:	4407      	add	r7, r0
 80076c4:	eba8 0800 	sub.w	r8, r8, r0
 80076c8:	e7e9      	b.n	800769e <__sflush_r+0xda>
 80076ca:	bf00      	nop
 80076cc:	dfbffffe 	.word	0xdfbffffe

080076d0 <_fflush_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	690b      	ldr	r3, [r1, #16]
 80076d4:	4605      	mov	r5, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	b913      	cbnz	r3, 80076e0 <_fflush_r+0x10>
 80076da:	2500      	movs	r5, #0
 80076dc:	4628      	mov	r0, r5
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	b118      	cbz	r0, 80076ea <_fflush_r+0x1a>
 80076e2:	6a03      	ldr	r3, [r0, #32]
 80076e4:	b90b      	cbnz	r3, 80076ea <_fflush_r+0x1a>
 80076e6:	f7fe fe27 	bl	8006338 <__sinit>
 80076ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f3      	beq.n	80076da <_fflush_r+0xa>
 80076f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076f4:	07d0      	lsls	r0, r2, #31
 80076f6:	d404      	bmi.n	8007702 <_fflush_r+0x32>
 80076f8:	0599      	lsls	r1, r3, #22
 80076fa:	d402      	bmi.n	8007702 <_fflush_r+0x32>
 80076fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076fe:	f7fe fef6 	bl	80064ee <__retarget_lock_acquire_recursive>
 8007702:	4628      	mov	r0, r5
 8007704:	4621      	mov	r1, r4
 8007706:	f7ff ff5d 	bl	80075c4 <__sflush_r>
 800770a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800770c:	07da      	lsls	r2, r3, #31
 800770e:	4605      	mov	r5, r0
 8007710:	d4e4      	bmi.n	80076dc <_fflush_r+0xc>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	059b      	lsls	r3, r3, #22
 8007716:	d4e1      	bmi.n	80076dc <_fflush_r+0xc>
 8007718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800771a:	f7fe fee9 	bl	80064f0 <__retarget_lock_release_recursive>
 800771e:	e7dd      	b.n	80076dc <_fflush_r+0xc>

08007720 <__malloc_lock>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__malloc_lock+0x8>)
 8007722:	f7fe bee4 	b.w	80064ee <__retarget_lock_acquire_recursive>
 8007726:	bf00      	nop
 8007728:	20000570 	.word	0x20000570

0800772c <__malloc_unlock>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__malloc_unlock+0x8>)
 800772e:	f7fe bedf 	b.w	80064f0 <__retarget_lock_release_recursive>
 8007732:	bf00      	nop
 8007734:	20000570 	.word	0x20000570

08007738 <_Balloc>:
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	69c6      	ldr	r6, [r0, #28]
 800773c:	4604      	mov	r4, r0
 800773e:	460d      	mov	r5, r1
 8007740:	b976      	cbnz	r6, 8007760 <_Balloc+0x28>
 8007742:	2010      	movs	r0, #16
 8007744:	f7ff fe96 	bl	8007474 <malloc>
 8007748:	4602      	mov	r2, r0
 800774a:	61e0      	str	r0, [r4, #28]
 800774c:	b920      	cbnz	r0, 8007758 <_Balloc+0x20>
 800774e:	4b18      	ldr	r3, [pc, #96]	; (80077b0 <_Balloc+0x78>)
 8007750:	4818      	ldr	r0, [pc, #96]	; (80077b4 <_Balloc+0x7c>)
 8007752:	216b      	movs	r1, #107	; 0x6b
 8007754:	f000 fd2c 	bl	80081b0 <__assert_func>
 8007758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800775c:	6006      	str	r6, [r0, #0]
 800775e:	60c6      	str	r6, [r0, #12]
 8007760:	69e6      	ldr	r6, [r4, #28]
 8007762:	68f3      	ldr	r3, [r6, #12]
 8007764:	b183      	cbz	r3, 8007788 <_Balloc+0x50>
 8007766:	69e3      	ldr	r3, [r4, #28]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800776e:	b9b8      	cbnz	r0, 80077a0 <_Balloc+0x68>
 8007770:	2101      	movs	r1, #1
 8007772:	fa01 f605 	lsl.w	r6, r1, r5
 8007776:	1d72      	adds	r2, r6, #5
 8007778:	0092      	lsls	r2, r2, #2
 800777a:	4620      	mov	r0, r4
 800777c:	f000 fd36 	bl	80081ec <_calloc_r>
 8007780:	b160      	cbz	r0, 800779c <_Balloc+0x64>
 8007782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007786:	e00e      	b.n	80077a6 <_Balloc+0x6e>
 8007788:	2221      	movs	r2, #33	; 0x21
 800778a:	2104      	movs	r1, #4
 800778c:	4620      	mov	r0, r4
 800778e:	f000 fd2d 	bl	80081ec <_calloc_r>
 8007792:	69e3      	ldr	r3, [r4, #28]
 8007794:	60f0      	str	r0, [r6, #12]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e4      	bne.n	8007766 <_Balloc+0x2e>
 800779c:	2000      	movs	r0, #0
 800779e:	bd70      	pop	{r4, r5, r6, pc}
 80077a0:	6802      	ldr	r2, [r0, #0]
 80077a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077a6:	2300      	movs	r3, #0
 80077a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077ac:	e7f7      	b.n	800779e <_Balloc+0x66>
 80077ae:	bf00      	nop
 80077b0:	08009365 	.word	0x08009365
 80077b4:	080093f6 	.word	0x080093f6

080077b8 <_Bfree>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	69c6      	ldr	r6, [r0, #28]
 80077bc:	4605      	mov	r5, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	b976      	cbnz	r6, 80077e0 <_Bfree+0x28>
 80077c2:	2010      	movs	r0, #16
 80077c4:	f7ff fe56 	bl	8007474 <malloc>
 80077c8:	4602      	mov	r2, r0
 80077ca:	61e8      	str	r0, [r5, #28]
 80077cc:	b920      	cbnz	r0, 80077d8 <_Bfree+0x20>
 80077ce:	4b09      	ldr	r3, [pc, #36]	; (80077f4 <_Bfree+0x3c>)
 80077d0:	4809      	ldr	r0, [pc, #36]	; (80077f8 <_Bfree+0x40>)
 80077d2:	218f      	movs	r1, #143	; 0x8f
 80077d4:	f000 fcec 	bl	80081b0 <__assert_func>
 80077d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077dc:	6006      	str	r6, [r0, #0]
 80077de:	60c6      	str	r6, [r0, #12]
 80077e0:	b13c      	cbz	r4, 80077f2 <_Bfree+0x3a>
 80077e2:	69eb      	ldr	r3, [r5, #28]
 80077e4:	6862      	ldr	r2, [r4, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077ec:	6021      	str	r1, [r4, #0]
 80077ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077f2:	bd70      	pop	{r4, r5, r6, pc}
 80077f4:	08009365 	.word	0x08009365
 80077f8:	080093f6 	.word	0x080093f6

080077fc <__multadd>:
 80077fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007800:	690d      	ldr	r5, [r1, #16]
 8007802:	4607      	mov	r7, r0
 8007804:	460c      	mov	r4, r1
 8007806:	461e      	mov	r6, r3
 8007808:	f101 0c14 	add.w	ip, r1, #20
 800780c:	2000      	movs	r0, #0
 800780e:	f8dc 3000 	ldr.w	r3, [ip]
 8007812:	b299      	uxth	r1, r3
 8007814:	fb02 6101 	mla	r1, r2, r1, r6
 8007818:	0c1e      	lsrs	r6, r3, #16
 800781a:	0c0b      	lsrs	r3, r1, #16
 800781c:	fb02 3306 	mla	r3, r2, r6, r3
 8007820:	b289      	uxth	r1, r1
 8007822:	3001      	adds	r0, #1
 8007824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007828:	4285      	cmp	r5, r0
 800782a:	f84c 1b04 	str.w	r1, [ip], #4
 800782e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007832:	dcec      	bgt.n	800780e <__multadd+0x12>
 8007834:	b30e      	cbz	r6, 800787a <__multadd+0x7e>
 8007836:	68a3      	ldr	r3, [r4, #8]
 8007838:	42ab      	cmp	r3, r5
 800783a:	dc19      	bgt.n	8007870 <__multadd+0x74>
 800783c:	6861      	ldr	r1, [r4, #4]
 800783e:	4638      	mov	r0, r7
 8007840:	3101      	adds	r1, #1
 8007842:	f7ff ff79 	bl	8007738 <_Balloc>
 8007846:	4680      	mov	r8, r0
 8007848:	b928      	cbnz	r0, 8007856 <__multadd+0x5a>
 800784a:	4602      	mov	r2, r0
 800784c:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <__multadd+0x84>)
 800784e:	480d      	ldr	r0, [pc, #52]	; (8007884 <__multadd+0x88>)
 8007850:	21ba      	movs	r1, #186	; 0xba
 8007852:	f000 fcad 	bl	80081b0 <__assert_func>
 8007856:	6922      	ldr	r2, [r4, #16]
 8007858:	3202      	adds	r2, #2
 800785a:	f104 010c 	add.w	r1, r4, #12
 800785e:	0092      	lsls	r2, r2, #2
 8007860:	300c      	adds	r0, #12
 8007862:	f000 fc97 	bl	8008194 <memcpy>
 8007866:	4621      	mov	r1, r4
 8007868:	4638      	mov	r0, r7
 800786a:	f7ff ffa5 	bl	80077b8 <_Bfree>
 800786e:	4644      	mov	r4, r8
 8007870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007874:	3501      	adds	r5, #1
 8007876:	615e      	str	r6, [r3, #20]
 8007878:	6125      	str	r5, [r4, #16]
 800787a:	4620      	mov	r0, r4
 800787c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007880:	080093d4 	.word	0x080093d4
 8007884:	080093f6 	.word	0x080093f6

08007888 <__hi0bits>:
 8007888:	0c03      	lsrs	r3, r0, #16
 800788a:	041b      	lsls	r3, r3, #16
 800788c:	b9d3      	cbnz	r3, 80078c4 <__hi0bits+0x3c>
 800788e:	0400      	lsls	r0, r0, #16
 8007890:	2310      	movs	r3, #16
 8007892:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007896:	bf04      	itt	eq
 8007898:	0200      	lsleq	r0, r0, #8
 800789a:	3308      	addeq	r3, #8
 800789c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078a0:	bf04      	itt	eq
 80078a2:	0100      	lsleq	r0, r0, #4
 80078a4:	3304      	addeq	r3, #4
 80078a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078aa:	bf04      	itt	eq
 80078ac:	0080      	lsleq	r0, r0, #2
 80078ae:	3302      	addeq	r3, #2
 80078b0:	2800      	cmp	r0, #0
 80078b2:	db05      	blt.n	80078c0 <__hi0bits+0x38>
 80078b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078b8:	f103 0301 	add.w	r3, r3, #1
 80078bc:	bf08      	it	eq
 80078be:	2320      	moveq	r3, #32
 80078c0:	4618      	mov	r0, r3
 80078c2:	4770      	bx	lr
 80078c4:	2300      	movs	r3, #0
 80078c6:	e7e4      	b.n	8007892 <__hi0bits+0xa>

080078c8 <__lo0bits>:
 80078c8:	6803      	ldr	r3, [r0, #0]
 80078ca:	f013 0207 	ands.w	r2, r3, #7
 80078ce:	d00c      	beq.n	80078ea <__lo0bits+0x22>
 80078d0:	07d9      	lsls	r1, r3, #31
 80078d2:	d422      	bmi.n	800791a <__lo0bits+0x52>
 80078d4:	079a      	lsls	r2, r3, #30
 80078d6:	bf49      	itett	mi
 80078d8:	085b      	lsrmi	r3, r3, #1
 80078da:	089b      	lsrpl	r3, r3, #2
 80078dc:	6003      	strmi	r3, [r0, #0]
 80078de:	2201      	movmi	r2, #1
 80078e0:	bf5c      	itt	pl
 80078e2:	6003      	strpl	r3, [r0, #0]
 80078e4:	2202      	movpl	r2, #2
 80078e6:	4610      	mov	r0, r2
 80078e8:	4770      	bx	lr
 80078ea:	b299      	uxth	r1, r3
 80078ec:	b909      	cbnz	r1, 80078f2 <__lo0bits+0x2a>
 80078ee:	0c1b      	lsrs	r3, r3, #16
 80078f0:	2210      	movs	r2, #16
 80078f2:	b2d9      	uxtb	r1, r3
 80078f4:	b909      	cbnz	r1, 80078fa <__lo0bits+0x32>
 80078f6:	3208      	adds	r2, #8
 80078f8:	0a1b      	lsrs	r3, r3, #8
 80078fa:	0719      	lsls	r1, r3, #28
 80078fc:	bf04      	itt	eq
 80078fe:	091b      	lsreq	r3, r3, #4
 8007900:	3204      	addeq	r2, #4
 8007902:	0799      	lsls	r1, r3, #30
 8007904:	bf04      	itt	eq
 8007906:	089b      	lsreq	r3, r3, #2
 8007908:	3202      	addeq	r2, #2
 800790a:	07d9      	lsls	r1, r3, #31
 800790c:	d403      	bmi.n	8007916 <__lo0bits+0x4e>
 800790e:	085b      	lsrs	r3, r3, #1
 8007910:	f102 0201 	add.w	r2, r2, #1
 8007914:	d003      	beq.n	800791e <__lo0bits+0x56>
 8007916:	6003      	str	r3, [r0, #0]
 8007918:	e7e5      	b.n	80078e6 <__lo0bits+0x1e>
 800791a:	2200      	movs	r2, #0
 800791c:	e7e3      	b.n	80078e6 <__lo0bits+0x1e>
 800791e:	2220      	movs	r2, #32
 8007920:	e7e1      	b.n	80078e6 <__lo0bits+0x1e>
	...

08007924 <__i2b>:
 8007924:	b510      	push	{r4, lr}
 8007926:	460c      	mov	r4, r1
 8007928:	2101      	movs	r1, #1
 800792a:	f7ff ff05 	bl	8007738 <_Balloc>
 800792e:	4602      	mov	r2, r0
 8007930:	b928      	cbnz	r0, 800793e <__i2b+0x1a>
 8007932:	4b05      	ldr	r3, [pc, #20]	; (8007948 <__i2b+0x24>)
 8007934:	4805      	ldr	r0, [pc, #20]	; (800794c <__i2b+0x28>)
 8007936:	f240 1145 	movw	r1, #325	; 0x145
 800793a:	f000 fc39 	bl	80081b0 <__assert_func>
 800793e:	2301      	movs	r3, #1
 8007940:	6144      	str	r4, [r0, #20]
 8007942:	6103      	str	r3, [r0, #16]
 8007944:	bd10      	pop	{r4, pc}
 8007946:	bf00      	nop
 8007948:	080093d4 	.word	0x080093d4
 800794c:	080093f6 	.word	0x080093f6

08007950 <__multiply>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	4691      	mov	r9, r2
 8007956:	690a      	ldr	r2, [r1, #16]
 8007958:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800795c:	429a      	cmp	r2, r3
 800795e:	bfb8      	it	lt
 8007960:	460b      	movlt	r3, r1
 8007962:	460c      	mov	r4, r1
 8007964:	bfbc      	itt	lt
 8007966:	464c      	movlt	r4, r9
 8007968:	4699      	movlt	r9, r3
 800796a:	6927      	ldr	r7, [r4, #16]
 800796c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007970:	68a3      	ldr	r3, [r4, #8]
 8007972:	6861      	ldr	r1, [r4, #4]
 8007974:	eb07 060a 	add.w	r6, r7, sl
 8007978:	42b3      	cmp	r3, r6
 800797a:	b085      	sub	sp, #20
 800797c:	bfb8      	it	lt
 800797e:	3101      	addlt	r1, #1
 8007980:	f7ff feda 	bl	8007738 <_Balloc>
 8007984:	b930      	cbnz	r0, 8007994 <__multiply+0x44>
 8007986:	4602      	mov	r2, r0
 8007988:	4b44      	ldr	r3, [pc, #272]	; (8007a9c <__multiply+0x14c>)
 800798a:	4845      	ldr	r0, [pc, #276]	; (8007aa0 <__multiply+0x150>)
 800798c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007990:	f000 fc0e 	bl	80081b0 <__assert_func>
 8007994:	f100 0514 	add.w	r5, r0, #20
 8007998:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800799c:	462b      	mov	r3, r5
 800799e:	2200      	movs	r2, #0
 80079a0:	4543      	cmp	r3, r8
 80079a2:	d321      	bcc.n	80079e8 <__multiply+0x98>
 80079a4:	f104 0314 	add.w	r3, r4, #20
 80079a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079ac:	f109 0314 	add.w	r3, r9, #20
 80079b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079b4:	9202      	str	r2, [sp, #8]
 80079b6:	1b3a      	subs	r2, r7, r4
 80079b8:	3a15      	subs	r2, #21
 80079ba:	f022 0203 	bic.w	r2, r2, #3
 80079be:	3204      	adds	r2, #4
 80079c0:	f104 0115 	add.w	r1, r4, #21
 80079c4:	428f      	cmp	r7, r1
 80079c6:	bf38      	it	cc
 80079c8:	2204      	movcc	r2, #4
 80079ca:	9201      	str	r2, [sp, #4]
 80079cc:	9a02      	ldr	r2, [sp, #8]
 80079ce:	9303      	str	r3, [sp, #12]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d80c      	bhi.n	80079ee <__multiply+0x9e>
 80079d4:	2e00      	cmp	r6, #0
 80079d6:	dd03      	ble.n	80079e0 <__multiply+0x90>
 80079d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d05b      	beq.n	8007a98 <__multiply+0x148>
 80079e0:	6106      	str	r6, [r0, #16]
 80079e2:	b005      	add	sp, #20
 80079e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e8:	f843 2b04 	str.w	r2, [r3], #4
 80079ec:	e7d8      	b.n	80079a0 <__multiply+0x50>
 80079ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80079f2:	f1ba 0f00 	cmp.w	sl, #0
 80079f6:	d024      	beq.n	8007a42 <__multiply+0xf2>
 80079f8:	f104 0e14 	add.w	lr, r4, #20
 80079fc:	46a9      	mov	r9, r5
 80079fe:	f04f 0c00 	mov.w	ip, #0
 8007a02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a06:	f8d9 1000 	ldr.w	r1, [r9]
 8007a0a:	fa1f fb82 	uxth.w	fp, r2
 8007a0e:	b289      	uxth	r1, r1
 8007a10:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a18:	f8d9 2000 	ldr.w	r2, [r9]
 8007a1c:	4461      	add	r1, ip
 8007a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a22:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a2a:	b289      	uxth	r1, r1
 8007a2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a30:	4577      	cmp	r7, lr
 8007a32:	f849 1b04 	str.w	r1, [r9], #4
 8007a36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a3a:	d8e2      	bhi.n	8007a02 <__multiply+0xb2>
 8007a3c:	9a01      	ldr	r2, [sp, #4]
 8007a3e:	f845 c002 	str.w	ip, [r5, r2]
 8007a42:	9a03      	ldr	r2, [sp, #12]
 8007a44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	f1b9 0f00 	cmp.w	r9, #0
 8007a4e:	d021      	beq.n	8007a94 <__multiply+0x144>
 8007a50:	6829      	ldr	r1, [r5, #0]
 8007a52:	f104 0c14 	add.w	ip, r4, #20
 8007a56:	46ae      	mov	lr, r5
 8007a58:	f04f 0a00 	mov.w	sl, #0
 8007a5c:	f8bc b000 	ldrh.w	fp, [ip]
 8007a60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a64:	fb09 220b 	mla	r2, r9, fp, r2
 8007a68:	4452      	add	r2, sl
 8007a6a:	b289      	uxth	r1, r1
 8007a6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a70:	f84e 1b04 	str.w	r1, [lr], #4
 8007a74:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007a78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a7c:	f8be 1000 	ldrh.w	r1, [lr]
 8007a80:	fb09 110a 	mla	r1, r9, sl, r1
 8007a84:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007a88:	4567      	cmp	r7, ip
 8007a8a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a8e:	d8e5      	bhi.n	8007a5c <__multiply+0x10c>
 8007a90:	9a01      	ldr	r2, [sp, #4]
 8007a92:	50a9      	str	r1, [r5, r2]
 8007a94:	3504      	adds	r5, #4
 8007a96:	e799      	b.n	80079cc <__multiply+0x7c>
 8007a98:	3e01      	subs	r6, #1
 8007a9a:	e79b      	b.n	80079d4 <__multiply+0x84>
 8007a9c:	080093d4 	.word	0x080093d4
 8007aa0:	080093f6 	.word	0x080093f6

08007aa4 <__pow5mult>:
 8007aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa8:	4615      	mov	r5, r2
 8007aaa:	f012 0203 	ands.w	r2, r2, #3
 8007aae:	4606      	mov	r6, r0
 8007ab0:	460f      	mov	r7, r1
 8007ab2:	d007      	beq.n	8007ac4 <__pow5mult+0x20>
 8007ab4:	4c25      	ldr	r4, [pc, #148]	; (8007b4c <__pow5mult+0xa8>)
 8007ab6:	3a01      	subs	r2, #1
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007abe:	f7ff fe9d 	bl	80077fc <__multadd>
 8007ac2:	4607      	mov	r7, r0
 8007ac4:	10ad      	asrs	r5, r5, #2
 8007ac6:	d03d      	beq.n	8007b44 <__pow5mult+0xa0>
 8007ac8:	69f4      	ldr	r4, [r6, #28]
 8007aca:	b97c      	cbnz	r4, 8007aec <__pow5mult+0x48>
 8007acc:	2010      	movs	r0, #16
 8007ace:	f7ff fcd1 	bl	8007474 <malloc>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	61f0      	str	r0, [r6, #28]
 8007ad6:	b928      	cbnz	r0, 8007ae4 <__pow5mult+0x40>
 8007ad8:	4b1d      	ldr	r3, [pc, #116]	; (8007b50 <__pow5mult+0xac>)
 8007ada:	481e      	ldr	r0, [pc, #120]	; (8007b54 <__pow5mult+0xb0>)
 8007adc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007ae0:	f000 fb66 	bl	80081b0 <__assert_func>
 8007ae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ae8:	6004      	str	r4, [r0, #0]
 8007aea:	60c4      	str	r4, [r0, #12]
 8007aec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007af0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007af4:	b94c      	cbnz	r4, 8007b0a <__pow5mult+0x66>
 8007af6:	f240 2171 	movw	r1, #625	; 0x271
 8007afa:	4630      	mov	r0, r6
 8007afc:	f7ff ff12 	bl	8007924 <__i2b>
 8007b00:	2300      	movs	r3, #0
 8007b02:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b06:	4604      	mov	r4, r0
 8007b08:	6003      	str	r3, [r0, #0]
 8007b0a:	f04f 0900 	mov.w	r9, #0
 8007b0e:	07eb      	lsls	r3, r5, #31
 8007b10:	d50a      	bpl.n	8007b28 <__pow5mult+0x84>
 8007b12:	4639      	mov	r1, r7
 8007b14:	4622      	mov	r2, r4
 8007b16:	4630      	mov	r0, r6
 8007b18:	f7ff ff1a 	bl	8007950 <__multiply>
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	4680      	mov	r8, r0
 8007b20:	4630      	mov	r0, r6
 8007b22:	f7ff fe49 	bl	80077b8 <_Bfree>
 8007b26:	4647      	mov	r7, r8
 8007b28:	106d      	asrs	r5, r5, #1
 8007b2a:	d00b      	beq.n	8007b44 <__pow5mult+0xa0>
 8007b2c:	6820      	ldr	r0, [r4, #0]
 8007b2e:	b938      	cbnz	r0, 8007b40 <__pow5mult+0x9c>
 8007b30:	4622      	mov	r2, r4
 8007b32:	4621      	mov	r1, r4
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7ff ff0b 	bl	8007950 <__multiply>
 8007b3a:	6020      	str	r0, [r4, #0]
 8007b3c:	f8c0 9000 	str.w	r9, [r0]
 8007b40:	4604      	mov	r4, r0
 8007b42:	e7e4      	b.n	8007b0e <__pow5mult+0x6a>
 8007b44:	4638      	mov	r0, r7
 8007b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b4a:	bf00      	nop
 8007b4c:	08009540 	.word	0x08009540
 8007b50:	08009365 	.word	0x08009365
 8007b54:	080093f6 	.word	0x080093f6

08007b58 <__lshift>:
 8007b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b5c:	460c      	mov	r4, r1
 8007b5e:	6849      	ldr	r1, [r1, #4]
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	4607      	mov	r7, r0
 8007b6a:	4691      	mov	r9, r2
 8007b6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b70:	f108 0601 	add.w	r6, r8, #1
 8007b74:	42b3      	cmp	r3, r6
 8007b76:	db0b      	blt.n	8007b90 <__lshift+0x38>
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff fddd 	bl	8007738 <_Balloc>
 8007b7e:	4605      	mov	r5, r0
 8007b80:	b948      	cbnz	r0, 8007b96 <__lshift+0x3e>
 8007b82:	4602      	mov	r2, r0
 8007b84:	4b28      	ldr	r3, [pc, #160]	; (8007c28 <__lshift+0xd0>)
 8007b86:	4829      	ldr	r0, [pc, #164]	; (8007c2c <__lshift+0xd4>)
 8007b88:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007b8c:	f000 fb10 	bl	80081b0 <__assert_func>
 8007b90:	3101      	adds	r1, #1
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	e7ee      	b.n	8007b74 <__lshift+0x1c>
 8007b96:	2300      	movs	r3, #0
 8007b98:	f100 0114 	add.w	r1, r0, #20
 8007b9c:	f100 0210 	add.w	r2, r0, #16
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	4553      	cmp	r3, sl
 8007ba4:	db33      	blt.n	8007c0e <__lshift+0xb6>
 8007ba6:	6920      	ldr	r0, [r4, #16]
 8007ba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bac:	f104 0314 	add.w	r3, r4, #20
 8007bb0:	f019 091f 	ands.w	r9, r9, #31
 8007bb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bbc:	d02b      	beq.n	8007c16 <__lshift+0xbe>
 8007bbe:	f1c9 0e20 	rsb	lr, r9, #32
 8007bc2:	468a      	mov	sl, r1
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	6818      	ldr	r0, [r3, #0]
 8007bc8:	fa00 f009 	lsl.w	r0, r0, r9
 8007bcc:	4310      	orrs	r0, r2
 8007bce:	f84a 0b04 	str.w	r0, [sl], #4
 8007bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd6:	459c      	cmp	ip, r3
 8007bd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bdc:	d8f3      	bhi.n	8007bc6 <__lshift+0x6e>
 8007bde:	ebac 0304 	sub.w	r3, ip, r4
 8007be2:	3b15      	subs	r3, #21
 8007be4:	f023 0303 	bic.w	r3, r3, #3
 8007be8:	3304      	adds	r3, #4
 8007bea:	f104 0015 	add.w	r0, r4, #21
 8007bee:	4584      	cmp	ip, r0
 8007bf0:	bf38      	it	cc
 8007bf2:	2304      	movcc	r3, #4
 8007bf4:	50ca      	str	r2, [r1, r3]
 8007bf6:	b10a      	cbz	r2, 8007bfc <__lshift+0xa4>
 8007bf8:	f108 0602 	add.w	r6, r8, #2
 8007bfc:	3e01      	subs	r6, #1
 8007bfe:	4638      	mov	r0, r7
 8007c00:	612e      	str	r6, [r5, #16]
 8007c02:	4621      	mov	r1, r4
 8007c04:	f7ff fdd8 	bl	80077b8 <_Bfree>
 8007c08:	4628      	mov	r0, r5
 8007c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c12:	3301      	adds	r3, #1
 8007c14:	e7c5      	b.n	8007ba2 <__lshift+0x4a>
 8007c16:	3904      	subs	r1, #4
 8007c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c20:	459c      	cmp	ip, r3
 8007c22:	d8f9      	bhi.n	8007c18 <__lshift+0xc0>
 8007c24:	e7ea      	b.n	8007bfc <__lshift+0xa4>
 8007c26:	bf00      	nop
 8007c28:	080093d4 	.word	0x080093d4
 8007c2c:	080093f6 	.word	0x080093f6

08007c30 <__mcmp>:
 8007c30:	b530      	push	{r4, r5, lr}
 8007c32:	6902      	ldr	r2, [r0, #16]
 8007c34:	690c      	ldr	r4, [r1, #16]
 8007c36:	1b12      	subs	r2, r2, r4
 8007c38:	d10e      	bne.n	8007c58 <__mcmp+0x28>
 8007c3a:	f100 0314 	add.w	r3, r0, #20
 8007c3e:	3114      	adds	r1, #20
 8007c40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c50:	42a5      	cmp	r5, r4
 8007c52:	d003      	beq.n	8007c5c <__mcmp+0x2c>
 8007c54:	d305      	bcc.n	8007c62 <__mcmp+0x32>
 8007c56:	2201      	movs	r2, #1
 8007c58:	4610      	mov	r0, r2
 8007c5a:	bd30      	pop	{r4, r5, pc}
 8007c5c:	4283      	cmp	r3, r0
 8007c5e:	d3f3      	bcc.n	8007c48 <__mcmp+0x18>
 8007c60:	e7fa      	b.n	8007c58 <__mcmp+0x28>
 8007c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c66:	e7f7      	b.n	8007c58 <__mcmp+0x28>

08007c68 <__mdiff>:
 8007c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	4606      	mov	r6, r0
 8007c70:	4611      	mov	r1, r2
 8007c72:	4620      	mov	r0, r4
 8007c74:	4690      	mov	r8, r2
 8007c76:	f7ff ffdb 	bl	8007c30 <__mcmp>
 8007c7a:	1e05      	subs	r5, r0, #0
 8007c7c:	d110      	bne.n	8007ca0 <__mdiff+0x38>
 8007c7e:	4629      	mov	r1, r5
 8007c80:	4630      	mov	r0, r6
 8007c82:	f7ff fd59 	bl	8007738 <_Balloc>
 8007c86:	b930      	cbnz	r0, 8007c96 <__mdiff+0x2e>
 8007c88:	4b3a      	ldr	r3, [pc, #232]	; (8007d74 <__mdiff+0x10c>)
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	f240 2137 	movw	r1, #567	; 0x237
 8007c90:	4839      	ldr	r0, [pc, #228]	; (8007d78 <__mdiff+0x110>)
 8007c92:	f000 fa8d 	bl	80081b0 <__assert_func>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca0:	bfa4      	itt	ge
 8007ca2:	4643      	movge	r3, r8
 8007ca4:	46a0      	movge	r8, r4
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007cac:	bfa6      	itte	ge
 8007cae:	461c      	movge	r4, r3
 8007cb0:	2500      	movge	r5, #0
 8007cb2:	2501      	movlt	r5, #1
 8007cb4:	f7ff fd40 	bl	8007738 <_Balloc>
 8007cb8:	b920      	cbnz	r0, 8007cc4 <__mdiff+0x5c>
 8007cba:	4b2e      	ldr	r3, [pc, #184]	; (8007d74 <__mdiff+0x10c>)
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	f240 2145 	movw	r1, #581	; 0x245
 8007cc2:	e7e5      	b.n	8007c90 <__mdiff+0x28>
 8007cc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007cc8:	6926      	ldr	r6, [r4, #16]
 8007cca:	60c5      	str	r5, [r0, #12]
 8007ccc:	f104 0914 	add.w	r9, r4, #20
 8007cd0:	f108 0514 	add.w	r5, r8, #20
 8007cd4:	f100 0e14 	add.w	lr, r0, #20
 8007cd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007cdc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ce0:	f108 0210 	add.w	r2, r8, #16
 8007ce4:	46f2      	mov	sl, lr
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007cec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007cf0:	fa11 f88b 	uxtah	r8, r1, fp
 8007cf4:	b299      	uxth	r1, r3
 8007cf6:	0c1b      	lsrs	r3, r3, #16
 8007cf8:	eba8 0801 	sub.w	r8, r8, r1
 8007cfc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d00:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d04:	fa1f f888 	uxth.w	r8, r8
 8007d08:	1419      	asrs	r1, r3, #16
 8007d0a:	454e      	cmp	r6, r9
 8007d0c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d10:	f84a 3b04 	str.w	r3, [sl], #4
 8007d14:	d8e8      	bhi.n	8007ce8 <__mdiff+0x80>
 8007d16:	1b33      	subs	r3, r6, r4
 8007d18:	3b15      	subs	r3, #21
 8007d1a:	f023 0303 	bic.w	r3, r3, #3
 8007d1e:	3304      	adds	r3, #4
 8007d20:	3415      	adds	r4, #21
 8007d22:	42a6      	cmp	r6, r4
 8007d24:	bf38      	it	cc
 8007d26:	2304      	movcc	r3, #4
 8007d28:	441d      	add	r5, r3
 8007d2a:	4473      	add	r3, lr
 8007d2c:	469e      	mov	lr, r3
 8007d2e:	462e      	mov	r6, r5
 8007d30:	4566      	cmp	r6, ip
 8007d32:	d30e      	bcc.n	8007d52 <__mdiff+0xea>
 8007d34:	f10c 0203 	add.w	r2, ip, #3
 8007d38:	1b52      	subs	r2, r2, r5
 8007d3a:	f022 0203 	bic.w	r2, r2, #3
 8007d3e:	3d03      	subs	r5, #3
 8007d40:	45ac      	cmp	ip, r5
 8007d42:	bf38      	it	cc
 8007d44:	2200      	movcc	r2, #0
 8007d46:	4413      	add	r3, r2
 8007d48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007d4c:	b17a      	cbz	r2, 8007d6e <__mdiff+0x106>
 8007d4e:	6107      	str	r7, [r0, #16]
 8007d50:	e7a4      	b.n	8007c9c <__mdiff+0x34>
 8007d52:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d56:	fa11 f288 	uxtah	r2, r1, r8
 8007d5a:	1414      	asrs	r4, r2, #16
 8007d5c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d60:	b292      	uxth	r2, r2
 8007d62:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d66:	f84e 2b04 	str.w	r2, [lr], #4
 8007d6a:	1421      	asrs	r1, r4, #16
 8007d6c:	e7e0      	b.n	8007d30 <__mdiff+0xc8>
 8007d6e:	3f01      	subs	r7, #1
 8007d70:	e7ea      	b.n	8007d48 <__mdiff+0xe0>
 8007d72:	bf00      	nop
 8007d74:	080093d4 	.word	0x080093d4
 8007d78:	080093f6 	.word	0x080093f6

08007d7c <__d2b>:
 8007d7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d80:	460f      	mov	r7, r1
 8007d82:	2101      	movs	r1, #1
 8007d84:	ec59 8b10 	vmov	r8, r9, d0
 8007d88:	4616      	mov	r6, r2
 8007d8a:	f7ff fcd5 	bl	8007738 <_Balloc>
 8007d8e:	4604      	mov	r4, r0
 8007d90:	b930      	cbnz	r0, 8007da0 <__d2b+0x24>
 8007d92:	4602      	mov	r2, r0
 8007d94:	4b24      	ldr	r3, [pc, #144]	; (8007e28 <__d2b+0xac>)
 8007d96:	4825      	ldr	r0, [pc, #148]	; (8007e2c <__d2b+0xb0>)
 8007d98:	f240 310f 	movw	r1, #783	; 0x30f
 8007d9c:	f000 fa08 	bl	80081b0 <__assert_func>
 8007da0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007da4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007da8:	bb2d      	cbnz	r5, 8007df6 <__d2b+0x7a>
 8007daa:	9301      	str	r3, [sp, #4]
 8007dac:	f1b8 0300 	subs.w	r3, r8, #0
 8007db0:	d026      	beq.n	8007e00 <__d2b+0x84>
 8007db2:	4668      	mov	r0, sp
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	f7ff fd87 	bl	80078c8 <__lo0bits>
 8007dba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007dbe:	b1e8      	cbz	r0, 8007dfc <__d2b+0x80>
 8007dc0:	f1c0 0320 	rsb	r3, r0, #32
 8007dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	40c2      	lsrs	r2, r0
 8007dcc:	6163      	str	r3, [r4, #20]
 8007dce:	9201      	str	r2, [sp, #4]
 8007dd0:	9b01      	ldr	r3, [sp, #4]
 8007dd2:	61a3      	str	r3, [r4, #24]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bf14      	ite	ne
 8007dd8:	2202      	movne	r2, #2
 8007dda:	2201      	moveq	r2, #1
 8007ddc:	6122      	str	r2, [r4, #16]
 8007dde:	b1bd      	cbz	r5, 8007e10 <__d2b+0x94>
 8007de0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007de4:	4405      	add	r5, r0
 8007de6:	603d      	str	r5, [r7, #0]
 8007de8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007dec:	6030      	str	r0, [r6, #0]
 8007dee:	4620      	mov	r0, r4
 8007df0:	b003      	add	sp, #12
 8007df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dfa:	e7d6      	b.n	8007daa <__d2b+0x2e>
 8007dfc:	6161      	str	r1, [r4, #20]
 8007dfe:	e7e7      	b.n	8007dd0 <__d2b+0x54>
 8007e00:	a801      	add	r0, sp, #4
 8007e02:	f7ff fd61 	bl	80078c8 <__lo0bits>
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	6163      	str	r3, [r4, #20]
 8007e0a:	3020      	adds	r0, #32
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	e7e5      	b.n	8007ddc <__d2b+0x60>
 8007e10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e18:	6038      	str	r0, [r7, #0]
 8007e1a:	6918      	ldr	r0, [r3, #16]
 8007e1c:	f7ff fd34 	bl	8007888 <__hi0bits>
 8007e20:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e24:	e7e2      	b.n	8007dec <__d2b+0x70>
 8007e26:	bf00      	nop
 8007e28:	080093d4 	.word	0x080093d4
 8007e2c:	080093f6 	.word	0x080093f6

08007e30 <__sread>:
 8007e30:	b510      	push	{r4, lr}
 8007e32:	460c      	mov	r4, r1
 8007e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e38:	f000 f978 	bl	800812c <_read_r>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	bfab      	itete	ge
 8007e40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e42:	89a3      	ldrhlt	r3, [r4, #12]
 8007e44:	181b      	addge	r3, r3, r0
 8007e46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e4a:	bfac      	ite	ge
 8007e4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e4e:	81a3      	strhlt	r3, [r4, #12]
 8007e50:	bd10      	pop	{r4, pc}

08007e52 <__swrite>:
 8007e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e56:	461f      	mov	r7, r3
 8007e58:	898b      	ldrh	r3, [r1, #12]
 8007e5a:	05db      	lsls	r3, r3, #23
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	4616      	mov	r6, r2
 8007e62:	d505      	bpl.n	8007e70 <__swrite+0x1e>
 8007e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e68:	2302      	movs	r3, #2
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f000 f94c 	bl	8008108 <_lseek_r>
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e7a:	81a3      	strh	r3, [r4, #12]
 8007e7c:	4632      	mov	r2, r6
 8007e7e:	463b      	mov	r3, r7
 8007e80:	4628      	mov	r0, r5
 8007e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e86:	f000 b973 	b.w	8008170 <_write_r>

08007e8a <__sseek>:
 8007e8a:	b510      	push	{r4, lr}
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e92:	f000 f939 	bl	8008108 <_lseek_r>
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	89a3      	ldrh	r3, [r4, #12]
 8007e9a:	bf15      	itete	ne
 8007e9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ea2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ea6:	81a3      	strheq	r3, [r4, #12]
 8007ea8:	bf18      	it	ne
 8007eaa:	81a3      	strhne	r3, [r4, #12]
 8007eac:	bd10      	pop	{r4, pc}

08007eae <__sclose>:
 8007eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb2:	f000 b8f7 	b.w	80080a4 <_close_r>

08007eb6 <__swbuf_r>:
 8007eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb8:	460e      	mov	r6, r1
 8007eba:	4614      	mov	r4, r2
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	b118      	cbz	r0, 8007ec8 <__swbuf_r+0x12>
 8007ec0:	6a03      	ldr	r3, [r0, #32]
 8007ec2:	b90b      	cbnz	r3, 8007ec8 <__swbuf_r+0x12>
 8007ec4:	f7fe fa38 	bl	8006338 <__sinit>
 8007ec8:	69a3      	ldr	r3, [r4, #24]
 8007eca:	60a3      	str	r3, [r4, #8]
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	071a      	lsls	r2, r3, #28
 8007ed0:	d525      	bpl.n	8007f1e <__swbuf_r+0x68>
 8007ed2:	6923      	ldr	r3, [r4, #16]
 8007ed4:	b31b      	cbz	r3, 8007f1e <__swbuf_r+0x68>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	6922      	ldr	r2, [r4, #16]
 8007eda:	1a98      	subs	r0, r3, r2
 8007edc:	6963      	ldr	r3, [r4, #20]
 8007ede:	b2f6      	uxtb	r6, r6
 8007ee0:	4283      	cmp	r3, r0
 8007ee2:	4637      	mov	r7, r6
 8007ee4:	dc04      	bgt.n	8007ef0 <__swbuf_r+0x3a>
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f7ff fbf1 	bl	80076d0 <_fflush_r>
 8007eee:	b9e0      	cbnz	r0, 8007f2a <__swbuf_r+0x74>
 8007ef0:	68a3      	ldr	r3, [r4, #8]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	60a3      	str	r3, [r4, #8]
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	6022      	str	r2, [r4, #0]
 8007efc:	701e      	strb	r6, [r3, #0]
 8007efe:	6962      	ldr	r2, [r4, #20]
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d004      	beq.n	8007f10 <__swbuf_r+0x5a>
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	07db      	lsls	r3, r3, #31
 8007f0a:	d506      	bpl.n	8007f1a <__swbuf_r+0x64>
 8007f0c:	2e0a      	cmp	r6, #10
 8007f0e:	d104      	bne.n	8007f1a <__swbuf_r+0x64>
 8007f10:	4621      	mov	r1, r4
 8007f12:	4628      	mov	r0, r5
 8007f14:	f7ff fbdc 	bl	80076d0 <_fflush_r>
 8007f18:	b938      	cbnz	r0, 8007f2a <__swbuf_r+0x74>
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4628      	mov	r0, r5
 8007f22:	f000 f805 	bl	8007f30 <__swsetup_r>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d0d5      	beq.n	8007ed6 <__swbuf_r+0x20>
 8007f2a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007f2e:	e7f4      	b.n	8007f1a <__swbuf_r+0x64>

08007f30 <__swsetup_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4b2a      	ldr	r3, [pc, #168]	; (8007fdc <__swsetup_r+0xac>)
 8007f34:	4605      	mov	r5, r0
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	460c      	mov	r4, r1
 8007f3a:	b118      	cbz	r0, 8007f44 <__swsetup_r+0x14>
 8007f3c:	6a03      	ldr	r3, [r0, #32]
 8007f3e:	b90b      	cbnz	r3, 8007f44 <__swsetup_r+0x14>
 8007f40:	f7fe f9fa 	bl	8006338 <__sinit>
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f4a:	0718      	lsls	r0, r3, #28
 8007f4c:	d422      	bmi.n	8007f94 <__swsetup_r+0x64>
 8007f4e:	06d9      	lsls	r1, r3, #27
 8007f50:	d407      	bmi.n	8007f62 <__swsetup_r+0x32>
 8007f52:	2309      	movs	r3, #9
 8007f54:	602b      	str	r3, [r5, #0]
 8007f56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f5a:	81a3      	strh	r3, [r4, #12]
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f60:	e034      	b.n	8007fcc <__swsetup_r+0x9c>
 8007f62:	0758      	lsls	r0, r3, #29
 8007f64:	d512      	bpl.n	8007f8c <__swsetup_r+0x5c>
 8007f66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f68:	b141      	cbz	r1, 8007f7c <__swsetup_r+0x4c>
 8007f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f6e:	4299      	cmp	r1, r3
 8007f70:	d002      	beq.n	8007f78 <__swsetup_r+0x48>
 8007f72:	4628      	mov	r0, r5
 8007f74:	f000 f950 	bl	8008218 <_free_r>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	6363      	str	r3, [r4, #52]	; 0x34
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f82:	81a3      	strh	r3, [r4, #12]
 8007f84:	2300      	movs	r3, #0
 8007f86:	6063      	str	r3, [r4, #4]
 8007f88:	6923      	ldr	r3, [r4, #16]
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	f043 0308 	orr.w	r3, r3, #8
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	6923      	ldr	r3, [r4, #16]
 8007f96:	b94b      	cbnz	r3, 8007fac <__swsetup_r+0x7c>
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa2:	d003      	beq.n	8007fac <__swsetup_r+0x7c>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 f840 	bl	800802c <__smakebuf_r>
 8007fac:	89a0      	ldrh	r0, [r4, #12]
 8007fae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fb2:	f010 0301 	ands.w	r3, r0, #1
 8007fb6:	d00a      	beq.n	8007fce <__swsetup_r+0x9e>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60a3      	str	r3, [r4, #8]
 8007fbc:	6963      	ldr	r3, [r4, #20]
 8007fbe:	425b      	negs	r3, r3
 8007fc0:	61a3      	str	r3, [r4, #24]
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	b943      	cbnz	r3, 8007fd8 <__swsetup_r+0xa8>
 8007fc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007fca:	d1c4      	bne.n	8007f56 <__swsetup_r+0x26>
 8007fcc:	bd38      	pop	{r3, r4, r5, pc}
 8007fce:	0781      	lsls	r1, r0, #30
 8007fd0:	bf58      	it	pl
 8007fd2:	6963      	ldrpl	r3, [r4, #20]
 8007fd4:	60a3      	str	r3, [r4, #8]
 8007fd6:	e7f4      	b.n	8007fc2 <__swsetup_r+0x92>
 8007fd8:	2000      	movs	r0, #0
 8007fda:	e7f7      	b.n	8007fcc <__swsetup_r+0x9c>
 8007fdc:	2000006c 	.word	0x2000006c

08007fe0 <__swhatbuf_r>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	b096      	sub	sp, #88	; 0x58
 8007fec:	4615      	mov	r5, r2
 8007fee:	461e      	mov	r6, r3
 8007ff0:	da0d      	bge.n	800800e <__swhatbuf_r+0x2e>
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ff8:	f04f 0100 	mov.w	r1, #0
 8007ffc:	bf0c      	ite	eq
 8007ffe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008002:	2340      	movne	r3, #64	; 0x40
 8008004:	2000      	movs	r0, #0
 8008006:	6031      	str	r1, [r6, #0]
 8008008:	602b      	str	r3, [r5, #0]
 800800a:	b016      	add	sp, #88	; 0x58
 800800c:	bd70      	pop	{r4, r5, r6, pc}
 800800e:	466a      	mov	r2, sp
 8008010:	f000 f858 	bl	80080c4 <_fstat_r>
 8008014:	2800      	cmp	r0, #0
 8008016:	dbec      	blt.n	8007ff2 <__swhatbuf_r+0x12>
 8008018:	9901      	ldr	r1, [sp, #4]
 800801a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800801e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008022:	4259      	negs	r1, r3
 8008024:	4159      	adcs	r1, r3
 8008026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800802a:	e7eb      	b.n	8008004 <__swhatbuf_r+0x24>

0800802c <__smakebuf_r>:
 800802c:	898b      	ldrh	r3, [r1, #12]
 800802e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008030:	079d      	lsls	r5, r3, #30
 8008032:	4606      	mov	r6, r0
 8008034:	460c      	mov	r4, r1
 8008036:	d507      	bpl.n	8008048 <__smakebuf_r+0x1c>
 8008038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	6123      	str	r3, [r4, #16]
 8008040:	2301      	movs	r3, #1
 8008042:	6163      	str	r3, [r4, #20]
 8008044:	b002      	add	sp, #8
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	ab01      	add	r3, sp, #4
 800804a:	466a      	mov	r2, sp
 800804c:	f7ff ffc8 	bl	8007fe0 <__swhatbuf_r>
 8008050:	9900      	ldr	r1, [sp, #0]
 8008052:	4605      	mov	r5, r0
 8008054:	4630      	mov	r0, r6
 8008056:	f7ff fa35 	bl	80074c4 <_malloc_r>
 800805a:	b948      	cbnz	r0, 8008070 <__smakebuf_r+0x44>
 800805c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008060:	059a      	lsls	r2, r3, #22
 8008062:	d4ef      	bmi.n	8008044 <__smakebuf_r+0x18>
 8008064:	f023 0303 	bic.w	r3, r3, #3
 8008068:	f043 0302 	orr.w	r3, r3, #2
 800806c:	81a3      	strh	r3, [r4, #12]
 800806e:	e7e3      	b.n	8008038 <__smakebuf_r+0xc>
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	6020      	str	r0, [r4, #0]
 8008074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008078:	81a3      	strh	r3, [r4, #12]
 800807a:	9b00      	ldr	r3, [sp, #0]
 800807c:	6163      	str	r3, [r4, #20]
 800807e:	9b01      	ldr	r3, [sp, #4]
 8008080:	6120      	str	r0, [r4, #16]
 8008082:	b15b      	cbz	r3, 800809c <__smakebuf_r+0x70>
 8008084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008088:	4630      	mov	r0, r6
 800808a:	f000 f82d 	bl	80080e8 <_isatty_r>
 800808e:	b128      	cbz	r0, 800809c <__smakebuf_r+0x70>
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	f023 0303 	bic.w	r3, r3, #3
 8008096:	f043 0301 	orr.w	r3, r3, #1
 800809a:	81a3      	strh	r3, [r4, #12]
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	431d      	orrs	r5, r3
 80080a0:	81a5      	strh	r5, [r4, #12]
 80080a2:	e7cf      	b.n	8008044 <__smakebuf_r+0x18>

080080a4 <_close_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4d06      	ldr	r5, [pc, #24]	; (80080c0 <_close_r+0x1c>)
 80080a8:	2300      	movs	r3, #0
 80080aa:	4604      	mov	r4, r0
 80080ac:	4608      	mov	r0, r1
 80080ae:	602b      	str	r3, [r5, #0]
 80080b0:	f7f9 ff7d 	bl	8001fae <_close>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_close_r+0x1a>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_close_r+0x1a>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	2000057c 	.word	0x2000057c

080080c4 <_fstat_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4d07      	ldr	r5, [pc, #28]	; (80080e4 <_fstat_r+0x20>)
 80080c8:	2300      	movs	r3, #0
 80080ca:	4604      	mov	r4, r0
 80080cc:	4608      	mov	r0, r1
 80080ce:	4611      	mov	r1, r2
 80080d0:	602b      	str	r3, [r5, #0]
 80080d2:	f7f9 ff78 	bl	8001fc6 <_fstat>
 80080d6:	1c43      	adds	r3, r0, #1
 80080d8:	d102      	bne.n	80080e0 <_fstat_r+0x1c>
 80080da:	682b      	ldr	r3, [r5, #0]
 80080dc:	b103      	cbz	r3, 80080e0 <_fstat_r+0x1c>
 80080de:	6023      	str	r3, [r4, #0]
 80080e0:	bd38      	pop	{r3, r4, r5, pc}
 80080e2:	bf00      	nop
 80080e4:	2000057c 	.word	0x2000057c

080080e8 <_isatty_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d06      	ldr	r5, [pc, #24]	; (8008104 <_isatty_r+0x1c>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	f7f9 ff77 	bl	8001fe6 <_isatty>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_isatty_r+0x1a>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_isatty_r+0x1a>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	2000057c 	.word	0x2000057c

08008108 <_lseek_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d07      	ldr	r5, [pc, #28]	; (8008128 <_lseek_r+0x20>)
 800810c:	4604      	mov	r4, r0
 800810e:	4608      	mov	r0, r1
 8008110:	4611      	mov	r1, r2
 8008112:	2200      	movs	r2, #0
 8008114:	602a      	str	r2, [r5, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	f7f9 ff70 	bl	8001ffc <_lseek>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <_lseek_r+0x1e>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	b103      	cbz	r3, 8008126 <_lseek_r+0x1e>
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	2000057c 	.word	0x2000057c

0800812c <_read_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d07      	ldr	r5, [pc, #28]	; (800814c <_read_r+0x20>)
 8008130:	4604      	mov	r4, r0
 8008132:	4608      	mov	r0, r1
 8008134:	4611      	mov	r1, r2
 8008136:	2200      	movs	r2, #0
 8008138:	602a      	str	r2, [r5, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	f7f9 ff1a 	bl	8001f74 <_read>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_read_r+0x1e>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_read_r+0x1e>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	2000057c 	.word	0x2000057c

08008150 <_sbrk_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d06      	ldr	r5, [pc, #24]	; (800816c <_sbrk_r+0x1c>)
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	4608      	mov	r0, r1
 800815a:	602b      	str	r3, [r5, #0]
 800815c:	f7f9 ff5c 	bl	8002018 <_sbrk>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_sbrk_r+0x1a>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_sbrk_r+0x1a>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	2000057c 	.word	0x2000057c

08008170 <_write_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	; (8008190 <_write_r+0x20>)
 8008174:	4604      	mov	r4, r0
 8008176:	4608      	mov	r0, r1
 8008178:	4611      	mov	r1, r2
 800817a:	2200      	movs	r2, #0
 800817c:	602a      	str	r2, [r5, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	f7f9 fb34 	bl	80017ec <_write>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_write_r+0x1e>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_write_r+0x1e>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	2000057c 	.word	0x2000057c

08008194 <memcpy>:
 8008194:	440a      	add	r2, r1
 8008196:	4291      	cmp	r1, r2
 8008198:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800819c:	d100      	bne.n	80081a0 <memcpy+0xc>
 800819e:	4770      	bx	lr
 80081a0:	b510      	push	{r4, lr}
 80081a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081aa:	4291      	cmp	r1, r2
 80081ac:	d1f9      	bne.n	80081a2 <memcpy+0xe>
 80081ae:	bd10      	pop	{r4, pc}

080081b0 <__assert_func>:
 80081b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081b2:	4614      	mov	r4, r2
 80081b4:	461a      	mov	r2, r3
 80081b6:	4b09      	ldr	r3, [pc, #36]	; (80081dc <__assert_func+0x2c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4605      	mov	r5, r0
 80081bc:	68d8      	ldr	r0, [r3, #12]
 80081be:	b14c      	cbz	r4, 80081d4 <__assert_func+0x24>
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <__assert_func+0x30>)
 80081c2:	9100      	str	r1, [sp, #0]
 80081c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081c8:	4906      	ldr	r1, [pc, #24]	; (80081e4 <__assert_func+0x34>)
 80081ca:	462b      	mov	r3, r5
 80081cc:	f000 f882 	bl	80082d4 <fiprintf>
 80081d0:	f000 f89f 	bl	8008312 <abort>
 80081d4:	4b04      	ldr	r3, [pc, #16]	; (80081e8 <__assert_func+0x38>)
 80081d6:	461c      	mov	r4, r3
 80081d8:	e7f3      	b.n	80081c2 <__assert_func+0x12>
 80081da:	bf00      	nop
 80081dc:	2000006c 	.word	0x2000006c
 80081e0:	08009657 	.word	0x08009657
 80081e4:	08009664 	.word	0x08009664
 80081e8:	08009692 	.word	0x08009692

080081ec <_calloc_r>:
 80081ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ee:	fba1 2402 	umull	r2, r4, r1, r2
 80081f2:	b94c      	cbnz	r4, 8008208 <_calloc_r+0x1c>
 80081f4:	4611      	mov	r1, r2
 80081f6:	9201      	str	r2, [sp, #4]
 80081f8:	f7ff f964 	bl	80074c4 <_malloc_r>
 80081fc:	9a01      	ldr	r2, [sp, #4]
 80081fe:	4605      	mov	r5, r0
 8008200:	b930      	cbnz	r0, 8008210 <_calloc_r+0x24>
 8008202:	4628      	mov	r0, r5
 8008204:	b003      	add	sp, #12
 8008206:	bd30      	pop	{r4, r5, pc}
 8008208:	220c      	movs	r2, #12
 800820a:	6002      	str	r2, [r0, #0]
 800820c:	2500      	movs	r5, #0
 800820e:	e7f8      	b.n	8008202 <_calloc_r+0x16>
 8008210:	4621      	mov	r1, r4
 8008212:	f7fe f935 	bl	8006480 <memset>
 8008216:	e7f4      	b.n	8008202 <_calloc_r+0x16>

08008218 <_free_r>:
 8008218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800821a:	2900      	cmp	r1, #0
 800821c:	d044      	beq.n	80082a8 <_free_r+0x90>
 800821e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008222:	9001      	str	r0, [sp, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f1a1 0404 	sub.w	r4, r1, #4
 800822a:	bfb8      	it	lt
 800822c:	18e4      	addlt	r4, r4, r3
 800822e:	f7ff fa77 	bl	8007720 <__malloc_lock>
 8008232:	4a1e      	ldr	r2, [pc, #120]	; (80082ac <_free_r+0x94>)
 8008234:	9801      	ldr	r0, [sp, #4]
 8008236:	6813      	ldr	r3, [r2, #0]
 8008238:	b933      	cbnz	r3, 8008248 <_free_r+0x30>
 800823a:	6063      	str	r3, [r4, #4]
 800823c:	6014      	str	r4, [r2, #0]
 800823e:	b003      	add	sp, #12
 8008240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008244:	f7ff ba72 	b.w	800772c <__malloc_unlock>
 8008248:	42a3      	cmp	r3, r4
 800824a:	d908      	bls.n	800825e <_free_r+0x46>
 800824c:	6825      	ldr	r5, [r4, #0]
 800824e:	1961      	adds	r1, r4, r5
 8008250:	428b      	cmp	r3, r1
 8008252:	bf01      	itttt	eq
 8008254:	6819      	ldreq	r1, [r3, #0]
 8008256:	685b      	ldreq	r3, [r3, #4]
 8008258:	1949      	addeq	r1, r1, r5
 800825a:	6021      	streq	r1, [r4, #0]
 800825c:	e7ed      	b.n	800823a <_free_r+0x22>
 800825e:	461a      	mov	r2, r3
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	b10b      	cbz	r3, 8008268 <_free_r+0x50>
 8008264:	42a3      	cmp	r3, r4
 8008266:	d9fa      	bls.n	800825e <_free_r+0x46>
 8008268:	6811      	ldr	r1, [r2, #0]
 800826a:	1855      	adds	r5, r2, r1
 800826c:	42a5      	cmp	r5, r4
 800826e:	d10b      	bne.n	8008288 <_free_r+0x70>
 8008270:	6824      	ldr	r4, [r4, #0]
 8008272:	4421      	add	r1, r4
 8008274:	1854      	adds	r4, r2, r1
 8008276:	42a3      	cmp	r3, r4
 8008278:	6011      	str	r1, [r2, #0]
 800827a:	d1e0      	bne.n	800823e <_free_r+0x26>
 800827c:	681c      	ldr	r4, [r3, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	6053      	str	r3, [r2, #4]
 8008282:	440c      	add	r4, r1
 8008284:	6014      	str	r4, [r2, #0]
 8008286:	e7da      	b.n	800823e <_free_r+0x26>
 8008288:	d902      	bls.n	8008290 <_free_r+0x78>
 800828a:	230c      	movs	r3, #12
 800828c:	6003      	str	r3, [r0, #0]
 800828e:	e7d6      	b.n	800823e <_free_r+0x26>
 8008290:	6825      	ldr	r5, [r4, #0]
 8008292:	1961      	adds	r1, r4, r5
 8008294:	428b      	cmp	r3, r1
 8008296:	bf04      	itt	eq
 8008298:	6819      	ldreq	r1, [r3, #0]
 800829a:	685b      	ldreq	r3, [r3, #4]
 800829c:	6063      	str	r3, [r4, #4]
 800829e:	bf04      	itt	eq
 80082a0:	1949      	addeq	r1, r1, r5
 80082a2:	6021      	streq	r1, [r4, #0]
 80082a4:	6054      	str	r4, [r2, #4]
 80082a6:	e7ca      	b.n	800823e <_free_r+0x26>
 80082a8:	b003      	add	sp, #12
 80082aa:	bd30      	pop	{r4, r5, pc}
 80082ac:	20000574 	.word	0x20000574

080082b0 <__ascii_mbtowc>:
 80082b0:	b082      	sub	sp, #8
 80082b2:	b901      	cbnz	r1, 80082b6 <__ascii_mbtowc+0x6>
 80082b4:	a901      	add	r1, sp, #4
 80082b6:	b142      	cbz	r2, 80082ca <__ascii_mbtowc+0x1a>
 80082b8:	b14b      	cbz	r3, 80082ce <__ascii_mbtowc+0x1e>
 80082ba:	7813      	ldrb	r3, [r2, #0]
 80082bc:	600b      	str	r3, [r1, #0]
 80082be:	7812      	ldrb	r2, [r2, #0]
 80082c0:	1e10      	subs	r0, r2, #0
 80082c2:	bf18      	it	ne
 80082c4:	2001      	movne	r0, #1
 80082c6:	b002      	add	sp, #8
 80082c8:	4770      	bx	lr
 80082ca:	4610      	mov	r0, r2
 80082cc:	e7fb      	b.n	80082c6 <__ascii_mbtowc+0x16>
 80082ce:	f06f 0001 	mvn.w	r0, #1
 80082d2:	e7f8      	b.n	80082c6 <__ascii_mbtowc+0x16>

080082d4 <fiprintf>:
 80082d4:	b40e      	push	{r1, r2, r3}
 80082d6:	b503      	push	{r0, r1, lr}
 80082d8:	4601      	mov	r1, r0
 80082da:	ab03      	add	r3, sp, #12
 80082dc:	4805      	ldr	r0, [pc, #20]	; (80082f4 <fiprintf+0x20>)
 80082de:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e2:	6800      	ldr	r0, [r0, #0]
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	f7fe ffab 	bl	8007240 <_vfiprintf_r>
 80082ea:	b002      	add	sp, #8
 80082ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80082f0:	b003      	add	sp, #12
 80082f2:	4770      	bx	lr
 80082f4:	2000006c 	.word	0x2000006c

080082f8 <__ascii_wctomb>:
 80082f8:	b149      	cbz	r1, 800830e <__ascii_wctomb+0x16>
 80082fa:	2aff      	cmp	r2, #255	; 0xff
 80082fc:	bf85      	ittet	hi
 80082fe:	238a      	movhi	r3, #138	; 0x8a
 8008300:	6003      	strhi	r3, [r0, #0]
 8008302:	700a      	strbls	r2, [r1, #0]
 8008304:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008308:	bf98      	it	ls
 800830a:	2001      	movls	r0, #1
 800830c:	4770      	bx	lr
 800830e:	4608      	mov	r0, r1
 8008310:	4770      	bx	lr

08008312 <abort>:
 8008312:	b508      	push	{r3, lr}
 8008314:	2006      	movs	r0, #6
 8008316:	f000 f82b 	bl	8008370 <raise>
 800831a:	2001      	movs	r0, #1
 800831c:	f7f9 fe20 	bl	8001f60 <_exit>

08008320 <_raise_r>:
 8008320:	291f      	cmp	r1, #31
 8008322:	b538      	push	{r3, r4, r5, lr}
 8008324:	4604      	mov	r4, r0
 8008326:	460d      	mov	r5, r1
 8008328:	d904      	bls.n	8008334 <_raise_r+0x14>
 800832a:	2316      	movs	r3, #22
 800832c:	6003      	str	r3, [r0, #0]
 800832e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008336:	b112      	cbz	r2, 800833e <_raise_r+0x1e>
 8008338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800833c:	b94b      	cbnz	r3, 8008352 <_raise_r+0x32>
 800833e:	4620      	mov	r0, r4
 8008340:	f000 f830 	bl	80083a4 <_getpid_r>
 8008344:	462a      	mov	r2, r5
 8008346:	4601      	mov	r1, r0
 8008348:	4620      	mov	r0, r4
 800834a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800834e:	f000 b817 	b.w	8008380 <_kill_r>
 8008352:	2b01      	cmp	r3, #1
 8008354:	d00a      	beq.n	800836c <_raise_r+0x4c>
 8008356:	1c59      	adds	r1, r3, #1
 8008358:	d103      	bne.n	8008362 <_raise_r+0x42>
 800835a:	2316      	movs	r3, #22
 800835c:	6003      	str	r3, [r0, #0]
 800835e:	2001      	movs	r0, #1
 8008360:	e7e7      	b.n	8008332 <_raise_r+0x12>
 8008362:	2400      	movs	r4, #0
 8008364:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008368:	4628      	mov	r0, r5
 800836a:	4798      	blx	r3
 800836c:	2000      	movs	r0, #0
 800836e:	e7e0      	b.n	8008332 <_raise_r+0x12>

08008370 <raise>:
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <raise+0xc>)
 8008372:	4601      	mov	r1, r0
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	f7ff bfd3 	b.w	8008320 <_raise_r>
 800837a:	bf00      	nop
 800837c:	2000006c 	.word	0x2000006c

08008380 <_kill_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d07      	ldr	r5, [pc, #28]	; (80083a0 <_kill_r+0x20>)
 8008384:	2300      	movs	r3, #0
 8008386:	4604      	mov	r4, r0
 8008388:	4608      	mov	r0, r1
 800838a:	4611      	mov	r1, r2
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	f7f9 fdd7 	bl	8001f40 <_kill>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d102      	bne.n	800839c <_kill_r+0x1c>
 8008396:	682b      	ldr	r3, [r5, #0]
 8008398:	b103      	cbz	r3, 800839c <_kill_r+0x1c>
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	bd38      	pop	{r3, r4, r5, pc}
 800839e:	bf00      	nop
 80083a0:	2000057c 	.word	0x2000057c

080083a4 <_getpid_r>:
 80083a4:	f7f9 bdc4 	b.w	8001f30 <_getpid>

080083a8 <pow>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	ed2d 8b02 	vpush	{d8}
 80083ae:	eeb0 8a40 	vmov.f32	s16, s0
 80083b2:	eef0 8a60 	vmov.f32	s17, s1
 80083b6:	ec55 4b11 	vmov	r4, r5, d1
 80083ba:	f000 f871 	bl	80084a0 <__ieee754_pow>
 80083be:	4622      	mov	r2, r4
 80083c0:	462b      	mov	r3, r5
 80083c2:	4620      	mov	r0, r4
 80083c4:	4629      	mov	r1, r5
 80083c6:	ec57 6b10 	vmov	r6, r7, d0
 80083ca:	f7f8 fbaf 	bl	8000b2c <__aeabi_dcmpun>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d13b      	bne.n	800844a <pow+0xa2>
 80083d2:	ec51 0b18 	vmov	r0, r1, d8
 80083d6:	2200      	movs	r2, #0
 80083d8:	2300      	movs	r3, #0
 80083da:	f7f8 fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 80083de:	b1b8      	cbz	r0, 8008410 <pow+0x68>
 80083e0:	2200      	movs	r2, #0
 80083e2:	2300      	movs	r3, #0
 80083e4:	4620      	mov	r0, r4
 80083e6:	4629      	mov	r1, r5
 80083e8:	f7f8 fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d146      	bne.n	800847e <pow+0xd6>
 80083f0:	ec45 4b10 	vmov	d0, r4, r5
 80083f4:	f000 f848 	bl	8008488 <finite>
 80083f8:	b338      	cbz	r0, 800844a <pow+0xa2>
 80083fa:	2200      	movs	r2, #0
 80083fc:	2300      	movs	r3, #0
 80083fe:	4620      	mov	r0, r4
 8008400:	4629      	mov	r1, r5
 8008402:	f7f8 fb6b 	bl	8000adc <__aeabi_dcmplt>
 8008406:	b300      	cbz	r0, 800844a <pow+0xa2>
 8008408:	f7fe f846 	bl	8006498 <__errno>
 800840c:	2322      	movs	r3, #34	; 0x22
 800840e:	e01b      	b.n	8008448 <pow+0xa0>
 8008410:	ec47 6b10 	vmov	d0, r6, r7
 8008414:	f000 f838 	bl	8008488 <finite>
 8008418:	b9e0      	cbnz	r0, 8008454 <pow+0xac>
 800841a:	eeb0 0a48 	vmov.f32	s0, s16
 800841e:	eef0 0a68 	vmov.f32	s1, s17
 8008422:	f000 f831 	bl	8008488 <finite>
 8008426:	b1a8      	cbz	r0, 8008454 <pow+0xac>
 8008428:	ec45 4b10 	vmov	d0, r4, r5
 800842c:	f000 f82c 	bl	8008488 <finite>
 8008430:	b180      	cbz	r0, 8008454 <pow+0xac>
 8008432:	4632      	mov	r2, r6
 8008434:	463b      	mov	r3, r7
 8008436:	4630      	mov	r0, r6
 8008438:	4639      	mov	r1, r7
 800843a:	f7f8 fb77 	bl	8000b2c <__aeabi_dcmpun>
 800843e:	2800      	cmp	r0, #0
 8008440:	d0e2      	beq.n	8008408 <pow+0x60>
 8008442:	f7fe f829 	bl	8006498 <__errno>
 8008446:	2321      	movs	r3, #33	; 0x21
 8008448:	6003      	str	r3, [r0, #0]
 800844a:	ecbd 8b02 	vpop	{d8}
 800844e:	ec47 6b10 	vmov	d0, r6, r7
 8008452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008454:	2200      	movs	r2, #0
 8008456:	2300      	movs	r3, #0
 8008458:	4630      	mov	r0, r6
 800845a:	4639      	mov	r1, r7
 800845c:	f7f8 fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 8008460:	2800      	cmp	r0, #0
 8008462:	d0f2      	beq.n	800844a <pow+0xa2>
 8008464:	eeb0 0a48 	vmov.f32	s0, s16
 8008468:	eef0 0a68 	vmov.f32	s1, s17
 800846c:	f000 f80c 	bl	8008488 <finite>
 8008470:	2800      	cmp	r0, #0
 8008472:	d0ea      	beq.n	800844a <pow+0xa2>
 8008474:	ec45 4b10 	vmov	d0, r4, r5
 8008478:	f000 f806 	bl	8008488 <finite>
 800847c:	e7c3      	b.n	8008406 <pow+0x5e>
 800847e:	4f01      	ldr	r7, [pc, #4]	; (8008484 <pow+0xdc>)
 8008480:	2600      	movs	r6, #0
 8008482:	e7e2      	b.n	800844a <pow+0xa2>
 8008484:	3ff00000 	.word	0x3ff00000

08008488 <finite>:
 8008488:	b082      	sub	sp, #8
 800848a:	ed8d 0b00 	vstr	d0, [sp]
 800848e:	9801      	ldr	r0, [sp, #4]
 8008490:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008494:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008498:	0fc0      	lsrs	r0, r0, #31
 800849a:	b002      	add	sp, #8
 800849c:	4770      	bx	lr
	...

080084a0 <__ieee754_pow>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	ed2d 8b06 	vpush	{d8-d10}
 80084a8:	b089      	sub	sp, #36	; 0x24
 80084aa:	ed8d 1b00 	vstr	d1, [sp]
 80084ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80084b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80084b6:	ea58 0102 	orrs.w	r1, r8, r2
 80084ba:	ec57 6b10 	vmov	r6, r7, d0
 80084be:	d115      	bne.n	80084ec <__ieee754_pow+0x4c>
 80084c0:	19b3      	adds	r3, r6, r6
 80084c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80084c6:	4152      	adcs	r2, r2
 80084c8:	4299      	cmp	r1, r3
 80084ca:	4b89      	ldr	r3, [pc, #548]	; (80086f0 <__ieee754_pow+0x250>)
 80084cc:	4193      	sbcs	r3, r2
 80084ce:	f080 84d1 	bcs.w	8008e74 <__ieee754_pow+0x9d4>
 80084d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084d6:	4630      	mov	r0, r6
 80084d8:	4639      	mov	r1, r7
 80084da:	f7f7 fed7 	bl	800028c <__adddf3>
 80084de:	ec41 0b10 	vmov	d0, r0, r1
 80084e2:	b009      	add	sp, #36	; 0x24
 80084e4:	ecbd 8b06 	vpop	{d8-d10}
 80084e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ec:	4b81      	ldr	r3, [pc, #516]	; (80086f4 <__ieee754_pow+0x254>)
 80084ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80084f2:	429c      	cmp	r4, r3
 80084f4:	ee10 aa10 	vmov	sl, s0
 80084f8:	463d      	mov	r5, r7
 80084fa:	dc06      	bgt.n	800850a <__ieee754_pow+0x6a>
 80084fc:	d101      	bne.n	8008502 <__ieee754_pow+0x62>
 80084fe:	2e00      	cmp	r6, #0
 8008500:	d1e7      	bne.n	80084d2 <__ieee754_pow+0x32>
 8008502:	4598      	cmp	r8, r3
 8008504:	dc01      	bgt.n	800850a <__ieee754_pow+0x6a>
 8008506:	d10f      	bne.n	8008528 <__ieee754_pow+0x88>
 8008508:	b172      	cbz	r2, 8008528 <__ieee754_pow+0x88>
 800850a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800850e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008512:	ea55 050a 	orrs.w	r5, r5, sl
 8008516:	d1dc      	bne.n	80084d2 <__ieee754_pow+0x32>
 8008518:	e9dd 3200 	ldrd	r3, r2, [sp]
 800851c:	18db      	adds	r3, r3, r3
 800851e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008522:	4152      	adcs	r2, r2
 8008524:	429d      	cmp	r5, r3
 8008526:	e7d0      	b.n	80084ca <__ieee754_pow+0x2a>
 8008528:	2d00      	cmp	r5, #0
 800852a:	da3b      	bge.n	80085a4 <__ieee754_pow+0x104>
 800852c:	4b72      	ldr	r3, [pc, #456]	; (80086f8 <__ieee754_pow+0x258>)
 800852e:	4598      	cmp	r8, r3
 8008530:	dc51      	bgt.n	80085d6 <__ieee754_pow+0x136>
 8008532:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008536:	4598      	cmp	r8, r3
 8008538:	f340 84ab 	ble.w	8008e92 <__ieee754_pow+0x9f2>
 800853c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008540:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008544:	2b14      	cmp	r3, #20
 8008546:	dd0f      	ble.n	8008568 <__ieee754_pow+0xc8>
 8008548:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800854c:	fa22 f103 	lsr.w	r1, r2, r3
 8008550:	fa01 f303 	lsl.w	r3, r1, r3
 8008554:	4293      	cmp	r3, r2
 8008556:	f040 849c 	bne.w	8008e92 <__ieee754_pow+0x9f2>
 800855a:	f001 0101 	and.w	r1, r1, #1
 800855e:	f1c1 0302 	rsb	r3, r1, #2
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	b182      	cbz	r2, 8008588 <__ieee754_pow+0xe8>
 8008566:	e05f      	b.n	8008628 <__ieee754_pow+0x188>
 8008568:	2a00      	cmp	r2, #0
 800856a:	d15b      	bne.n	8008624 <__ieee754_pow+0x184>
 800856c:	f1c3 0314 	rsb	r3, r3, #20
 8008570:	fa48 f103 	asr.w	r1, r8, r3
 8008574:	fa01 f303 	lsl.w	r3, r1, r3
 8008578:	4543      	cmp	r3, r8
 800857a:	f040 8487 	bne.w	8008e8c <__ieee754_pow+0x9ec>
 800857e:	f001 0101 	and.w	r1, r1, #1
 8008582:	f1c1 0302 	rsb	r3, r1, #2
 8008586:	9304      	str	r3, [sp, #16]
 8008588:	4b5c      	ldr	r3, [pc, #368]	; (80086fc <__ieee754_pow+0x25c>)
 800858a:	4598      	cmp	r8, r3
 800858c:	d132      	bne.n	80085f4 <__ieee754_pow+0x154>
 800858e:	f1b9 0f00 	cmp.w	r9, #0
 8008592:	f280 8477 	bge.w	8008e84 <__ieee754_pow+0x9e4>
 8008596:	4959      	ldr	r1, [pc, #356]	; (80086fc <__ieee754_pow+0x25c>)
 8008598:	4632      	mov	r2, r6
 800859a:	463b      	mov	r3, r7
 800859c:	2000      	movs	r0, #0
 800859e:	f7f8 f955 	bl	800084c <__aeabi_ddiv>
 80085a2:	e79c      	b.n	80084de <__ieee754_pow+0x3e>
 80085a4:	2300      	movs	r3, #0
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	2a00      	cmp	r2, #0
 80085aa:	d13d      	bne.n	8008628 <__ieee754_pow+0x188>
 80085ac:	4b51      	ldr	r3, [pc, #324]	; (80086f4 <__ieee754_pow+0x254>)
 80085ae:	4598      	cmp	r8, r3
 80085b0:	d1ea      	bne.n	8008588 <__ieee754_pow+0xe8>
 80085b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80085b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80085ba:	ea53 030a 	orrs.w	r3, r3, sl
 80085be:	f000 8459 	beq.w	8008e74 <__ieee754_pow+0x9d4>
 80085c2:	4b4f      	ldr	r3, [pc, #316]	; (8008700 <__ieee754_pow+0x260>)
 80085c4:	429c      	cmp	r4, r3
 80085c6:	dd08      	ble.n	80085da <__ieee754_pow+0x13a>
 80085c8:	f1b9 0f00 	cmp.w	r9, #0
 80085cc:	f2c0 8456 	blt.w	8008e7c <__ieee754_pow+0x9dc>
 80085d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085d4:	e783      	b.n	80084de <__ieee754_pow+0x3e>
 80085d6:	2302      	movs	r3, #2
 80085d8:	e7e5      	b.n	80085a6 <__ieee754_pow+0x106>
 80085da:	f1b9 0f00 	cmp.w	r9, #0
 80085de:	f04f 0000 	mov.w	r0, #0
 80085e2:	f04f 0100 	mov.w	r1, #0
 80085e6:	f6bf af7a 	bge.w	80084de <__ieee754_pow+0x3e>
 80085ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80085ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80085f2:	e774      	b.n	80084de <__ieee754_pow+0x3e>
 80085f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80085f8:	d106      	bne.n	8008608 <__ieee754_pow+0x168>
 80085fa:	4632      	mov	r2, r6
 80085fc:	463b      	mov	r3, r7
 80085fe:	4630      	mov	r0, r6
 8008600:	4639      	mov	r1, r7
 8008602:	f7f7 fff9 	bl	80005f8 <__aeabi_dmul>
 8008606:	e76a      	b.n	80084de <__ieee754_pow+0x3e>
 8008608:	4b3e      	ldr	r3, [pc, #248]	; (8008704 <__ieee754_pow+0x264>)
 800860a:	4599      	cmp	r9, r3
 800860c:	d10c      	bne.n	8008628 <__ieee754_pow+0x188>
 800860e:	2d00      	cmp	r5, #0
 8008610:	db0a      	blt.n	8008628 <__ieee754_pow+0x188>
 8008612:	ec47 6b10 	vmov	d0, r6, r7
 8008616:	b009      	add	sp, #36	; 0x24
 8008618:	ecbd 8b06 	vpop	{d8-d10}
 800861c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008620:	f000 bd20 	b.w	8009064 <__ieee754_sqrt>
 8008624:	2300      	movs	r3, #0
 8008626:	9304      	str	r3, [sp, #16]
 8008628:	ec47 6b10 	vmov	d0, r6, r7
 800862c:	f000 fc92 	bl	8008f54 <fabs>
 8008630:	ec51 0b10 	vmov	r0, r1, d0
 8008634:	f1ba 0f00 	cmp.w	sl, #0
 8008638:	d129      	bne.n	800868e <__ieee754_pow+0x1ee>
 800863a:	b124      	cbz	r4, 8008646 <__ieee754_pow+0x1a6>
 800863c:	4b2f      	ldr	r3, [pc, #188]	; (80086fc <__ieee754_pow+0x25c>)
 800863e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008642:	429a      	cmp	r2, r3
 8008644:	d123      	bne.n	800868e <__ieee754_pow+0x1ee>
 8008646:	f1b9 0f00 	cmp.w	r9, #0
 800864a:	da05      	bge.n	8008658 <__ieee754_pow+0x1b8>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	2000      	movs	r0, #0
 8008652:	492a      	ldr	r1, [pc, #168]	; (80086fc <__ieee754_pow+0x25c>)
 8008654:	f7f8 f8fa 	bl	800084c <__aeabi_ddiv>
 8008658:	2d00      	cmp	r5, #0
 800865a:	f6bf af40 	bge.w	80084de <__ieee754_pow+0x3e>
 800865e:	9b04      	ldr	r3, [sp, #16]
 8008660:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008664:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008668:	431c      	orrs	r4, r3
 800866a:	d108      	bne.n	800867e <__ieee754_pow+0x1de>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4610      	mov	r0, r2
 8008672:	4619      	mov	r1, r3
 8008674:	f7f7 fe08 	bl	8000288 <__aeabi_dsub>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	e78f      	b.n	800859e <__ieee754_pow+0xfe>
 800867e:	9b04      	ldr	r3, [sp, #16]
 8008680:	2b01      	cmp	r3, #1
 8008682:	f47f af2c 	bne.w	80084de <__ieee754_pow+0x3e>
 8008686:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800868a:	4619      	mov	r1, r3
 800868c:	e727      	b.n	80084de <__ieee754_pow+0x3e>
 800868e:	0feb      	lsrs	r3, r5, #31
 8008690:	3b01      	subs	r3, #1
 8008692:	9306      	str	r3, [sp, #24]
 8008694:	9a06      	ldr	r2, [sp, #24]
 8008696:	9b04      	ldr	r3, [sp, #16]
 8008698:	4313      	orrs	r3, r2
 800869a:	d102      	bne.n	80086a2 <__ieee754_pow+0x202>
 800869c:	4632      	mov	r2, r6
 800869e:	463b      	mov	r3, r7
 80086a0:	e7e6      	b.n	8008670 <__ieee754_pow+0x1d0>
 80086a2:	4b19      	ldr	r3, [pc, #100]	; (8008708 <__ieee754_pow+0x268>)
 80086a4:	4598      	cmp	r8, r3
 80086a6:	f340 80fb 	ble.w	80088a0 <__ieee754_pow+0x400>
 80086aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80086ae:	4598      	cmp	r8, r3
 80086b0:	4b13      	ldr	r3, [pc, #76]	; (8008700 <__ieee754_pow+0x260>)
 80086b2:	dd0c      	ble.n	80086ce <__ieee754_pow+0x22e>
 80086b4:	429c      	cmp	r4, r3
 80086b6:	dc0f      	bgt.n	80086d8 <__ieee754_pow+0x238>
 80086b8:	f1b9 0f00 	cmp.w	r9, #0
 80086bc:	da0f      	bge.n	80086de <__ieee754_pow+0x23e>
 80086be:	2000      	movs	r0, #0
 80086c0:	b009      	add	sp, #36	; 0x24
 80086c2:	ecbd 8b06 	vpop	{d8-d10}
 80086c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	f000 bc3a 	b.w	8008f42 <__math_oflow>
 80086ce:	429c      	cmp	r4, r3
 80086d0:	dbf2      	blt.n	80086b8 <__ieee754_pow+0x218>
 80086d2:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <__ieee754_pow+0x25c>)
 80086d4:	429c      	cmp	r4, r3
 80086d6:	dd19      	ble.n	800870c <__ieee754_pow+0x26c>
 80086d8:	f1b9 0f00 	cmp.w	r9, #0
 80086dc:	dcef      	bgt.n	80086be <__ieee754_pow+0x21e>
 80086de:	2000      	movs	r0, #0
 80086e0:	b009      	add	sp, #36	; 0x24
 80086e2:	ecbd 8b06 	vpop	{d8-d10}
 80086e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ea:	f000 bc21 	b.w	8008f30 <__math_uflow>
 80086ee:	bf00      	nop
 80086f0:	fff00000 	.word	0xfff00000
 80086f4:	7ff00000 	.word	0x7ff00000
 80086f8:	433fffff 	.word	0x433fffff
 80086fc:	3ff00000 	.word	0x3ff00000
 8008700:	3fefffff 	.word	0x3fefffff
 8008704:	3fe00000 	.word	0x3fe00000
 8008708:	41e00000 	.word	0x41e00000
 800870c:	4b60      	ldr	r3, [pc, #384]	; (8008890 <__ieee754_pow+0x3f0>)
 800870e:	2200      	movs	r2, #0
 8008710:	f7f7 fdba 	bl	8000288 <__aeabi_dsub>
 8008714:	a354      	add	r3, pc, #336	; (adr r3, 8008868 <__ieee754_pow+0x3c8>)
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	4604      	mov	r4, r0
 800871c:	460d      	mov	r5, r1
 800871e:	f7f7 ff6b 	bl	80005f8 <__aeabi_dmul>
 8008722:	a353      	add	r3, pc, #332	; (adr r3, 8008870 <__ieee754_pow+0x3d0>)
 8008724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008728:	4606      	mov	r6, r0
 800872a:	460f      	mov	r7, r1
 800872c:	4620      	mov	r0, r4
 800872e:	4629      	mov	r1, r5
 8008730:	f7f7 ff62 	bl	80005f8 <__aeabi_dmul>
 8008734:	4b57      	ldr	r3, [pc, #348]	; (8008894 <__ieee754_pow+0x3f4>)
 8008736:	4682      	mov	sl, r0
 8008738:	468b      	mov	fp, r1
 800873a:	2200      	movs	r2, #0
 800873c:	4620      	mov	r0, r4
 800873e:	4629      	mov	r1, r5
 8008740:	f7f7 ff5a 	bl	80005f8 <__aeabi_dmul>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	a14b      	add	r1, pc, #300	; (adr r1, 8008878 <__ieee754_pow+0x3d8>)
 800874a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800874e:	f7f7 fd9b 	bl	8000288 <__aeabi_dsub>
 8008752:	4622      	mov	r2, r4
 8008754:	462b      	mov	r3, r5
 8008756:	f7f7 ff4f 	bl	80005f8 <__aeabi_dmul>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	2000      	movs	r0, #0
 8008760:	494d      	ldr	r1, [pc, #308]	; (8008898 <__ieee754_pow+0x3f8>)
 8008762:	f7f7 fd91 	bl	8000288 <__aeabi_dsub>
 8008766:	4622      	mov	r2, r4
 8008768:	4680      	mov	r8, r0
 800876a:	4689      	mov	r9, r1
 800876c:	462b      	mov	r3, r5
 800876e:	4620      	mov	r0, r4
 8008770:	4629      	mov	r1, r5
 8008772:	f7f7 ff41 	bl	80005f8 <__aeabi_dmul>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4640      	mov	r0, r8
 800877c:	4649      	mov	r1, r9
 800877e:	f7f7 ff3b 	bl	80005f8 <__aeabi_dmul>
 8008782:	a33f      	add	r3, pc, #252	; (adr r3, 8008880 <__ieee754_pow+0x3e0>)
 8008784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008788:	f7f7 ff36 	bl	80005f8 <__aeabi_dmul>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4650      	mov	r0, sl
 8008792:	4659      	mov	r1, fp
 8008794:	f7f7 fd78 	bl	8000288 <__aeabi_dsub>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	4680      	mov	r8, r0
 800879e:	4689      	mov	r9, r1
 80087a0:	4630      	mov	r0, r6
 80087a2:	4639      	mov	r1, r7
 80087a4:	f7f7 fd72 	bl	800028c <__adddf3>
 80087a8:	2000      	movs	r0, #0
 80087aa:	4632      	mov	r2, r6
 80087ac:	463b      	mov	r3, r7
 80087ae:	4604      	mov	r4, r0
 80087b0:	460d      	mov	r5, r1
 80087b2:	f7f7 fd69 	bl	8000288 <__aeabi_dsub>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4640      	mov	r0, r8
 80087bc:	4649      	mov	r1, r9
 80087be:	f7f7 fd63 	bl	8000288 <__aeabi_dsub>
 80087c2:	9b04      	ldr	r3, [sp, #16]
 80087c4:	9a06      	ldr	r2, [sp, #24]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	4313      	orrs	r3, r2
 80087ca:	4682      	mov	sl, r0
 80087cc:	468b      	mov	fp, r1
 80087ce:	f040 81e7 	bne.w	8008ba0 <__ieee754_pow+0x700>
 80087d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008888 <__ieee754_pow+0x3e8>
 80087d6:	eeb0 8a47 	vmov.f32	s16, s14
 80087da:	eef0 8a67 	vmov.f32	s17, s15
 80087de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80087e2:	2600      	movs	r6, #0
 80087e4:	4632      	mov	r2, r6
 80087e6:	463b      	mov	r3, r7
 80087e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087ec:	f7f7 fd4c 	bl	8000288 <__aeabi_dsub>
 80087f0:	4622      	mov	r2, r4
 80087f2:	462b      	mov	r3, r5
 80087f4:	f7f7 ff00 	bl	80005f8 <__aeabi_dmul>
 80087f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087fc:	4680      	mov	r8, r0
 80087fe:	4689      	mov	r9, r1
 8008800:	4650      	mov	r0, sl
 8008802:	4659      	mov	r1, fp
 8008804:	f7f7 fef8 	bl	80005f8 <__aeabi_dmul>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4640      	mov	r0, r8
 800880e:	4649      	mov	r1, r9
 8008810:	f7f7 fd3c 	bl	800028c <__adddf3>
 8008814:	4632      	mov	r2, r6
 8008816:	463b      	mov	r3, r7
 8008818:	4680      	mov	r8, r0
 800881a:	4689      	mov	r9, r1
 800881c:	4620      	mov	r0, r4
 800881e:	4629      	mov	r1, r5
 8008820:	f7f7 feea 	bl	80005f8 <__aeabi_dmul>
 8008824:	460b      	mov	r3, r1
 8008826:	4604      	mov	r4, r0
 8008828:	460d      	mov	r5, r1
 800882a:	4602      	mov	r2, r0
 800882c:	4649      	mov	r1, r9
 800882e:	4640      	mov	r0, r8
 8008830:	f7f7 fd2c 	bl	800028c <__adddf3>
 8008834:	4b19      	ldr	r3, [pc, #100]	; (800889c <__ieee754_pow+0x3fc>)
 8008836:	4299      	cmp	r1, r3
 8008838:	ec45 4b19 	vmov	d9, r4, r5
 800883c:	4606      	mov	r6, r0
 800883e:	460f      	mov	r7, r1
 8008840:	468b      	mov	fp, r1
 8008842:	f340 82f0 	ble.w	8008e26 <__ieee754_pow+0x986>
 8008846:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800884a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800884e:	4303      	orrs	r3, r0
 8008850:	f000 81e4 	beq.w	8008c1c <__ieee754_pow+0x77c>
 8008854:	ec51 0b18 	vmov	r0, r1, d8
 8008858:	2200      	movs	r2, #0
 800885a:	2300      	movs	r3, #0
 800885c:	f7f8 f93e 	bl	8000adc <__aeabi_dcmplt>
 8008860:	3800      	subs	r0, #0
 8008862:	bf18      	it	ne
 8008864:	2001      	movne	r0, #1
 8008866:	e72b      	b.n	80086c0 <__ieee754_pow+0x220>
 8008868:	60000000 	.word	0x60000000
 800886c:	3ff71547 	.word	0x3ff71547
 8008870:	f85ddf44 	.word	0xf85ddf44
 8008874:	3e54ae0b 	.word	0x3e54ae0b
 8008878:	55555555 	.word	0x55555555
 800887c:	3fd55555 	.word	0x3fd55555
 8008880:	652b82fe 	.word	0x652b82fe
 8008884:	3ff71547 	.word	0x3ff71547
 8008888:	00000000 	.word	0x00000000
 800888c:	bff00000 	.word	0xbff00000
 8008890:	3ff00000 	.word	0x3ff00000
 8008894:	3fd00000 	.word	0x3fd00000
 8008898:	3fe00000 	.word	0x3fe00000
 800889c:	408fffff 	.word	0x408fffff
 80088a0:	4bd5      	ldr	r3, [pc, #852]	; (8008bf8 <__ieee754_pow+0x758>)
 80088a2:	402b      	ands	r3, r5
 80088a4:	2200      	movs	r2, #0
 80088a6:	b92b      	cbnz	r3, 80088b4 <__ieee754_pow+0x414>
 80088a8:	4bd4      	ldr	r3, [pc, #848]	; (8008bfc <__ieee754_pow+0x75c>)
 80088aa:	f7f7 fea5 	bl	80005f8 <__aeabi_dmul>
 80088ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80088b2:	460c      	mov	r4, r1
 80088b4:	1523      	asrs	r3, r4, #20
 80088b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088ba:	4413      	add	r3, r2
 80088bc:	9305      	str	r3, [sp, #20]
 80088be:	4bd0      	ldr	r3, [pc, #832]	; (8008c00 <__ieee754_pow+0x760>)
 80088c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80088c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80088c8:	429c      	cmp	r4, r3
 80088ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80088ce:	dd08      	ble.n	80088e2 <__ieee754_pow+0x442>
 80088d0:	4bcc      	ldr	r3, [pc, #816]	; (8008c04 <__ieee754_pow+0x764>)
 80088d2:	429c      	cmp	r4, r3
 80088d4:	f340 8162 	ble.w	8008b9c <__ieee754_pow+0x6fc>
 80088d8:	9b05      	ldr	r3, [sp, #20]
 80088da:	3301      	adds	r3, #1
 80088dc:	9305      	str	r3, [sp, #20]
 80088de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80088e2:	2400      	movs	r4, #0
 80088e4:	00e3      	lsls	r3, r4, #3
 80088e6:	9307      	str	r3, [sp, #28]
 80088e8:	4bc7      	ldr	r3, [pc, #796]	; (8008c08 <__ieee754_pow+0x768>)
 80088ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088ee:	ed93 7b00 	vldr	d7, [r3]
 80088f2:	4629      	mov	r1, r5
 80088f4:	ec53 2b17 	vmov	r2, r3, d7
 80088f8:	eeb0 9a47 	vmov.f32	s18, s14
 80088fc:	eef0 9a67 	vmov.f32	s19, s15
 8008900:	4682      	mov	sl, r0
 8008902:	f7f7 fcc1 	bl	8000288 <__aeabi_dsub>
 8008906:	4652      	mov	r2, sl
 8008908:	4606      	mov	r6, r0
 800890a:	460f      	mov	r7, r1
 800890c:	462b      	mov	r3, r5
 800890e:	ec51 0b19 	vmov	r0, r1, d9
 8008912:	f7f7 fcbb 	bl	800028c <__adddf3>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	2000      	movs	r0, #0
 800891c:	49bb      	ldr	r1, [pc, #748]	; (8008c0c <__ieee754_pow+0x76c>)
 800891e:	f7f7 ff95 	bl	800084c <__aeabi_ddiv>
 8008922:	ec41 0b1a 	vmov	d10, r0, r1
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4630      	mov	r0, r6
 800892c:	4639      	mov	r1, r7
 800892e:	f7f7 fe63 	bl	80005f8 <__aeabi_dmul>
 8008932:	2300      	movs	r3, #0
 8008934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008938:	9302      	str	r3, [sp, #8]
 800893a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800893e:	46ab      	mov	fp, r5
 8008940:	106d      	asrs	r5, r5, #1
 8008942:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008946:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800894a:	ec41 0b18 	vmov	d8, r0, r1
 800894e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008952:	2200      	movs	r2, #0
 8008954:	4640      	mov	r0, r8
 8008956:	4649      	mov	r1, r9
 8008958:	4614      	mov	r4, r2
 800895a:	461d      	mov	r5, r3
 800895c:	f7f7 fe4c 	bl	80005f8 <__aeabi_dmul>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4630      	mov	r0, r6
 8008966:	4639      	mov	r1, r7
 8008968:	f7f7 fc8e 	bl	8000288 <__aeabi_dsub>
 800896c:	ec53 2b19 	vmov	r2, r3, d9
 8008970:	4606      	mov	r6, r0
 8008972:	460f      	mov	r7, r1
 8008974:	4620      	mov	r0, r4
 8008976:	4629      	mov	r1, r5
 8008978:	f7f7 fc86 	bl	8000288 <__aeabi_dsub>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	4650      	mov	r0, sl
 8008982:	4659      	mov	r1, fp
 8008984:	f7f7 fc80 	bl	8000288 <__aeabi_dsub>
 8008988:	4642      	mov	r2, r8
 800898a:	464b      	mov	r3, r9
 800898c:	f7f7 fe34 	bl	80005f8 <__aeabi_dmul>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4630      	mov	r0, r6
 8008996:	4639      	mov	r1, r7
 8008998:	f7f7 fc76 	bl	8000288 <__aeabi_dsub>
 800899c:	ec53 2b1a 	vmov	r2, r3, d10
 80089a0:	f7f7 fe2a 	bl	80005f8 <__aeabi_dmul>
 80089a4:	ec53 2b18 	vmov	r2, r3, d8
 80089a8:	ec41 0b19 	vmov	d9, r0, r1
 80089ac:	ec51 0b18 	vmov	r0, r1, d8
 80089b0:	f7f7 fe22 	bl	80005f8 <__aeabi_dmul>
 80089b4:	a37c      	add	r3, pc, #496	; (adr r3, 8008ba8 <__ieee754_pow+0x708>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	4604      	mov	r4, r0
 80089bc:	460d      	mov	r5, r1
 80089be:	f7f7 fe1b 	bl	80005f8 <__aeabi_dmul>
 80089c2:	a37b      	add	r3, pc, #492	; (adr r3, 8008bb0 <__ieee754_pow+0x710>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	f7f7 fc60 	bl	800028c <__adddf3>
 80089cc:	4622      	mov	r2, r4
 80089ce:	462b      	mov	r3, r5
 80089d0:	f7f7 fe12 	bl	80005f8 <__aeabi_dmul>
 80089d4:	a378      	add	r3, pc, #480	; (adr r3, 8008bb8 <__ieee754_pow+0x718>)
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f7f7 fc57 	bl	800028c <__adddf3>
 80089de:	4622      	mov	r2, r4
 80089e0:	462b      	mov	r3, r5
 80089e2:	f7f7 fe09 	bl	80005f8 <__aeabi_dmul>
 80089e6:	a376      	add	r3, pc, #472	; (adr r3, 8008bc0 <__ieee754_pow+0x720>)
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	f7f7 fc4e 	bl	800028c <__adddf3>
 80089f0:	4622      	mov	r2, r4
 80089f2:	462b      	mov	r3, r5
 80089f4:	f7f7 fe00 	bl	80005f8 <__aeabi_dmul>
 80089f8:	a373      	add	r3, pc, #460	; (adr r3, 8008bc8 <__ieee754_pow+0x728>)
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f7f7 fc45 	bl	800028c <__adddf3>
 8008a02:	4622      	mov	r2, r4
 8008a04:	462b      	mov	r3, r5
 8008a06:	f7f7 fdf7 	bl	80005f8 <__aeabi_dmul>
 8008a0a:	a371      	add	r3, pc, #452	; (adr r3, 8008bd0 <__ieee754_pow+0x730>)
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	f7f7 fc3c 	bl	800028c <__adddf3>
 8008a14:	4622      	mov	r2, r4
 8008a16:	4606      	mov	r6, r0
 8008a18:	460f      	mov	r7, r1
 8008a1a:	462b      	mov	r3, r5
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fdea 	bl	80005f8 <__aeabi_dmul>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4630      	mov	r0, r6
 8008a2a:	4639      	mov	r1, r7
 8008a2c:	f7f7 fde4 	bl	80005f8 <__aeabi_dmul>
 8008a30:	4642      	mov	r2, r8
 8008a32:	4604      	mov	r4, r0
 8008a34:	460d      	mov	r5, r1
 8008a36:	464b      	mov	r3, r9
 8008a38:	ec51 0b18 	vmov	r0, r1, d8
 8008a3c:	f7f7 fc26 	bl	800028c <__adddf3>
 8008a40:	ec53 2b19 	vmov	r2, r3, d9
 8008a44:	f7f7 fdd8 	bl	80005f8 <__aeabi_dmul>
 8008a48:	4622      	mov	r2, r4
 8008a4a:	462b      	mov	r3, r5
 8008a4c:	f7f7 fc1e 	bl	800028c <__adddf3>
 8008a50:	4642      	mov	r2, r8
 8008a52:	4682      	mov	sl, r0
 8008a54:	468b      	mov	fp, r1
 8008a56:	464b      	mov	r3, r9
 8008a58:	4640      	mov	r0, r8
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	f7f7 fdcc 	bl	80005f8 <__aeabi_dmul>
 8008a60:	4b6b      	ldr	r3, [pc, #428]	; (8008c10 <__ieee754_pow+0x770>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	4606      	mov	r6, r0
 8008a66:	460f      	mov	r7, r1
 8008a68:	f7f7 fc10 	bl	800028c <__adddf3>
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	465b      	mov	r3, fp
 8008a70:	f7f7 fc0c 	bl	800028c <__adddf3>
 8008a74:	2000      	movs	r0, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4640      	mov	r0, r8
 8008a80:	4649      	mov	r1, r9
 8008a82:	f7f7 fdb9 	bl	80005f8 <__aeabi_dmul>
 8008a86:	4b62      	ldr	r3, [pc, #392]	; (8008c10 <__ieee754_pow+0x770>)
 8008a88:	4680      	mov	r8, r0
 8008a8a:	4689      	mov	r9, r1
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4629      	mov	r1, r5
 8008a92:	f7f7 fbf9 	bl	8000288 <__aeabi_dsub>
 8008a96:	4632      	mov	r2, r6
 8008a98:	463b      	mov	r3, r7
 8008a9a:	f7f7 fbf5 	bl	8000288 <__aeabi_dsub>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4650      	mov	r0, sl
 8008aa4:	4659      	mov	r1, fp
 8008aa6:	f7f7 fbef 	bl	8000288 <__aeabi_dsub>
 8008aaa:	ec53 2b18 	vmov	r2, r3, d8
 8008aae:	f7f7 fda3 	bl	80005f8 <__aeabi_dmul>
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	460f      	mov	r7, r1
 8008ab8:	462b      	mov	r3, r5
 8008aba:	ec51 0b19 	vmov	r0, r1, d9
 8008abe:	f7f7 fd9b 	bl	80005f8 <__aeabi_dmul>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	4639      	mov	r1, r7
 8008aca:	f7f7 fbdf 	bl	800028c <__adddf3>
 8008ace:	4606      	mov	r6, r0
 8008ad0:	460f      	mov	r7, r1
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	4649      	mov	r1, r9
 8008ada:	f7f7 fbd7 	bl	800028c <__adddf3>
 8008ade:	a33e      	add	r3, pc, #248	; (adr r3, 8008bd8 <__ieee754_pow+0x738>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	460d      	mov	r5, r1
 8008aea:	f7f7 fd85 	bl	80005f8 <__aeabi_dmul>
 8008aee:	4642      	mov	r2, r8
 8008af0:	ec41 0b18 	vmov	d8, r0, r1
 8008af4:	464b      	mov	r3, r9
 8008af6:	4620      	mov	r0, r4
 8008af8:	4629      	mov	r1, r5
 8008afa:	f7f7 fbc5 	bl	8000288 <__aeabi_dsub>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4630      	mov	r0, r6
 8008b04:	4639      	mov	r1, r7
 8008b06:	f7f7 fbbf 	bl	8000288 <__aeabi_dsub>
 8008b0a:	a335      	add	r3, pc, #212	; (adr r3, 8008be0 <__ieee754_pow+0x740>)
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	f7f7 fd72 	bl	80005f8 <__aeabi_dmul>
 8008b14:	a334      	add	r3, pc, #208	; (adr r3, 8008be8 <__ieee754_pow+0x748>)
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	460f      	mov	r7, r1
 8008b1e:	4620      	mov	r0, r4
 8008b20:	4629      	mov	r1, r5
 8008b22:	f7f7 fd69 	bl	80005f8 <__aeabi_dmul>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	f7f7 fbad 	bl	800028c <__adddf3>
 8008b32:	9a07      	ldr	r2, [sp, #28]
 8008b34:	4b37      	ldr	r3, [pc, #220]	; (8008c14 <__ieee754_pow+0x774>)
 8008b36:	4413      	add	r3, r2
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f7f7 fba6 	bl	800028c <__adddf3>
 8008b40:	4682      	mov	sl, r0
 8008b42:	9805      	ldr	r0, [sp, #20]
 8008b44:	468b      	mov	fp, r1
 8008b46:	f7f7 fced 	bl	8000524 <__aeabi_i2d>
 8008b4a:	9a07      	ldr	r2, [sp, #28]
 8008b4c:	4b32      	ldr	r3, [pc, #200]	; (8008c18 <__ieee754_pow+0x778>)
 8008b4e:	4413      	add	r3, r2
 8008b50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b54:	4606      	mov	r6, r0
 8008b56:	460f      	mov	r7, r1
 8008b58:	4652      	mov	r2, sl
 8008b5a:	465b      	mov	r3, fp
 8008b5c:	ec51 0b18 	vmov	r0, r1, d8
 8008b60:	f7f7 fb94 	bl	800028c <__adddf3>
 8008b64:	4642      	mov	r2, r8
 8008b66:	464b      	mov	r3, r9
 8008b68:	f7f7 fb90 	bl	800028c <__adddf3>
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	f7f7 fb8c 	bl	800028c <__adddf3>
 8008b74:	2000      	movs	r0, #0
 8008b76:	4632      	mov	r2, r6
 8008b78:	463b      	mov	r3, r7
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	460d      	mov	r5, r1
 8008b7e:	f7f7 fb83 	bl	8000288 <__aeabi_dsub>
 8008b82:	4642      	mov	r2, r8
 8008b84:	464b      	mov	r3, r9
 8008b86:	f7f7 fb7f 	bl	8000288 <__aeabi_dsub>
 8008b8a:	ec53 2b18 	vmov	r2, r3, d8
 8008b8e:	f7f7 fb7b 	bl	8000288 <__aeabi_dsub>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4650      	mov	r0, sl
 8008b98:	4659      	mov	r1, fp
 8008b9a:	e610      	b.n	80087be <__ieee754_pow+0x31e>
 8008b9c:	2401      	movs	r4, #1
 8008b9e:	e6a1      	b.n	80088e4 <__ieee754_pow+0x444>
 8008ba0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008bf0 <__ieee754_pow+0x750>
 8008ba4:	e617      	b.n	80087d6 <__ieee754_pow+0x336>
 8008ba6:	bf00      	nop
 8008ba8:	4a454eef 	.word	0x4a454eef
 8008bac:	3fca7e28 	.word	0x3fca7e28
 8008bb0:	93c9db65 	.word	0x93c9db65
 8008bb4:	3fcd864a 	.word	0x3fcd864a
 8008bb8:	a91d4101 	.word	0xa91d4101
 8008bbc:	3fd17460 	.word	0x3fd17460
 8008bc0:	518f264d 	.word	0x518f264d
 8008bc4:	3fd55555 	.word	0x3fd55555
 8008bc8:	db6fabff 	.word	0xdb6fabff
 8008bcc:	3fdb6db6 	.word	0x3fdb6db6
 8008bd0:	33333303 	.word	0x33333303
 8008bd4:	3fe33333 	.word	0x3fe33333
 8008bd8:	e0000000 	.word	0xe0000000
 8008bdc:	3feec709 	.word	0x3feec709
 8008be0:	dc3a03fd 	.word	0xdc3a03fd
 8008be4:	3feec709 	.word	0x3feec709
 8008be8:	145b01f5 	.word	0x145b01f5
 8008bec:	be3e2fe0 	.word	0xbe3e2fe0
 8008bf0:	00000000 	.word	0x00000000
 8008bf4:	3ff00000 	.word	0x3ff00000
 8008bf8:	7ff00000 	.word	0x7ff00000
 8008bfc:	43400000 	.word	0x43400000
 8008c00:	0003988e 	.word	0x0003988e
 8008c04:	000bb679 	.word	0x000bb679
 8008c08:	08009698 	.word	0x08009698
 8008c0c:	3ff00000 	.word	0x3ff00000
 8008c10:	40080000 	.word	0x40080000
 8008c14:	080096b8 	.word	0x080096b8
 8008c18:	080096a8 	.word	0x080096a8
 8008c1c:	a3b3      	add	r3, pc, #716	; (adr r3, 8008eec <__ieee754_pow+0xa4c>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	f7f7 fb31 	bl	800028c <__adddf3>
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	ec41 0b1a 	vmov	d10, r0, r1
 8008c30:	462b      	mov	r3, r5
 8008c32:	4630      	mov	r0, r6
 8008c34:	4639      	mov	r1, r7
 8008c36:	f7f7 fb27 	bl	8000288 <__aeabi_dsub>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	ec51 0b1a 	vmov	r0, r1, d10
 8008c42:	f7f7 ff69 	bl	8000b18 <__aeabi_dcmpgt>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	f47f ae04 	bne.w	8008854 <__ieee754_pow+0x3b4>
 8008c4c:	4aa2      	ldr	r2, [pc, #648]	; (8008ed8 <__ieee754_pow+0xa38>)
 8008c4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c52:	4293      	cmp	r3, r2
 8008c54:	f340 8107 	ble.w	8008e66 <__ieee754_pow+0x9c6>
 8008c58:	151b      	asrs	r3, r3, #20
 8008c5a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008c5e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008c62:	fa4a fa03 	asr.w	sl, sl, r3
 8008c66:	44da      	add	sl, fp
 8008c68:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008c6c:	489b      	ldr	r0, [pc, #620]	; (8008edc <__ieee754_pow+0xa3c>)
 8008c6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008c72:	4108      	asrs	r0, r1
 8008c74:	ea00 030a 	and.w	r3, r0, sl
 8008c78:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008c7c:	f1c1 0114 	rsb	r1, r1, #20
 8008c80:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008c84:	fa4a fa01 	asr.w	sl, sl, r1
 8008c88:	f1bb 0f00 	cmp.w	fp, #0
 8008c8c:	f04f 0200 	mov.w	r2, #0
 8008c90:	4620      	mov	r0, r4
 8008c92:	4629      	mov	r1, r5
 8008c94:	bfb8      	it	lt
 8008c96:	f1ca 0a00 	rsblt	sl, sl, #0
 8008c9a:	f7f7 faf5 	bl	8000288 <__aeabi_dsub>
 8008c9e:	ec41 0b19 	vmov	d9, r0, r1
 8008ca2:	4642      	mov	r2, r8
 8008ca4:	464b      	mov	r3, r9
 8008ca6:	ec51 0b19 	vmov	r0, r1, d9
 8008caa:	f7f7 faef 	bl	800028c <__adddf3>
 8008cae:	a37a      	add	r3, pc, #488	; (adr r3, 8008e98 <__ieee754_pow+0x9f8>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	460d      	mov	r5, r1
 8008cba:	f7f7 fc9d 	bl	80005f8 <__aeabi_dmul>
 8008cbe:	ec53 2b19 	vmov	r2, r3, d9
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	460f      	mov	r7, r1
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f7f7 fadd 	bl	8000288 <__aeabi_dsub>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4640      	mov	r0, r8
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	f7f7 fad7 	bl	8000288 <__aeabi_dsub>
 8008cda:	a371      	add	r3, pc, #452	; (adr r3, 8008ea0 <__ieee754_pow+0xa00>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fc8a 	bl	80005f8 <__aeabi_dmul>
 8008ce4:	a370      	add	r3, pc, #448	; (adr r3, 8008ea8 <__ieee754_pow+0xa08>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	4680      	mov	r8, r0
 8008cec:	4689      	mov	r9, r1
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	f7f7 fc81 	bl	80005f8 <__aeabi_dmul>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	f7f7 fac5 	bl	800028c <__adddf3>
 8008d02:	4604      	mov	r4, r0
 8008d04:	460d      	mov	r5, r1
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	f7f7 fabd 	bl	800028c <__adddf3>
 8008d12:	4632      	mov	r2, r6
 8008d14:	463b      	mov	r3, r7
 8008d16:	4680      	mov	r8, r0
 8008d18:	4689      	mov	r9, r1
 8008d1a:	f7f7 fab5 	bl	8000288 <__aeabi_dsub>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4620      	mov	r0, r4
 8008d24:	4629      	mov	r1, r5
 8008d26:	f7f7 faaf 	bl	8000288 <__aeabi_dsub>
 8008d2a:	4642      	mov	r2, r8
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	460f      	mov	r7, r1
 8008d30:	464b      	mov	r3, r9
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	f7f7 fc5f 	bl	80005f8 <__aeabi_dmul>
 8008d3a:	a35d      	add	r3, pc, #372	; (adr r3, 8008eb0 <__ieee754_pow+0xa10>)
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	4604      	mov	r4, r0
 8008d42:	460d      	mov	r5, r1
 8008d44:	f7f7 fc58 	bl	80005f8 <__aeabi_dmul>
 8008d48:	a35b      	add	r3, pc, #364	; (adr r3, 8008eb8 <__ieee754_pow+0xa18>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fa9b 	bl	8000288 <__aeabi_dsub>
 8008d52:	4622      	mov	r2, r4
 8008d54:	462b      	mov	r3, r5
 8008d56:	f7f7 fc4f 	bl	80005f8 <__aeabi_dmul>
 8008d5a:	a359      	add	r3, pc, #356	; (adr r3, 8008ec0 <__ieee754_pow+0xa20>)
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	f7f7 fa94 	bl	800028c <__adddf3>
 8008d64:	4622      	mov	r2, r4
 8008d66:	462b      	mov	r3, r5
 8008d68:	f7f7 fc46 	bl	80005f8 <__aeabi_dmul>
 8008d6c:	a356      	add	r3, pc, #344	; (adr r3, 8008ec8 <__ieee754_pow+0xa28>)
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	f7f7 fa89 	bl	8000288 <__aeabi_dsub>
 8008d76:	4622      	mov	r2, r4
 8008d78:	462b      	mov	r3, r5
 8008d7a:	f7f7 fc3d 	bl	80005f8 <__aeabi_dmul>
 8008d7e:	a354      	add	r3, pc, #336	; (adr r3, 8008ed0 <__ieee754_pow+0xa30>)
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	f7f7 fa82 	bl	800028c <__adddf3>
 8008d88:	4622      	mov	r2, r4
 8008d8a:	462b      	mov	r3, r5
 8008d8c:	f7f7 fc34 	bl	80005f8 <__aeabi_dmul>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4640      	mov	r0, r8
 8008d96:	4649      	mov	r1, r9
 8008d98:	f7f7 fa76 	bl	8000288 <__aeabi_dsub>
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	460d      	mov	r5, r1
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4640      	mov	r0, r8
 8008da6:	4649      	mov	r1, r9
 8008da8:	f7f7 fc26 	bl	80005f8 <__aeabi_dmul>
 8008dac:	2200      	movs	r2, #0
 8008dae:	ec41 0b19 	vmov	d9, r0, r1
 8008db2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008db6:	4620      	mov	r0, r4
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7f7 fa65 	bl	8000288 <__aeabi_dsub>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	ec51 0b19 	vmov	r0, r1, d9
 8008dc6:	f7f7 fd41 	bl	800084c <__aeabi_ddiv>
 8008dca:	4632      	mov	r2, r6
 8008dcc:	4604      	mov	r4, r0
 8008dce:	460d      	mov	r5, r1
 8008dd0:	463b      	mov	r3, r7
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	f7f7 fc0f 	bl	80005f8 <__aeabi_dmul>
 8008dda:	4632      	mov	r2, r6
 8008ddc:	463b      	mov	r3, r7
 8008dde:	f7f7 fa55 	bl	800028c <__adddf3>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4620      	mov	r0, r4
 8008de8:	4629      	mov	r1, r5
 8008dea:	f7f7 fa4d 	bl	8000288 <__aeabi_dsub>
 8008dee:	4642      	mov	r2, r8
 8008df0:	464b      	mov	r3, r9
 8008df2:	f7f7 fa49 	bl	8000288 <__aeabi_dsub>
 8008df6:	460b      	mov	r3, r1
 8008df8:	4602      	mov	r2, r0
 8008dfa:	4939      	ldr	r1, [pc, #228]	; (8008ee0 <__ieee754_pow+0xa40>)
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	f7f7 fa43 	bl	8000288 <__aeabi_dsub>
 8008e02:	ec41 0b10 	vmov	d0, r0, r1
 8008e06:	ee10 3a90 	vmov	r3, s1
 8008e0a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e12:	da2b      	bge.n	8008e6c <__ieee754_pow+0x9cc>
 8008e14:	4650      	mov	r0, sl
 8008e16:	f000 f8a7 	bl	8008f68 <scalbn>
 8008e1a:	ec51 0b10 	vmov	r0, r1, d0
 8008e1e:	ec53 2b18 	vmov	r2, r3, d8
 8008e22:	f7ff bbee 	b.w	8008602 <__ieee754_pow+0x162>
 8008e26:	4b2f      	ldr	r3, [pc, #188]	; (8008ee4 <__ieee754_pow+0xa44>)
 8008e28:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008e2c:	429e      	cmp	r6, r3
 8008e2e:	f77f af0d 	ble.w	8008c4c <__ieee754_pow+0x7ac>
 8008e32:	4b2d      	ldr	r3, [pc, #180]	; (8008ee8 <__ieee754_pow+0xa48>)
 8008e34:	440b      	add	r3, r1
 8008e36:	4303      	orrs	r3, r0
 8008e38:	d009      	beq.n	8008e4e <__ieee754_pow+0x9ae>
 8008e3a:	ec51 0b18 	vmov	r0, r1, d8
 8008e3e:	2200      	movs	r2, #0
 8008e40:	2300      	movs	r3, #0
 8008e42:	f7f7 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8008e46:	3800      	subs	r0, #0
 8008e48:	bf18      	it	ne
 8008e4a:	2001      	movne	r0, #1
 8008e4c:	e448      	b.n	80086e0 <__ieee754_pow+0x240>
 8008e4e:	4622      	mov	r2, r4
 8008e50:	462b      	mov	r3, r5
 8008e52:	f7f7 fa19 	bl	8000288 <__aeabi_dsub>
 8008e56:	4642      	mov	r2, r8
 8008e58:	464b      	mov	r3, r9
 8008e5a:	f7f7 fe53 	bl	8000b04 <__aeabi_dcmpge>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	f43f aef4 	beq.w	8008c4c <__ieee754_pow+0x7ac>
 8008e64:	e7e9      	b.n	8008e3a <__ieee754_pow+0x99a>
 8008e66:	f04f 0a00 	mov.w	sl, #0
 8008e6a:	e71a      	b.n	8008ca2 <__ieee754_pow+0x802>
 8008e6c:	ec51 0b10 	vmov	r0, r1, d0
 8008e70:	4619      	mov	r1, r3
 8008e72:	e7d4      	b.n	8008e1e <__ieee754_pow+0x97e>
 8008e74:	491a      	ldr	r1, [pc, #104]	; (8008ee0 <__ieee754_pow+0xa40>)
 8008e76:	2000      	movs	r0, #0
 8008e78:	f7ff bb31 	b.w	80084de <__ieee754_pow+0x3e>
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	2100      	movs	r1, #0
 8008e80:	f7ff bb2d 	b.w	80084de <__ieee754_pow+0x3e>
 8008e84:	4630      	mov	r0, r6
 8008e86:	4639      	mov	r1, r7
 8008e88:	f7ff bb29 	b.w	80084de <__ieee754_pow+0x3e>
 8008e8c:	9204      	str	r2, [sp, #16]
 8008e8e:	f7ff bb7b 	b.w	8008588 <__ieee754_pow+0xe8>
 8008e92:	2300      	movs	r3, #0
 8008e94:	f7ff bb65 	b.w	8008562 <__ieee754_pow+0xc2>
 8008e98:	00000000 	.word	0x00000000
 8008e9c:	3fe62e43 	.word	0x3fe62e43
 8008ea0:	fefa39ef 	.word	0xfefa39ef
 8008ea4:	3fe62e42 	.word	0x3fe62e42
 8008ea8:	0ca86c39 	.word	0x0ca86c39
 8008eac:	be205c61 	.word	0xbe205c61
 8008eb0:	72bea4d0 	.word	0x72bea4d0
 8008eb4:	3e663769 	.word	0x3e663769
 8008eb8:	c5d26bf1 	.word	0xc5d26bf1
 8008ebc:	3ebbbd41 	.word	0x3ebbbd41
 8008ec0:	af25de2c 	.word	0xaf25de2c
 8008ec4:	3f11566a 	.word	0x3f11566a
 8008ec8:	16bebd93 	.word	0x16bebd93
 8008ecc:	3f66c16c 	.word	0x3f66c16c
 8008ed0:	5555553e 	.word	0x5555553e
 8008ed4:	3fc55555 	.word	0x3fc55555
 8008ed8:	3fe00000 	.word	0x3fe00000
 8008edc:	fff00000 	.word	0xfff00000
 8008ee0:	3ff00000 	.word	0x3ff00000
 8008ee4:	4090cbff 	.word	0x4090cbff
 8008ee8:	3f6f3400 	.word	0x3f6f3400
 8008eec:	652b82fe 	.word	0x652b82fe
 8008ef0:	3c971547 	.word	0x3c971547

08008ef4 <with_errno>:
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	460d      	mov	r5, r1
 8008efa:	4616      	mov	r6, r2
 8008efc:	f7fd facc 	bl	8006498 <__errno>
 8008f00:	4629      	mov	r1, r5
 8008f02:	6006      	str	r6, [r0, #0]
 8008f04:	4620      	mov	r0, r4
 8008f06:	bd70      	pop	{r4, r5, r6, pc}

08008f08 <xflow>:
 8008f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f0a:	4614      	mov	r4, r2
 8008f0c:	461d      	mov	r5, r3
 8008f0e:	b108      	cbz	r0, 8008f14 <xflow+0xc>
 8008f10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008f14:	e9cd 2300 	strd	r2, r3, [sp]
 8008f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f7f7 fb6a 	bl	80005f8 <__aeabi_dmul>
 8008f24:	2222      	movs	r2, #34	; 0x22
 8008f26:	b003      	add	sp, #12
 8008f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f2c:	f7ff bfe2 	b.w	8008ef4 <with_errno>

08008f30 <__math_uflow>:
 8008f30:	b508      	push	{r3, lr}
 8008f32:	2200      	movs	r2, #0
 8008f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f38:	f7ff ffe6 	bl	8008f08 <xflow>
 8008f3c:	ec41 0b10 	vmov	d0, r0, r1
 8008f40:	bd08      	pop	{r3, pc}

08008f42 <__math_oflow>:
 8008f42:	b508      	push	{r3, lr}
 8008f44:	2200      	movs	r2, #0
 8008f46:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008f4a:	f7ff ffdd 	bl	8008f08 <xflow>
 8008f4e:	ec41 0b10 	vmov	d0, r0, r1
 8008f52:	bd08      	pop	{r3, pc}

08008f54 <fabs>:
 8008f54:	ec51 0b10 	vmov	r0, r1, d0
 8008f58:	ee10 2a10 	vmov	r2, s0
 8008f5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f60:	ec43 2b10 	vmov	d0, r2, r3
 8008f64:	4770      	bx	lr
	...

08008f68 <scalbn>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	ec55 4b10 	vmov	r4, r5, d0
 8008f6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008f72:	4606      	mov	r6, r0
 8008f74:	462b      	mov	r3, r5
 8008f76:	b999      	cbnz	r1, 8008fa0 <scalbn+0x38>
 8008f78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f7c:	4323      	orrs	r3, r4
 8008f7e:	d03f      	beq.n	8009000 <scalbn+0x98>
 8008f80:	4b35      	ldr	r3, [pc, #212]	; (8009058 <scalbn+0xf0>)
 8008f82:	4629      	mov	r1, r5
 8008f84:	ee10 0a10 	vmov	r0, s0
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f7f7 fb35 	bl	80005f8 <__aeabi_dmul>
 8008f8e:	4b33      	ldr	r3, [pc, #204]	; (800905c <scalbn+0xf4>)
 8008f90:	429e      	cmp	r6, r3
 8008f92:	4604      	mov	r4, r0
 8008f94:	460d      	mov	r5, r1
 8008f96:	da10      	bge.n	8008fba <scalbn+0x52>
 8008f98:	a327      	add	r3, pc, #156	; (adr r3, 8009038 <scalbn+0xd0>)
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	e01f      	b.n	8008fe0 <scalbn+0x78>
 8008fa0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008fa4:	4291      	cmp	r1, r2
 8008fa6:	d10c      	bne.n	8008fc2 <scalbn+0x5a>
 8008fa8:	ee10 2a10 	vmov	r2, s0
 8008fac:	4620      	mov	r0, r4
 8008fae:	4629      	mov	r1, r5
 8008fb0:	f7f7 f96c 	bl	800028c <__adddf3>
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	460d      	mov	r5, r1
 8008fb8:	e022      	b.n	8009000 <scalbn+0x98>
 8008fba:	460b      	mov	r3, r1
 8008fbc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008fc0:	3936      	subs	r1, #54	; 0x36
 8008fc2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008fc6:	4296      	cmp	r6, r2
 8008fc8:	dd0d      	ble.n	8008fe6 <scalbn+0x7e>
 8008fca:	2d00      	cmp	r5, #0
 8008fcc:	a11c      	add	r1, pc, #112	; (adr r1, 8009040 <scalbn+0xd8>)
 8008fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fd2:	da02      	bge.n	8008fda <scalbn+0x72>
 8008fd4:	a11c      	add	r1, pc, #112	; (adr r1, 8009048 <scalbn+0xe0>)
 8008fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fda:	a319      	add	r3, pc, #100	; (adr r3, 8009040 <scalbn+0xd8>)
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	f7f7 fb0a 	bl	80005f8 <__aeabi_dmul>
 8008fe4:	e7e6      	b.n	8008fb4 <scalbn+0x4c>
 8008fe6:	1872      	adds	r2, r6, r1
 8008fe8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008fec:	428a      	cmp	r2, r1
 8008fee:	dcec      	bgt.n	8008fca <scalbn+0x62>
 8008ff0:	2a00      	cmp	r2, #0
 8008ff2:	dd08      	ble.n	8009006 <scalbn+0x9e>
 8008ff4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ff8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ffc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009000:	ec45 4b10 	vmov	d0, r4, r5
 8009004:	bd70      	pop	{r4, r5, r6, pc}
 8009006:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800900a:	da08      	bge.n	800901e <scalbn+0xb6>
 800900c:	2d00      	cmp	r5, #0
 800900e:	a10a      	add	r1, pc, #40	; (adr r1, 8009038 <scalbn+0xd0>)
 8009010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009014:	dac0      	bge.n	8008f98 <scalbn+0x30>
 8009016:	a10e      	add	r1, pc, #56	; (adr r1, 8009050 <scalbn+0xe8>)
 8009018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800901c:	e7bc      	b.n	8008f98 <scalbn+0x30>
 800901e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009022:	3236      	adds	r2, #54	; 0x36
 8009024:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009028:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800902c:	4620      	mov	r0, r4
 800902e:	4b0c      	ldr	r3, [pc, #48]	; (8009060 <scalbn+0xf8>)
 8009030:	2200      	movs	r2, #0
 8009032:	e7d5      	b.n	8008fe0 <scalbn+0x78>
 8009034:	f3af 8000 	nop.w
 8009038:	c2f8f359 	.word	0xc2f8f359
 800903c:	01a56e1f 	.word	0x01a56e1f
 8009040:	8800759c 	.word	0x8800759c
 8009044:	7e37e43c 	.word	0x7e37e43c
 8009048:	8800759c 	.word	0x8800759c
 800904c:	fe37e43c 	.word	0xfe37e43c
 8009050:	c2f8f359 	.word	0xc2f8f359
 8009054:	81a56e1f 	.word	0x81a56e1f
 8009058:	43500000 	.word	0x43500000
 800905c:	ffff3cb0 	.word	0xffff3cb0
 8009060:	3c900000 	.word	0x3c900000

08009064 <__ieee754_sqrt>:
 8009064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	ec55 4b10 	vmov	r4, r5, d0
 800906c:	4e67      	ldr	r6, [pc, #412]	; (800920c <__ieee754_sqrt+0x1a8>)
 800906e:	43ae      	bics	r6, r5
 8009070:	ee10 0a10 	vmov	r0, s0
 8009074:	ee10 2a10 	vmov	r2, s0
 8009078:	4629      	mov	r1, r5
 800907a:	462b      	mov	r3, r5
 800907c:	d10d      	bne.n	800909a <__ieee754_sqrt+0x36>
 800907e:	f7f7 fabb 	bl	80005f8 <__aeabi_dmul>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	4620      	mov	r0, r4
 8009088:	4629      	mov	r1, r5
 800908a:	f7f7 f8ff 	bl	800028c <__adddf3>
 800908e:	4604      	mov	r4, r0
 8009090:	460d      	mov	r5, r1
 8009092:	ec45 4b10 	vmov	d0, r4, r5
 8009096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909a:	2d00      	cmp	r5, #0
 800909c:	dc0b      	bgt.n	80090b6 <__ieee754_sqrt+0x52>
 800909e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090a2:	4326      	orrs	r6, r4
 80090a4:	d0f5      	beq.n	8009092 <__ieee754_sqrt+0x2e>
 80090a6:	b135      	cbz	r5, 80090b6 <__ieee754_sqrt+0x52>
 80090a8:	f7f7 f8ee 	bl	8000288 <__aeabi_dsub>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	f7f7 fbcc 	bl	800084c <__aeabi_ddiv>
 80090b4:	e7eb      	b.n	800908e <__ieee754_sqrt+0x2a>
 80090b6:	1509      	asrs	r1, r1, #20
 80090b8:	f000 808d 	beq.w	80091d6 <__ieee754_sqrt+0x172>
 80090bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090c0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80090c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090c8:	07c9      	lsls	r1, r1, #31
 80090ca:	bf5c      	itt	pl
 80090cc:	005b      	lslpl	r3, r3, #1
 80090ce:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80090d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80090d6:	bf58      	it	pl
 80090d8:	0052      	lslpl	r2, r2, #1
 80090da:	2500      	movs	r5, #0
 80090dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80090e0:	1076      	asrs	r6, r6, #1
 80090e2:	0052      	lsls	r2, r2, #1
 80090e4:	f04f 0e16 	mov.w	lr, #22
 80090e8:	46ac      	mov	ip, r5
 80090ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090ee:	eb0c 0001 	add.w	r0, ip, r1
 80090f2:	4298      	cmp	r0, r3
 80090f4:	bfde      	ittt	le
 80090f6:	1a1b      	suble	r3, r3, r0
 80090f8:	eb00 0c01 	addle.w	ip, r0, r1
 80090fc:	186d      	addle	r5, r5, r1
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	f1be 0e01 	subs.w	lr, lr, #1
 8009104:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009108:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800910c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009110:	d1ed      	bne.n	80090ee <__ieee754_sqrt+0x8a>
 8009112:	4674      	mov	r4, lr
 8009114:	2720      	movs	r7, #32
 8009116:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800911a:	4563      	cmp	r3, ip
 800911c:	eb01 000e 	add.w	r0, r1, lr
 8009120:	dc02      	bgt.n	8009128 <__ieee754_sqrt+0xc4>
 8009122:	d113      	bne.n	800914c <__ieee754_sqrt+0xe8>
 8009124:	4290      	cmp	r0, r2
 8009126:	d811      	bhi.n	800914c <__ieee754_sqrt+0xe8>
 8009128:	2800      	cmp	r0, #0
 800912a:	eb00 0e01 	add.w	lr, r0, r1
 800912e:	da57      	bge.n	80091e0 <__ieee754_sqrt+0x17c>
 8009130:	f1be 0f00 	cmp.w	lr, #0
 8009134:	db54      	blt.n	80091e0 <__ieee754_sqrt+0x17c>
 8009136:	f10c 0801 	add.w	r8, ip, #1
 800913a:	eba3 030c 	sub.w	r3, r3, ip
 800913e:	4290      	cmp	r0, r2
 8009140:	bf88      	it	hi
 8009142:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8009146:	1a12      	subs	r2, r2, r0
 8009148:	440c      	add	r4, r1
 800914a:	46c4      	mov	ip, r8
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	3f01      	subs	r7, #1
 8009150:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009154:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009158:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800915c:	d1dd      	bne.n	800911a <__ieee754_sqrt+0xb6>
 800915e:	4313      	orrs	r3, r2
 8009160:	d01b      	beq.n	800919a <__ieee754_sqrt+0x136>
 8009162:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009210 <__ieee754_sqrt+0x1ac>
 8009166:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009214 <__ieee754_sqrt+0x1b0>
 800916a:	e9da 0100 	ldrd	r0, r1, [sl]
 800916e:	e9db 2300 	ldrd	r2, r3, [fp]
 8009172:	f7f7 f889 	bl	8000288 <__aeabi_dsub>
 8009176:	e9da 8900 	ldrd	r8, r9, [sl]
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4640      	mov	r0, r8
 8009180:	4649      	mov	r1, r9
 8009182:	f7f7 fcb5 	bl	8000af0 <__aeabi_dcmple>
 8009186:	b140      	cbz	r0, 800919a <__ieee754_sqrt+0x136>
 8009188:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800918c:	e9da 0100 	ldrd	r0, r1, [sl]
 8009190:	e9db 2300 	ldrd	r2, r3, [fp]
 8009194:	d126      	bne.n	80091e4 <__ieee754_sqrt+0x180>
 8009196:	3501      	adds	r5, #1
 8009198:	463c      	mov	r4, r7
 800919a:	106a      	asrs	r2, r5, #1
 800919c:	0863      	lsrs	r3, r4, #1
 800919e:	07e9      	lsls	r1, r5, #31
 80091a0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80091a4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80091a8:	bf48      	it	mi
 80091aa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80091ae:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80091b2:	461c      	mov	r4, r3
 80091b4:	e76d      	b.n	8009092 <__ieee754_sqrt+0x2e>
 80091b6:	0ad3      	lsrs	r3, r2, #11
 80091b8:	3815      	subs	r0, #21
 80091ba:	0552      	lsls	r2, r2, #21
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0fa      	beq.n	80091b6 <__ieee754_sqrt+0x152>
 80091c0:	02dc      	lsls	r4, r3, #11
 80091c2:	d50a      	bpl.n	80091da <__ieee754_sqrt+0x176>
 80091c4:	f1c1 0420 	rsb	r4, r1, #32
 80091c8:	fa22 f404 	lsr.w	r4, r2, r4
 80091cc:	1e4d      	subs	r5, r1, #1
 80091ce:	408a      	lsls	r2, r1
 80091d0:	4323      	orrs	r3, r4
 80091d2:	1b41      	subs	r1, r0, r5
 80091d4:	e772      	b.n	80090bc <__ieee754_sqrt+0x58>
 80091d6:	4608      	mov	r0, r1
 80091d8:	e7f0      	b.n	80091bc <__ieee754_sqrt+0x158>
 80091da:	005b      	lsls	r3, r3, #1
 80091dc:	3101      	adds	r1, #1
 80091de:	e7ef      	b.n	80091c0 <__ieee754_sqrt+0x15c>
 80091e0:	46e0      	mov	r8, ip
 80091e2:	e7aa      	b.n	800913a <__ieee754_sqrt+0xd6>
 80091e4:	f7f7 f852 	bl	800028c <__adddf3>
 80091e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4640      	mov	r0, r8
 80091f2:	4649      	mov	r1, r9
 80091f4:	f7f7 fc72 	bl	8000adc <__aeabi_dcmplt>
 80091f8:	b120      	cbz	r0, 8009204 <__ieee754_sqrt+0x1a0>
 80091fa:	1ca0      	adds	r0, r4, #2
 80091fc:	bf08      	it	eq
 80091fe:	3501      	addeq	r5, #1
 8009200:	3402      	adds	r4, #2
 8009202:	e7ca      	b.n	800919a <__ieee754_sqrt+0x136>
 8009204:	3401      	adds	r4, #1
 8009206:	f024 0401 	bic.w	r4, r4, #1
 800920a:	e7c6      	b.n	800919a <__ieee754_sqrt+0x136>
 800920c:	7ff00000 	.word	0x7ff00000
 8009210:	200001e0 	.word	0x200001e0
 8009214:	200001e8 	.word	0x200001e8

08009218 <_init>:
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	bf00      	nop
 800921c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921e:	bc08      	pop	{r3}
 8009220:	469e      	mov	lr, r3
 8009222:	4770      	bx	lr

08009224 <_fini>:
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009226:	bf00      	nop
 8009228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922a:	bc08      	pop	{r3}
 800922c:	469e      	mov	lr, r3
 800922e:	4770      	bx	lr
